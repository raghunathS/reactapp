"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setNativeValue = exports.act = void 0;
// Use this file for any utilities specific to React/ReactDOM APIs or those that depend on them.
var React = __importStar(require("react"));
var test_utils_1 = require("react-dom/test-utils");
exports.act = ('act' in React ? React.act : test_utils_1.act);
// Original Copyright 2017-Present Kent C. Dodds. Licensed under MIT License.
// Testing Library code
/* istanbul ignore next @preserve */
function setNativeValue(element, value) {
    var valueSetter = (Object.getOwnPropertyDescriptor(element, 'value') || {}).set;
    var prototype = Object.getPrototypeOf(element);
    var prototypeValueSetter = (Object.getOwnPropertyDescriptor(prototype, 'value') || {}).set;
    if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {
        prototypeValueSetter.call(element, value);
    }
    else {
        if (valueSetter) {
            valueSetter.call(element, value);
        }
        else {
            throw new Error('The given element does not have a value setter');
        }
    }
}
exports.setNativeValue = setNativeValue;
// End of Testing Library code
