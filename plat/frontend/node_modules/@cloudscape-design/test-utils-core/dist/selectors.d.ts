import { IElementWrapper } from './interfaces';
interface WrapperClass<Wrapper> {
    new (selector: string): Wrapper;
}
interface ComponentWrapperClass<Wrapper> extends WrapperClass<Wrapper> {
    rootSelector: string;
}
export declare class AbstractWrapper implements IElementWrapper<string, MultiElementWrapper<ElementWrapper>> {
    protected root: string;
    constructor(root: string);
    getElement(): string;
    matches(selector: string): ElementWrapper;
    find(selector: string): ElementWrapper;
    findAll(selector: string): MultiElementWrapper<ElementWrapper>;
    findAny(...selectors: Array<string>): ElementWrapper;
    findByClassName(className: string): ElementWrapper;
    findAllByClassName(className: string): MultiElementWrapper<ElementWrapper>;
    /**
     * Returns a wrapper that matches the specified component type with the specified CSS selector.
     *
     * Note: This function returns the specified component's wrapper even if the specified selector points to a different component type.
     *
     * @param {string} selector CSS selector
     * @param {WrapperClass} ComponentClass Component's wrapper class
     * @returns `Wrapper`
     */
    findComponent<Wrapper extends ComponentWrapper>(selector: string, ComponentClass: WrapperClass<Wrapper>): Wrapper;
    /**
     * Returns a multi-element wrapper that matches the specified component type with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches the specified component type.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper}
     */
    findAllComponents<Wrapper extends ComponentWrapper>(ComponentClass: ComponentWrapperClass<Wrapper>, selector?: string): MultiElementWrapper<Wrapper>;
    toSelector(): string;
}
export declare class ElementWrapper extends AbstractWrapper {
}
export declare class ComponentWrapper extends AbstractWrapper {
}
export declare class MultiElementWrapper<T extends AbstractWrapper> extends ElementWrapper {
    private elementFactory;
    constructor(root: string, elementFactory: (selector: string) => T);
    /**
     * Index is one-based because the method uses the :nth-child() CSS pseudo-class.
     */
    get(index: number): T;
    map<T extends AbstractWrapper>(factory: (wrapper: ElementWrapper) => T): MultiElementWrapper<T>;
}
export declare function createWrapper(root?: string): ElementWrapper;
export {};
