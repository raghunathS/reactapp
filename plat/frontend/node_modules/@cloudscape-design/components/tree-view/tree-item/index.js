// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import clsx from 'clsx';
import { useInternalI18n } from '../../i18n/context';
import { ExpandToggleButton } from '../../internal/components/expand-toggle-button';
import InternalStructuredItem from '../../internal/components/structured-item';
import { joinStrings } from '../../internal/utils/strings';
import testUtilStyles from '../test-classes/styles.css.js';
import styles from './styles.css.js';
const InternalTreeItem = ({ item, index, level, i18nStrings, expandedItems = [], renderItemToggleIcon, renderItem, getItemId, getItemChildren, onItemToggle, }) => {
    var _a, _b;
    const i18n = useInternalI18n('tree-view');
    const { icon, content, secondaryContent, actions, announcementLabel } = renderItem(item, index);
    const id = getItemId(item, index);
    const children = getItemChildren(item, index) || [];
    const isExpandable = children.length > 0;
    const isExpanded = isExpandable && expandedItems.includes(id);
    const nextLevel = level + 1;
    let customIcon = undefined;
    if (isExpandable && renderItemToggleIcon) {
        customIcon = renderItemToggleIcon({ expanded: isExpanded });
    }
    const itemLabelToAnnounce = announcementLabel
        ? announcementLabel
        : typeof content === 'string'
            ? content
            : '';
    //  Role `treeitem` isn't used in the initial release per discussion with A11Y team. It requires focus management to be implemented so they will be added as a follow up together.
    return (React.createElement("li", { id: id, className: clsx(styles.treeitem, testUtilStyles.treeitem, isExpandable && [testUtilStyles.expandable], isExpanded && [testUtilStyles.expanded]), "aria-expanded": isExpandable ? isExpanded : undefined, "aria-level": level, "data-testid": `awsui-treeitem-${id}` },
        React.createElement("div", { className: styles['expand-toggle-wrapper'] }, isExpandable && (React.createElement("div", { className: styles.toggle },
            React.createElement(ExpandToggleButton, { isExpanded: isExpanded, customIcon: customIcon, expandButtonLabel: joinStrings(i18n('i18nStrings.expandButtonLabel', (_a = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.expandButtonLabel) === null || _a === void 0 ? void 0 : _a.call(i18nStrings, item)), itemLabelToAnnounce), collapseButtonLabel: joinStrings(i18n('i18nStrings.collapseButtonLabel', (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.collapseButtonLabel) === null || _b === void 0 ? void 0 : _b.call(i18nStrings, item)), itemLabelToAnnounce), onExpandableItemToggle: () => onItemToggle({ id, item, expanded: !isExpanded }) })))),
        React.createElement("div", { className: styles['structured-item-wrapper'] },
            React.createElement(InternalStructuredItem, { icon: icon, content: content, secondaryContent: secondaryContent, actions: actions, wrapActions: false })),
        isExpanded && children.length && (React.createElement("ul", { className: styles['treeitem-group'] }, children.map((child, index) => {
            return (React.createElement(InternalTreeItem, { item: child, index: index, key: `${nextLevel}-${index}`, level: nextLevel, expandedItems: expandedItems, i18nStrings: i18nStrings, onItemToggle: onItemToggle, renderItem: renderItem, getItemId: getItemId, getItemChildren: getItemChildren, renderItemToggleIcon: renderItemToggleIcon }));
        })))));
};
export default InternalTreeItem;
//# sourceMappingURL=index.js.map