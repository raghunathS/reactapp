import {
  findUpUntil,
  getGlobalFlag
} from "./chunk-3XWJ5A22.js";

// node_modules/@cloudscape-design/component-toolkit/internal/analytics-metadata/attributes.js
var METADATA_ATTRIBUTE = "data-awsui-analytics";
var LABEL_ATTRIBUTE = "data-awsui-analytics-label";
var activated = getGlobalFlag("analyticsMetadata");
var getAnalyticsMetadataAttribute = (metadata) => activated ? {
  [METADATA_ATTRIBUTE]: JSON.stringify(metadata)
} : {};
var copyAnalyticsMetadataAttribute = (props) => activated ? {
  [METADATA_ATTRIBUTE]: props[METADATA_ATTRIBUTE]
} : {};
var getAnalyticsLabelAttribute = (labelIdentifierString) => activated ? {
  [LABEL_ATTRIBUTE]: labelIdentifierString
} : {};

// node_modules/@cloudscape-design/components/internal/analytics/selectors.js
var DATA_ATTR_FUNNEL = "data-analytics-funnel";
var DATA_ATTR_FUNNEL_INTERACTION_ID = `${DATA_ATTR_FUNNEL}-interaction-id`;
var DATA_ATTR_FUNNEL_KEY = `${DATA_ATTR_FUNNEL}-key`;
var DATA_ATTR_FUNNEL_VALUE = `${DATA_ATTR_FUNNEL}-value`;
var DATA_ATTR_FUNNEL_STEP = `${DATA_ATTR_FUNNEL}-step`;
var DATA_ATTR_FUNNEL_SUBSTEP = `${DATA_ATTR_FUNNEL}-substep`;
var DATA_ATTR_RESOURCE_TYPE = `${DATA_ATTR_FUNNEL}-resource-type`;
var DATA_ATTR_MODAL_ID = "data-analytics-modal-id";
var DATA_ATTR_FIELD_LABEL = "data-analytics-field-label";
var DATA_ATTR_FIELD_ERROR = "data-analytics-field-error";
var DATA_ATTR_ANALYTICS_ALERT = "data-analytics-alert";
var DATA_ATTR_ANALYTICS_FLASHBAR = "data-analytics-flashbar";
var DATA_ATTR_ANALYTICS_SUPPRESS_FLOW_EVENTS = "data-analytics-suppress-flow-events";
var FUNNEL_KEY_FUNNEL_NAME = "funnel-name";
var FUNNEL_KEY_STEP_NAME = "step-name";
var FUNNEL_KEY_SUBSTEP_NAME = "substep-name";
var getFunnelNameSelector = () => `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_FUNNEL_NAME}"]`;
var getFunnelValueSelector = (value) => `[${DATA_ATTR_FUNNEL_VALUE}="${value}"]`;
var getSubStepAllSelector = () => `[${DATA_ATTR_FUNNEL_SUBSTEP}]`;
var getSubStepSelector = (subStepId) => `[${DATA_ATTR_FUNNEL_SUBSTEP}="${subStepId}"]`;
var getSubStepNameSelector = (subStepId) => [subStepId ? getSubStepSelector(subStepId) : "", `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_SUBSTEP_NAME}"]`].join(" ");
var getFieldSlotSeletor = (id) => id ? `[id="${id}"]` : void 0;
var getTextFromSelector = (selector) => {
  var _a, _b;
  return selector ? (_b = (_a = document.querySelector(selector)) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim() : void 0;
};

// node_modules/@cloudscape-design/components/internal/utils/scrollable-containers.js
var getOverflowParents = (element) => {
  const parents = [];
  let node = element;
  while ((node = node.parentElement) && node !== element.ownerDocument.body) {
    if (getComputedStyle(node).overflow !== "visible") {
      parents.push(node);
    }
  }
  return parents;
};
var getOverflowParentDimensions = ({ element, excludeClosestParent = false, expandToViewport = false, canExpandOutsideViewport = false }) => {
  var _a, _b, _c, _d, _e;
  const parents = expandToViewport ? [] : getOverflowParents(element).map((el) => {
    const { height, width, top, left } = el.getBoundingClientRect();
    return {
      // Treat the whole scrollable area as the available height
      // if we're allowed to expand past the viewport.
      blockSize: canExpandOutsideViewport ? el.scrollHeight : height,
      inlineSize: width,
      insetBlockStart: top,
      insetInlineStart: left
    };
  });
  if (canExpandOutsideViewport && !expandToViewport) {
    const document2 = element.ownerDocument;
    const documentDimensions = document2.documentElement.getBoundingClientRect();
    parents.push({
      inlineSize: Math.max(documentDimensions.width, document2.documentElement.clientWidth),
      blockSize: Math.max(documentDimensions.height, document2.documentElement.clientHeight),
      insetBlockStart: documentDimensions.top,
      insetInlineStart: documentDimensions.left
    });
  } else {
    const owningWindow = (_a = element.ownerDocument.defaultView) !== null && _a !== void 0 ? _a : window;
    parents.push({
      blockSize: (_c = (_b = owningWindow.visualViewport) === null || _b === void 0 ? void 0 : _b.height) !== null && _c !== void 0 ? _c : owningWindow.innerHeight,
      inlineSize: (_e = (_d = owningWindow.visualViewport) === null || _d === void 0 ? void 0 : _d.width) !== null && _e !== void 0 ? _e : owningWindow.innerWidth,
      insetBlockStart: 0,
      insetInlineStart: 0
    });
  }
  if (excludeClosestParent && !expandToViewport) {
    parents.shift();
  }
  return parents;
};
function scrollElementIntoView(element, options = { block: "nearest", inline: "nearest" }) {
  var _a;
  (_a = element === null || element === void 0 ? void 0 : element.scrollIntoView) === null || _a === void 0 ? void 0 : _a.call(element, options);
}
function calculateScroll({ insetBlockStart, blockSize }) {
  if (insetBlockStart < 0) {
    return insetBlockStart;
  } else if (insetBlockStart + blockSize > window.innerHeight) {
    if (blockSize > window.innerHeight) {
      return insetBlockStart;
    } else {
      return insetBlockStart + blockSize - window.innerHeight;
    }
  }
  return 0;
}
function scrollRectangleIntoView(box, scrollableParent) {
  const scrollAmount = calculateScroll(box);
  if (scrollAmount) {
    (scrollableParent || window).scrollBy(0, scrollAmount);
  }
}
function getFirstScrollableParent(element) {
  return findUpUntil(element, (el) => {
    const overflows = el.scrollHeight > el.clientHeight;
    return overflows && ["scroll", "auto"].includes(getComputedStyle(el).overflowY);
  }) || void 0;
}

export {
  getAnalyticsMetadataAttribute,
  copyAnalyticsMetadataAttribute,
  getAnalyticsLabelAttribute,
  DATA_ATTR_FUNNEL_INTERACTION_ID,
  DATA_ATTR_FUNNEL_KEY,
  DATA_ATTR_FUNNEL_VALUE,
  DATA_ATTR_FUNNEL_STEP,
  DATA_ATTR_FUNNEL_SUBSTEP,
  DATA_ATTR_RESOURCE_TYPE,
  DATA_ATTR_MODAL_ID,
  DATA_ATTR_FIELD_LABEL,
  DATA_ATTR_FIELD_ERROR,
  DATA_ATTR_ANALYTICS_ALERT,
  DATA_ATTR_ANALYTICS_FLASHBAR,
  DATA_ATTR_ANALYTICS_SUPPRESS_FLOW_EVENTS,
  FUNNEL_KEY_FUNNEL_NAME,
  FUNNEL_KEY_STEP_NAME,
  FUNNEL_KEY_SUBSTEP_NAME,
  getFunnelNameSelector,
  getFunnelValueSelector,
  getSubStepAllSelector,
  getSubStepSelector,
  getSubStepNameSelector,
  getFieldSlotSeletor,
  getTextFromSelector,
  getOverflowParents,
  getOverflowParentDimensions,
  scrollElementIntoView,
  calculateScroll,
  scrollRectangleIntoView,
  getFirstScrollableParent
};
//# sourceMappingURL=chunk-7M2SJ7OD.js.map
