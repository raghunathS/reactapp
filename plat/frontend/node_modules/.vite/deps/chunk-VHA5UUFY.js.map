{
  "version": 3,
  "sources": ["../../src/internal/context/link-default-variant-context.ts", "../../@cloudscape-design/component-toolkit/container-queries/use-container-query.js", "../../@cloudscape-design/component-toolkit/use-controllable-state/use-controllable-state.js", "../../src/internal/hooks/use-intersection-observer/index.ts", "../../src/internal/hooks/container-queries/use-container-breakpoints.ts", "../../src/internal/context/form-field-context.ts", "../../src/internal/utils/calculate-once.ts", "../../src/internal/utils/browser-scrollbar-size.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createContext } from 'react';\n\nimport { LinkProps } from '../../link/interfaces';\n\nexport const defaultValue: { defaultVariant: LinkProps.Variant } = {\n  defaultVariant: 'secondary',\n};\n\nexport const LinkDefaultVariantContext = createContext(defaultValue);\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef, useState, useCallback } from 'react';\nimport { useResizeObserver } from '../internal/container-queries/use-resize-observer';\n/**\n * Attaches resize-observer to the referenced element and keeps last observation in state.\n * The hook allows to limit the amount of re-renders to only when the observed value changes.\n *\n * @example\n * Switching display mode under a given condition (only re-renders when mode changes):\n * ```\n * const [smallMode, ref] = useContainerQuery(entry => entry.contentBoxHeight <= smallModeHeight, [smallModeHeight])\n * ```\n *\n * @example\n * Obtaining observer entry (re-renders with each observation):\n * ```\n * const [entry, ref] = useContainerQuery(entry => entry)\n * ```\n *\n * @example\n * Using previous state to avoid unnecessary re-renders:\n * ```\n * const [value, ref] = useContainerQuery((entry, prev) => shouldUpdate(entry) ? getValue(entry) : prev)\n * ```\n *\n * @typeParam ObservedState State obtained from the last observation\n * @param mapFn Function to convert ContainerQueryEntry to ObservedState\n * @param deps Dependency list to indicate when the mapFn changes\n * @returns A tuple of the observed state and a reference to be attached to the target element\n */\nexport default function useContainerQuery(mapFn, deps = []) {\n    const elementRef = useRef(null);\n    const [state, setState] = useState(null);\n    // Update getElement when deps change to trigger new observation.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const getElement = useCallback(() => elementRef.current, deps);\n    useResizeObserver(getElement, entry => setState(prevState => mapFn(entry, prevState)));\n    return [state, elementRef];\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState, useEffect, useCallback } from 'react';\nimport { useStableCallback } from '../internal/stable-callback';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '../internal/logging';\n/**\n * This hook allows you to make a component that can be used both in controlled\n * mode and uncontrolled mode. Pass in your component's props, and then implement\n * your component as if it was only controlled.\n *\n * A component determines its mode (either controlled or uncontrolled) on the\n * first render and keeps it for its lifetime. The mode cannot be switched later.\n *\n * @example\n * Using useControllableState in a custom checkbox component\n * ```\n * const [checked, setChecked] = useControllable(\n *   props.checked,\n *   props.onChange,\n *   props.defaultEnabled ?? false,\n *   {\n *     componentName: 'MyCheckboxComponent',\n *     propertyName: 'checked',\n *     changeHandler: 'onChange'\n *   }\n * );\n *\n * return (\n *   <input\n *     type=\"checkbox\"\n *     checked={checked}\n *     onChange={event => setChecked(event.target.checked)}\n *   />\n * );\n * ```\n *\n * @param controlledValue The value to use for controlled mode\n * @param changeHandler The update handler for controlled mode\n * @param defaultValue The initial value for uncontrolled mode\n * @param propertyDescriptions Property names used when emitting warnings\n * @param fireEvent Callback executed when controllable value changes\n * @returns A tuple of value and value setter\n */\nexport default function useControllable(controlledValue, changeHandler, defaultValue, propertyDescriptions, fireEvent = (value, handler) => handler(value)) {\n    const { componentName, changeHandlerName, propertyName } = propertyDescriptions;\n    // The decision whether a component is controlled or uncontrolled is made on\n    // its first render and cannot be changed afterwards.\n    const [isControlled] = useState(controlledValue !== undefined);\n    // Most build tools will just strip this block from production builds, so we can\n    // skip the conditional hook lint error.\n    if (isDevelopment) {\n        // Print a warning if a controlled property was passed in without a change handler.\n        // This may fire every render if the change handler isn't memoized, but warnOnce\n        // will dedupe the error messages.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useEffect(() => {\n            if (isControlled && changeHandler === undefined) {\n                warnOnce(componentName, `You provided a \\`${propertyName}\\` prop without an \\`${changeHandlerName}\\` handler. This will render a non-interactive component.`);\n            }\n        }, [changeHandler, isControlled, componentName, changeHandlerName, propertyName]);\n        // Print a warning if the component switches between controlled and uncontrolled mode.\n        const isControlledValueProvided = controlledValue !== undefined;\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useEffect(() => {\n            if (isControlled !== isControlledValueProvided) {\n                const initialMode = isControlled ? 'controlled' : 'uncontrolled';\n                const modeNow = isControlledValueProvided ? 'controlled' : 'uncontrolled';\n                warnOnce(componentName, `A component tried to change ${initialMode} '${propertyName}' property to be ${modeNow}. ` +\n                    `This is not supported. Properties should not switch from ${initialMode} to ${modeNow} (or vice versa). ` +\n                    `Decide between using a controlled or uncontrolled mode for the lifetime of the component. ` +\n                    `More info: https://fb.me/react-controlled-components`);\n            }\n        }, [isControlled, isControlledValueProvided, propertyName, componentName]);\n    }\n    // This is the value that is used if the component is uncontrolled.\n    const [valueState, setValue] = useState(defaultValue);\n    const [isUncontrolledValueSet, setIsUncontrolledValueSet] = useState(false);\n    const stableFireEvent = useStableCallback((value, handler) => fireEvent(value, handler));\n    const setControlledValue = useCallback((value) => {\n        if (changeHandler) {\n            stableFireEvent(value, changeHandler);\n        }\n    }, [changeHandler, stableFireEvent]);\n    // We allow changes to the defaultValue prop to be reflected until the component\n    // starts controlling it internally.\n    const currentUncontrolledValue = isUncontrolledValueSet ? valueState : defaultValue;\n    const setUncontrolledValue = useCallback((newValue) => {\n        setValue(newValue);\n        setIsUncontrolledValueSet(true);\n    }, []);\n    return isControlled ? [controlledValue, setControlledValue] : [currentUncontrolledValue, setUncontrolledValue];\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { RefCallback, useCallback, useRef, useState } from 'react';\n\ninterface UseIntersectionObserverConfig {\n  initialState?: boolean;\n}\n\n/**\n * A hook that uses an Intersection Observer on the target element ref\n * and detects if the element is intersecting with its parent.\n */\nexport function useIntersectionObserver<T extends HTMLElement>({\n  initialState = false,\n}: UseIntersectionObserverConfig = {}) {\n  const observerRef = useRef<IntersectionObserver | null>(null);\n  const [isIntersecting, setIsIntersecting] = useState(initialState);\n\n  const ref = useCallback<RefCallback<T>>(targetElement => {\n    if (typeof IntersectionObserver === 'undefined') {\n      // Do nothing in environments like JSDOM\n      return;\n    }\n\n    if (observerRef.current) {\n      // Dismiss previous observer because the target changed\n      observerRef.current.disconnect();\n    }\n\n    // Create a new observer with the target element\n    if (targetElement) {\n      // Fix for AWSUI-60898: In Firefox, IntersectionObserver instances inside an\n      //   iframe context can't detect visibility changes caused by changes to elements\n      //   outside the iframe (e.g. if an element wrapping the iframe is set to `display: none`).\n      let TopLevelIntersectionObserver = IntersectionObserver;\n      try {\n        if (window.top) {\n          TopLevelIntersectionObserver = (window.top as typeof window).IntersectionObserver;\n        }\n      } catch {\n        // Tried to access a cross-origin iframe. Fall back to current IntersectionObserver.\n      }\n      observerRef.current = new TopLevelIntersectionObserver(([entry]) => setIsIntersecting(entry.isIntersecting));\n      observerRef.current.observe(targetElement);\n    }\n  }, []);\n\n  return { ref, isIntersecting };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nimport { Breakpoint, getMatchingBreakpoint } from '../../breakpoints';\n\n/**\n * Re-renders the component when the breakpoint for the component changes. Scopes the re-renders to the specific\n * breakpoints you want to break at. \"default\" is always included as a fallback, so [\"xs\"] would trigger for\n * \"default\" and \"xs\".\n *\n * @param triggers The relevant breakpoints to trigger for.\n */\nexport function useContainerBreakpoints<T extends readonly Breakpoint[], E extends Element = any>(triggers?: T) {\n  // triggers.join() gives us a stable value to use for the dependencies argument\n  const triggersDep = triggers?.join();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useContainerQuery(rect => getMatchingBreakpoint(rect.contentBoxWidth, triggers), [triggersDep]) as [\n    'default' | T[number] | null,\n    React.Ref<E>,\n  ];\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createContext, useContext } from 'react';\n\nexport interface FormFieldControlProps {\n  /**\n   * Specifies the ID of the native form element. You can use it to relate\n   * a label element's `for` attribute to this control.\n   *\n   * It defaults to an automatically generated ID that\n   * is provided by its parent form field component.\n   */\n  controlId?: string;\n\n  /**\n   * Adds `aria-labelledby` to the component. If you're using this component within a form field,\n   * don't set this property because the form field component automatically sets it.\n   *\n   * Use this property if the component isn't surrounded by a form field, or you want to override the value\n   * automatically set by the form field (for example, if you have two components within a single form field).\n   *\n   * To use it correctly, define an ID for the element you want to use as label and set the property to that ID.\n   */\n  ariaLabelledby?: string;\n\n  /**\n   * Adds `aria-describedby` to the component. If you're using this component within a form field,\n   * don't set this property because the form field component automatically sets it.\n   *\n   * Use this property if the component isn't surrounded by a form field, or you want to override the value\n   * automatically set by the form field (for example, if you have two components within a single form field).\n   *\n   * To use it correctly, define an ID for each element that you want to use as a description\n   * and set the property to a string of each ID separated by spaces (for example, `\"id1 id2 id3\"`).\n   */\n  ariaDescribedby?: string;\n}\n\nexport interface FormFieldCommonValidationControlProps extends FormFieldControlProps {\n  /**\n   * Overrides the invalidation state. Usually the invalid state\n   * comes from the parent `FormField`component,\n   * however sometimes you need to override its\n   * state when you have more than one input within a\n   * single form field.\n   */\n  invalid?: boolean;\n}\n\nexport interface FormFieldValidationControlProps extends FormFieldCommonValidationControlProps {\n  /**\n   * Overrides the warning state. Usually the warning state\n   * comes from the parent `FormField`component,\n   * however sometimes you need to override its\n   * state when you have more than one input within a\n   * single form field.\n   * When you use it, provide additional context with\n   * information on the input state, and associate it\n   * with the input using `ariaDescribedby`.\n   */\n  warning?: boolean;\n}\n\nexport const FormFieldContext = createContext<FormFieldValidationControlProps>({});\n\nfunction applyDefault<T>(fields: T, defaults: T, keys: (keyof T)[]) {\n  const result = <T>{};\n  keys.forEach(key => {\n    result[key] = fields[key] === undefined ? defaults[key] : fields[key];\n  });\n  return result;\n}\n\nexport function useFormFieldContext(props: FormFieldValidationControlProps) {\n  const context = useContext(FormFieldContext);\n  return applyDefault(props, context, ['invalid', 'warning', 'controlId', 'ariaLabelledby', 'ariaDescribedby']);\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport function calculateOnce<T>(callback: () => T) {\n  let result: T | undefined = undefined;\n  return () => {\n    if (result === undefined) {\n      result = callback();\n    }\n    return result;\n  };\n}\n", "/*\n * ** Detect scrollbar width (blog post); version N/A -- https://davidwalsh.name/detect-scrollbar-width\n *\n * MIT License\n *\n * Copyright (c) 2007-2021 David Walsh\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n/* eslint-disable header/header */\nimport { calculateOnce } from './calculate-once';\n\nexport const browserScrollbarSize = calculateOnce(() => {\n  if (typeof document === 'undefined') {\n    return { width: 0, height: 0 };\n  }\n  const scrollDiv = document.createElement('div');\n  scrollDiv.style.overflow = 'scroll';\n  scrollDiv.style.height = '100px';\n  scrollDiv.style.width = '100px';\n  scrollDiv.style.position = 'absolute';\n  scrollDiv.style.top = '-9999px';\n  scrollDiv.style.left = '-9999px';\n  document.body.appendChild(scrollDiv);\n\n  const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  const height = scrollDiv.offsetHeight - scrollDiv.clientHeight;\n  document.body.removeChild(scrollDiv);\n  return { width, height };\n});\n"],
  "mappings": ";;;;;;;;;;;;;;AAEA,mBAA8B;AAIvB,IAAM,eAAsD;EACjE,gBAAgB;;AAGX,IAAM,gCAA4B,4BAAc,YAAY;;;ACRnE,IAAAA,gBAA8C;AA6B/B,SAAR,kBAAmC,OAAO,OAAO,CAAC,GAAG;AACxD,QAAM,iBAAa,sBAAO,IAAI;AAC9B,QAAM,CAAC,OAAO,QAAQ,QAAI,wBAAS,IAAI;AAGvC,QAAM,iBAAa,2BAAY,MAAM,WAAW,SAAS,IAAI;AAC7D,oBAAkB,YAAY,WAAS,SAAS,eAAa,MAAM,OAAO,SAAS,CAAC,CAAC;AACrF,SAAO,CAAC,OAAO,UAAU;AAC7B;;;ACrCA,IAAAC,gBAAiD;;;ACCjD,IAAAC,gBAA2D;AAUrD,SAAU,wBAA+C,EAC7D,eAAe,MAAK,IACa,CAAA,GAAE;AACnC,QAAM,kBAAc,sBAAoC,IAAI;AAC5D,QAAM,CAAC,gBAAgB,iBAAiB,QAAI,wBAAS,YAAY;AAEjE,QAAM,UAAM,2BAA4B,mBAAgB;AACtD,QAAI,OAAO,yBAAyB,aAAa;AAE/C;;AAGF,QAAI,YAAY,SAAS;AAEvB,kBAAY,QAAQ,WAAU;;AAIhC,QAAI,eAAe;AAIjB,UAAI,+BAA+B;AACnC,UAAI;AACF,YAAI,OAAO,KAAK;AACd,yCAAgC,OAAO,IAAsB;;eAE/D,IAAM;;AAGR,kBAAY,UAAU,IAAI,6BAA6B,CAAC,CAAC,KAAK,MAAM,kBAAkB,MAAM,cAAc,CAAC;AAC3G,kBAAY,QAAQ,QAAQ,aAAa;;EAE7C,GAAG,CAAA,CAAE;AAEL,SAAO,EAAE,KAAK,eAAc;AAC9B;;;AClCM,SAAU,wBAAkF,UAAY;AAE5G,QAAM,cAAc,aAAQ,QAAR,aAAQ,SAAA,SAAR,SAAU,KAAI;AAElC,SAAO,kBAAkB,UAAQ,sBAAsB,KAAK,iBAAiB,QAAQ,GAAG,CAAC,WAAW,CAAC;AAIvG;;;ACrBA,IAAAC,gBAA0C;AA6DnC,IAAM,uBAAmB,6BAA+C,CAAA,CAAE;AAEjF,SAAS,aAAgB,QAAW,UAAa,MAAiB;AAChE,QAAM,SAAY,CAAA;AAClB,OAAK,QAAQ,SAAM;AACjB,WAAO,GAAG,IAAI,OAAO,GAAG,MAAM,SAAY,SAAS,GAAG,IAAI,OAAO,GAAG;EACtE,CAAC;AACD,SAAO;AACT;AAEM,SAAU,oBAAoB,OAAsC;AACxE,QAAM,cAAU,0BAAW,gBAAgB;AAC3C,SAAO,aAAa,OAAO,SAAS,CAAC,WAAW,WAAW,aAAa,kBAAkB,iBAAiB,CAAC;AAC9G;;;AC1EM,SAAU,cAAiB,UAAiB;AAChD,MAAI,SAAwB;AAC5B,SAAO,MAAK;AACV,QAAI,WAAW,QAAW;AACxB,eAAS,SAAQ;;AAEnB,WAAO;EACT;AACF;;;ACiBO,IAAM,uBAAuB,cAAc,MAAK;AACrD,MAAI,OAAO,aAAa,aAAa;AACnC,WAAO,EAAE,OAAO,GAAG,QAAQ,EAAC;;AAE9B,QAAM,YAAY,SAAS,cAAc,KAAK;AAC9C,YAAU,MAAM,WAAW;AAC3B,YAAU,MAAM,SAAS;AACzB,YAAU,MAAM,QAAQ;AACxB,YAAU,MAAM,WAAW;AAC3B,YAAU,MAAM,MAAM;AACtB,YAAU,MAAM,OAAO;AACvB,WAAS,KAAK,YAAY,SAAS;AAEnC,QAAM,QAAQ,UAAU,cAAc,UAAU;AAChD,QAAM,SAAS,UAAU,eAAe,UAAU;AAClD,WAAS,KAAK,YAAY,SAAS;AACnC,SAAO,EAAE,OAAO,OAAM;AACxB,CAAC;",
  "names": ["import_react", "import_react", "import_react", "import_react"]
}
