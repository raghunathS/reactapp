import {
  createSingletonState,
  findUpUntil,
  getGlobalFlag
} from "./chunk-X4AES4TZ.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@cloudscape-design/component-toolkit/internal/analytics-metadata/attributes.js
var METADATA_ATTRIBUTE = "data-awsui-analytics";
var LABEL_ATTRIBUTE = "data-awsui-analytics-label";
var activated = getGlobalFlag("analyticsMetadata");
var getAnalyticsMetadataAttribute = (metadata) => activated ? {
  [METADATA_ATTRIBUTE]: JSON.stringify(metadata)
} : {};
var copyAnalyticsMetadataAttribute = (props) => activated ? {
  [METADATA_ATTRIBUTE]: props[METADATA_ATTRIBUTE]
} : {};
var getAnalyticsLabelAttribute = (labelIdentifierString) => activated ? {
  [LABEL_ATTRIBUTE]: labelIdentifierString
} : {};

// node_modules/@cloudscape-design/components/internal/analytics/selectors.js
var DATA_ATTR_FUNNEL = "data-analytics-funnel";
var DATA_ATTR_FUNNEL_INTERACTION_ID = `${DATA_ATTR_FUNNEL}-interaction-id`;
var DATA_ATTR_FUNNEL_KEY = `${DATA_ATTR_FUNNEL}-key`;
var DATA_ATTR_FUNNEL_VALUE = `${DATA_ATTR_FUNNEL}-value`;
var DATA_ATTR_FUNNEL_STEP = `${DATA_ATTR_FUNNEL}-step`;
var DATA_ATTR_FUNNEL_SUBSTEP = `${DATA_ATTR_FUNNEL}-substep`;
var DATA_ATTR_RESOURCE_TYPE = `${DATA_ATTR_FUNNEL}-resource-type`;
var DATA_ATTR_MODAL_ID = "data-analytics-modal-id";
var DATA_ATTR_FIELD_LABEL = "data-analytics-field-label";
var DATA_ATTR_FIELD_ERROR = "data-analytics-field-error";
var DATA_ATTR_ANALYTICS_ALERT = "data-analytics-alert";
var DATA_ATTR_ANALYTICS_FLASHBAR = "data-analytics-flashbar";
var DATA_ATTR_ANALYTICS_SUPPRESS_FLOW_EVENTS = "data-analytics-suppress-flow-events";
var FUNNEL_KEY_FUNNEL_NAME = "funnel-name";
var FUNNEL_KEY_STEP_NAME = "step-name";
var FUNNEL_KEY_SUBSTEP_NAME = "substep-name";
var getFunnelNameSelector = () => `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_FUNNEL_NAME}"]`;
var getFunnelValueSelector = (value) => `[${DATA_ATTR_FUNNEL_VALUE}="${value}"]`;
var getSubStepAllSelector = () => `[${DATA_ATTR_FUNNEL_SUBSTEP}]`;
var getSubStepSelector = (subStepId) => `[${DATA_ATTR_FUNNEL_SUBSTEP}="${subStepId}"]`;
var getSubStepNameSelector = (subStepId) => [subStepId ? getSubStepSelector(subStepId) : "", `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_SUBSTEP_NAME}"]`].join(" ");
var getFieldSlotSeletor = (id) => id ? `[id="${id}"]` : void 0;
var getTextFromSelector = (selector) => {
  var _a, _b;
  return selector ? (_b = (_a = document.querySelector(selector)) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim() : void 0;
};

// node_modules/@cloudscape-design/components/internal/breakpoints.js
var BREAKPOINT_MAPPING = [
  ["xl", 1840],
  ["l", 1320],
  ["m", 1120],
  ["s", 912],
  ["xs", 688],
  ["xxs", 465],
  ["default", -1]
];
var mobileBreakpoint = BREAKPOINT_MAPPING.filter((b) => b[0] === "xs")[0][1];
var BREAKPOINTS_DESCENDING = BREAKPOINT_MAPPING.map(([bp]) => bp);
function matchBreakpointMapping(subset, actual) {
  const qualifyingBreakpoints = BREAKPOINT_MAPPING.slice(BREAKPOINTS_DESCENDING.indexOf(actual));
  for (const [breakpoint] of qualifyingBreakpoints) {
    const breakpointValue = subset[breakpoint];
    if (breakpointValue !== void 0) {
      return breakpointValue;
    }
  }
  return null;
}
function getMatchingBreakpoint(width, breakpointFilter) {
  for (const [breakpoint, breakpointWidth] of BREAKPOINT_MAPPING) {
    if (width > breakpointWidth && (!breakpointFilter || breakpointFilter.indexOf(breakpoint) !== -1)) {
      return breakpoint;
    }
  }
  return "default";
}
function getBreakpointValue(breakpoint) {
  return BREAKPOINT_MAPPING.find((bp) => bp[0] === breakpoint)[1];
}

// node_modules/@cloudscape-design/components/internal/hooks/use-mobile/index.js
var forceMobileModeSymbol = Symbol.for("awsui-force-mobile-mode");
function getIsMobile() {
  const forceMobileMode = globalThis[forceMobileModeSymbol];
  if (typeof forceMobileMode !== "undefined") {
    return forceMobileMode;
  }
  if (typeof window === "undefined") {
    return false;
  }
  if (window.matchMedia) {
    return window.matchMedia(`(max-width: ${mobileBreakpoint}px)`).matches;
  }
  return getMatchingBreakpoint(window.innerWidth, ["xs"]) !== "xs";
}
var useMobile = createSingletonState({
  initialState: () => getIsMobile(),
  factory: (handler) => {
    const listener = () => handler(getIsMobile());
    window.addEventListener("resize", listener);
    return () => {
      window.removeEventListener("resize", listener);
    };
  }
});

// node_modules/@cloudscape-design/components/internal/context/container-header.js
var import_react = __toESM(require_react());
var ContainerHeaderContext = (0, import_react.createContext)({ isInContainer: false });
var ContainerHeaderContextProvider = ({ children }) => {
  return import_react.default.createElement(ContainerHeaderContext.Provider, { value: { isInContainer: true } }, children);
};
var useContainerHeader = () => {
  const { isInContainer } = (0, import_react.useContext)(ContainerHeaderContext);
  return isInContainer;
};

// node_modules/@cloudscape-design/components/container/use-sticky-header.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/generated/styles/tokens.js
var colorChartsThresholdNeutral = "var(--color-charts-threshold-neutral-pd7kh4, #656871)";
var colorChartsPaletteCategorical1 = "var(--color-charts-palette-categorical-1-xu0deg, #688ae8)";
var colorChartsPaletteCategorical2 = "var(--color-charts-palette-categorical-2-ktit09, #c33d69)";
var colorChartsPaletteCategorical3 = "var(--color-charts-palette-categorical-3-g0srj0, #2ea597)";
var colorChartsPaletteCategorical4 = "var(--color-charts-palette-categorical-4-5vauwp, #8456ce)";
var colorChartsPaletteCategorical5 = "var(--color-charts-palette-categorical-5-3v8ery, #e07941)";
var colorChartsPaletteCategorical6 = "var(--color-charts-palette-categorical-6-ztdd8d, #3759ce)";
var colorChartsPaletteCategorical7 = "var(--color-charts-palette-categorical-7-3j5o6w, #962249)";
var colorChartsPaletteCategorical8 = "var(--color-charts-palette-categorical-8-c5r39m, #096f64)";
var colorChartsPaletteCategorical9 = "var(--color-charts-palette-categorical-9-8n6iuv, #6237a7)";
var colorChartsPaletteCategorical10 = "var(--color-charts-palette-categorical-10-opta0w, #a84401)";
var colorChartsPaletteCategorical11 = "var(--color-charts-palette-categorical-11-b2r7jc, #273ea5)";
var colorChartsPaletteCategorical12 = "var(--color-charts-palette-categorical-12-b5drtm, #780d35)";
var colorChartsPaletteCategorical13 = "var(--color-charts-palette-categorical-13-c69xg9, #03524a)";
var colorChartsPaletteCategorical14 = "var(--color-charts-palette-categorical-14-db19x8, #4a238b)";
var colorChartsPaletteCategorical15 = "var(--color-charts-palette-categorical-15-8z8vjw, #7e3103)";
var colorChartsPaletteCategorical16 = "var(--color-charts-palette-categorical-16-549jkl, #1b2b88)";
var colorChartsPaletteCategorical17 = "var(--color-charts-palette-categorical-17-nrio7t, #ce567c)";
var colorChartsPaletteCategorical18 = "var(--color-charts-palette-categorical-18-tm902v, #003e38)";
var colorChartsPaletteCategorical19 = "var(--color-charts-palette-categorical-19-ujcr86, #9469d6)";
var colorChartsPaletteCategorical20 = "var(--color-charts-palette-categorical-20-h55e4g, #602400)";
var colorChartsPaletteCategorical21 = "var(--color-charts-palette-categorical-21-vs0u8l, #4066df)";
var colorChartsPaletteCategorical22 = "var(--color-charts-palette-categorical-22-6klt3l, #a32952)";
var colorChartsPaletteCategorical23 = "var(--color-charts-palette-categorical-23-3zpkdt, #0d7d70)";
var colorChartsPaletteCategorical24 = "var(--color-charts-palette-categorical-24-z9a4uk, #6b40b2)";
var colorChartsPaletteCategorical25 = "var(--color-charts-palette-categorical-25-tgdsk2, #bc4d01)";
var colorChartsPaletteCategorical26 = "var(--color-charts-palette-categorical-26-lo8zn9, #2c46b1)";
var colorChartsPaletteCategorical27 = "var(--color-charts-palette-categorical-27-bruhsa, #81143b)";
var colorChartsPaletteCategorical28 = "var(--color-charts-palette-categorical-28-6b00fb, #045b52)";
var colorChartsPaletteCategorical29 = "var(--color-charts-palette-categorical-29-aurmid, #512994)";
var colorChartsPaletteCategorical30 = "var(--color-charts-palette-categorical-30-fjnmd7, #8a3603)";
var colorChartsPaletteCategorical31 = "var(--color-charts-palette-categorical-31-7zcct5, #1f3191)";
var colorChartsPaletteCategorical32 = "var(--color-charts-palette-categorical-32-rrda6y, #da7596)";
var colorChartsPaletteCategorical33 = "var(--color-charts-palette-categorical-33-2v0mzv, #01443e)";
var colorChartsPaletteCategorical34 = "var(--color-charts-palette-categorical-34-g9a9q3, #a783e1)";
var colorChartsPaletteCategorical35 = "var(--color-charts-palette-categorical-35-u0w821, #692801)";
var colorChartsPaletteCategorical36 = "var(--color-charts-palette-categorical-36-tthuf8, #5978e3)";
var colorChartsPaletteCategorical37 = "var(--color-charts-palette-categorical-37-y588bl, #b1325c)";
var colorChartsPaletteCategorical38 = "var(--color-charts-palette-categorical-38-qdh97u, #1c8e81)";
var colorChartsPaletteCategorical39 = "var(--color-charts-palette-categorical-39-yisq6l, #7749bf)";
var colorChartsPaletteCategorical40 = "var(--color-charts-palette-categorical-40-yeer1v, #cc5f21)";
var colorChartsPaletteCategorical41 = "var(--color-charts-palette-categorical-41-tu9dxw, #314fbf)";
var colorChartsPaletteCategorical42 = "var(--color-charts-palette-categorical-42-q410kp, #8b1b42)";
var colorChartsPaletteCategorical43 = "var(--color-charts-palette-categorical-43-dwew7q, #06645a)";
var colorChartsPaletteCategorical44 = "var(--color-charts-palette-categorical-44-2thp96, #59309d)";
var colorChartsPaletteCategorical45 = "var(--color-charts-palette-categorical-45-6kinj6, #983c02)";
var colorChartsPaletteCategorical46 = "var(--color-charts-palette-categorical-46-iefxfq, #23379b)";
var colorChartsPaletteCategorical47 = "var(--color-charts-palette-categorical-47-9l9wl2, #6f062f)";
var colorChartsPaletteCategorical48 = "var(--color-charts-palette-categorical-48-5s2n0r, #014b44)";
var colorChartsPaletteCategorical49 = "var(--color-charts-palette-categorical-49-bub0l1, #431d84)";
var colorChartsPaletteCategorical50 = "var(--color-charts-palette-categorical-50-utrpu5, #732c02)";
var lineHeightBodyM = "var(--line-height-body-m-2mh3ke, 20px)";
var borderPanelTopWidth = "var(--border-panel-top-width-10990j, 1px)";
var spaceScaledXxs = "var(--space-scaled-xxs-pfm1nx, 4px)";
var spaceScaledS = "var(--space-scaled-s-8ozaad, 12px)";
var spaceXxxs = "var(--space-xxxs-pajhad, 2px)";
var spaceXxs = "var(--space-xxs-hwfkai, 4px)";
var spaceXs = "var(--space-xs-ymlm0b, 8px)";

// node_modules/@cloudscape-design/components/internal/styles/global-vars.js
var globalVars = {
  stickyVerticalTopOffset: "--awsui-sticky-vertical-top-offset",
  stickyVerticalBottomOffset: "--awsui-sticky-vertical-bottom-offset"
};
var global_vars_default = globalVars;

// node_modules/@cloudscape-design/components/internal/utils/scrollable-containers.js
var getOverflowParents = (element) => {
  const parents = [];
  let node = element;
  while ((node = node.parentElement) && node !== element.ownerDocument.body) {
    if (getComputedStyle(node).overflow !== "visible") {
      parents.push(node);
    }
  }
  return parents;
};
var getOverflowParentDimensions = ({ element, excludeClosestParent = false, expandToViewport = false, canExpandOutsideViewport = false }) => {
  var _a, _b, _c, _d, _e;
  const parents = expandToViewport ? [] : getOverflowParents(element).map((el) => {
    const { height, width, top, left } = el.getBoundingClientRect();
    return {
      // Treat the whole scrollable area as the available height
      // if we're allowed to expand past the viewport.
      blockSize: canExpandOutsideViewport ? el.scrollHeight : height,
      inlineSize: width,
      insetBlockStart: top,
      insetInlineStart: left
    };
  });
  if (canExpandOutsideViewport && !expandToViewport) {
    const document2 = element.ownerDocument;
    const documentDimensions = document2.documentElement.getBoundingClientRect();
    parents.push({
      inlineSize: Math.max(documentDimensions.width, document2.documentElement.clientWidth),
      blockSize: Math.max(documentDimensions.height, document2.documentElement.clientHeight),
      insetBlockStart: documentDimensions.top,
      insetInlineStart: documentDimensions.left
    });
  } else {
    const owningWindow = (_a = element.ownerDocument.defaultView) !== null && _a !== void 0 ? _a : window;
    parents.push({
      blockSize: (_c = (_b = owningWindow.visualViewport) === null || _b === void 0 ? void 0 : _b.height) !== null && _c !== void 0 ? _c : owningWindow.innerHeight,
      inlineSize: (_e = (_d = owningWindow.visualViewport) === null || _d === void 0 ? void 0 : _d.width) !== null && _e !== void 0 ? _e : owningWindow.innerWidth,
      insetBlockStart: 0,
      insetInlineStart: 0
    });
  }
  if (excludeClosestParent && !expandToViewport) {
    parents.shift();
  }
  return parents;
};
function scrollElementIntoView(element, options = { block: "nearest", inline: "nearest" }) {
  var _a;
  (_a = element === null || element === void 0 ? void 0 : element.scrollIntoView) === null || _a === void 0 ? void 0 : _a.call(element, options);
}
function calculateScroll({ insetBlockStart, blockSize }) {
  if (insetBlockStart < 0) {
    return insetBlockStart;
  } else if (insetBlockStart + blockSize > window.innerHeight) {
    if (blockSize > window.innerHeight) {
      return insetBlockStart;
    } else {
      return insetBlockStart + blockSize - window.innerHeight;
    }
  }
  return 0;
}
function scrollRectangleIntoView(box, scrollableParent) {
  const scrollAmount = calculateScroll(box);
  if (scrollAmount) {
    (scrollableParent || window).scrollBy(0, scrollAmount);
  }
}
function getFirstScrollableParent(element) {
  return findUpUntil(element, (el) => {
    const overflows = el.scrollHeight > el.clientHeight;
    return overflows && ["scroll", "auto"].includes(getComputedStyle(el).overflowY);
  }) || void 0;
}

// node_modules/@cloudscape-design/components/container/use-sticky-header.js
function computeOffset({ isMobile, __stickyOffset, __mobileStickyOffset, hasInnerOverflowParents, __additionalOffset }) {
  const localOffset = isMobile ? (__stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : 0) - (__mobileStickyOffset !== null && __mobileStickyOffset !== void 0 ? __mobileStickyOffset : 0) : __stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : 0;
  if (hasInnerOverflowParents || __stickyOffset !== void 0) {
    return `${localOffset}px`;
  }
  const globalOffset = `var(${global_vars_default.stickyVerticalTopOffset}, 0px)`;
  return `calc(${globalOffset} + ${localOffset}px + ${__additionalOffset ? spaceScaledS : "0px"})`;
}
var StickyHeaderContext = (0, import_react2.createContext)({
  isStuck: false,
  isStuckAtBottom: false
});
var useStickyHeader = (rootRef, headerRef, __stickyHeader, __stickyOffset, __mobileStickyOffset, __disableMobile, __additionalOffset = false) => {
  const isMobile = useMobile();
  const disableSticky = isMobile && __disableMobile;
  const isSticky = !disableSticky && !!__stickyHeader;
  const [hasInnerOverflowParents, setHasInnerOverflowParents] = (0, import_react2.useState)(false);
  const [isStuck, setIsStuck] = (0, import_react2.useState)(false);
  const [isStuckAtBottom, setIsStuckAtBottom] = (0, import_react2.useState)(false);
  (0, import_react2.useLayoutEffect)(() => {
    if (rootRef.current) {
      const overflowParents = getOverflowParents(rootRef.current);
      const mainElement = findUpUntil(rootRef.current, (elem) => elem.tagName === "MAIN");
      setHasInnerOverflowParents(overflowParents.length > 0 && overflowParents[0] !== mainElement);
    }
  }, [rootRef]);
  const computedOffset = computeOffset({
    isMobile,
    __stickyOffset,
    __mobileStickyOffset,
    hasInnerOverflowParents,
    __additionalOffset
  });
  const stickyStyles = isSticky ? {
    style: {
      top: computedOffset
    }
  } : {};
  const checkIfStuck = (0, import_react2.useCallback)(({ isTrusted, target, type }) => {
    if (type === "resize" && target === window && !isTrusted) {
      return;
    }
    if (rootRef.current && headerRef.current) {
      const rootTopBorderWidth = parseFloat(getComputedStyle(rootRef.current).borderTopWidth) || 0;
      const rootTop = Math.round(rootRef.current.getBoundingClientRect().top + rootTopBorderWidth);
      const headerTop = Math.round(headerRef.current.getBoundingClientRect().top);
      if (rootTop < headerTop) {
        setIsStuck(true);
      } else {
        setIsStuck(false);
      }
      const rootBottom = Math.round(rootRef.current.getBoundingClientRect().bottom - rootTopBorderWidth);
      const headerBottom = Math.round(headerRef.current.getBoundingClientRect().bottom);
      if (rootBottom <= headerBottom) {
        setIsStuckAtBottom(true);
      } else {
        setIsStuckAtBottom(false);
      }
    }
  }, [rootRef, headerRef]);
  (0, import_react2.useEffect)(() => {
    if (isSticky) {
      const controller = new AbortController();
      window.addEventListener("scroll", checkIfStuck, { capture: true, signal: controller.signal });
      window.addEventListener("resize", checkIfStuck, { signal: controller.signal });
      return () => {
        controller.abort();
      };
    }
  }, [isSticky, checkIfStuck]);
  return {
    isSticky,
    isStuck,
    isStuckAtBottom,
    stickyStyles
  };
};

export {
  getAnalyticsMetadataAttribute,
  copyAnalyticsMetadataAttribute,
  getAnalyticsLabelAttribute,
  DATA_ATTR_FUNNEL_INTERACTION_ID,
  DATA_ATTR_FUNNEL_KEY,
  DATA_ATTR_FUNNEL_VALUE,
  DATA_ATTR_FUNNEL_STEP,
  DATA_ATTR_FUNNEL_SUBSTEP,
  DATA_ATTR_RESOURCE_TYPE,
  DATA_ATTR_MODAL_ID,
  DATA_ATTR_FIELD_LABEL,
  DATA_ATTR_FIELD_ERROR,
  DATA_ATTR_ANALYTICS_ALERT,
  DATA_ATTR_ANALYTICS_FLASHBAR,
  DATA_ATTR_ANALYTICS_SUPPRESS_FLOW_EVENTS,
  FUNNEL_KEY_FUNNEL_NAME,
  FUNNEL_KEY_STEP_NAME,
  FUNNEL_KEY_SUBSTEP_NAME,
  getFunnelNameSelector,
  getFunnelValueSelector,
  getSubStepAllSelector,
  getSubStepSelector,
  getSubStepNameSelector,
  getFieldSlotSeletor,
  getTextFromSelector,
  getOverflowParents,
  getOverflowParentDimensions,
  scrollElementIntoView,
  calculateScroll,
  scrollRectangleIntoView,
  getFirstScrollableParent,
  matchBreakpointMapping,
  getMatchingBreakpoint,
  getBreakpointValue,
  useMobile,
  global_vars_default,
  colorChartsThresholdNeutral,
  colorChartsPaletteCategorical1,
  colorChartsPaletteCategorical2,
  colorChartsPaletteCategorical3,
  colorChartsPaletteCategorical4,
  colorChartsPaletteCategorical5,
  colorChartsPaletteCategorical6,
  colorChartsPaletteCategorical7,
  colorChartsPaletteCategorical8,
  colorChartsPaletteCategorical9,
  colorChartsPaletteCategorical10,
  colorChartsPaletteCategorical11,
  colorChartsPaletteCategorical12,
  colorChartsPaletteCategorical13,
  colorChartsPaletteCategorical14,
  colorChartsPaletteCategorical15,
  colorChartsPaletteCategorical16,
  colorChartsPaletteCategorical17,
  colorChartsPaletteCategorical18,
  colorChartsPaletteCategorical19,
  colorChartsPaletteCategorical20,
  colorChartsPaletteCategorical21,
  colorChartsPaletteCategorical22,
  colorChartsPaletteCategorical23,
  colorChartsPaletteCategorical24,
  colorChartsPaletteCategorical25,
  colorChartsPaletteCategorical26,
  colorChartsPaletteCategorical27,
  colorChartsPaletteCategorical28,
  colorChartsPaletteCategorical29,
  colorChartsPaletteCategorical30,
  colorChartsPaletteCategorical31,
  colorChartsPaletteCategorical32,
  colorChartsPaletteCategorical33,
  colorChartsPaletteCategorical34,
  colorChartsPaletteCategorical35,
  colorChartsPaletteCategorical36,
  colorChartsPaletteCategorical37,
  colorChartsPaletteCategorical38,
  colorChartsPaletteCategorical39,
  colorChartsPaletteCategorical40,
  colorChartsPaletteCategorical41,
  colorChartsPaletteCategorical42,
  colorChartsPaletteCategorical43,
  colorChartsPaletteCategorical44,
  colorChartsPaletteCategorical45,
  colorChartsPaletteCategorical46,
  colorChartsPaletteCategorical47,
  colorChartsPaletteCategorical48,
  colorChartsPaletteCategorical49,
  colorChartsPaletteCategorical50,
  lineHeightBodyM,
  borderPanelTopWidth,
  spaceScaledXxs,
  spaceXxxs,
  spaceXxs,
  spaceXs,
  ContainerHeaderContextProvider,
  useContainerHeader,
  StickyHeaderContext,
  useStickyHeader
};
//# sourceMappingURL=chunk-VJBAEPMW.js.map
