import {
  getMatchingBreakpoint
} from "./chunk-BPPGQ3MB.js";
import {
  useResizeObserver
} from "./chunk-SMWX7PPB.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@cloudscape-design/components/internal/context/link-default-variant-context.js
var import_react = __toESM(require_react());
var defaultValue = {
  defaultVariant: "secondary"
};
var LinkDefaultVariantContext = (0, import_react.createContext)(defaultValue);

// node_modules/@cloudscape-design/component-toolkit/container-queries/use-container-query.js
var import_react2 = __toESM(require_react());
function useContainerQuery(mapFn, deps = []) {
  const elementRef = (0, import_react2.useRef)(null);
  const [state, setState] = (0, import_react2.useState)(null);
  const getElement = (0, import_react2.useCallback)(() => elementRef.current, deps);
  useResizeObserver(getElement, (entry) => setState((prevState) => mapFn(entry, prevState)));
  return [state, elementRef];
}

// node_modules/@cloudscape-design/component-toolkit/use-controllable-state/use-controllable-state.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-intersection-observer/index.js
var import_react4 = __toESM(require_react());
function useIntersectionObserver({ initialState = false } = {}) {
  const observerRef = (0, import_react4.useRef)(null);
  const [isIntersecting, setIsIntersecting] = (0, import_react4.useState)(initialState);
  const ref = (0, import_react4.useCallback)((targetElement) => {
    if (typeof IntersectionObserver === "undefined") {
      return;
    }
    if (observerRef.current) {
      observerRef.current.disconnect();
    }
    if (targetElement) {
      let TopLevelIntersectionObserver = IntersectionObserver;
      try {
        if (window.top) {
          TopLevelIntersectionObserver = window.top.IntersectionObserver;
        }
      } catch (_a) {
      }
      observerRef.current = new TopLevelIntersectionObserver(([entry]) => setIsIntersecting(entry.isIntersecting));
      observerRef.current.observe(targetElement);
    }
  }, []);
  return { ref, isIntersecting };
}

// node_modules/@cloudscape-design/components/internal/hooks/container-queries/use-container-breakpoints.js
function useContainerBreakpoints(triggers) {
  const triggersDep = triggers === null || triggers === void 0 ? void 0 : triggers.join();
  return useContainerQuery((rect) => getMatchingBreakpoint(rect.contentBoxWidth, triggers), [triggersDep]);
}

// node_modules/@cloudscape-design/components/internal/context/form-field-context.js
var import_react5 = __toESM(require_react());
var FormFieldContext = (0, import_react5.createContext)({});
function applyDefault(fields, defaults, keys) {
  const result = {};
  keys.forEach((key) => {
    result[key] = fields[key] === void 0 ? defaults[key] : fields[key];
  });
  return result;
}
function useFormFieldContext(props) {
  const context = (0, import_react5.useContext)(FormFieldContext);
  return applyDefault(props, context, ["invalid", "warning", "controlId", "ariaLabelledby", "ariaDescribedby"]);
}

// node_modules/@cloudscape-design/components/internal/utils/calculate-once.js
function calculateOnce(callback) {
  let result = void 0;
  return () => {
    if (result === void 0) {
      result = callback();
    }
    return result;
  };
}

// node_modules/@cloudscape-design/components/internal/utils/browser-scrollbar-size.js
var browserScrollbarSize = calculateOnce(() => {
  if (typeof document === "undefined") {
    return { width: 0, height: 0 };
  }
  const scrollDiv = document.createElement("div");
  scrollDiv.style.overflow = "scroll";
  scrollDiv.style.height = "100px";
  scrollDiv.style.width = "100px";
  scrollDiv.style.position = "absolute";
  scrollDiv.style.top = "-9999px";
  scrollDiv.style.left = "-9999px";
  document.body.appendChild(scrollDiv);
  const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  const height = scrollDiv.offsetHeight - scrollDiv.clientHeight;
  document.body.removeChild(scrollDiv);
  return { width, height };
});

export {
  defaultValue,
  LinkDefaultVariantContext,
  useContainerQuery,
  browserScrollbarSize,
  useIntersectionObserver,
  useContainerBreakpoints,
  FormFieldContext,
  useFormFieldContext
};
//# sourceMappingURL=chunk-VHA5UUFY.js.map
