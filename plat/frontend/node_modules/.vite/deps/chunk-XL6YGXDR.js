import {
  InternalHeader
} from "./chunk-TBMJIGIX.js";
import {
  FormFieldContext,
  LinkDefaultVariantContext,
  browserScrollbarSize,
  defaultValue as defaultValue2,
  useContainerBreakpoints,
  useContainerQuery,
  useIntersectionObserver
} from "./chunk-VHA5UUFY.js";
import {
  CollectionLabelContext,
  InfoLinkLabelContext
} from "./chunk-OGO4BROP.js";
import {
  AnalyticsFunnel,
  AnalyticsFunnelStep,
  AnalyticsFunnelSubStep
} from "./chunk-B22ERMBU.js";
import {
  ButtonContext,
  InternalButton,
  KeyCode,
  SingleTabStopNavigationContext,
  defaultValue,
  fireNonCancelableEvent,
  focus_lock_default,
  useInternalI18n
} from "./chunk-4NOBSHFR.js";
import {
  FunnelNameSelectorContext,
  ModalContext,
  PerformanceMetrics,
  useFunnel,
  useFunnelStep,
  useFunnelSubStep
} from "./chunk-74OPMLS2.js";
import {
  DATA_ATTR_MODAL_ID,
  getAnalyticsMetadataAttribute
} from "./chunk-CRLP7JES.js";
import {
  Portal,
  __rest,
  applyDisplayName,
  clsx_m_default,
  getAnalyticsMetadataProps,
  getBaseProps,
  useBaseComponent,
  useMergeRefs,
  useUniqueId,
  useVisualRefresh
} from "./chunk-SMWX7PPB.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@cloudscape-design/components/modal/index.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/modal/internal.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/reset-contexts-for-modal.js
var import_react = __toESM(require_react());
var ResetContextsForModal = ({ children }) => import_react.default.createElement(
  ButtonContext.Provider,
  { value: { onClick: () => {
  } } },
  import_react.default.createElement(
    CollectionLabelContext.Provider,
    { value: { assignId: () => {
    } } },
    import_react.default.createElement(
      FormFieldContext.Provider,
      { value: {} },
      import_react.default.createElement(
        InfoLinkLabelContext.Provider,
        { value: "" },
        import_react.default.createElement(
          LinkDefaultVariantContext.Provider,
          { value: defaultValue2 },
          import_react.default.createElement(SingleTabStopNavigationContext.Provider, { value: defaultValue }, children)
        )
      )
    )
  )
);
var reset_contexts_for_modal_default = ResetContextsForModal;

// node_modules/@cloudscape-design/components/modal/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/modal/styles.scoped.css";
var styles_css_default = {
  "dialog": "awsui_dialog_1d2i7_1e7ip_169",
  "modal-slide-up": "awsui_modal-slide-up_1d2i7_1e7ip_1",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_1d2i7_1e7ip_1",
  "refresh": "awsui_refresh_1d2i7_1e7ip_192",
  "awsui-motion-scale-popup": "awsui_awsui-motion-scale-popup_1d2i7_1e7ip_1",
  "root": "awsui_root_1d2i7_1e7ip_225",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_1d2i7_1e7ip_1",
  "hidden": "awsui_hidden_1d2i7_1e7ip_302",
  "focus-lock": "awsui_focus-lock_1d2i7_1e7ip_306",
  "small": "awsui_small_1d2i7_1e7ip_326",
  "medium": "awsui_medium_1d2i7_1e7ip_329",
  "large": "awsui_large_1d2i7_1e7ip_332",
  "max": "awsui_max_1d2i7_1e7ip_335",
  "breakpoint-xs": "awsui_breakpoint-xs_1d2i7_1e7ip_335",
  "container": "awsui_container_1d2i7_1e7ip_341",
  "content": "awsui_content_1d2i7_1e7ip_382",
  "no-paddings": "awsui_no-paddings_1d2i7_1e7ip_387",
  "header": "awsui_header_1d2i7_1e7ip_392",
  "header--text": "awsui_header--text_1d2i7_1e7ip_404",
  "footer": "awsui_footer_1d2i7_1e7ip_408",
  "footer--stuck": "awsui_footer--stuck_1d2i7_1e7ip_417",
  "dismiss-control": "awsui_dismiss-control_1d2i7_1e7ip_429",
  "modal-open": "awsui_modal-open_1d2i7_1e7ip_433"
};

// node_modules/@cloudscape-design/components/modal/body-scroll.js
var initialBodyPaddingRightStyle = void 0;
function disableBodyScrolling() {
  setBodyScrollbarPadding();
  document.body.classList.add(styles_css_default["modal-open"]);
}
function enableBodyScrolling() {
  document.body.classList.remove(styles_css_default["modal-open"]);
  restoreBodyScrollbarPadding();
}
function setBodyScrollbarPadding() {
  if (bodyHasScrollbar()) {
    initialBodyPaddingRightStyle = document.body.style.paddingRight;
    const initialBodyPaddingRight = computedBodyPaddingRightPixels();
    const scrollbarWidth = browserScrollbarSize().width;
    const newBodyPaddingRight = initialBodyPaddingRight + scrollbarWidth;
    document.body.style.paddingRight = newBodyPaddingRight + "px";
  }
}
function computedBodyPaddingRightPixels() {
  return parseInt(window.getComputedStyle(document.body).paddingRight, 10);
}
function restoreBodyScrollbarPadding() {
  if (initialBodyPaddingRightStyle) {
    document.body.style.setProperty("padding-right", initialBodyPaddingRightStyle);
  } else {
    document.body.style.removeProperty("padding-right");
  }
  initialBodyPaddingRightStyle = void 0;
}
function bodyHasScrollbar() {
  return document.body.clientWidth < window.innerWidth;
}

// node_modules/@cloudscape-design/components/modal/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/modal/analytics-metadata/styles.scoped.css";
var styles_css_default2 = {
  "header": "awsui_header_15dxs_1ns0c_5"
};

// node_modules/@cloudscape-design/components/modal/internal.js
function InternalModalAsFunnel(props) {
  const { funnelProps, funnelSubmit, funnelNextOrSubmitAttempt } = useFunnel();
  const { funnelStepProps } = useFunnelStep();
  const { subStepRef, funnelSubStepProps } = useFunnelSubStep();
  const onButtonClick = ({ variant }) => {
    if (variant === "primary") {
      funnelNextOrSubmitAttempt();
      funnelSubmit();
    }
  };
  return import_react2.default.createElement(InternalModal, Object.assign({ __funnelProps: funnelProps, __funnelStepProps: funnelStepProps, __subStepRef: subStepRef, __subStepFunnelProps: funnelSubStepProps, onButtonClick }, props));
}
function InternalModal(_a) {
  var { modalRoot, getModalRoot, removeModalRoot } = _a, rest = __rest(_a, ["modalRoot", "getModalRoot", "removeModalRoot"]);
  return import_react2.default.createElement(
    Portal,
    { container: modalRoot, getContainer: getModalRoot, removeContainer: removeModalRoot },
    import_react2.default.createElement(PortaledModal, Object.assign({}, rest))
  );
}
function PortaledModal(_a) {
  var _b;
  var { size, visible, header, children, footer, disableContentPaddings, onButtonClick = () => {
  }, onDismiss, __internalRootRef = null, __injectAnalyticsComponentMetadata, __funnelProps, __funnelStepProps, __subStepRef, __subStepFunnelProps, referrerId } = _a, rest = __rest(_a, ["size", "visible", "header", "children", "footer", "disableContentPaddings", "onButtonClick", "onDismiss", "__internalRootRef", "__injectAnalyticsComponentMetadata", "__funnelProps", "__funnelStepProps", "__subStepRef", "__subStepFunnelProps", "referrerId"]);
  const instanceUniqueId = useUniqueId();
  const headerId = `${rest.id || instanceUniqueId}-header`;
  const lastMouseDownElementRef = (0, import_react2.useRef)(null);
  const [breakpoint, breakpointsRef] = useContainerBreakpoints(["xs"]);
  const i18n = useInternalI18n("modal");
  const closeAriaLabel = i18n("closeAriaLabel", rest.closeAriaLabel);
  const refObject = (0, import_react2.useRef)(null);
  const mergedRef = useMergeRefs(breakpointsRef, refObject, __internalRootRef);
  const isRefresh = useVisualRefresh();
  const baseProps = getBaseProps(rest);
  const analyticsComponentMetadata = {
    name: "awsui.Modal",
    label: `.${styles_css_default2.header} h2`
  };
  const metadataAttribute = __injectAnalyticsComponentMetadata ? getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata }) : {};
  const loadStartTime = (0, import_react2.useRef)(0);
  const loadCompleteTime = (0, import_react2.useRef)(0);
  const componentLoadingCount = (0, import_react2.useRef)(0);
  const performanceMetricLogged = (0, import_react2.useRef)(false);
  (0, import_react2.useEffect)(() => {
    return () => {
      enableBodyScrolling();
    };
  }, []);
  const resetModalPerformanceData = () => {
    loadStartTime.current = performance.now();
    loadCompleteTime.current = 0;
    performanceMetricLogged.current = false;
  };
  const emitTimeToContentReadyInModal = (loadCompleteTime2) => {
    var _a2;
    if (componentLoadingCount.current === 0 && loadStartTime.current && loadStartTime.current !== 0 && !performanceMetricLogged.current) {
      const timeToContentReadyInModal = loadCompleteTime2 - loadStartTime.current;
      PerformanceMetrics.modalPerformanceData({
        timeToContentReadyInModal,
        instanceIdentifier: instanceUniqueId,
        componentIdentifier: ((_a2 = headerRef.current) === null || _a2 === void 0 ? void 0 : _a2.textContent) || ""
      });
      performanceMetricLogged.current = true;
    }
  };
  const MODAL_READY_TIMEOUT = 100;
  (0, import_react2.useEffect)(() => {
    if (visible) {
      disableBodyScrolling();
      resetModalPerformanceData();
      setTimeout(() => {
        emitTimeToContentReadyInModal(loadStartTime.current);
      }, MODAL_READY_TIMEOUT);
    } else {
      enableBodyScrolling();
    }
  }, [visible]);
  (0, import_react2.useEffect)(() => {
    if (visible && refObject.current) {
      refObject.current.scrollTop = 0;
    }
  }, [visible]);
  const dismiss = (reason) => fireNonCancelableEvent(onDismiss, { reason });
  const onOverlayMouseDown = (event) => {
    lastMouseDownElementRef.current = event.target;
  };
  const onOverlayClick = (event) => {
    const overlay = refObject.current;
    const lastClicked = lastMouseDownElementRef.current;
    if (event.target === overlay && lastClicked === overlay) {
      dismiss("overlay");
    }
  };
  const onCloseButtonClick = () => dismiss("closeButton");
  const escKeyHandler = (event) => {
    if (event.keyCode === KeyCode.escape) {
      dismiss("keyboard");
    }
  };
  const { ref: stickySentinelRef, isIntersecting: footerStuck } = useIntersectionObserver();
  const [footerHeight, footerRef] = useContainerQuery((rect) => rect.borderBoxHeight);
  const headerRef = (0, import_react2.useRef)(null);
  const { subStepRef } = useFunnelSubStep();
  return import_react2.default.createElement(
    FunnelNameSelectorContext.Provider,
    { value: `.${styles_css_default["header--text"]}` },
    import_react2.default.createElement(
      reset_contexts_for_modal_default,
      null,
      import_react2.default.createElement(
        ModalContext.Provider,
        { value: {
          isInModal: true,
          componentLoadingCount,
          emitTimeToContentReadyInModal
        } },
        import_react2.default.createElement(
          "div",
          Object.assign({}, baseProps, __funnelProps, __funnelStepProps, { className: clsx_m_default(styles_css_default.root, { [styles_css_default.hidden]: !visible }, baseProps.className, isRefresh && styles_css_default.refresh), role: "dialog", "aria-labelledby": headerId, onMouseDown: onOverlayMouseDown, onClick: onOverlayClick, ref: mergedRef, style: footerHeight ? { scrollPaddingBottom: footerHeight } : void 0, "data-awsui-referrer-id": ((_b = subStepRef.current) === null || _b === void 0 ? void 0 : _b.id) || referrerId }),
          import_react2.default.createElement(
            focus_lock_default,
            { disabled: !visible, autoFocus: true, restoreFocus: true, className: styles_css_default["focus-lock"] },
            import_react2.default.createElement(
              "div",
              Object.assign({ className: clsx_m_default(styles_css_default.dialog, styles_css_default[size], styles_css_default[`breakpoint-${breakpoint}`], isRefresh && styles_css_default.refresh), onKeyDown: escKeyHandler }, metadataAttribute),
              import_react2.default.createElement(
                "div",
                { className: styles_css_default.container },
                import_react2.default.createElement(
                  "div",
                  { className: clsx_m_default(styles_css_default.header, styles_css_default2.header) },
                  import_react2.default.createElement(
                    InternalHeader,
                    { variant: "h2", __disableActionsWrapping: true, actions: import_react2.default.createElement(
                      "div",
                      Object.assign({}, getAnalyticsMetadataAttribute({
                        action: "dismiss"
                      })),
                      import_react2.default.createElement(InternalButton, { ariaLabel: closeAriaLabel, className: styles_css_default["dismiss-control"], variant: "modal-dismiss", iconName: "close", formAction: "none", onClick: onCloseButtonClick })
                    ) },
                    import_react2.default.createElement("span", { ref: headerRef, id: headerId, className: styles_css_default["header--text"] }, header)
                  )
                ),
                import_react2.default.createElement(
                  "div",
                  Object.assign({ ref: __subStepRef }, __subStepFunnelProps, { className: clsx_m_default(styles_css_default.content, { [styles_css_default["no-paddings"]]: disableContentPaddings }) }),
                  children,
                  import_react2.default.createElement("div", { ref: stickySentinelRef })
                ),
                footer && import_react2.default.createElement(
                  ButtonContext.Provider,
                  { value: { onClick: onButtonClick } },
                  import_react2.default.createElement("div", { ref: footerRef, className: clsx_m_default(styles_css_default.footer, footerStuck && styles_css_default["footer--stuck"]) }, footer)
                )
              )
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/modal/index.js
function ModalWithAnalyticsFunnel(_a) {
  var { analyticsMetadata, baseComponentProps, size = "medium" } = _a, props = __rest(_a, ["analyticsMetadata", "baseComponentProps", "size"]);
  const modalId = useUniqueId();
  const dataAttributes = {
    [DATA_ATTR_MODAL_ID]: modalId
  };
  return import_react3.default.createElement(
    AnalyticsFunnel,
    { mounted: props.visible, funnelIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, funnelFlowType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.flowType, funnelErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, funnelResourceType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType, funnelType: "modal", optionalStepNumbers: [], totalFunnelSteps: 1, funnelNameSelectors: () => {
      var _a2;
      return [
        `[${DATA_ATTR_MODAL_ID}="${(_a2 = window === null || window === void 0 ? void 0 : window.CSS) === null || _a2 === void 0 ? void 0 : _a2.escape(modalId)}"] .${styles_css_default["header--text"]}`
      ];
    } },
    import_react3.default.createElement(
      AnalyticsFunnelStep,
      { mounted: props.visible, stepIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, stepErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, stepNumber: 1 },
      import_react3.default.createElement(
        AnalyticsFunnelSubStep,
        { subStepIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, subStepErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext },
        import_react3.default.createElement(InternalModalAsFunnel, Object.assign({ size }, props, baseComponentProps, dataAttributes, { __injectAnalyticsComponentMetadata: true }))
      )
    )
  );
}
function Modal(_a) {
  var { size = "medium" } = _a, props = __rest(_a, ["size"]);
  const { isInFunnel } = useFunnel();
  const analyticsMetadata = getAnalyticsMetadataProps(props);
  const baseComponentProps = useBaseComponent("Modal", {
    props: {
      size,
      disableContentPaddings: props.disableContentPaddings,
      flowType: analyticsMetadata.flowType
    },
    metadata: {
      hasResourceType: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType),
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier)
    }
  }, analyticsMetadata);
  if (!isInFunnel) {
    return import_react3.default.createElement(ModalWithAnalyticsFunnel, Object.assign({ analyticsMetadata, baseComponentProps, size }, props));
  }
  return import_react3.default.createElement(InternalModal, Object.assign({ size }, props, baseComponentProps, { __injectAnalyticsComponentMetadata: true }));
}
applyDisplayName(Modal, "Modal");

export {
  reset_contexts_for_modal_default,
  InternalModal,
  Modal
};
//# sourceMappingURL=chunk-XL6YGXDR.js.map
