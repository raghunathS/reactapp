import {
  _defineProperty,
  toPropertyKey
} from "./chunk-ORYCV7AL.js";
import {
  _typeof
} from "./chunk-D7ZASVPN.js";
import {
  Box,
  InternalBox
} from "./chunk-QLYJHP6X.js";
import {
  Header
} from "./chunk-WMPVIKL5.js";
import {
  SpaceBetween
} from "./chunk-NIGKZXG4.js";
import {
  AbstractSwitch,
  AsyncStore,
  CollectionPreferencesMetadata,
  ConstraintText,
  ExpandToggleButton,
  FormFieldError,
  FormFieldWarning,
  InternalFormField,
  ScreenreaderOnly,
  SelectionControl,
  StatusIndicator,
  ToolsHeader,
  VisualContext,
  checkbox_icon_default,
  focusMarkers,
  getItemKey,
  getVisualContextClassname,
  handleKey,
  internal_default as internal_default5,
  internal_default2 as internal_default6,
  internal_default3 as internal_default7,
  joinStrings,
  padLeftZeros,
  radio_button_default,
  stickyScrolling,
  styles_css_default as styles_css_default3,
  styles_css_default2 as styles_css_default4,
  table_default,
  useMouseDownTarget,
  usePortalModeClasses,
  usePrevious,
  useReaction,
  useSelection,
  useSelectionFocusMove,
  useSelector
} from "./chunk-A2X632MI.js";
import {
  flattenChildren,
  internal_default as internal_default4
} from "./chunk-UNPLXYSB.js";
import "./chunk-NJ4M7LHR.js";
import {
  InternalModal,
  Modal,
  reset_contexts_for_modal_default
} from "./chunk-XL6YGXDR.js";
import {
  Description,
  InternalHeader,
  parseCountValue
} from "./chunk-TBMJIGIX.js";
import {
  FormFieldContext,
  LinkDefaultVariantContext,
  browserScrollbarSize,
  useContainerBreakpoints,
  useContainerQuery,
  useFormFieldContext,
  useIntersectionObserver
} from "./chunk-VHA5UUFY.js";
import {
  CollectionLabelContext,
  InfoLinkLabelContext,
  styles_css_default as styles_css_default2,
  useTableComponentsContext
} from "./chunk-OGO4BROP.js";
import {
  container_default,
  getExternalProps
} from "./chunk-25HS6NW4.js";
import {
  InternalContainer,
  InternalContainerAsSubstep
} from "./chunk-ZAK6H4NA.js";
import {
  AnalyticsFunnel,
  AnalyticsFunnelStep,
  AnalyticsFunnelSubStep,
  debounce,
  useDebounceCallback
} from "./chunk-B22ERMBU.js";
import {
  borderPanelTopWidth,
  colorChartsPaletteCategorical1,
  colorChartsPaletteCategorical10,
  colorChartsPaletteCategorical11,
  colorChartsPaletteCategorical12,
  colorChartsPaletteCategorical13,
  colorChartsPaletteCategorical14,
  colorChartsPaletteCategorical15,
  colorChartsPaletteCategorical16,
  colorChartsPaletteCategorical17,
  colorChartsPaletteCategorical18,
  colorChartsPaletteCategorical19,
  colorChartsPaletteCategorical2,
  colorChartsPaletteCategorical20,
  colorChartsPaletteCategorical21,
  colorChartsPaletteCategorical22,
  colorChartsPaletteCategorical23,
  colorChartsPaletteCategorical24,
  colorChartsPaletteCategorical25,
  colorChartsPaletteCategorical26,
  colorChartsPaletteCategorical27,
  colorChartsPaletteCategorical28,
  colorChartsPaletteCategorical29,
  colorChartsPaletteCategorical3,
  colorChartsPaletteCategorical30,
  colorChartsPaletteCategorical31,
  colorChartsPaletteCategorical32,
  colorChartsPaletteCategorical33,
  colorChartsPaletteCategorical34,
  colorChartsPaletteCategorical35,
  colorChartsPaletteCategorical36,
  colorChartsPaletteCategorical37,
  colorChartsPaletteCategorical38,
  colorChartsPaletteCategorical39,
  colorChartsPaletteCategorical4,
  colorChartsPaletteCategorical40,
  colorChartsPaletteCategorical41,
  colorChartsPaletteCategorical42,
  colorChartsPaletteCategorical43,
  colorChartsPaletteCategorical44,
  colorChartsPaletteCategorical45,
  colorChartsPaletteCategorical46,
  colorChartsPaletteCategorical47,
  colorChartsPaletteCategorical48,
  colorChartsPaletteCategorical49,
  colorChartsPaletteCategorical5,
  colorChartsPaletteCategorical50,
  colorChartsPaletteCategorical6,
  colorChartsPaletteCategorical7,
  colorChartsPaletteCategorical8,
  colorChartsPaletteCategorical9,
  colorChartsThresholdNeutral,
  getBreakpointValue,
  global_vars_default,
  lineHeightBodyM,
  matchBreakpointMapping,
  spaceScaledXxs,
  spaceXs,
  spaceXxs,
  spaceXxxs,
  useMobile
} from "./chunk-BPPGQ3MB.js";
import {
  button_default
} from "./chunk-OMWZSLET.js";
import {
  ButtonContext,
  InternalButton,
  InternalSpinner,
  KeyCode,
  PopoverBody,
  PopoverContainer,
  SingleTabStopNavigationProvider,
  TabTrap,
  Tooltip,
  Transition,
  arrow_default,
  checkSafeUrl,
  custom_css_properties_default,
  fireCancelableEvent,
  fireKeyboardEvent,
  fireNonCancelableEvent,
  focus_lock_default,
  getAllFocusables,
  getFirstFocusable,
  getLastFocusable,
  hasModifierKeys,
  internal_default,
  internal_default2,
  internal_default3,
  isFocusable,
  isPlainLeftClick,
  styles_css_default,
  useEffectOnUpdate,
  useForwardFocus,
  useHiddenDescription,
  useInternalI18n,
  useLocale,
  useSingleTabStopNavigation
} from "./chunk-4NOBSHFR.js";
import {
  CSSTransition_default,
  TransitionGroup_default,
  Transition_default,
  _assertThisInitialized,
  _setPrototypeOf
} from "./chunk-AVP52BKS.js";
import "./chunk-7TYQWO6A.js";
import {
  FunnelMetrics,
  nodeBelongs,
  parseCssVariable,
  useFunnel,
  useFunnelNameSelector,
  useFunnelStep,
  useFunnelStepRef,
  useFunnelSubStep
} from "./chunk-74OPMLS2.js";
import {
  DATA_ATTR_ANALYTICS_ALERT,
  DATA_ATTR_ANALYTICS_FLASHBAR,
  DATA_ATTR_ANALYTICS_SUPPRESS_FLOW_EVENTS,
  DATA_ATTR_FUNNEL_KEY,
  DATA_ATTR_FUNNEL_VALUE,
  DATA_ATTR_RESOURCE_TYPE,
  FUNNEL_KEY_FUNNEL_NAME,
  FUNNEL_KEY_STEP_NAME,
  copyAnalyticsMetadataAttribute,
  getAnalyticsLabelAttribute,
  getAnalyticsMetadataAttribute,
  getFunnelValueSelector,
  getOverflowParentDimensions,
  getOverflowParents,
  getSubStepAllSelector,
  getTextFromSelector,
  scrollElementIntoView
} from "./chunk-CRLP7JES.js";
import {
  PACKAGE_VERSION,
  Portal,
  SYSTEM,
  __awaiter,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __rest,
  applyDisplayName,
  clsx_m_default,
  findUpUntil,
  getAnalyticsMetadataProps,
  getBaseProps,
  getGlobalFlag,
  getIsRtl,
  getLogicalBoundingClientRect,
  getLogicalClientX,
  getOffsetInlineStart,
  getScrollInlineStart,
  isDevelopment,
  isDevelopment2,
  isModifierKey,
  isMotionDisabled,
  metrics,
  nodeContains,
  useBaseComponent,
  useComponentMetadata,
  useCurrentMode,
  useDensityMode,
  useMergeRefs,
  useReducedMotion,
  useResizeObserver,
  useStableCallback,
  useUniqueId,
  useVisualRefresh,
  validateProps,
  warnOnce
} from "./chunk-SMWX7PPB.js";
import {
  require_react_dom
} from "./chunk-GKJBSOWT.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@cloudscape-design/components/alert/index.js
var import_react5 = __toESM(require_react());

// node_modules/@cloudscape-design/components/alert/internal.js
var import_react4 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/plugins/helpers/utils.js
function sortByPriority(items) {
  return items.slice().sort((a4, b2) => {
    var _a, _b;
    if (b2.orderPriority !== a4.orderPriority) {
      return Math.sign(((_a = b2.orderPriority) !== null && _a !== void 0 ? _a : 0) - ((_b = a4.orderPriority) !== null && _b !== void 0 ? _b : 0));
    }
    return b2.id < a4.id ? 1 : -1;
  });
}

// node_modules/@cloudscape-design/components/internal/plugins/controllers/action-buttons.js
var ActionButtonsController = class {
  constructor() {
    this.listeners = [];
    this.actions = [];
    this.scheduleUpdate = debounce(() => {
      this.listeners.forEach((listener) => listener(this.actions));
    }, 0);
    this.registerAction = (action) => {
      this.actions.push(action);
      this.actions = sortByPriority(this.actions);
      this.scheduleUpdate();
    };
    this.clearRegisteredActions = () => {
      this.actions = [];
    };
    this.onActionRegistered = (listener) => {
      this.listeners.push(listener);
      this.scheduleUpdate();
      return () => {
        this.listeners = this.listeners.filter((item) => item !== listener);
      };
    };
  }
  installPublic(api = {}) {
    var _a;
    (_a = api.registerAction) !== null && _a !== void 0 ? _a : api.registerAction = this.registerAction;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a, _b;
    (_a = internalApi.clearRegisteredActions) !== null && _a !== void 0 ? _a : internalApi.clearRegisteredActions = this.clearRegisteredActions;
    (_b = internalApi.onActionRegistered) !== null && _b !== void 0 ? _b : internalApi.onActionRegistered = this.onActionRegistered;
    return internalApi;
  }
};

// node_modules/@cloudscape-design/components/internal/plugins/helpers/metrics.js
function reportRuntimeApiLoadMetric() {
  metrics.sendPanoramaMetric({ eventContext: "awsui-runtime-api-loaded", eventDetail: { version: PACKAGE_VERSION } });
}
function reportRuntimeApiWarning(component, message) {
  console.warn("[AwsUi]", `[${component}]`, message);
  metrics.sendPanoramaMetric({
    eventContext: "awsui-runtime-api-warning",
    eventDetail: { version: PACKAGE_VERSION, component, message }
  });
}

// node_modules/@cloudscape-design/components/internal/plugins/controllers/alert-flash-content.js
var _AlertFlashContentController_listeners;
var _AlertFlashContentController_cleanups;
var _AlertFlashContentController_provider;
var _AlertFlashContentController_scheduleUpdate;
var AlertFlashContentController = class {
  constructor() {
    _AlertFlashContentController_listeners.set(this, []);
    _AlertFlashContentController_cleanups.set(this, /* @__PURE__ */ new Map());
    _AlertFlashContentController_provider.set(this, void 0);
    _AlertFlashContentController_scheduleUpdate.set(this, debounce(() => __classPrivateFieldGet(this, _AlertFlashContentController_listeners, "f").forEach((listener) => {
      if (__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f")) {
        const cleanup = listener(__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f"));
        __classPrivateFieldGet(this, _AlertFlashContentController_cleanups, "f").set(listener, cleanup);
      }
    }), 0));
    this.registerContentReplacer = (content) => {
      if (__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f")) {
        reportRuntimeApiWarning("alert-flash-content", `Cannot call \`registerContentReplacer\` with new provider: provider with id "${__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f").id}" already registered.`);
        return;
      }
      __classPrivateFieldSet(this, _AlertFlashContentController_provider, content, "f");
      __classPrivateFieldGet(this, _AlertFlashContentController_scheduleUpdate, "f").call(this);
    };
    this.clearRegisteredReplacer = () => {
      __classPrivateFieldSet(this, _AlertFlashContentController_provider, void 0, "f");
    };
    this.initialCheck = (context) => {
      var _a;
      if ((_a = __classPrivateFieldGet(this, _AlertFlashContentController_provider, "f")) === null || _a === void 0 ? void 0 : _a.initialCheck) {
        return __classPrivateFieldGet(this, _AlertFlashContentController_provider, "f").initialCheck(context);
      }
      return false;
    };
    this.onContentRegistered = (listener) => {
      if (__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f")) {
        const cleanup = listener(__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f"));
        __classPrivateFieldGet(this, _AlertFlashContentController_listeners, "f").push(listener);
        __classPrivateFieldGet(this, _AlertFlashContentController_cleanups, "f").set(listener, cleanup);
      } else {
        __classPrivateFieldGet(this, _AlertFlashContentController_listeners, "f").push(listener);
      }
      return () => {
        var _a;
        (_a = __classPrivateFieldGet(this, _AlertFlashContentController_cleanups, "f").get(listener)) === null || _a === void 0 ? void 0 : _a();
        __classPrivateFieldSet(this, _AlertFlashContentController_listeners, __classPrivateFieldGet(this, _AlertFlashContentController_listeners, "f").filter((item) => item !== listener), "f");
        __classPrivateFieldGet(this, _AlertFlashContentController_cleanups, "f").delete(listener);
      };
    };
  }
  installPublic(api = {}) {
    var _a;
    (_a = api.registerContentReplacer) !== null && _a !== void 0 ? _a : api.registerContentReplacer = this.registerContentReplacer;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a, _b, _c;
    (_a = internalApi.clearRegisteredReplacer) !== null && _a !== void 0 ? _a : internalApi.clearRegisteredReplacer = this.clearRegisteredReplacer;
    (_b = internalApi.onContentRegistered) !== null && _b !== void 0 ? _b : internalApi.onContentRegistered = this.onContentRegistered;
    (_c = internalApi.initialCheck) !== null && _c !== void 0 ? _c : internalApi.initialCheck = this.initialCheck;
    return internalApi;
  }
};
_AlertFlashContentController_listeners = /* @__PURE__ */ new WeakMap(), _AlertFlashContentController_cleanups = /* @__PURE__ */ new WeakMap(), _AlertFlashContentController_provider = /* @__PURE__ */ new WeakMap(), _AlertFlashContentController_scheduleUpdate = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/internal/plugins/controllers/app-layout-widget.js
var _AppLayoutWidgetController_registrations;
var _AppLayoutWidgetController_findPrimary;
var _AppLayoutWidgetController_update;
var _AppLayoutWidgetController_scheduleUpdate;
var AppLayoutWidgetController = class {
  constructor() {
    _AppLayoutWidgetController_registrations.set(this, []);
    _AppLayoutWidgetController_findPrimary.set(this, () => {
      const forcedPrimary = __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").find((registration) => registration.forceType === "primary");
      if (forcedPrimary) {
        return forcedPrimary;
      }
      for (const registration of __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").slice()) {
        if (registration.forceType !== "secondary") {
          return registration;
        }
      }
      return void 0;
    });
    _AppLayoutWidgetController_update.set(this, () => {
      const primary = __classPrivateFieldGet(this, _AppLayoutWidgetController_findPrimary, "f").call(this);
      const discoveredProps = __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").filter((registration) => registration !== primary).map((registration) => registration.props);
      for (const registration of __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f")) {
        if (registration === primary) {
          registration.onChange({
            type: "primary",
            discoveredProps
          });
        } else {
          registration.onChange(registration.secondaryInstance);
        }
      }
    });
    _AppLayoutWidgetController_scheduleUpdate.set(this, debounce(() => __classPrivateFieldGet(this, _AppLayoutWidgetController_update, "f").call(this), 0));
    this.register = (forceType, onRegistrationChange) => {
      const hasForcedPrimary = __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").some((instance) => instance.forceType === "primary");
      if (forceType === "primary" && hasForcedPrimary) {
        throw new Error("Double primary registration attempt");
      }
      const registration = {
        forceType,
        onChange: onRegistrationChange,
        props: {},
        secondaryInstance: {
          type: "secondary",
          update: (props2) => {
            registration.props = props2;
            __classPrivateFieldGet(this, _AppLayoutWidgetController_scheduleUpdate, "f").call(this);
          }
        }
      };
      __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").push(registration);
      __classPrivateFieldGet(this, _AppLayoutWidgetController_update, "f").call(this);
      return () => {
        __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").splice(__classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").indexOf(registration), 1);
        __classPrivateFieldGet(this, _AppLayoutWidgetController_scheduleUpdate, "f").call(this);
      };
    };
    this.getStateForTesting = () => {
      return {
        registrations: __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f")
      };
    };
    this.installInternal = (internalApi = {}) => {
      var _a, _b;
      (_a = internalApi.register) !== null && _a !== void 0 ? _a : internalApi.register = this.register;
      (_b = internalApi.getStateForTesting) !== null && _b !== void 0 ? _b : internalApi.getStateForTesting = this.getStateForTesting;
      return internalApi;
    };
  }
};
_AppLayoutWidgetController_registrations = /* @__PURE__ */ new WeakMap(), _AppLayoutWidgetController_findPrimary = /* @__PURE__ */ new WeakMap(), _AppLayoutWidgetController_update = /* @__PURE__ */ new WeakMap(), _AppLayoutWidgetController_scheduleUpdate = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/internal/plugins/controllers/breadcrumbs.js
var _BreadcrumbsController_appLayoutUpdateCallback;
var _BreadcrumbsController_breadcrumbInstances;
var _BreadcrumbsController_breadcrumbRegistrations;
var _BreadcrumbsController_notifyAppLayout;
var _BreadcrumbsController_notifyBreadcrumbs;
var BreadcrumbsController = class {
  constructor() {
    _BreadcrumbsController_appLayoutUpdateCallback.set(this, null);
    _BreadcrumbsController_breadcrumbInstances.set(this, []);
    _BreadcrumbsController_breadcrumbRegistrations.set(this, []);
    _BreadcrumbsController_notifyAppLayout.set(this, debounce(() => {
      var _a;
      if (!__classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f")) {
        return;
      }
      const latestBreadcrumb = __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f")[__classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f").length - 1];
      __classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f").call(this, (_a = latestBreadcrumb === null || latestBreadcrumb === void 0 ? void 0 : latestBreadcrumb.props) !== null && _a !== void 0 ? _a : null);
    }, 0));
    _BreadcrumbsController_notifyBreadcrumbs.set(this, debounce(() => {
      __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f").forEach((listener) => listener(!!__classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f")));
    }, 0));
    this.registerAppLayout = (changeCallback) => {
      if (__classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f")) {
        return;
      }
      __classPrivateFieldSet(this, _BreadcrumbsController_appLayoutUpdateCallback, changeCallback, "f");
      __classPrivateFieldGet(this, _BreadcrumbsController_notifyBreadcrumbs, "f").call(this);
      return () => {
        __classPrivateFieldSet(this, _BreadcrumbsController_appLayoutUpdateCallback, null, "f");
        __classPrivateFieldGet(this, _BreadcrumbsController_notifyBreadcrumbs, "f").call(this);
      };
    };
    this.registerBreadcrumbs = (props2, onRegistered) => {
      const instance = { props: props2 };
      __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f").push(instance);
      __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f").push(onRegistered);
      __classPrivateFieldGet(this, _BreadcrumbsController_notifyBreadcrumbs, "f").call(this);
      __classPrivateFieldGet(this, _BreadcrumbsController_notifyAppLayout, "f").call(this);
      return {
        update: (props3) => {
          instance.props = props3;
          __classPrivateFieldGet(this, _BreadcrumbsController_notifyAppLayout, "f").call(this);
        },
        cleanup: () => {
          __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f").splice(__classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f").indexOf(instance), 1);
          __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f").splice(__classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f").indexOf(onRegistered), 1);
          __classPrivateFieldGet(this, _BreadcrumbsController_notifyAppLayout, "f").call(this);
        }
      };
    };
    this.getStateForTesting = () => {
      return {
        appLayoutUpdateCallback: __classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f"),
        breadcrumbInstances: __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f"),
        breadcrumbRegistrations: __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f")
      };
    };
  }
  installInternal(internalApi = {}) {
    var _a, _b, _c;
    (_a = internalApi.registerBreadcrumbs) !== null && _a !== void 0 ? _a : internalApi.registerBreadcrumbs = this.registerBreadcrumbs;
    (_b = internalApi.registerAppLayout) !== null && _b !== void 0 ? _b : internalApi.registerAppLayout = this.registerAppLayout;
    (_c = internalApi.getStateForTesting) !== null && _c !== void 0 ? _c : internalApi.getStateForTesting = this.getStateForTesting;
    return internalApi;
  }
};
_BreadcrumbsController_appLayoutUpdateCallback = /* @__PURE__ */ new WeakMap(), _BreadcrumbsController_breadcrumbInstances = /* @__PURE__ */ new WeakMap(), _BreadcrumbsController_breadcrumbRegistrations = /* @__PURE__ */ new WeakMap(), _BreadcrumbsController_notifyAppLayout = /* @__PURE__ */ new WeakMap(), _BreadcrumbsController_notifyBreadcrumbs = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/internal/plugins/controllers/drawers.js
var updatableProperties = [
  "badge",
  "resizable",
  "defaultSize",
  "orderPriority",
  "defaultActive",
  "onResize"
];
var DrawersController = class {
  constructor() {
    this.drawers = [];
    this.drawersRegistrationListener = null;
    this.drawerOpenedListener = null;
    this.drawerClosedListener = null;
    this.drawersUpdateListeners = [];
    this.scheduleUpdate = debounce(() => {
      var _a;
      (_a = this.drawersRegistrationListener) === null || _a === void 0 ? void 0 : _a.call(this, this.drawers);
      this.drawersUpdateListeners.forEach((drawersUpdateListeners) => {
        drawersUpdateListeners === null || drawersUpdateListeners === void 0 ? void 0 : drawersUpdateListeners(this.drawers);
      });
    }, 0);
    this.registerDrawer = (config) => {
      if (this.drawers.find((drawer) => drawer.id === config.id)) {
        reportRuntimeApiWarning("app-layout-drawers", `drawer with id "${config.id}" is already registered`);
      }
      this.drawers = this.drawers.concat(config);
      this.scheduleUpdate();
    };
    this.updateDrawer = (_a) => {
      var _b;
      var { id: drawerId } = _a, rest = __rest(_a, ["id"]);
      const drawerIndex = this.drawers.findIndex(({ id }) => id === drawerId);
      const oldDrawerConfig = (_b = this.drawers) === null || _b === void 0 ? void 0 : _b[drawerIndex];
      if (!oldDrawerConfig) {
        throw new Error(`[AwsUi] [runtime drawers] drawer with id ${drawerId} not found`);
      }
      const drawers = this.drawers.slice();
      const updatedDrawer = Object.assign({}, oldDrawerConfig);
      for (const key2 of updatableProperties) {
        if (key2 in rest) {
          updatedDrawer[key2] = rest[key2];
        }
      }
      drawers[drawerIndex] = updatedDrawer;
      this.drawers = drawers;
      this.scheduleUpdate();
    };
    this.onDrawersRegistered = (listener) => {
      if (this.drawersRegistrationListener !== null) {
        reportRuntimeApiWarning("app-layout-drawers", "multiple app layout instances detected when calling onDrawersRegistered");
      }
      this.drawersRegistrationListener = listener;
      this.scheduleUpdate();
      return () => {
        this.drawersRegistrationListener = null;
        this.drawersUpdateListeners = [];
      };
    };
    this.clearRegisteredDrawers = () => {
      this.drawers = [];
    };
    this.onDrawerOpened = (listener) => {
      if (this.drawerOpenedListener !== null) {
        reportRuntimeApiWarning("app-layout-drawers", "multiple app layout instances detected when calling onDrawerOpened");
      }
      this.drawerOpenedListener = listener;
      return () => {
        this.drawerOpenedListener = null;
      };
    };
    this.onDrawerClosed = (listener) => {
      if (this.drawerClosedListener !== null) {
        reportRuntimeApiWarning("app-layout-drawers", "multiple app layout instances detected when calling onDrawerClosed");
      }
      this.drawerClosedListener = listener;
      return () => {
        this.drawerClosedListener = null;
      };
    };
    this.openDrawer = (drawerId, params) => {
      var _a;
      (_a = this.drawerOpenedListener) === null || _a === void 0 ? void 0 : _a.call(this, drawerId, params);
    };
    this.closeDrawer = (drawerId, params) => {
      var _a;
      (_a = this.drawerClosedListener) === null || _a === void 0 ? void 0 : _a.call(this, drawerId, params);
    };
    this.onDrawersUpdated = (listener) => {
      this.drawersUpdateListeners.push(listener);
      return () => {
        this.drawersUpdateListeners = this.drawersUpdateListeners.filter((item) => item !== listener);
      };
    };
    this.getDrawersState = () => {
      return this.drawers;
    };
  }
  installPublic(api = {}) {
    var _a, _b, _c, _d;
    (_a = api.registerDrawer) !== null && _a !== void 0 ? _a : api.registerDrawer = this.registerDrawer;
    (_b = api.updateDrawer) !== null && _b !== void 0 ? _b : api.updateDrawer = this.updateDrawer;
    (_c = api.openDrawer) !== null && _c !== void 0 ? _c : api.openDrawer = this.openDrawer;
    (_d = api.closeDrawer) !== null && _d !== void 0 ? _d : api.closeDrawer = this.closeDrawer;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a, _b, _c, _d, _e, _f;
    (_a = internalApi.clearRegisteredDrawers) !== null && _a !== void 0 ? _a : internalApi.clearRegisteredDrawers = this.clearRegisteredDrawers;
    (_b = internalApi.onDrawersRegistered) !== null && _b !== void 0 ? _b : internalApi.onDrawersRegistered = this.onDrawersRegistered;
    (_c = internalApi.onDrawerOpened) !== null && _c !== void 0 ? _c : internalApi.onDrawerOpened = this.onDrawerOpened;
    (_d = internalApi.onDrawerClosed) !== null && _d !== void 0 ? _d : internalApi.onDrawerClosed = this.onDrawerClosed;
    (_e = internalApi.onDrawersUpdated) !== null && _e !== void 0 ? _e : internalApi.onDrawersUpdated = this.onDrawersUpdated;
    (_f = internalApi.getDrawersState) !== null && _f !== void 0 ? _f : internalApi.getDrawersState = this.getDrawersState;
    return internalApi;
  }
};

// node_modules/@cloudscape-design/components/internal/plugins/controllers/shared-react-contexts.js
var _SharedReactContexts_registeredContexts;
var SharedReactContexts = class {
  constructor() {
    _SharedReactContexts_registeredContexts.set(this, /* @__PURE__ */ new WeakMap());
    this.createContext = (ReactInstance, contextName) => {
      let contexts = __classPrivateFieldGet(this, _SharedReactContexts_registeredContexts, "f").get(ReactInstance);
      if (!contexts) {
        contexts = /* @__PURE__ */ new Map();
        __classPrivateFieldGet(this, _SharedReactContexts_registeredContexts, "f").set(ReactInstance, contexts);
      }
      let cachedContext = contexts.get(contextName);
      if (!cachedContext) {
        cachedContext = ReactInstance.createContext(void 0);
        contexts.set(contextName, cachedContext);
      }
      return cachedContext;
    };
  }
  installInternal(internalApi = {}) {
    var _a;
    (_a = internalApi.createContext) !== null && _a !== void 0 ? _a : internalApi.createContext = this.createContext;
    return internalApi;
  }
};
_SharedReactContexts_registeredContexts = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/internal/plugins/api.js
var storageKey = Symbol.for("awsui-plugin-api");
function findUpApi(currentWindow) {
  try {
    if (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow[storageKey]) {
      return currentWindow[storageKey];
    }
    if (!currentWindow || currentWindow.parent === currentWindow) {
      return void 0;
    }
    return findUpApi(currentWindow.parent);
  } catch (ex) {
    return void 0;
  }
}
function loadApi() {
  if (typeof window === "undefined") {
    return installApi({});
  }
  const win = window;
  const existingApi = findUpApi(win);
  if (!existingApi) {
    reportRuntimeApiLoadMetric();
  }
  win[storageKey] = installApi(existingApi !== null && existingApi !== void 0 ? existingApi : {});
  return win[storageKey];
}
var { awsuiPlugins, awsuiPluginsInternal } = loadApi();
function installApi(api) {
  var _a, _b;
  (_a = api.awsuiPlugins) !== null && _a !== void 0 ? _a : api.awsuiPlugins = {};
  (_b = api.awsuiPluginsInternal) !== null && _b !== void 0 ? _b : api.awsuiPluginsInternal = {};
  const appLayoutDrawers = new DrawersController();
  api.awsuiPlugins.appLayout = appLayoutDrawers.installPublic(api.awsuiPlugins.appLayout);
  api.awsuiPluginsInternal.appLayout = appLayoutDrawers.installInternal(api.awsuiPluginsInternal.appLayout);
  const appLayoutController = new AppLayoutWidgetController();
  api.awsuiPluginsInternal.appLayoutWidget = appLayoutController.installInternal(api.awsuiPluginsInternal.appLayoutWidget);
  const alertActions = new ActionButtonsController();
  api.awsuiPlugins.alert = alertActions.installPublic(api.awsuiPlugins.alert);
  api.awsuiPluginsInternal.alert = alertActions.installInternal(api.awsuiPluginsInternal.alert);
  const alertContent = new AlertFlashContentController();
  api.awsuiPlugins.alertContent = alertContent.installPublic(api.awsuiPlugins.alertContent);
  api.awsuiPluginsInternal.alertContent = alertContent.installInternal(api.awsuiPluginsInternal.alertContent);
  const flashContent = new AlertFlashContentController();
  api.awsuiPlugins.flashContent = flashContent.installPublic(api.awsuiPlugins.flashContent);
  api.awsuiPluginsInternal.flashContent = flashContent.installInternal(api.awsuiPluginsInternal.flashContent);
  const flashbarActions = new ActionButtonsController();
  api.awsuiPlugins.flashbar = flashbarActions.installPublic(api.awsuiPlugins.flashbar);
  api.awsuiPluginsInternal.flashbar = flashbarActions.installInternal(api.awsuiPluginsInternal.flashbar);
  const breadcrumbs = new BreadcrumbsController();
  api.awsuiPluginsInternal.breadcrumbs = breadcrumbs.installInternal(api.awsuiPluginsInternal.breadcrumbs);
  const sharedReactContexts = new SharedReactContexts();
  api.awsuiPluginsInternal.sharedReactContexts = sharedReactContexts.installInternal(api.awsuiPluginsInternal.sharedReactContexts);
  return api;
}

// node_modules/@cloudscape-design/components/internal/plugins/helpers/use-discovered-action.js
var import_react = __toESM(require_react());
function RuntimeActionWrapper({ mountContent, unmountContent, context }) {
  const ref = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(() => {
    const container = ref.current;
    mountContent(container, context);
    return () => {
      unmountContent(container);
    };
  }, []);
  return import_react.default.createElement("div", { ref });
}
function convertRuntimeAction(action, context) {
  if (!action) {
    return null;
  }
  return import_react.default.createElement(RuntimeActionWrapper, { key: action.id + "-" + context.type, context, mountContent: action.mountContent, unmountContent: action.unmountContent });
}
function createUseDiscoveredAction(onActionRegistered) {
  return function useDiscoveredAction3(type) {
    const [discoveredActions, setDiscoveredActions] = (0, import_react.useState)([]);
    const headerRef = (0, import_react.useRef)(null);
    const contentRef = (0, import_react.useRef)(null);
    (0, import_react.useEffect)(() => {
      return onActionRegistered((actions) => {
        setDiscoveredActions(actions.map((action) => convertRuntimeAction(action, { type, headerRef, contentRef })));
      });
    }, [type]);
    return { discoveredActions, headerRef, contentRef };
  };
}

// node_modules/@cloudscape-design/components/internal/plugins/helpers/use-discovered-content.js
var import_react2 = __toESM(require_react());
function createUseDiscoveredContent(componentName3, controller) {
  return function useDiscoveredContent3({ type, header, children }) {
    const instanceId = useUniqueId(`${componentName3}-discovered-content`);
    const headerRef = (0, import_react2.useRef)(null);
    const contentRef = (0, import_react2.useRef)(null);
    const replacementHeaderRef = (0, import_react2.useRef)(null);
    const replacementContentRef = (0, import_react2.useRef)(null);
    const [initialHidden, setInitialHidden] = (0, import_react2.useState)(() => controller.initialCheck({
      instanceId,
      type,
      header,
      content: children
    }));
    const [headerReplacementType, setFoundHeaderReplacement] = (0, import_react2.useState)("original");
    const [contentReplacementType, setFoundContentReplacement] = (0, import_react2.useState)("original");
    const mountedProvider = (0, import_react2.useRef)();
    (0, import_react2.useEffect)(() => {
      const context = { instanceId, type, headerRef, contentRef };
      setInitialHidden(false);
      return controller.onContentRegistered((provider) => {
        let mounted = true;
        function checkMounted(methodName) {
          if (!mounted) {
            reportRuntimeApiWarning(`${componentName3}-content-replacer`, `"${methodName}" called after component unmounted`);
            return false;
          }
          return true;
        }
        mountedProvider.current = provider.runReplacer(context, {
          hideHeader() {
            if (checkMounted("hideHeader")) {
              setFoundHeaderReplacement("remove");
            }
          },
          restoreHeader() {
            if (checkMounted("restoreHeader")) {
              setFoundHeaderReplacement("original");
            }
          },
          replaceHeader(replacer) {
            if (checkMounted("replaceHeader")) {
              replacer(replacementHeaderRef.current);
              setFoundHeaderReplacement("replaced");
            }
          },
          hideContent() {
            if (checkMounted("hideContent")) {
              setFoundContentReplacement("remove");
            }
          },
          restoreContent() {
            if (checkMounted("restoreContent")) {
              setFoundContentReplacement("original");
            }
          },
          replaceContent(replacer) {
            if (checkMounted("replaceContent")) {
              replacer(replacementContentRef.current);
              setFoundContentReplacement("replaced");
            }
          }
        });
        return () => {
          var _a;
          (_a = mountedProvider.current) === null || _a === void 0 ? void 0 : _a.unmount({
            replacementHeaderContainer: replacementHeaderRef.current,
            replacementContentContainer: replacementContentRef.current
          });
          mounted = false;
        };
      });
    }, [instanceId, type]);
    (0, import_react2.useEffect)(() => {
      var _a;
      (_a = mountedProvider.current) === null || _a === void 0 ? void 0 : _a.update();
    }, [type, header, children]);
    return {
      initialHidden,
      headerReplacementType,
      contentReplacementType,
      headerRef,
      replacementHeaderRef,
      contentRef,
      replacementContentRef
    };
  };
}

// node_modules/@cloudscape-design/components/internal/utils/use-container-width.js
function useContainerWidth(defaultValue2 = 0, threshold = 1) {
  const [width, ref] = useContainerQuery((rect, prev) => {
    if (prev === null) {
      return rect.contentBoxWidth;
    }
    return Math.abs(prev - rect.contentBoxWidth) >= threshold ? rect.contentBoxWidth : prev;
  });
  return [width !== null && width !== void 0 ? width : defaultValue2, ref];
}

// node_modules/@cloudscape-design/components/alert/actions-wrapper/index.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/alert/actions-wrapper/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/alert/actions-wrapper/styles.scoped.css";
var styles_css_default5 = {
  "root": "awsui_root_37gf8_1udtb_9"
};

// node_modules/@cloudscape-design/components/alert/actions-wrapper/index.js
function createActionButton(testUtilClasses, action, buttonText, onButtonClick) {
  if (!action && buttonText) {
    action = import_react3.default.createElement(
      "span",
      Object.assign({}, getAnalyticsMetadataAttribute({
        action: "buttonClick"
      })),
      import_react3.default.createElement(internal_default3, { className: testUtilClasses.actionButton, onClick: onButtonClick, formAction: "none" }, buttonText)
    );
  }
  return action ? import_react3.default.createElement("div", { className: testUtilClasses.actionSlot }, action) : null;
}
var ActionsWrapper = ({ className: className2, testUtilClasses, action, discoveredActions, buttonText, wrappedClass, containerWidth, onButtonClick }) => {
  const [wrapped, setWrapped] = (0, import_react3.useState)(false);
  const ref = import_react3.default.useRef(null);
  (0, import_react3.useLayoutEffect)(() => {
    if (!ref.current || !containerWidth || !wrappedClass) {
      return;
    }
    function check() {
      const isRtl = getIsRtl(ref.current);
      const { offsetWidth, offsetLeft } = ref.current;
      const start = isRtl ? containerWidth - offsetWidth - offsetLeft : offsetLeft;
      setWrapped(start < 100);
    }
    const observer = new MutationObserver(check);
    observer.observe(ref.current, { attributes: false, childList: true, subtree: true });
    check();
    return () => observer.disconnect();
  });
  const actionButton = createActionButton(testUtilClasses, action, buttonText, onButtonClick);
  if (!actionButton && discoveredActions.length === 0) {
    return null;
  }
  return import_react3.default.createElement(
    "div",
    { ref, className: clsx_m_default(styles_css_default5.root, className2, wrapped && wrappedClass) },
    actionButton,
    discoveredActions
  );
};

// node_modules/@cloudscape-design/components/alert/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/alert/analytics-metadata/styles.scoped.css";
var styles_css_default6 = {
  "header": "awsui_header_17427_1ns0c_5"
};

// node_modules/@cloudscape-design/components/alert/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/alert/styles.scoped.css";
var styles_css_default7 = {
  "alert": "awsui_alert_mx3cw_1v2tf_193",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_mx3cw_1v2tf_1",
  "root": "awsui_root_mx3cw_1v2tf_215",
  "hidden": "awsui_hidden_mx3cw_1v2tf_250",
  "alert-wrapper": "awsui_alert-wrapper_mx3cw_1v2tf_298",
  "initial-hidden": "awsui_initial-hidden_mx3cw_1v2tf_310",
  "header": "awsui_header_mx3cw_1v2tf_315",
  "header-replacement": "awsui_header-replacement_mx3cw_1v2tf_316",
  "action": "awsui_action_mx3cw_1v2tf_320",
  "action-slot": "awsui_action-slot_mx3cw_1v2tf_324",
  "action-button": "awsui_action-button_mx3cw_1v2tf_325",
  "alert-focus-wrapper": "awsui_alert-focus-wrapper_mx3cw_1v2tf_329",
  "text": "awsui_text_mx3cw_1v2tf_360",
  "icon": "awsui_icon_mx3cw_1v2tf_367",
  "message": "awsui_message_mx3cw_1v2tf_370",
  "action-wrapped": "awsui_action-wrapped_mx3cw_1v2tf_374",
  "icon-size-medium": "awsui_icon-size-medium_mx3cw_1v2tf_378",
  "icon-size-big": "awsui_icon-size-big_mx3cw_1v2tf_382",
  "icon-size-normal": "awsui_icon-size-normal_mx3cw_1v2tf_386",
  "content": "awsui_content_mx3cw_1v2tf_390",
  "content-replacement": "awsui_content-replacement_mx3cw_1v2tf_391",
  "dismiss": "awsui_dismiss_mx3cw_1v2tf_395",
  "dismiss-button": "awsui_dismiss-button_mx3cw_1v2tf_400",
  "type-error": "awsui_type-error_mx3cw_1v2tf_404",
  "type-warning": "awsui_type-warning_mx3cw_1v2tf_412",
  "type-success": "awsui_type-success_mx3cw_1v2tf_420",
  "type-info": "awsui_type-info_mx3cw_1v2tf_428"
};

// node_modules/@cloudscape-design/components/alert/internal.js
var typeToIcon = {
  error: "status-negative",
  warning: "status-warning",
  success: "status-positive",
  info: "status-info"
};
var useDiscoveredAction = createUseDiscoveredAction(awsuiPluginsInternal.alert.onActionRegistered);
var useDiscoveredContent = createUseDiscoveredContent("alert", awsuiPluginsInternal.alertContent);
var InternalAlert = import_react4.default.forwardRef((_a, ref) => {
  var _b, _c;
  var { type, i18nStrings, visible = true, dismissible, children, header, buttonText, action, onDismiss, onButtonClick, __internalRootRef = null, statusIconAriaLabel: deprecatedStatusIconAriaLabel, dismissAriaLabel: deprecatedDismissAriaLabel, messageSlotId } = _a, rest = __rest(_a, ["type", "i18nStrings", "visible", "dismissible", "children", "header", "buttonText", "action", "onDismiss", "onButtonClick", "__internalRootRef", "statusIconAriaLabel", "dismissAriaLabel", "messageSlotId"]);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("alert");
  const focusRef = (0, import_react4.useRef)(null);
  useForwardFocus(ref, focusRef);
  const { discoveredActions, headerRef: headerRefAction, contentRef: contentRefAction } = useDiscoveredAction(type);
  const { initialHidden, headerReplacementType, contentReplacementType, headerRef: headerRefContent, contentRef: contentRefContent, replacementHeaderRef, replacementContentRef } = useDiscoveredContent({ type, header, children });
  const [containerWidth, containerMeasureRef] = useContainerWidth();
  const containerRef = useMergeRefs(containerMeasureRef, __internalRootRef);
  const headerRef = useMergeRefs(headerRefAction, headerRefContent);
  const contentRef = useMergeRefs(contentRefAction, contentRefContent);
  const isRefresh = useVisualRefresh();
  const size = isRefresh ? "normal" : headerReplacementType !== "remove" && header && contentReplacementType !== "remove" && children ? "big" : "normal";
  const hasAction = Boolean(action || buttonText || discoveredActions.length);
  const analyticsAttributes = {
    [DATA_ATTR_ANALYTICS_ALERT]: type
  };
  const statusIconAriaLabel = i18n(`i18nStrings.${type}IconAriaLabel`, (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings[`${type}IconAriaLabel`]) !== null && _b !== void 0 ? _b : deprecatedStatusIconAriaLabel);
  const dismissAriaLabel = i18n("i18nStrings.dismissAriaLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dismissAriaLabel) !== null && _c !== void 0 ? _c : i18n("dismissAriaLabel", deprecatedDismissAriaLabel));
  return import_react4.default.createElement(
    "div",
    Object.assign({}, baseProps, analyticsAttributes, { "aria-hidden": !visible, className: clsx_m_default(styles_css_default7.root, { [styles_css_default7.hidden]: !visible, [styles_css_default7["initial-hidden"]]: initialHidden }, baseProps.className), ref: containerRef }),
    import_react4.default.createElement(
      LinkDefaultVariantContext.Provider,
      { value: { defaultVariant: "primary" } },
      import_react4.default.createElement(
        VisualContext,
        { contextName: "alert" },
        import_react4.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default7.alert, styles_css_default7[`type-${type}`], styles_css_default7[`icon-size-${size}`], hasAction && styles_css_default7["with-action"], dismissible && styles_css_default7["with-dismiss"]) },
          import_react4.default.createElement(
            "div",
            { className: styles_css_default7["alert-wrapper"] },
            import_react4.default.createElement(
              "div",
              { className: styles_css_default7["alert-focus-wrapper"], tabIndex: -1, ref: focusRef },
              import_react4.default.createElement(
                "div",
                { className: clsx_m_default(styles_css_default7.icon, styles_css_default7.text) },
                import_react4.default.createElement(internal_default, { name: typeToIcon[type], size, ariaLabel: statusIconAriaLabel })
              ),
              import_react4.default.createElement(
                "div",
                { className: clsx_m_default(styles_css_default7.message, styles_css_default7.text), id: messageSlotId },
                import_react4.default.createElement("div", { className: clsx_m_default(header && styles_css_default7.header, headerReplacementType !== "original" ? styles_css_default7.hidden : styles_css_default6.header), ref: headerRef }, header),
                import_react4.default.createElement("div", { className: clsx_m_default(styles_css_default7["header-replacement"], headerReplacementType !== "replaced" ? styles_css_default7.hidden : styles_css_default6.header), ref: replacementHeaderRef }),
                import_react4.default.createElement("div", { className: clsx_m_default(styles_css_default7.content, contentReplacementType !== "original" && styles_css_default7.hidden), ref: contentRef }, children),
                import_react4.default.createElement("div", { className: clsx_m_default(styles_css_default7["content-replacement"], contentReplacementType !== "replaced" && styles_css_default7.hidden), ref: replacementContentRef })
              )
            ),
            import_react4.default.createElement(ActionsWrapper, { className: styles_css_default7.action, testUtilClasses: {
              actionSlot: styles_css_default7["action-slot"],
              actionButton: styles_css_default7["action-button"]
            }, action, discoveredActions, buttonText, onButtonClick: () => fireNonCancelableEvent(onButtonClick), containerWidth, wrappedClass: styles_css_default7["action-wrapped"] })
          ),
          dismissible && import_react4.default.createElement(
            "div",
            Object.assign({ className: styles_css_default7.dismiss }, getAnalyticsMetadataAttribute({
              action: "dismiss"
            })),
            import_react4.default.createElement(InternalButton, { className: styles_css_default7["dismiss-button"], variant: "icon", iconName: "close", formAction: "none", ariaLabel: dismissAriaLabel, onClick: () => fireNonCancelableEvent(onDismiss) })
          )
        )
      )
    )
  );
});
var internal_default8 = InternalAlert;

// node_modules/@cloudscape-design/components/alert/index.js
var Alert = import_react5.default.forwardRef((_a, ref) => {
  var { type = "info", visible = true } = _a, props2 = __rest(_a, ["type", "visible"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const baseComponentProps = useBaseComponent("Alert", {
    props: { type, visible, dismissible: props2.dismissible }
  }, analyticsMetadata);
  const { funnelIdentifier, funnelInteractionId, funnelErrorContext, submissionAttempt, funnelState, errorCount } = useFunnel();
  const { stepNumber, stepNameSelector, stepIdentifier, subStepCount, stepErrorContext, subStepConfiguration } = useFunnelStep();
  const { subStepSelector, subStepNameSelector, subStepIdentifier, subStepErrorContext } = useFunnelSubStep();
  const messageSlotId = useUniqueId("alert-");
  (0, import_react5.useEffect)(() => {
    var _a2, _b, _c, _d, _e;
    if (funnelInteractionId && visible && type === "error" && funnelState.current !== "complete") {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      errorCount.current++;
      const errorIsVisible = ((_c = (_b = (_a2 = baseComponentProps.__internalRootRef.current) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0) > 0;
      if (errorIsVisible) {
        if (subStepSelector) {
          FunnelMetrics.funnelSubStepError({
            funnelInteractionId,
            funnelIdentifier,
            stepIdentifier,
            subStepSelector,
            subStepName,
            subStepNameSelector,
            stepNumber,
            stepName,
            stepNameSelector,
            subStepAllSelector: getSubStepAllSelector(),
            subStepIdentifier,
            errorContext: analyticsMetadata.errorContext || subStepErrorContext
          });
        } else if (stepNameSelector) {
          FunnelMetrics.funnelStepError({
            funnelInteractionId,
            stepNumber,
            stepNameSelector,
            stepName,
            stepIdentifier,
            currentDocument: (_d = baseComponentProps.__internalRootRef.current) === null || _d === void 0 ? void 0 : _d.ownerDocument,
            totalSubSteps: subStepCount.current,
            funnelIdentifier,
            subStepAllSelector: getSubStepAllSelector(),
            errorContext: analyticsMetadata.errorContext || stepErrorContext,
            subStepConfiguration: (_e = subStepConfiguration.current) === null || _e === void 0 ? void 0 : _e.get(stepNumber),
            stepErrorSelector: "#" + messageSlotId
          });
        } else {
          FunnelMetrics.funnelError({
            funnelIdentifier,
            funnelInteractionId,
            errorContext: analyticsMetadata.errorContext || funnelErrorContext
          });
        }
      }
      return () => {
        errorCount.current--;
      };
    }
  }, [funnelInteractionId, visible, submissionAttempt, errorCount]);
  const componentAnalyticsMetadata2 = {
    name: "awsui.Alert",
    label: `.${styles_css_default6.header}`,
    properties: {
      type
    }
  };
  return import_react5.default.createElement(internal_default8, Object.assign({ type, visible }, props2, baseComponentProps, { ref, messageSlotId }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })));
});
applyDisplayName(Alert, "Alert");
var alert_default = Alert;

// node_modules/@cloudscape-design/components/anchor-navigation/index.js
var import_react10 = __toESM(require_react());

// node_modules/@cloudscape-design/components/anchor-navigation/internal.js
var import_react9 = __toESM(require_react());

// node_modules/@cloudscape-design/components/anchor-navigation/use-scroll-spy.js
var import_react6 = __toESM(require_react());
var isBrowser = typeof window !== "undefined";
function useScrollSpy({ hrefs, scrollSpyOffset, activeHref }) {
  const [currentHref, setCurrentHref] = (0, import_react6.useState)(activeHref);
  const [lastAnchorExists, setLastAnchorExists] = (0, import_react6.useState)(false);
  (0, import_react6.useEffect)(() => {
    setCurrentHref(activeHref);
  }, [activeHref]);
  (0, import_react6.useEffect)(() => {
    var _a;
    setLastAnchorExists(isBrowser && !!document.getElementById((_a = hrefs[hrefs.length - 1]) === null || _a === void 0 ? void 0 : _a.slice(1)));
  }, [hrefs]);
  const getRectByHref = (0, import_react6.useCallback)((href) => {
    var _a;
    return (_a = document.getElementById(href.slice(1))) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
  }, []);
  const isPageBottom = (0, import_react6.useCallback)(() => {
    return lastAnchorExists && Math.ceil(window.scrollY) >= Math.floor(document.body.scrollHeight - window.innerHeight);
  }, [lastAnchorExists]);
  const findHrefInView = (0, import_react6.useCallback)(() => {
    return hrefs.find((href) => {
      const rect = getRectByHref(href);
      return rect && rect.bottom <= window.innerHeight && rect.top >= scrollSpyOffset;
    });
  }, [getRectByHref, scrollSpyOffset, hrefs]);
  const findLastHrefInView = (0, import_react6.useCallback)(() => {
    return [...hrefs].reverse().find((href) => {
      const rect = getRectByHref(href);
      return rect && rect.bottom <= window.innerHeight;
    });
  }, [getRectByHref, hrefs]);
  const handleScroll = (0, import_react6.useCallback)(() => {
    if (activeHref || !isBrowser) {
      return;
    }
    const { scrollY } = window;
    if (document.body.scrollHeight > window.innerHeight && isPageBottom()) {
      setCurrentHref(hrefs[hrefs.length - 1]);
    } else {
      setCurrentHref(findHrefInView() || (scrollY > 0 ? findLastHrefInView() : void 0));
    }
  }, [activeHref, isPageBottom, findHrefInView, findLastHrefInView, hrefs]);
  (0, import_react6.useEffect)(() => {
    if (isBrowser) {
      handleScroll();
      window.addEventListener("scroll", handleScroll, { passive: true });
      return () => {
        window.removeEventListener("scroll", handleScroll);
      };
    }
  }, [handleScroll]);
  return currentHref;
}

// node_modules/@cloudscape-design/components/anchor-navigation/utils.js
var import_react8 = __toESM(require_react());

// node_modules/@cloudscape-design/components/anchor-navigation/anchor-item/index.js
var import_react7 = __toESM(require_react());

// node_modules/@cloudscape-design/components/anchor-navigation/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/anchor-navigation/styles.scoped.css";
var styles_css_default8 = {
  "root": "awsui_root_swimc_bhjn1_189",
  "anchor-list": "awsui_anchor-list_swimc_bhjn1_221",
  "anchor-item": "awsui_anchor-item_swimc_bhjn1_244",
  "anchor-item--active": "awsui_anchor-item--active_swimc_bhjn1_264",
  "anchor-link": "awsui_anchor-link_swimc_bhjn1_281",
  "anchor-link--active": "awsui_anchor-link--active_swimc_bhjn1_323",
  "anchor-link-text": "awsui_anchor-link-text_swimc_bhjn1_330",
  "anchor-link-info": "awsui_anchor-link-info_swimc_bhjn1_334"
};

// node_modules/@cloudscape-design/components/anchor-navigation/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/anchor-navigation/test-classes/styles.scoped.css";
var styles_css_default9 = {
  "root": "awsui_root_17oho_5eh15_5",
  "anchor-list": "awsui_anchor-list_17oho_5eh15_9",
  "anchor-item--active": "awsui_anchor-item--active_17oho_5eh15_13",
  "anchor-link": "awsui_anchor-link_17oho_5eh15_17",
  "anchor-link-text": "awsui_anchor-link-text_17oho_5eh15_21",
  "anchor-link-info": "awsui_anchor-link-info_17oho_5eh15_25"
};

// node_modules/@cloudscape-design/components/anchor-navigation/anchor-item/index.js
var AnchorItem = ({ anchor, onFollow, isActive, index, children }) => {
  checkSafeUrl("AnchorNavigation", anchor.href);
  const onClick = (0, import_react7.useCallback)((event) => {
    if (isPlainLeftClick(event)) {
      onFollow(anchor, event);
    }
  }, [onFollow, anchor]);
  const activeItemClasses = clsx_m_default(styles_css_default8["anchor-item--active"], styles_css_default9["anchor-item--active"]);
  return import_react7.default.createElement(
    "li",
    { "data-itemid": `anchor-item-${index + 1}`, className: clsx_m_default(styles_css_default8["anchor-item"], isActive && activeItemClasses) },
    import_react7.default.createElement(
      "a",
      Object.assign({ onClick, className: clsx_m_default(styles_css_default8["anchor-link"], styles_css_default9["anchor-link"], isActive && styles_css_default8["anchor-link--active"]) }, isActive ? { "aria-current": true } : {}, { href: anchor.href }),
      import_react7.default.createElement("span", { className: clsx_m_default(styles_css_default8["anchor-link-text"], styles_css_default9["anchor-link-text"]), style: { paddingInlineStart: `${anchor.level * 16 + 2}px` } }, anchor.text),
      anchor.info && import_react7.default.createElement("span", { className: clsx_m_default(styles_css_default8["anchor-link-info"], styles_css_default9["anchor-link-info"]) }, anchor.info)
    ),
    children
  );
};

// node_modules/@cloudscape-design/components/anchor-navigation/utils.js
var collectChildItems = (items, currentIndex, currentLevel) => {
  const childItems = [];
  let nextIndex = currentIndex + 1;
  while (nextIndex < items.length && items[nextIndex].level > currentLevel) {
    childItems.push(items[nextIndex]);
    nextIndex++;
  }
  return childItems;
};
var createAnchorItem = (currentItem, index, childItems, renderQueue, context) => {
  const childList = [];
  const hasChildren = childItems.length > 0;
  const olClassNAme = clsx_m_default(styles_css_default8["anchor-list"], styles_css_default9["anchor-list"]);
  if (hasChildren) {
    renderQueue.push({
      items: childItems,
      parentList: childList,
      startIndex: index + 1
    });
  }
  return import_react8.default.createElement(AnchorItem, { onFollow: context.onFollowHandler, isActive: currentItem.href === context.currentActiveHref, key: index, index, anchor: currentItem }, hasChildren && import_react8.default.createElement("ol", { className: olClassNAme }, childList));
};
var processQueueItem = (items, startIndex, parentList, renderQueue, context) => {
  let currentIndex = 0;
  while (currentIndex < items.length) {
    const currentItem = items[currentIndex];
    const childItems = collectChildItems(items, currentIndex, currentItem.level);
    parentList.push(createAnchorItem(currentItem, startIndex + currentIndex, childItems, renderQueue, context));
    currentIndex += childItems.length + 1;
  }
};
var renderNestedAnchors = (items, context) => {
  const rootList = [];
  const renderQueue = [];
  renderQueue.push({ items, parentList: rootList, startIndex: 0 });
  while (renderQueue.length > 0) {
    const currentItem = renderQueue.shift();
    processQueueItem(currentItem.items, currentItem.startIndex, currentItem.parentList, renderQueue, context);
  }
  return rootList;
};

// node_modules/@cloudscape-design/components/anchor-navigation/internal.js
function InternalAnchorNavigation(_a) {
  var { anchors, ariaLabelledby, onFollow, onActiveHrefChange, activeHref = "", __internalRootRef = null, scrollSpyOffset = 0 } = _a, props2 = __rest(_a, ["anchors", "ariaLabelledby", "onFollow", "onActiveHrefChange", "activeHref", "__internalRootRef", "scrollSpyOffset"]);
  const baseProps = getBaseProps(props2);
  const hrefs = (0, import_react9.useMemo)(() => anchors.map((anchor) => anchor.href), [anchors]);
  const onFollowHandler = (0, import_react9.useCallback)((anchor, sourceEvent) => {
    fireCancelableEvent(onFollow, anchor, sourceEvent);
  }, [onFollow]);
  const currentActiveHref = useScrollSpy({
    hrefs,
    scrollSpyOffset,
    activeHref
  });
  (0, import_react9.useEffect)(() => {
    if (currentActiveHref) {
      const newActiveAnchor = anchors.find((anchor) => anchor.href === currentActiveHref);
      fireNonCancelableEvent(onActiveHrefChange, newActiveAnchor);
    }
  }, [onActiveHrefChange, anchors, currentActiveHref]);
  return import_react9.default.createElement(
    "nav",
    Object.assign({}, baseProps, { ref: __internalRootRef, "aria-labelledby": ariaLabelledby, className: clsx_m_default(baseProps.className, styles_css_default8.root, styles_css_default9.root) }),
    import_react9.default.createElement("ol", { className: clsx_m_default(styles_css_default8["anchor-list"], styles_css_default9["anchor-list"]) }, renderNestedAnchors(anchors, {
      onFollowHandler,
      currentActiveHref
    }))
  );
}

// node_modules/@cloudscape-design/components/anchor-navigation/index.js
function AnchorNavigation(_a) {
  var { scrollSpyOffset = 0 } = _a, props2 = __rest(_a, ["scrollSpyOffset"]);
  const baseComponentProps = useBaseComponent("AnchorNavigation");
  return import_react10.default.createElement(InternalAnchorNavigation, Object.assign({ scrollSpyOffset }, props2, baseComponentProps));
}
applyDisplayName(AnchorNavigation, "AnchorNavigation");

// node_modules/@cloudscape-design/components/annotation-context/index.js
var import_react17 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/closed-annotation.js
var import_react13 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-trigger.js
var import_react12 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-icon.js
var import_react11 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/annotation-context/annotation/styles.scoped.css";
var styles_css_default10 = {
  "arrow": "awsui_arrow_1hpp3_zas13_193",
  "arrow-outer": "awsui_arrow-outer_1hpp3_zas13_197",
  "arrow-inner": "awsui_arrow-inner_1hpp3_zas13_197",
  "arrow-position-right-top": "awsui_arrow-position-right-top_1hpp3_zas13_239",
  "arrow-position-right-bottom": "awsui_arrow-position-right-bottom_1hpp3_zas13_239",
  "arrow-position-left-top": "awsui_arrow-position-left-top_1hpp3_zas13_242",
  "arrow-position-left-bottom": "awsui_arrow-position-left-bottom_1hpp3_zas13_242",
  "arrow-position-top-center": "awsui_arrow-position-top-center_1hpp3_zas13_245",
  "arrow-position-top-responsive": "awsui_arrow-position-top-responsive_1hpp3_zas13_245",
  "arrow-position-bottom-center": "awsui_arrow-position-bottom-center_1hpp3_zas13_248",
  "arrow-position-bottom-responsive": "awsui_arrow-position-bottom-responsive_1hpp3_zas13_248",
  "annotation": "awsui_annotation_1hpp3_zas13_252",
  "next-button": "awsui_next-button_1hpp3_zas13_253",
  "previous-button": "awsui_previous-button_1hpp3_zas13_254",
  "finish-button": "awsui_finish-button_1hpp3_zas13_255",
  "header": "awsui_header_1hpp3_zas13_256",
  "step-counter-content": "awsui_step-counter-content_1hpp3_zas13_257",
  "content": "awsui_content_1hpp3_zas13_258",
  "description": "awsui_description_1hpp3_zas13_262",
  "actionBar": "awsui_actionBar_1hpp3_zas13_267",
  "stepCounter": "awsui_stepCounter_1hpp3_zas13_274",
  "divider": "awsui_divider_1hpp3_zas13_278",
  "hotspot": "awsui_hotspot_1hpp3_zas13_282",
  "icon": "awsui_icon_1hpp3_zas13_352"
};

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-icon.js
var AnnotationIcon = ({ open }) => {
  if (open) {
    return import_react11.default.createElement(
      "svg",
      { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16", focusable: "false", "aria-hidden": "true", className: styles_css_default10.icon },
      import_react11.default.createElement(
        "g",
        { fill: "none", fillRule: "evenodd", transform: "translate(1 1)" },
        import_react11.default.createElement("circle", { cx: "7", cy: "7", r: "7", strokeWidth: "2" }),
        import_react11.default.createElement("path", { strokeLinecap: "square", strokeWidth: "2.2", d: "M2.5,-1 L2.5,3", transform: "rotate(90 1.75 6.25)" })
      )
    );
  } else {
    return import_react11.default.createElement(
      "svg",
      { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16", focusable: "false", "aria-hidden": "true", className: styles_css_default10.icon },
      import_react11.default.createElement(
        "g",
        { fill: "none", fillRule: "evenodd", transform: "translate(1 1)" },
        import_react11.default.createElement("circle", { cx: "7", cy: "7", r: "7", strokeWidth: "2" }),
        import_react11.default.createElement(
          "g",
          { strokeLinecap: "square", strokeWidth: "2.2", transform: "translate(4.5 5)" },
          import_react11.default.createElement("path", { d: "M2.5,0 L2.5,4", transform: "rotate(90 2.5 2)" }),
          import_react11.default.createElement("path", { d: "M2.5,0 L2.5,4" })
        )
      )
    );
  }
};

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-trigger.js
var annotation_trigger_default = import_react12.default.forwardRef(function AnnotationTrigger({ open, onClick: onClickHandler, i18nStrings, taskLocalStepIndex, totalLocalSteps }, ref) {
  const onClick = (0, import_react12.useCallback)((event) => {
    event.preventDefault();
    onClickHandler();
  }, [onClickHandler]);
  return import_react12.default.createElement(
    "button",
    { ref, className: styles_css_default10.hotspot, "aria-haspopup": "dialog", "aria-expanded": open, "aria-label": i18nStrings.labelHotspot(open, taskLocalStepIndex !== null && taskLocalStepIndex !== void 0 ? taskLocalStepIndex : 0, totalLocalSteps !== null && totalLocalSteps !== void 0 ? totalLocalSteps : 0), onClick },
    import_react12.default.createElement(AnnotationIcon, { open })
  );
});

// node_modules/@cloudscape-design/components/annotation-context/annotation/closed-annotation.js
function ClosedAnnotation({ globalStepIndex, onOpen, i18nStrings, focusOnRender, totalLocalSteps, taskLocalStepIndex }) {
  const [hotspotRef, setHotspotRef] = (0, import_react13.useState)(null);
  const onClick = (0, import_react13.useCallback)(() => {
    onOpen(globalStepIndex);
  }, [globalStepIndex, onOpen]);
  (0, import_react13.useEffect)(() => {
    if (focusOnRender && hotspotRef) {
      hotspotRef.focus();
    }
  }, [focusOnRender, hotspotRef]);
  return import_react13.default.createElement(annotation_trigger_default, { open: false, onClick, i18nStrings, ref: setHotspotRef, totalLocalSteps, taskLocalStepIndex });
}

// node_modules/@cloudscape-design/components/annotation-context/annotation/open-annotation.js
var import_react15 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-popover.js
var import_react14 = __toESM(require_react());
var arrow = (position) => import_react14.default.createElement(
  "div",
  { className: clsx_m_default(styles_css_default10.arrow, styles_css_default10[`arrow-position-${position}`]) },
  import_react14.default.createElement("div", { className: styles_css_default10["arrow-outer"] }),
  import_react14.default.createElement("div", { className: styles_css_default10["arrow-inner"] })
);
function AnnotationPopover({ title, content, alert, direction = "top", taskLocalStepIndex, totalLocalSteps, showPreviousButton, showFinishButton, onDismiss, nextButtonEnabled, onNextButtonClick, onFinish, trackRef, previousButtonEnabled, onPreviousButtonClick, i18nStrings }) {
  (0, import_react14.useEffect)(() => {
    var _a;
    scrollElementIntoView((_a = trackRef.current) !== null && _a !== void 0 ? _a : void 0);
  }, [trackRef]);
  const popoverHeaderId = useUniqueId("poppver-header-");
  const stepCounterId = useUniqueId("step-counter-");
  return import_react14.default.createElement(
    PopoverContainer,
    { size: "medium", fixedWidth: false, position: direction, trackRef, trackKey: taskLocalStepIndex, variant: "annotation", arrow, zIndex: 7e3, renderWithPortal: true },
    import_react14.default.createElement(
      PopoverBody,
      {
        dismissButton: true,
        dismissAriaLabel: i18nStrings.labelDismissAnnotation,
        header: import_react14.default.createElement(InternalBox, { id: popoverHeaderId, color: "text-body-secondary", fontSize: "body-s", margin: { top: "xxxs" }, className: styles_css_default10.header }, title),
        onDismiss,
        className: styles_css_default10.annotation,
        variant: "annotation",
        overflowVisible: "content",
        // create new dialog to have the native dialog behavior of the screen readers
        key: taskLocalStepIndex,
        ariaLabelledby: joinStrings(popoverHeaderId, stepCounterId)
      },
      import_react14.default.createElement(
        internal_default4,
        { size: "s" },
        import_react14.default.createElement(
          "div",
          { className: styles_css_default10.description },
          import_react14.default.createElement(InternalBox, { className: styles_css_default10.content }, content)
        ),
        alert && import_react14.default.createElement(internal_default8, { type: "warning" }, alert),
        import_react14.default.createElement(
          internal_default4,
          { size: "s" },
          import_react14.default.createElement("div", { className: styles_css_default10.divider }),
          import_react14.default.createElement(
            "div",
            { className: styles_css_default10.actionBar },
            import_react14.default.createElement(
              "div",
              { className: styles_css_default10.stepCounter },
              import_react14.default.createElement(InternalBox, { id: stepCounterId, className: styles_css_default10["step-counter-content"], color: "text-body-secondary", fontSize: "body-s" }, i18nStrings.stepCounterText(taskLocalStepIndex !== null && taskLocalStepIndex !== void 0 ? taskLocalStepIndex : 0, totalLocalSteps !== null && totalLocalSteps !== void 0 ? totalLocalSteps : 0))
            ),
            import_react14.default.createElement(
              internal_default4,
              { size: "xs", direction: "horizontal" },
              showPreviousButton && import_react14.default.createElement(InternalButton, { variant: "link", onClick: onPreviousButtonClick, disabled: !previousButtonEnabled, formAction: "none", ariaLabel: i18nStrings.previousButtonText, className: styles_css_default10["previous-button"] }, i18nStrings.previousButtonText),
              showFinishButton ? import_react14.default.createElement(InternalButton, { onClick: onFinish, formAction: "none", ariaLabel: i18nStrings.finishButtonText, className: styles_css_default10["finish-button"] }, i18nStrings.finishButtonText) : import_react14.default.createElement(InternalButton, { onClick: onNextButtonClick, disabled: !nextButtonEnabled, formAction: "none", ariaLabel: i18nStrings.nextButtonText, className: styles_css_default10["next-button"] }, i18nStrings.nextButtonText)
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/annotation-context/annotation/open-annotation.js
function OpenAnnotation({ title, content, alert, direction, showPreviousButton, showFinishButton, taskLocalStepIndex, totalLocalSteps, onDismiss, nextButtonEnabled, onNextButtonClick, onFinish, previousButtonEnabled, onPreviousButtonClick, i18nStrings }) {
  const trackRef = (0, import_react15.useRef)(null);
  return import_react15.default.createElement(
    import_react15.default.Fragment,
    null,
    import_react15.default.createElement(annotation_trigger_default, { open: true, onClick: onDismiss, i18nStrings, ref: trackRef, totalLocalSteps, taskLocalStepIndex }),
    import_react15.default.createElement(
      Portal,
      null,
      import_react15.default.createElement(AnnotationPopover, { trackRef, previousButtonEnabled, showPreviousButton, showFinishButton, totalLocalSteps, i18nStrings, nextButtonEnabled, onDismiss, onFinish, onNextButtonClick, onPreviousButtonClick, taskLocalStepIndex, direction, title, content, alert })
    )
  );
}

// node_modules/@cloudscape-design/components/annotation-context/context.js
var import_react16 = __toESM(require_react());
var defaultContext = {
  getContentForId: () => null,
  registerHotspot() {
  },
  unregisterHotspot() {
  },
  currentStepIndex: 0,
  currentTutorial: null,
  onStartTutorial() {
  },
  onExitTutorial() {
  }
};
var hotspotContext = import_react16.default.createContext(defaultContext);

// node_modules/@cloudscape-design/components/annotation-context/utils.js
function getStepInfo(annotations, index) {
  if (index >= 0) {
    let taskIndex = 0;
    for (const task of annotations) {
      if (task.steps.length <= index) {
        index -= task.steps.length;
        taskIndex++;
        continue;
      }
      return { task, step: task.steps[index], localIndex: index, taskIndex };
    }
  }
  return { task: void 0, step: void 0, localIndex: 0, taskIndex: 0 };
}

// node_modules/@cloudscape-design/components/annotation-context/index.js
var emptyTasks = [];
function AnnotationContext({ currentTutorial, children, onStepChange, onFinish: onFinishHandler, onStartTutorial, onExitTutorial, i18nStrings }) {
  var _a, _b, _c, _d;
  useBaseComponent("AnnotationContext");
  const [open, setOpen] = (0, import_react17.useState)(true);
  const [currentStepIndex, setCurrentStepIndex] = (0, import_react17.useState)(0);
  (0, import_react17.useEffect)(() => {
    setCurrentStepIndex(0);
    setOpen(true);
  }, [currentTutorial, setOpen]);
  const [availableHotspots, setAvailableHotspots] = (0, import_react17.useState)({});
  const availableHotspotsRef = (0, import_react17.useRef)(availableHotspots);
  const annotations = currentTutorial ? currentTutorial.tasks : emptyTasks;
  const { task, step: step2, localIndex, taskIndex } = getStepInfo(annotations, currentStepIndex);
  const currentId = step2 === null || step2 === void 0 ? void 0 : step2.hotspotId;
  const totalStepCount = annotations.map((a4) => a4.steps.length).reduce((a4, b2) => a4 + b2, 0);
  const id2index = (0, import_react17.useMemo)(() => {
    const mapping = {};
    let counter = 0;
    for (const annotation of annotations) {
      for (const step3 of annotation.steps) {
        if (mapping[step3.hotspotId] === void 0) {
          mapping[step3.hotspotId] = counter;
        }
        counter++;
      }
    }
    return mapping;
  }, [annotations]);
  const openNextStep = (0, import_react17.useCallback)(() => {
    const newStepIndex = Math.min(currentStepIndex + 1, totalStepCount);
    setCurrentStepIndex(newStepIndex);
    fireNonCancelableEvent(onStepChange, { step: newStepIndex, reason: "next" });
  }, [currentStepIndex, onStepChange, totalStepCount]);
  const openPreviousStep = (0, import_react17.useCallback)(() => {
    const newStepIndex = Math.max(currentStepIndex - 1, 0);
    setCurrentStepIndex(newStepIndex);
    fireNonCancelableEvent(onStepChange, { step: newStepIndex, reason: "previous" });
  }, [onStepChange, currentStepIndex]);
  const onFinish = (0, import_react17.useCallback)(() => fireNonCancelableEvent(onFinishHandler), [onFinishHandler]);
  const isCurrentHotspotAvailable = currentId ? availableHotspots[currentId] : null;
  (0, import_react17.useEffect)(() => {
    if (!currentId || availableHotspotsRef.current[currentId]) {
      return;
    }
    const findNearestHotspot = () => {
      let nearestHotspot2 = void 0;
      let nearestDistance = Infinity;
      for (const hotspotId of Object.keys(availableHotspotsRef.current)) {
        const distanceFromCurrentHotspot = Math.abs(id2index[hotspotId] - currentStepIndex);
        if (distanceFromCurrentHotspot < nearestDistance) {
          nearestDistance = distanceFromCurrentHotspot;
          nearestHotspot2 = hotspotId;
        }
      }
      return nearestHotspot2;
    };
    const nearestHotspot = findNearestHotspot();
    if (nearestHotspot) {
      const newStepIndex = id2index[nearestHotspot];
      setCurrentStepIndex(newStepIndex);
      setOpen(true);
      fireNonCancelableEvent(onStepChange, { step: newStepIndex, reason: "auto-fallback" });
    }
  }, [annotations, isCurrentHotspotAvailable, currentId, currentStepIndex, id2index, onStepChange, availableHotspots]);
  const onDismiss = (0, import_react17.useCallback)(() => {
    setOpen(false);
  }, [setOpen]);
  const onOpen = (0, import_react17.useCallback)((stepIndex) => {
    setCurrentStepIndex(stepIndex);
    fireNonCancelableEvent(onStepChange, { step: stepIndex, reason: "open" });
    setOpen(true);
  }, [onStepChange, setOpen]);
  const idOfPreviousHotspot = (_a = getStepInfo(annotations, currentStepIndex - 1).step) === null || _a === void 0 ? void 0 : _a.hotspotId;
  const idOfNextHotspot = (_b = getStepInfo(annotations, currentStepIndex + 1).step) === null || _b === void 0 ? void 0 : _b.hotspotId;
  const previousHotspotIsAvailable = (_c = idOfPreviousHotspot !== void 0 && availableHotspots[idOfPreviousHotspot]) !== null && _c !== void 0 ? _c : false;
  const nextHotspotIsAvailable = (_d = idOfNextHotspot !== void 0 && availableHotspots[idOfNextHotspot]) !== null && _d !== void 0 ? _d : false;
  const getContentForId = (0, import_react17.useCallback)((id, direction) => {
    if (currentTutorial === null || currentTutorial === void 0 ? void 0 : currentTutorial.completed) {
      return null;
    }
    const globalStepIndex = id2index[id];
    if (globalStepIndex === void 0) {
      return null;
    }
    if (!task || !step2 || !open || id !== currentId) {
      const { task: currentTask, localIndex: currentStepIndex2 } = getStepInfo(annotations, globalStepIndex);
      return import_react17.default.createElement(ClosedAnnotation, { globalStepIndex, i18nStrings, onOpen, focusOnRender: id === currentId, totalLocalSteps: currentTask ? currentTask.steps.length : 0, taskLocalStepIndex: currentStepIndex2 });
    }
    return import_react17.default.createElement(OpenAnnotation, { i18nStrings, direction, title: i18nStrings.taskTitle(taskIndex, task.title), content: step2.content, alert: step2.warningAlert, showPreviousButton: currentStepIndex !== 0, showFinishButton: currentStepIndex + 1 === totalStepCount, taskLocalStepIndex: localIndex, totalLocalSteps: task.steps.length, nextButtonEnabled: nextHotspotIsAvailable, onNextButtonClick: openNextStep, onFinish, previousButtonEnabled: previousHotspotIsAvailable, onPreviousButtonClick: openPreviousStep, onDismiss });
  }, [
    id2index,
    currentTutorial,
    task,
    step2,
    open,
    currentId,
    currentStepIndex,
    i18nStrings,
    taskIndex,
    localIndex,
    totalStepCount,
    nextHotspotIsAvailable,
    openNextStep,
    onFinish,
    previousHotspotIsAvailable,
    openPreviousStep,
    onDismiss,
    onOpen,
    annotations
  ]);
  const registerHotspot = (0, import_react17.useCallback)((id) => {
    if (!id2index || id2index[id] === void 0) {
      return;
    }
    availableHotspotsRef.current = Object.assign(Object.assign({}, availableHotspotsRef.current), { [id]: true });
    setAvailableHotspots((availableHotspots2) => {
      if (availableHotspots2[id]) {
        return availableHotspots2;
      }
      return Object.assign(Object.assign({}, availableHotspots2), { [id]: true });
    });
  }, [id2index]);
  const unregisterHotspot = (0, import_react17.useCallback)((id) => {
    if (!availableHotspotsRef.current[id]) {
      return;
    }
    availableHotspotsRef.current = removeKey(id, availableHotspotsRef.current);
    setAvailableHotspots((availableHotspots2) => {
      if (!availableHotspots2[id]) {
        return availableHotspots2;
      }
      return removeKey(id, availableHotspots2);
    });
  }, []);
  const context = {
    getContentForId,
    registerHotspot,
    unregisterHotspot,
    onStartTutorial,
    onExitTutorial,
    currentStepIndex,
    currentTutorial
  };
  return import_react17.default.createElement(hotspotContext.Provider, { value: context }, children);
}
applyDisplayName(AnnotationContext, "AnnotationContext");
function removeKey(key2, object2) {
  const _a = object2, _b = key2, _ = _a[_b], remainingObject = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
  return remainingObject;
}

// node_modules/@cloudscape-design/components/app-layout/index.js
var import_react99 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-controllable/index.js
var React16 = __toESM(require_react());
function useControllable(controlledValue, handler, defaultValue2, { componentName: componentName3, changeHandler, controlledProp }) {
  const isControlled = React16.useState(controlledValue !== void 0)[0];
  if (isDevelopment2) {
    React16.useEffect(() => {
      if (isControlled && handler === void 0) {
        warnOnce(componentName3, `You provided a \`${controlledProp}\` prop without an \`${changeHandler}\` handler. This will render a non-interactive component.`);
      }
    }, [handler, isControlled, componentName3, changeHandler, controlledProp]);
    React16.useEffect(() => {
      const isControlledNow = controlledValue !== void 0;
      if (isControlled !== isControlledNow) {
        const initialMode = isControlled ? "controlled" : "uncontrolled";
        const modeNow = isControlledNow ? "controlled" : "uncontrolled";
        warnOnce(componentName3, `A component tried to change ${initialMode} '${controlledProp}' property to be ${modeNow}. This is not supported. Properties should not switch from ${initialMode} to ${modeNow} (or vice versa). Decide between using a controlled or uncontrolled mode for the lifetime of the component. More info: https://fb.me/react-controlled-components`);
      }
    }, [isControlled, controlledProp, componentName3, controlledValue]);
  }
  const [valueState, setValue] = React16.useState(defaultValue2);
  const [valueHasBeenSet, setValueHasBeenSet] = React16.useState(false);
  const currentUncontrolledValue = valueHasBeenSet ? valueState : defaultValue2;
  const setUncontrolledValue = React16.useCallback((newValue) => {
    setValue(newValue);
    setValueHasBeenSet(true);
  }, [setValue, setValueHasBeenSet]);
  if (isControlled) {
    return [controlledValue, defaultCallback];
  } else {
    return [currentUncontrolledValue, setUncontrolledValue];
  }
}
function defaultCallback() {
  return void 0;
}

// node_modules/@cloudscape-design/components/app-layout/defaults.js
var defaultContentTypeState = {
  navigationOpen: true,
  minContentWidth: 280,
  maxContentWidth: void 0
};
var defaults = {
  default: Object.assign({}, defaultContentTypeState),
  dashboard: Object.assign({}, defaultContentTypeState),
  cards: {
    navigationOpen: true,
    minContentWidth: 280,
    maxContentWidth: void 0
  },
  form: {
    navigationOpen: false,
    minContentWidth: 280,
    maxContentWidth: 800
  },
  table: {
    navigationOpen: true,
    minContentWidth: 280,
    maxContentWidth: void 0
  },
  wizard: {
    navigationOpen: false,
    minContentWidth: 280,
    maxContentWidth: 1080
  }
};
function applyDefaults(contentType, stateFromProps, isRefresh) {
  var _a, _b, _c;
  const contentTypeDefaults = isRefresh ? Object.assign(Object.assign({}, defaults[contentType]), { maxContentWidth: void 0 }) : defaults[contentType];
  return {
    maxContentWidth: (_a = stateFromProps.maxContentWidth) !== null && _a !== void 0 ? _a : contentTypeDefaults.maxContentWidth,
    minContentWidth: (_b = stateFromProps.minContentWidth) !== null && _b !== void 0 ? _b : contentTypeDefaults.minContentWidth,
    navigationOpen: (_c = stateFromProps.navigationOpen) !== null && _c !== void 0 ? _c : contentTypeDefaults.navigationOpen
  };
}

// node_modules/@cloudscape-design/components/app-layout/internal.js
var import_react96 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/classic.js
var import_react54 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/utils/size-utils.js
var CONSTRAINED_PAGE_HEIGHT = 400;
var MAIN_PANEL_MIN_HEIGHT = 250;
var CONSTRAINED_MAIN_PANEL_MIN_HEIGHT = 40;
function getSplitPanelDefaultSize(position) {
  if (typeof document === "undefined") {
    return 0;
  }
  return position === "side" ? document.documentElement.clientWidth / 3 : document.documentElement.clientHeight / 2;
}
function getLimitedValue(min3, value, max3) {
  if (min3 > max3) {
    return min3;
  }
  if (value < min3) {
    return min3;
  }
  if (value > max3) {
    return max3;
  }
  return value;
}

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/index.js
var import_react18 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/content-wrapper/styles.scoped.css";
var styles_css_default11 = {
  "content-wrapper": "awsui_content-wrapper_zycdx_mfqbj_153",
  "content-wrapper-mobile": "awsui_content-wrapper-mobile_zycdx_mfqbj_157",
  "content-type-dashboard": "awsui_content-type-dashboard_zycdx_mfqbj_162"
};

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/index.js
var ContentWrapper = import_react18.default.forwardRef(({ className: className2, style, contentType, children, toolsPadding, disablePaddings, navigationPadding, isMobile, contentWidthStyles }, ref) => {
  if (disablePaddings) {
    return import_react18.default.createElement("div", { className: className2, ref, style }, children);
  }
  return import_react18.default.createElement(
    "div",
    { ref, className: clsx_m_default(styles_css_default11["content-wrapper"], !navigationPadding && styles_css_default11["content-wrapper-no-navigation-padding"], !toolsPadding && styles_css_default11["content-wrapper-no-tools-padding"], isMobile && styles_css_default11["content-wrapper-mobile"]), style },
    import_react18.default.createElement("div", { style: contentWidthStyles, className: clsx_m_default(className2, styles_css_default11[`content-type-${contentType}`]) }, children)
  );
});
var content_wrapper_default = ContentWrapper;

// node_modules/@cloudscape-design/components/app-layout/drawer/index.js
var import_react37 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/toggles/index.js
var import_react19 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/test-classes/styles.scoped.css";
var styles_css_default12 = {
  "root": "awsui_root_1fj9k_jfqbk_5",
  "navigation": "awsui_navigation_1fj9k_jfqbk_6",
  "navigation-toggle": "awsui_navigation-toggle_1fj9k_jfqbk_7",
  "navigation-close": "awsui_navigation-close_1fj9k_jfqbk_8",
  "content": "awsui_content_1fj9k_jfqbk_9",
  "notifications": "awsui_notifications_1fj9k_jfqbk_10",
  "breadcrumbs": "awsui_breadcrumbs_1fj9k_jfqbk_11",
  "tools": "awsui_tools_1fj9k_jfqbk_12",
  "tools-close": "awsui_tools-close_1fj9k_jfqbk_13",
  "tools-toggle": "awsui_tools-toggle_1fj9k_jfqbk_14",
  "drawer-closed": "awsui_drawer-closed_1fj9k_jfqbk_15",
  "mobile-bar": "awsui_mobile-bar_1fj9k_jfqbk_16",
  "disable-body-scroll-root": "awsui_disable-body-scroll-root_1fj9k_jfqbk_17",
  "drawers-trigger": "awsui_drawers-trigger_1fj9k_jfqbk_18",
  "drawers-trigger-global": "awsui_drawers-trigger-global_1fj9k_jfqbk_19",
  "drawers-trigger-with-badge": "awsui_drawers-trigger-with-badge_1fj9k_jfqbk_20",
  "active-drawer": "awsui_active-drawer_1fj9k_jfqbk_21",
  "active-drawer-close-button": "awsui_active-drawer-close-button_1fj9k_jfqbk_22",
  "overflow-menu": "awsui_overflow-menu_1fj9k_jfqbk_23",
  "drawers-slider": "awsui_drawers-slider_1fj9k_jfqbk_24",
  "toolbar": "awsui_toolbar_1fj9k_jfqbk_25",
  "trigger-wrapper-tooltip-visible": "awsui_trigger-wrapper-tooltip-visible_1fj9k_jfqbk_26",
  "trigger-tooltip": "awsui_trigger-tooltip_1fj9k_jfqbk_27",
  "active-drawer-expanded-mode-button": "awsui_active-drawer-expanded-mode-button_1fj9k_jfqbk_28"
};

// node_modules/@cloudscape-design/components/app-layout/toggles/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/toggles/styles.scoped.css";
var styles_css_default13 = {
  "toggle-button": "awsui_toggle-button_16w0h_1dfmp_185",
  "close-button": "awsui_close-button_16w0h_1dfmp_220"
};

// node_modules/@cloudscape-design/components/app-layout/toggles/index.js
var togglesConfig = {
  navigation: {
    TagName: "nav",
    iconName: "menu",
    getLabels: (labels = {}) => ({
      mainLabel: labels.navigation,
      openLabel: labels.navigationToggle,
      closeLabel: labels.navigationClose
    })
  },
  tools: {
    TagName: "aside",
    iconName: "status-info",
    getLabels: (labels = {}) => ({
      mainLabel: labels.tools,
      openLabel: labels.toolsToggle,
      closeLabel: labels.toolsClose
    })
  }
};
var ToggleButton = import_react19.default.forwardRef(({ className: className2, ariaLabel, ariaExpanded, ariaControls, iconName, iconSvg, disabled, testId, onClick, badge }, ref) => {
  return import_react19.default.createElement(
    "button",
    { ref, className: clsx_m_default(className2, styles_css_default13["toggle-button"], {
      [styles_css_default12["drawers-trigger-with-badge"]]: badge
    }), "aria-label": ariaLabel, type: "button", onClick, disabled, "aria-expanded": ariaExpanded, "aria-haspopup": ariaExpanded ? void 0 : true, "aria-controls": ariaControls, "data-testid": testId },
    import_react19.default.createElement(internal_default, { svg: iconSvg, name: iconName, badge })
  );
});
var CloseButton = import_react19.default.forwardRef(({ className: className2, ariaLabel, onClick }, ref) => {
  return import_react19.default.createElement(
    "span",
    { className: styles_css_default13["close-button"] },
    import_react19.default.createElement(InternalButton, { ref, className: className2, ariaLabel, variant: "icon", formAction: "none", iconName: "close", onClick })
  );
});

// node_modules/@cloudscape-design/components/app-layout/utils/use-drawers.js
var import_react22 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/runtime-drawer/index.js
var import_react21 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/utils/visibility-context.js
var import_react20 = __toESM(require_react());
var ActiveDrawersContext = (0, import_react20.createContext)([]);

// node_modules/@cloudscape-design/components/app-layout/runtime-drawer/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/runtime-drawer/styles.scoped.css";
var styles_css_default14 = {
  "runtime-content-wrapper": "awsui_runtime-content-wrapper_14m8x_1m9bu_5"
};

// node_modules/@cloudscape-design/components/app-layout/runtime-drawer/index.js
function RuntimeDrawerWrapper({ mountContent, unmountContent, id }) {
  const ref = (0, import_react21.useRef)(null);
  const visibilityChangeCallback = (0, import_react21.useRef)(null);
  const activeDrawersIds = (0, import_react21.useContext)(ActiveDrawersContext);
  const isVisible3 = !!id && activeDrawersIds.includes(id);
  (0, import_react21.useEffect)(() => {
    const container = ref.current;
    mountContent(container, {
      onVisibilityChange: (cb) => {
        visibilityChangeCallback.current = cb;
      }
    });
    return () => {
      unmountContent(container);
      visibilityChangeCallback.current = null;
    };
  }, []);
  (0, import_react21.useEffect)(() => {
    var _a;
    (_a = visibilityChangeCallback.current) === null || _a === void 0 ? void 0 : _a.call(visibilityChangeCallback, isVisible3);
  }, [isVisible3]);
  return import_react21.default.createElement("div", { ref, className: styles_css_default14["runtime-content-wrapper"], "data-awsui-runtime-drawer-root-id": id });
}
var mapRuntimeConfigToDrawer = (runtimeConfig) => {
  var _a;
  const { mountContent, unmountContent, trigger } = runtimeConfig, runtimeDrawer = __rest(runtimeConfig, ["mountContent", "unmountContent", "trigger"]);
  return Object.assign(Object.assign({}, runtimeDrawer), { ariaLabels: Object.assign({ drawerName: (_a = runtimeDrawer.ariaLabels.content) !== null && _a !== void 0 ? _a : "" }, runtimeDrawer.ariaLabels), trigger: trigger ? {
    iconSvg: (
      // eslint-disable-next-line react/no-danger
      import_react21.default.createElement("span", { dangerouslySetInnerHTML: { __html: trigger.iconSvg } })
    )
  } : void 0, content: import_react21.default.createElement(RuntimeDrawerWrapper, { key: runtimeDrawer.id, mountContent, unmountContent, id: runtimeDrawer.id }), onResize: (event) => {
    fireNonCancelableEvent(runtimeDrawer.onResize, { size: event.detail.size, id: runtimeDrawer.id });
  } });
};
function convertRuntimeDrawers(localDrawers, globalDrawers) {
  const converted = localDrawers.map(mapRuntimeConfigToDrawer);
  const sorted = sortByPriority(converted);
  return {
    global: sortByPriority(globalDrawers.map(mapRuntimeConfigToDrawer)),
    localBefore: sorted.filter((item) => {
      var _a;
      return ((_a = item.orderPriority) !== null && _a !== void 0 ? _a : 0) > 0;
    }),
    localAfter: sorted.filter((item) => {
      var _a;
      return ((_a = item.orderPriority) !== null && _a !== void 0 ? _a : 0) <= 0;
    })
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-drawers.js
var TOOLS_DRAWER_ID = "awsui-internal-tools";
function getToolsDrawerItem(props2) {
  if (props2.toolsHide) {
    return null;
  }
  const { iconName, getLabels } = togglesConfig.tools;
  const { mainLabel, closeLabel, openLabel } = getLabels(props2.ariaLabels);
  return {
    id: TOOLS_DRAWER_ID,
    content: props2.tools,
    resizable: false,
    ariaLabels: {
      triggerButton: openLabel,
      closeButton: closeLabel,
      drawerName: mainLabel !== null && mainLabel !== void 0 ? mainLabel : ""
    },
    trigger: {
      iconName
    }
  };
}
var DRAWERS_LIMIT = 2;
var DEFAULT_ON_CHANGE_PARAMS = { initiatedByUserAction: true };
function useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange) {
  const [runtimeDrawers, setRuntimeDrawers] = (0, import_react22.useState)({
    localBefore: [],
    localAfter: [],
    global: []
  });
  const onLocalDrawerChangeStable = useStableCallback(onActiveDrawerChange);
  const onGlobalDrawersChangeStable = useStableCallback(onActiveGlobalDrawersChange);
  const localDrawerWasOpenRef = (0, import_react22.useRef)(false);
  localDrawerWasOpenRef.current = localDrawerWasOpenRef.current || !!activeDrawerId;
  const activeGlobalDrawersIdsRef = (0, import_react22.useRef)([]);
  activeGlobalDrawersIdsRef.current = activeGlobalDrawersIds;
  (0, import_react22.useEffect)(() => {
    if (disableRuntimeDrawers) {
      return;
    }
    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawersRegistered((drawers) => {
      const localDrawers = drawers.filter((drawer) => drawer.type !== "global");
      const globalDrawers = drawers.filter((drawer) => drawer.type === "global");
      setRuntimeDrawers(convertRuntimeDrawers(localDrawers, globalDrawers));
      if (!localDrawerWasOpenRef.current) {
        const defaultActiveLocalDrawer = sortByPriority(localDrawers).find((drawer) => drawer.defaultActive);
        if (defaultActiveLocalDrawer) {
          onLocalDrawerChangeStable(defaultActiveLocalDrawer.id, { initiatedByUserAction: false });
        }
      }
      const drawersNotActiveByDefault = globalDrawers.filter((drawer) => !drawer.defaultActive);
      const hasDrawersOpenByUserAction = drawersNotActiveByDefault.find((drawer) => activeGlobalDrawersIdsRef.current.includes(drawer.id));
      if (hasDrawersOpenByUserAction || activeGlobalDrawersIdsRef.current.length === DRAWERS_LIMIT) {
        return;
      }
      const defaultActiveGlobalDrawers = sortByPriority(globalDrawers).filter((drawer) => !activeGlobalDrawersIdsRef.current.includes(drawer.id) && drawer.defaultActive);
      defaultActiveGlobalDrawers.forEach((drawer) => {
        onGlobalDrawersChangeStable(drawer.id, { initiatedByUserAction: false });
      });
    });
    return () => {
      unsubscribe();
      setRuntimeDrawers({ localBefore: [], localAfter: [], global: [] });
    };
  }, [disableRuntimeDrawers, onGlobalDrawersChangeStable, onLocalDrawerChangeStable]);
  return runtimeDrawers;
}
function useDrawerRuntimeOpenClose(disableRuntimeDrawers, localDrawers, globalDrawers, activeDrawerId, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange) {
  const onDrawerOpened = useStableCallback((drawerId, params = DEFAULT_ON_CHANGE_PARAMS) => {
    const localDrawer = localDrawers === null || localDrawers === void 0 ? void 0 : localDrawers.find((drawer) => drawer.id === drawerId);
    const globalDrawer = globalDrawers.find((drawer) => drawer.id === drawerId);
    if (localDrawer && activeDrawerId !== drawerId) {
      onActiveDrawerChange(drawerId, params);
    }
    if (globalDrawer && !activeGlobalDrawersIds.includes(drawerId)) {
      onActiveGlobalDrawersChange(drawerId, params);
    }
  });
  const onDrawerClosed = useStableCallback((drawerId, params = DEFAULT_ON_CHANGE_PARAMS) => {
    const localDrawer = localDrawers === null || localDrawers === void 0 ? void 0 : localDrawers.find((drawer) => drawer.id === drawerId);
    const globalDrawer = globalDrawers.find((drawer) => drawer.id === drawerId);
    if (localDrawer && activeDrawerId === drawerId) {
      onActiveDrawerChange(null, params);
    }
    if (globalDrawer && activeGlobalDrawersIds.includes(drawerId)) {
      onActiveGlobalDrawersChange(drawerId, params);
    }
  });
  (0, import_react22.useEffect)(() => {
    if (disableRuntimeDrawers) {
      return;
    }
    return awsuiPluginsInternal.appLayout.onDrawerOpened(onDrawerOpened);
  }, [disableRuntimeDrawers, onDrawerOpened]);
  (0, import_react22.useEffect)(() => {
    if (disableRuntimeDrawers) {
      return;
    }
    return awsuiPluginsInternal.appLayout.onDrawerClosed(onDrawerClosed);
  }, [disableRuntimeDrawers, onDrawerClosed]);
}
function applyToolsDrawer(toolsProps, runtimeDrawers) {
  const drawers = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter];
  if (drawers.length === 0 && toolsProps.disableDrawersMerge) {
    return null;
  }
  const toolsItem = getToolsDrawerItem(toolsProps);
  if (toolsItem) {
    drawers.unshift(toolsItem);
  }
  return drawers;
}
var MIN_DRAWER_SIZE = 290;
function useDrawers({ drawers, activeDrawerId: controlledActiveDrawerId, onDrawerChange, onGlobalDrawerFocus, onAddNewActiveDrawer, __disableRuntimeDrawers: disableRuntimeDrawers }, ariaLabels, toolsProps) {
  var _a, _b, _c, _d;
  const [activeDrawerId = null, setActiveDrawerId] = useControllable(controlledActiveDrawerId, onDrawerChange, null, {
    componentName: "AppLayout",
    controlledProp: "activeDrawerId",
    changeHandler: "onChange"
  });
  const [activeGlobalDrawersIds, setActiveGlobalDrawersIds] = (0, import_react22.useState)([]);
  const [drawerSizes, setDrawerSizes] = (0, import_react22.useState)({});
  const [expandedDrawerId, setExpandedDrawerId] = (0, import_react22.useState)(null);
  const drawersOpenQueue = (0, import_react22.useRef)([]);
  function onActiveDrawerResize({ id, size }) {
    setDrawerSizes((oldSizes) => Object.assign(Object.assign({}, oldSizes), { [id]: size }));
    fireNonCancelableEvent(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.onResize, { id, size });
    const activeGlobalDrawer = runtimeGlobalDrawers.find((drawer) => drawer.id === id);
    fireNonCancelableEvent(activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.onResize, { id, size });
  }
  function onActiveDrawerChange(newDrawerId, { initiatedByUserAction } = DEFAULT_ON_CHANGE_PARAMS) {
    var _a2, _b2;
    setActiveDrawerId(newDrawerId);
    if (newDrawerId) {
      onAddNewActiveDrawer === null || onAddNewActiveDrawer === void 0 ? void 0 : onAddNewActiveDrawer(newDrawerId);
    }
    if (hasOwnDrawers) {
      fireNonCancelableEvent(onDrawerChange, { activeDrawerId: newDrawerId });
    } else if (!toolsProps.toolsHide) {
      toolsProps.onToolsToggle(newDrawerId === TOOLS_DRAWER_ID);
    }
    if (newDrawerId) {
      drawersOpenQueue.current = [newDrawerId, ...drawersOpenQueue.current];
      const newDrawer = (_a2 = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter]) === null || _a2 === void 0 ? void 0 : _a2.find((drawer) => drawer.id === newDrawerId);
      fireNonCancelableEvent(newDrawer === null || newDrawer === void 0 ? void 0 : newDrawer.onToggle, { isOpen: true, initiatedByUserAction });
    }
    if (activeDrawerId) {
      drawersOpenQueue.current = drawersOpenQueue.current.filter((id) => id !== activeDrawerId);
      const activeDrawer2 = (_b2 = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter]) === null || _b2 === void 0 ? void 0 : _b2.find((drawer) => drawer.id === activeDrawerId);
      fireNonCancelableEvent(activeDrawer2 === null || activeDrawer2 === void 0 ? void 0 : activeDrawer2.onToggle, { isOpen: false, initiatedByUserAction });
    }
  }
  function onActiveGlobalDrawersChange(drawerId, { initiatedByUserAction } = DEFAULT_ON_CHANGE_PARAMS) {
    const drawer = runtimeGlobalDrawers.find((drawer2) => drawer2.id === drawerId);
    if (activeGlobalDrawersIds.includes(drawerId)) {
      setActiveGlobalDrawersIds((currentState) => currentState.filter((id) => id !== drawerId));
      onGlobalDrawerFocus === null || onGlobalDrawerFocus === void 0 ? void 0 : onGlobalDrawerFocus(drawerId, false);
      drawersOpenQueue.current = drawersOpenQueue.current.filter((id) => id !== drawerId);
      fireNonCancelableEvent(drawer === null || drawer === void 0 ? void 0 : drawer.onToggle, { isOpen: false, initiatedByUserAction });
      if (drawerId === expandedDrawerId) {
        setExpandedDrawerId(null);
      }
    } else if (drawerId) {
      onAddNewActiveDrawer === null || onAddNewActiveDrawer === void 0 ? void 0 : onAddNewActiveDrawer(drawerId);
      setActiveGlobalDrawersIds((currentState) => [drawerId, ...currentState].slice(0, DRAWERS_LIMIT));
      onGlobalDrawerFocus === null || onGlobalDrawerFocus === void 0 ? void 0 : onGlobalDrawerFocus(drawerId, true);
      drawersOpenQueue.current = [drawerId, ...drawersOpenQueue.current];
      fireNonCancelableEvent(drawer === null || drawer === void 0 ? void 0 : drawer.onToggle, { isOpen: true, initiatedByUserAction });
    }
  }
  const hasOwnDrawers = !!drawers;
  let activeDrawerIdResolved = (toolsProps === null || toolsProps === void 0 ? void 0 : toolsProps.toolsOpen) && !hasOwnDrawers ? TOOLS_DRAWER_ID : activeDrawerId !== TOOLS_DRAWER_ID ? activeDrawerId : null;
  const runtimeDrawers = useRuntimeDrawers(disableRuntimeDrawers, activeDrawerIdResolved, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange);
  const { localBefore, localAfter, global: runtimeGlobalDrawers } = runtimeDrawers;
  const combinedLocalDrawers = drawers ? [...localBefore, ...drawers, ...localAfter] : applyToolsDrawer(toolsProps, runtimeDrawers);
  const activeDrawer = combinedLocalDrawers === null || combinedLocalDrawers === void 0 ? void 0 : combinedLocalDrawers.find((drawer) => drawer.id === activeDrawerIdResolved);
  activeDrawerIdResolved = (_a = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== null && _a !== void 0 ? _a : null;
  const activeGlobalDrawers = runtimeGlobalDrawers.filter((drawer) => activeGlobalDrawersIds.includes(drawer.id));
  useDrawerRuntimeOpenClose(disableRuntimeDrawers, combinedLocalDrawers, runtimeGlobalDrawers, activeDrawerId, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange);
  const activeDrawerSize = activeDrawerIdResolved ? (_c = (_b = drawerSizes[activeDrawerIdResolved]) !== null && _b !== void 0 ? _b : activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _c !== void 0 ? _c : toolsProps.toolsWidth : toolsProps.toolsWidth;
  const activeGlobalDrawersSizes = activeGlobalDrawersIds.reduce((acc, currentGlobalDrawerId) => {
    var _a2, _b2;
    const currentGlobalDrawer = runtimeGlobalDrawers.find((drawer) => drawer.id === currentGlobalDrawerId);
    return Object.assign(Object.assign({}, acc), { [currentGlobalDrawerId]: (_b2 = (_a2 = drawerSizes[currentGlobalDrawerId]) !== null && _a2 !== void 0 ? _a2 : currentGlobalDrawer === null || currentGlobalDrawer === void 0 ? void 0 : currentGlobalDrawer.defaultSize) !== null && _b2 !== void 0 ? _b2 : MIN_DRAWER_SIZE });
  }, {});
  const minGlobalDrawersSizes = runtimeGlobalDrawers.reduce((acc, globalDrawer) => {
    var _a2;
    return Object.assign(Object.assign({}, acc), { [globalDrawer.id]: Math.min((_a2 = globalDrawer.defaultSize) !== null && _a2 !== void 0 ? _a2 : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE) });
  }, {});
  const minDrawerSize = Math.min((toolsProps === null || toolsProps === void 0 ? void 0 : toolsProps.toolsOpen) ? toolsProps.toolsWidth : (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _d !== void 0 ? _d : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);
  return {
    ariaLabelsWithDrawers: ariaLabels,
    drawers: combinedLocalDrawers || void 0,
    activeDrawer,
    activeDrawerId: activeDrawerIdResolved,
    globalDrawers: runtimeGlobalDrawers,
    activeGlobalDrawers,
    activeGlobalDrawersIds,
    activeGlobalDrawersSizes,
    activeDrawerSize,
    minDrawerSize,
    minGlobalDrawersSizes,
    drawerSizes,
    drawersOpenQueue: drawersOpenQueue.current,
    onActiveDrawerChange,
    onActiveDrawerResize,
    onActiveGlobalDrawersChange,
    expandedDrawerId,
    setExpandedDrawerId
  };
}

// node_modules/@cloudscape-design/components/app-layout/drawer/drawers-helpers.js
function splitItems(maybeItems, splitIndex, activeId) {
  const items = maybeItems !== null && maybeItems !== void 0 ? maybeItems : [];
  const visibleItems = items.slice(0, splitIndex);
  const overflowItems = items.slice(splitIndex);
  if (overflowItems.length === 1) {
    return { visibleItems: items, overflowItems: [] };
  }
  if (activeId && overflowItems.length > 0 && visibleItems.length > 0) {
    const activeInOverflow = overflowItems.find((item) => item.id === activeId);
    if (activeInOverflow) {
      overflowItems.splice(overflowItems.indexOf(activeInOverflow), 1);
      overflowItems.unshift(visibleItems.pop());
      visibleItems.push(activeInOverflow);
    }
  }
  return { visibleItems, overflowItems };
}

// node_modules/@cloudscape-design/components/app-layout/drawer/overflow-menu.js
var import_react36 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/internal.js
var import_react35 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/dropdown/index.js
var import_react24 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@cloudscape-design/components/internal/components/dropdown/context.js
var import_react23 = __toESM(require_react());
var DropdownContext = import_react23.default.createContext({
  position: "bottom-right"
});
function DropdownContextProvider({ children, position = "bottom-right" }) {
  return import_react23.default.createElement(DropdownContext.Provider, { value: { position } }, children);
}
function useDropdownContext() {
  return (0, import_react23.useContext)(DropdownContext);
}

// node_modules/@cloudscape-design/components/internal/components/dropdown/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/dropdown/styles.scoped.css";
var styles_css_default15 = {
  "dropdown-content-wrapper": "awsui_dropdown-content-wrapper_qwoo0_bnfp0_153",
  "awsui-motion-fade-in-dropdown": "awsui_awsui-motion-fade-in-dropdown_qwoo0_bnfp0_1",
  "refresh": "awsui_refresh_qwoo0_bnfp0_174",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_qwoo0_bnfp0_1",
  "root": "awsui_root_qwoo0_bnfp0_199",
  "interior": "awsui_interior_qwoo0_bnfp0_232",
  "dropdown": "awsui_dropdown_qwoo0_bnfp0_153",
  "use-portal": "awsui_use-portal_qwoo0_bnfp0_242",
  "is-empty": "awsui_is-empty_qwoo0_bnfp0_288",
  "dropdown-drop-up": "awsui_dropdown-drop-up_qwoo0_bnfp0_295",
  "with-limited-width": "awsui_with-limited-width_qwoo0_bnfp0_299",
  "dropdown-drop-left": "awsui_dropdown-drop-left_qwoo0_bnfp0_302",
  "dropdown-drop-right": "awsui_dropdown-drop-right_qwoo0_bnfp0_305",
  "occupy-entire-width": "awsui_occupy-entire-width_qwoo0_bnfp0_308",
  "stretch-beyond-trigger-width": "awsui_stretch-beyond-trigger-width_qwoo0_bnfp0_311",
  "hide-block-border": "awsui_hide-block-border_qwoo0_bnfp0_318",
  "open": "awsui_open_qwoo0_bnfp0_327",
  "nowrap": "awsui_nowrap_qwoo0_bnfp0_336",
  "dropdown-content": "awsui_dropdown-content_qwoo0_bnfp0_153",
  "stretch-trigger-height": "awsui_stretch-trigger-height_qwoo0_bnfp0_347"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown/dropdown-fit-handler.js
var AVAILABLE_SPACE_RESERVE_DEFAULT = 50;
var AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL = 19;
var AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL = 20;
var getClosestParentDimensions = (element) => {
  const parents = getOverflowParents(element).map((element2) => {
    const { blockSize, inlineSize, insetBlockStart, insetInlineStart } = getLogicalBoundingClientRect(element2);
    return {
      blockSize,
      inlineSize,
      insetBlockStart,
      insetInlineStart
    };
  });
  return parents.shift();
};
var defaultMaxDropdownWidth = getBreakpointValue("xxs");
var getAvailableSpace = ({ trigger, overflowParents, stretchWidth = false, stretchHeight = false, isMobile }) => {
  const availableSpaceReserveVertical = stretchHeight ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const availableSpaceReserveHorizontal = stretchWidth ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const { insetBlockEnd: triggerBlockEnd, insetInlineStart: triggerInlineStart, insetInlineEnd: triggerInlineEnd } = getLogicalBoundingClientRect(trigger);
  return overflowParents.reduce(({ blockStart, blockEnd, inlineStart, inlineEnd }, overflowParent) => {
    const offsetTop = triggerBlockEnd - overflowParent.insetBlockStart;
    const currentBlockStart = offsetTop - trigger.offsetHeight - availableSpaceReserveVertical;
    const currentBlockEnd = overflowParent.blockSize - offsetTop - availableSpaceReserveVertical;
    const currentInlineStart = triggerInlineEnd - overflowParent.insetInlineStart - availableSpaceReserveHorizontal;
    const currentInlineEnd = overflowParent.insetInlineStart + overflowParent.inlineSize - triggerInlineStart - availableSpaceReserveHorizontal;
    return {
      blockStart: Math.min(blockStart, currentBlockStart),
      blockEnd: Math.min(blockEnd, currentBlockEnd),
      inlineStart: Math.min(inlineStart, currentInlineStart),
      inlineEnd: Math.min(inlineEnd, currentInlineEnd)
    };
  }, {
    blockStart: Number.MAX_VALUE,
    blockEnd: Number.MAX_VALUE,
    inlineStart: Number.MAX_VALUE,
    inlineEnd: Number.MAX_VALUE
  });
};
var getInteriorAvailableSpace = ({ trigger, overflowParents, isMobile }) => {
  const AVAILABLE_SPACE_RESERVE_VERTICAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const AVAILABLE_SPACE_RESERVE_HORIZONTAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const { insetBlockEnd: triggerBlockEnd, insetBlockStart: triggerBlockStart, insetInlineStart: triggerInlineStart, insetInlineEnd: triggerInlineEnd } = getLogicalBoundingClientRect(trigger);
  return overflowParents.reduce(({ blockStart, blockEnd, inlineStart, inlineEnd }, overflowParent) => {
    const currentBlockStart = triggerBlockEnd - overflowParent.insetBlockStart - AVAILABLE_SPACE_RESERVE_VERTICAL;
    const currentBlockEnd = overflowParent.blockSize - triggerBlockStart + overflowParent.insetBlockStart - AVAILABLE_SPACE_RESERVE_VERTICAL;
    const currentInlineStart = triggerInlineStart - overflowParent.insetInlineStart - AVAILABLE_SPACE_RESERVE_HORIZONTAL;
    const currentInlineEnd = overflowParent.insetInlineStart + overflowParent.inlineSize - triggerInlineEnd - AVAILABLE_SPACE_RESERVE_HORIZONTAL;
    return {
      blockStart: Math.min(blockStart, currentBlockStart),
      blockEnd: Math.min(blockEnd, currentBlockEnd),
      inlineStart: Math.min(inlineStart, currentInlineStart),
      inlineEnd: Math.min(inlineEnd, currentInlineEnd)
    };
  }, {
    blockStart: Number.MAX_VALUE,
    blockEnd: Number.MAX_VALUE,
    inlineStart: Number.MAX_VALUE,
    inlineEnd: Number.MAX_VALUE
  });
};
var getWidths = ({ triggerElement, dropdownElement, desiredMinWidth, stretchBeyondTriggerWidth = false }) => {
  const { inlineSize: triggerInlineSize } = getLogicalBoundingClientRect(triggerElement);
  const minWidth = desiredMinWidth ? Math.min(triggerInlineSize, desiredMinWidth) : triggerInlineSize;
  const maxWidth = stretchBeyondTriggerWidth ? Math.max(defaultMaxDropdownWidth, triggerInlineSize) : Number.MAX_VALUE;
  const { inlineSize: requiredWidth } = getLogicalBoundingClientRect(dropdownElement);
  const idealWidth = Math.min(Math.max(requiredWidth, minWidth), maxWidth);
  return { idealWidth, minWidth, triggerInlineSize };
};
var hasEnoughSpaceToStretchBeyondTriggerWidth = ({ triggerElement, dropdownElement, desiredMinWidth, expandToViewport, stretchWidth, stretchHeight, isMobile }) => {
  const overflowParents = getOverflowParentDimensions({
    element: dropdownElement,
    excludeClosestParent: false,
    expandToViewport,
    canExpandOutsideViewport: stretchHeight
  });
  const { idealWidth } = getWidths({
    triggerElement,
    dropdownElement,
    desiredMinWidth,
    stretchBeyondTriggerWidth: true
  });
  const availableSpace = getAvailableSpace({
    trigger: triggerElement,
    overflowParents,
    stretchWidth,
    stretchHeight,
    isMobile
  });
  return idealWidth <= availableSpace.inlineStart || idealWidth <= availableSpace.inlineEnd;
};
var getDropdownPosition = ({ triggerElement, dropdownElement, overflowParents, minWidth: desiredMinWidth, preferCenter = false, stretchWidth = false, stretchHeight = false, isMobile = false, stretchBeyondTriggerWidth = false }) => {
  const availableSpace = getAvailableSpace({
    trigger: triggerElement,
    overflowParents,
    stretchWidth,
    stretchHeight,
    isMobile
  });
  const { idealWidth, minWidth, triggerInlineSize } = getWidths({
    triggerElement,
    dropdownElement,
    desiredMinWidth,
    stretchBeyondTriggerWidth
  });
  let dropInlineStart;
  let insetInlineStart = null;
  let inlineSize = idealWidth;
  if (idealWidth <= availableSpace.inlineEnd) {
    dropInlineStart = false;
  } else if (idealWidth <= availableSpace.inlineStart) {
    dropInlineStart = true;
  } else {
    dropInlineStart = availableSpace.inlineStart > availableSpace.inlineEnd;
    inlineSize = Math.max(availableSpace.inlineStart, availableSpace.inlineEnd, minWidth);
  }
  if (preferCenter) {
    const spillOver = (idealWidth - triggerInlineSize) / 2;
    const availableOutsideLeft = availableSpace.inlineStart - triggerInlineSize;
    const availableOutsideRight = availableSpace.inlineEnd - triggerInlineSize;
    const fitsInCenter = availableOutsideLeft >= spillOver && availableOutsideRight >= spillOver;
    if (fitsInCenter) {
      insetInlineStart = -spillOver;
    }
  }
  const dropBlockStart = availableSpace.blockEnd < dropdownElement.offsetHeight && availableSpace.blockStart > availableSpace.blockEnd;
  const availableHeight = dropBlockStart ? availableSpace.blockStart : availableSpace.blockEnd;
  const croppedHeight = Math.max(stretchHeight ? availableHeight : Math.floor(availableHeight / 31) * 31 + 16, 15);
  return {
    dropBlockStart,
    dropInlineStart,
    insetInlineStart: insetInlineStart === null ? "auto" : `${insetInlineStart}px`,
    blockSize: `${croppedHeight}px`,
    inlineSize: `${inlineSize}px`
  };
};
var getInteriorDropdownPosition = (trigger, dropdown, overflowParents, isMobile) => {
  const availableSpace = getInteriorAvailableSpace({ trigger, overflowParents, isMobile });
  const { insetBlockEnd: triggerBlockEnd, insetBlockStart: triggerBlockStart, inlineSize: triggerInlineSize } = getLogicalBoundingClientRect(trigger);
  const { insetBlockStart: parentDropdownBlockStart, blockSize: parentDropdownHeight } = getClosestParentDimensions(trigger);
  let dropInlineStart;
  let { inlineSize } = getLogicalBoundingClientRect(dropdown);
  const insetBlockStart = triggerBlockStart - parentDropdownBlockStart;
  if (inlineSize <= availableSpace.inlineEnd) {
    dropInlineStart = false;
  } else if (inlineSize <= availableSpace.inlineStart) {
    dropInlineStart = true;
  } else {
    dropInlineStart = availableSpace.inlineStart > availableSpace.inlineEnd;
    inlineSize = Math.max(availableSpace.inlineStart, availableSpace.inlineEnd);
  }
  const insetInlineStart = dropInlineStart ? 0 - inlineSize : triggerInlineSize;
  const dropBlockStart = availableSpace.blockEnd < dropdown.offsetHeight && availableSpace.blockStart > availableSpace.blockEnd;
  const insetBlockEnd = dropBlockStart ? parentDropdownBlockStart + parentDropdownHeight - triggerBlockEnd : 0;
  const availableHeight = dropBlockStart ? availableSpace.blockStart : availableSpace.blockEnd;
  const croppedHeight = Math.floor(availableHeight / 31) * 31 + 16;
  return {
    dropBlockStart,
    dropInlineStart,
    blockSize: `${croppedHeight}px`,
    inlineSize: `${inlineSize}px`,
    insetBlockStart: `${insetBlockStart}px`,
    insetBlockEnd: `${insetBlockEnd}px`,
    insetInlineStart: `${insetInlineStart}px`
  };
};
var calculatePosition = (dropdownElement, triggerElement, verticalContainerElement, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth, stretchBeyondTriggerWidth) => {
  verticalContainerElement.style.maxBlockSize = "";
  dropdownElement.style.inlineSize = "";
  dropdownElement.style.insetBlockStart = "";
  dropdownElement.style.insetBlockEnd = "";
  dropdownElement.style.insetInlineStart = "";
  dropdownElement.classList.remove(styles_css_default15["dropdown-drop-left"]);
  dropdownElement.classList.remove(styles_css_default15["dropdown-drop-right"]);
  dropdownElement.classList.remove(styles_css_default15["dropdown-drop-up"]);
  const overflowParents = getOverflowParentDimensions({
    element: dropdownElement,
    excludeClosestParent: interior,
    expandToViewport,
    canExpandOutsideViewport: stretchHeight
  });
  const position = interior ? getInteriorDropdownPosition(triggerElement, dropdownElement, overflowParents, isMobile) : getDropdownPosition({
    triggerElement,
    dropdownElement,
    overflowParents,
    minWidth,
    preferCenter,
    stretchWidth,
    stretchHeight,
    isMobile,
    stretchBeyondTriggerWidth
  });
  const triggerBox = getLogicalBoundingClientRect(triggerElement);
  return [position, triggerBox];
};

// node_modules/@cloudscape-design/components/internal/components/dropdown/dropdown-position.js
function applyDropdownPositionRelativeToViewport({ position, dropdownElement, triggerRect, isMobile }) {
  const useAbsolutePositioning = isMobile;
  const verticalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollTop : 0;
  const horizontalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollLeft : 0;
  dropdownElement.style.position = useAbsolutePositioning ? "absolute" : "fixed";
  if (position.dropBlockStart) {
    dropdownElement.style.insetBlockEnd = `calc(100% - ${verticalScrollOffset + triggerRect.insetBlockStart}px)`;
  } else {
    dropdownElement.style.insetBlockStart = `${verticalScrollOffset + triggerRect.insetBlockEnd}px`;
  }
  if (position.dropInlineStart) {
    dropdownElement.style.insetInlineStart = `calc(${horizontalScrollOffset + triggerRect.insetInlineEnd}px - ${position.inlineSize})`;
  } else {
    dropdownElement.style.insetInlineStart = `${horizontalScrollOffset + triggerRect.insetInlineStart}px`;
  }
}

// node_modules/@cloudscape-design/components/internal/components/dropdown/index.js
var DropdownContainer = ({ triggerRef, children, renderWithPortal, id, referrerId, open }) => {
  var _a, _b;
  if (!renderWithPortal) {
    return import_react24.default.createElement(import_react24.default.Fragment, null, children);
  }
  if (!open) {
    return null;
  }
  const currentDocument = (_b = (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.ownerDocument) !== null && _b !== void 0 ? _b : document;
  return (0, import_react_dom.createPortal)(import_react24.default.createElement("div", { id, "data-awsui-referrer-id": referrerId }, children), currentDocument.body);
};
var TransitionContent = ({ state, transitionRef, dropdownClasses, stretchWidth, interior, isRefresh, dropdownRef, verticalContainerRef, expandToViewport, stretchBeyondTriggerWidth, header, children, footer, position, open, onMouseDown, id, role, ariaLabelledby, ariaDescribedby }) => {
  const contentRef = useMergeRefs(dropdownRef, transitionRef);
  return import_react24.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default15.dropdown, dropdownClasses, {
      [styles_css_default15.open]: open,
      [styles_css_default15["with-limited-width"]]: !stretchWidth,
      [styles_css_default15["hide-block-border"]]: stretchWidth,
      [styles_css_default15.interior]: interior,
      [styles_css_default15.refresh]: isRefresh,
      [styles_css_default15["use-portal"]]: expandToViewport && !interior,
      [styles_css_default15["stretch-beyond-trigger-width"]]: stretchBeyondTriggerWidth
    }), ref: contentRef, id, role, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "data-open": open, "data-animating": state !== "exited", "aria-hidden": !open, style: stretchBeyondTriggerWidth ? { [custom_css_properties_default.dropdownDefaultMaxWidth]: `${defaultMaxDropdownWidth}px` } : {}, onMouseDown },
    import_react24.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default15["dropdown-content-wrapper"], !header && !children && styles_css_default15["is-empty"], isRefresh && styles_css_default15.refresh) },
      import_react24.default.createElement(
        "div",
        { ref: verticalContainerRef, className: styles_css_default15["dropdown-content"] },
        import_react24.default.createElement(
          DropdownContextProvider,
          { position },
          header,
          children,
          footer
        )
      )
    )
  );
};
var Dropdown = ({ children, trigger, open, onDropdownClose, onMouseDown, header, footer, dropdownId, stretchTriggerHeight = false, stretchWidth = true, stretchHeight = false, stretchToTriggerWidth = true, stretchBeyondTriggerWidth = false, expandToViewport = false, preferCenter = false, interior = false, minWidth, scrollable = true, loopFocus = expandToViewport, onFocus, onBlur, contentKey, dropdownContentId, dropdownContentRole, ariaLabelledby, ariaDescribedby }) => {
  const wrapperRef = (0, import_react24.useRef)(null);
  const triggerRef = (0, import_react24.useRef)(null);
  const dropdownRef = (0, import_react24.useRef)(null);
  const dropdownContainerRef = (0, import_react24.useRef)(null);
  const verticalContainerRef = (0, import_react24.useRef)(null);
  const fixedPosition = (0, import_react24.useRef)(null);
  const isRefresh = useVisualRefresh();
  const dropdownClasses = usePortalModeClasses(triggerRef);
  const [position, setPosition] = (0, import_react24.useState)("bottom-right");
  const isMobile = useMobile();
  const setDropdownPosition = (position2, triggerBox, target, verticalContainer) => {
    const entireWidth = !interior && stretchWidth;
    if (!stretchWidth) {
      verticalContainer.style.maxBlockSize = `${parseInt(position2.blockSize) + 1}px`;
    } else {
      verticalContainer.style.maxBlockSize = position2.blockSize;
    }
    if (entireWidth && !expandToViewport) {
      if (stretchToTriggerWidth) {
        target.classList.add(styles_css_default15["occupy-entire-width"]);
      }
    } else {
      target.style.inlineSize = position2.inlineSize;
    }
    if (position2.dropBlockStart && !interior) {
      target.classList.add(styles_css_default15["dropdown-drop-up"]);
      if (!expandToViewport) {
        target.style.insetBlockEnd = "100%";
      }
    } else {
      target.classList.remove(styles_css_default15["dropdown-drop-up"]);
    }
    target.classList.add(position2.dropInlineStart ? styles_css_default15["dropdown-drop-left"] : styles_css_default15["dropdown-drop-right"]);
    if (position2.insetInlineStart && position2.insetInlineStart !== "auto") {
      target.style.insetInlineStart = position2.insetInlineStart;
    }
    if (expandToViewport && !interior) {
      applyDropdownPositionRelativeToViewport({
        position: position2,
        dropdownElement: target,
        triggerRect: triggerBox,
        isMobile
      });
      fixedPosition.current = position2;
      return;
    }
    if (interior && isInteriorPosition(position2)) {
      if (position2.dropBlockStart) {
        target.style.insetBlockEnd = position2.insetBlockEnd;
      } else {
        target.style.insetBlockStart = position2.insetBlockStart;
      }
      target.style.insetInlineStart = position2.insetInlineStart;
    }
    if (position2.dropBlockStart && position2.dropInlineStart) {
      setPosition("top-left");
    } else if (position2.dropBlockStart) {
      setPosition("top-right");
    } else if (position2.dropInlineStart) {
      setPosition("bottom-left");
    } else {
      setPosition("bottom-right");
    }
  };
  const isOutsideDropdown = (element) => (!wrapperRef.current || !nodeBelongs(wrapperRef.current, element)) && (!dropdownContainerRef.current || !nodeBelongs(dropdownContainerRef.current, element));
  const focusHandler = (event) => {
    if (!event.relatedTarget || isOutsideDropdown(event.relatedTarget)) {
      fireNonCancelableEvent(onFocus, event);
    }
  };
  const blurHandler = (event) => {
    if (!event.relatedTarget || isOutsideDropdown(event.relatedTarget)) {
      fireNonCancelableEvent(onBlur, event);
    }
  };
  const fixStretching = () => {
    const classNameToRemove = styles_css_default15["stretch-beyond-trigger-width"];
    if (open && stretchBeyondTriggerWidth && dropdownRef.current && triggerRef.current && dropdownRef.current.classList.contains(classNameToRemove) && !hasEnoughSpaceToStretchBeyondTriggerWidth({
      triggerElement: triggerRef.current,
      dropdownElement: dropdownRef.current,
      desiredMinWidth: minWidth,
      expandToViewport,
      stretchWidth,
      stretchHeight,
      isMobile
    })) {
      dropdownRef.current.classList.remove(classNameToRemove);
    }
  };
  useResizeObserver(() => dropdownRef.current, fixStretching);
  (0, import_react24.useLayoutEffect)(() => {
    const onDropdownOpen = () => {
      if (open && dropdownRef.current && triggerRef.current && verticalContainerRef.current) {
        if (scrollable) {
          dropdownRef.current.classList.add(styles_css_default15.nowrap);
        }
        setDropdownPosition(...calculatePosition(dropdownRef.current, triggerRef.current, verticalContainerRef.current, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth, stretchBeyondTriggerWidth), dropdownRef.current, verticalContainerRef.current);
        if (scrollable) {
          dropdownRef.current.classList.remove(styles_css_default15.nowrap);
        }
      }
    };
    onDropdownOpen();
    if (open) {
      window.addEventListener("scroll", onDropdownOpen);
      const timeoutId = setTimeout(() => {
        window.removeEventListener("scroll", onDropdownOpen);
      }, 500);
      return () => {
        clearTimeout(timeoutId);
        window.removeEventListener("scroll", onDropdownOpen);
      };
    }
  }, [open, dropdownRef, triggerRef, verticalContainerRef, interior, stretchWidth, isMobile, contentKey]);
  (0, import_react24.useEffect)(() => {
    if (!open) {
      return;
    }
    const clickListener = (event) => {
      const target = event.composedPath ? event.composedPath()[0] : event.target;
      if (!nodeBelongs(dropdownRef.current, target) && !nodeBelongs(triggerRef.current, target)) {
        fireNonCancelableEvent(onDropdownClose);
      }
    };
    window.addEventListener("click", clickListener, true);
    return () => {
      window.removeEventListener("click", clickListener, true);
    };
  }, [open, onDropdownClose]);
  (0, import_react24.useLayoutEffect)(() => {
    if (!expandToViewport || !open) {
      return;
    }
    const updateDropdownPosition = () => {
      if (triggerRef.current && dropdownRef.current && verticalContainerRef.current && fixedPosition.current) {
        applyDropdownPositionRelativeToViewport({
          position: fixedPosition.current,
          dropdownElement: dropdownRef.current,
          triggerRect: getLogicalBoundingClientRect(triggerRef.current),
          isMobile
        });
      }
    };
    updateDropdownPosition();
    const controller = new AbortController();
    window.addEventListener("scroll", updateDropdownPosition, { capture: true, signal: controller.signal });
    window.addEventListener("resize", updateDropdownPosition, { capture: true, signal: controller.signal });
    return () => {
      controller.abort();
    };
  }, [open, expandToViewport, isMobile]);
  const referrerId = useUniqueId();
  return import_react24.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default15.root, interior && styles_css_default15.interior, stretchTriggerHeight && styles_css_default15["stretch-trigger-height"]), ref: wrapperRef, onFocus: focusHandler, onBlur: blurHandler },
    import_react24.default.createElement("div", { id: referrerId, className: clsx_m_default(stretchTriggerHeight && styles_css_default15["stretch-trigger-height"]), ref: triggerRef }, trigger),
    import_react24.default.createElement(TabTrap, { focusNextCallback: () => {
      var _a;
      return dropdownRef.current && ((_a = getFirstFocusable(dropdownRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
    }, disabled: !open || !loopFocus }),
    import_react24.default.createElement(
      DropdownContainer,
      { triggerRef, renderWithPortal: expandToViewport && !interior, id: dropdownId, referrerId, open },
      import_react24.default.createElement(Transition, { in: open !== null && open !== void 0 ? open : false, exit: false }, (state, ref) => import_react24.default.createElement(
        "div",
        { ref: dropdownContainerRef },
        import_react24.default.createElement(TabTrap, { focusNextCallback: () => {
          var _a;
          return triggerRef.current && ((_a = getLastFocusable(triggerRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
        }, disabled: !open || !loopFocus }),
        import_react24.default.createElement(TransitionContent, { state, transitionRef: ref, dropdownClasses, open, stretchWidth, interior, header, expandToViewport, stretchBeyondTriggerWidth, footer, onMouseDown, isRefresh, dropdownRef, verticalContainerRef, position, id: dropdownContentId, role: dropdownContentRole, ariaLabelledby, ariaDescribedby }, children),
        import_react24.default.createElement(TabTrap, { focusNextCallback: () => {
          var _a;
          return triggerRef.current && ((_a = getFirstFocusable(triggerRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
        }, disabled: !open || !loopFocus })
      ))
    )
  );
};
var isInteriorPosition = (position) => position.insetBlockEnd !== void 0;
var dropdown_default = Dropdown;

// node_modules/@cloudscape-design/components/internal/components/options-list/index.js
var import_react25 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/options-list/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/options-list/styles.scoped.css";
var styles_css_default16 = {
  "options-list": "awsui_options-list_19gcf_11x8t_145",
  "options-list-embedded": "awsui_options-list-embedded_19gcf_11x8t_192",
  "decrease-block-margin": "awsui_decrease-block-margin_19gcf_11x8t_199"
};

// node_modules/@cloudscape-design/components/internal/components/options-list/index.js
var BOTTOM_TRIGGER_OFFSET = 80;
var getItemIndex = (containerRef, event) => {
  const target = findUpUntil(event.target, (element) => element === containerRef.current || !!element.dataset.mouseTarget);
  const mouseTarget = target === null || target === void 0 ? void 0 : target.dataset.mouseTarget;
  return mouseTarget ? parseInt(mouseTarget) : -1;
};
var OptionsList = (_a, ref) => {
  var { open, statusType, children, nativeAttributes = {}, onKeyDown, onBlur, onFocus, onLoadMore, onMouseUp, onMouseMove, position = "relative", role = "listbox", decreaseBlockMargin = false, ariaLabel, ariaLabelledby, ariaDescribedby, embedded, stickyItemBlockSize } = _a, restProps = __rest(_a, ["open", "statusType", "children", "nativeAttributes", "onKeyDown", "onBlur", "onFocus", "onLoadMore", "onMouseUp", "onMouseMove", "position", "role", "decreaseBlockMargin", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "embedded", "stickyItemBlockSize"]);
  const baseProps = getBaseProps(restProps);
  const menuRef = (0, import_react25.useRef)(null);
  const handleScroll = useStableCallback(() => {
    const scrollContainer = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current;
    if (scrollContainer) {
      const bottomEdgePosition = scrollContainer.scrollTop + scrollContainer.clientHeight;
      const remainingScrollHeight = scrollContainer.scrollHeight - bottomEdgePosition;
      if (remainingScrollHeight < BOTTOM_TRIGGER_OFFSET) {
        fireNonCancelableEvent(onLoadMore);
      }
    }
  });
  (0, import_react25.useEffect)(() => {
    if (open && statusType === "pending") {
      handleScroll();
    }
  }, [open, statusType, handleScroll]);
  const className2 = clsx_m_default(styles_css_default16["options-list"], {
    [styles_css_default16["decrease-block-margin"]]: decreaseBlockMargin,
    [styles_css_default16["options-list-embedded"]]: embedded
  });
  const mergedRef = useMergeRefs(ref, menuRef);
  return import_react25.default.createElement("ul", Object.assign({}, baseProps, nativeAttributes, { className: className2, ref: mergedRef, style: { position, scrollPaddingBlockStart: stickyItemBlockSize !== null && stickyItemBlockSize !== void 0 ? stickyItemBlockSize : void 0 }, role, onScroll: handleScroll, onKeyDown: (event) => fireKeyboardEvent(onKeyDown, event), onMouseMove: (event) => onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(getItemIndex(menuRef, event)), onMouseUp: (event) => onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(getItemIndex(menuRef, event)), onBlur: (event) => fireNonCancelableEvent(onBlur, { relatedTarget: event.relatedTarget }), onFocus: () => fireNonCancelableEvent(onFocus), tabIndex: embedded ? 0 : -1, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }), open && children);
};
var options_list_default = import_react25.default.forwardRef(OptionsList);

// node_modules/@cloudscape-design/components/internal/styles/motion/utils.js
var spinWhenOpen = (styles, className2, open) => clsx_m_default(styles[className2], open && styles[`${className2}-open`]);

// node_modules/@cloudscape-design/components/button-dropdown/items-list.js
var import_react32 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/category-element.js
var import_react26 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/button-dropdown/category-elements/styles.scoped.css";
var styles_css_default17 = {
  "header": "awsui_header_16mm3_1lc2r_145",
  "disabled": "awsui_disabled_16mm3_1lc2r_160",
  "expandable-header": "awsui_expandable-header_16mm3_1lc2r_164",
  "rolled-down": "awsui_rolled-down_16mm3_1lc2r_175",
  "highlighted": "awsui_highlighted_16mm3_1lc2r_178",
  "is-focused": "awsui_is-focused_16mm3_1lc2r_196",
  "visual-refresh": "awsui_visual-refresh_16mm3_1lc2r_199",
  "category": "awsui_category_16mm3_1lc2r_203",
  "expandable": "awsui_expandable_16mm3_1lc2r_164",
  "variant-navigation": "awsui_variant-navigation_16mm3_1lc2r_218",
  "expand-icon": "awsui_expand-icon_16mm3_1lc2r_225",
  "expand-icon-up": "awsui_expand-icon-up_16mm3_1lc2r_242",
  "expand-icon-right": "awsui_expand-icon-right_16mm3_1lc2r_245",
  "items-list-container": "awsui_items-list-container_16mm3_1lc2r_253",
  "in-dropdown": "awsui_in-dropdown_16mm3_1lc2r_262"
};

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/category-element.js
var CategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, variant, position }) => {
  return import_react26.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default17.category, styles_css_default17[`variant-${variant}`], disabled && styles_css_default17.disabled), role: "presentation" },
    item.text && import_react26.default.createElement("p", { className: clsx_m_default(styles_css_default17.header, { [styles_css_default17.disabled]: disabled }), "aria-hidden": "true" }, item.text),
    import_react26.default.createElement("ul", { className: styles_css_default17["items-list-container"], role: "group", "aria-label": item.text, "aria-disabled": disabled }, item.items && import_react26.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, categoryDisabled: disabled, hasCategoryHeader: !!item.text, variant, position }))
  );
};
var category_element_default = CategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/expandable-category-element.js
var import_react28 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/tooltip.js
var import_react27 = __toESM(require_react());
var DEFAULT_OPEN_TIMEOUT_IN_MS = 120;
function Tooltip2({ children, content, position = "right", className: className2 }) {
  const ref = (0, import_react27.useRef)(null);
  const isReducedMotion = useReducedMotion(ref);
  const { open, triggerProps } = useTooltipOpen(isReducedMotion ? 0 : DEFAULT_OPEN_TIMEOUT_IN_MS);
  const portalClasses = usePortalModeClasses(ref);
  return import_react27.default.createElement(
    "span",
    Object.assign({ ref }, triggerProps, { className: className2 }),
    children,
    open && import_react27.default.createElement(
      Portal,
      null,
      import_react27.default.createElement(
        "span",
        { className: portalClasses },
        import_react27.default.createElement(
          PopoverContainer,
          { size: "small", fixedWidth: false, position, trackRef: ref, arrow: (position2) => import_react27.default.createElement(arrow_default, { position: position2 }), renderWithPortal: true, zIndex: 7e3 },
          import_react27.default.createElement(
            PopoverBody,
            { dismissButton: false, dismissAriaLabel: void 0, header: null, onDismiss: () => {
            }, overflowVisible: "both" },
            import_react27.default.createElement("span", { "data-testid": "button-dropdown-disabled-reason", role: "tooltip" }, content)
          )
        )
      )
    )
  );
}
function useTooltipOpen(timeout) {
  const handle = (0, import_react27.useRef)();
  const [isOpen, setIsOpen] = (0, import_react27.useState)(false);
  const close = () => {
    clearTimeout(handle.current);
    setIsOpen(false);
  };
  const open = () => setIsOpen(true);
  const openDelayed = () => {
    handle.current = setTimeout(open, timeout);
  };
  const onKeyDown = (e3) => {
    if (isOpen && isEscape(e3.key)) {
      e3.preventDefault();
      e3.stopPropagation();
      close();
    }
  };
  const onFocus = openDelayed;
  const onBlur = close;
  return {
    open: isOpen,
    triggerProps: {
      onBlur,
      onFocus,
      onKeyDown
    }
  };
}
var isEscape = (key2) => key2 === "Escape" || key2 === "Esc";

// node_modules/@cloudscape-design/components/button-dropdown/utils/menu-item.js
var getMenuItemProps = ({ disabled, parent, expanded }) => ({
  role: "menuitem",
  "aria-disabled": disabled ? "true" : void 0,
  "aria-haspopup": parent ? "true" : void 0,
  "aria-expanded": expanded ? "true" : parent ? "false" : void 0
});
var getMenuItemCheckboxProps = ({ disabled, checked }) => ({
  role: "menuitemcheckbox",
  "aria-disabled": disabled ? "true" : void 0,
  "aria-checked": checked ? "true" : "false"
});

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/expandable-category-element.js
var ExpandableCategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, expandToViewport, variant, position }) => {
  const highlighted = isHighlighted(item);
  const expanded = isExpanded(item);
  const isKeyboardHighlighted = isKeyboardHighlight(item);
  const triggerRef = import_react28.default.useRef(null);
  const ref = (0, import_react28.useRef)(null);
  (0, import_react28.useEffect)(() => {
    if (triggerRef.current && highlighted && !expanded) {
      triggerRef.current.focus();
    }
  }, [expanded, highlighted]);
  const onClick = (event) => {
    var _a;
    if (!disabled) {
      event.preventDefault();
      onGroupToggle(item, event);
      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  const isVisualRefresh = useVisualRefresh();
  const isDisabledWithReason = !!item.disabledReason && item.disabled;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const trigger = item.text && import_react28.default.createElement(
    "span",
    Object.assign({
      className: clsx_m_default(styles_css_default17.header, styles_css_default17["expandable-header"], styles_css_default17[`variant-${variant}`], {
        [styles_css_default17.disabled]: disabled,
        [styles_css_default17.highlighted]: highlighted,
        [styles_css_default17["is-focused"]]: isKeyboardHighlighted,
        [styles_css_default17["visual-refresh"]]: isVisualRefresh
      }),
      // We are using the roving tabindex technique to manage the focus state of the dropdown.
      // The current element will always have tabindex=0 which means that it can be tabbed to,
      // while all other items have tabindex=-1 so we can focus them when necessary.
      tabIndex: highlighted ? 0 : -1,
      ref: triggerRef
    }, getMenuItemProps({ parent: true, expanded, disabled }), isDisabledWithReason ? targetProps : {}, getAnalyticsMetadataAttribute(disabled ? {} : {
      action: !expanded ? "expand" : "collapse",
      detail: {
        position: position || "0",
        label: { root: "self" },
        id: item.id || ""
      }
    })),
    item.text,
    import_react28.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default17["expand-icon"], styles_css_default17["expand-icon-right"]) },
      import_react28.default.createElement(internal_default, { name: "caret-down-filled" })
    )
  );
  let content;
  if (isDisabledWithReason) {
    content = import_react28.default.createElement(
      Tooltip2,
      { content: item.disabledReason },
      trigger,
      descriptionEl
    );
  } else if (disabled) {
    content = trigger;
  } else {
    content = import_react28.default.createElement(dropdown_default, { open: expanded, stretchWidth: false, interior: true, expandToViewport, trigger }, item.items && expanded && import_react28.default.createElement(
      "ul",
      { role: "menu", "aria-label": item.text, className: clsx_m_default(styles_css_default17["items-list-container"], styles_css_default17["in-dropdown"]) },
      import_react28.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, variant, position })
    ));
  }
  return import_react28.default.createElement("li", { className: clsx_m_default(styles_css_default17.category, styles_css_default17[`variant-${variant}`], styles_css_default17.expandable, {
    [styles_css_default17.expanded]: expanded,
    [styles_css_default17.disabled]: disabled,
    [styles_css_default17.highlighted]: highlighted
  }), role: "presentation", "data-testid": item.id, ref, onClick, onMouseEnter: onHover, onTouchStart: onHover }, content);
};
var expandable_category_element_default = ExpandableCategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/mobile-expandable-category-element.js
var import_react30 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/mobile-expandable-group.js
var import_react29 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/styles.scoped.css";
var styles_css_default18 = {
  "root": "awsui_root_14cnr_39y7l_145",
  "trigger": "awsui_trigger_14cnr_39y7l_179",
  "dropdown": "awsui_dropdown_14cnr_39y7l_182",
  "nowrap": "awsui_nowrap_14cnr_39y7l_193",
  "open": "awsui_open_14cnr_39y7l_196"
};

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/mobile-expandable-group.js
var MobileExpandableGroup = ({ children, trigger, open }) => {
  return import_react29.default.createElement(
    "div",
    { className: styles_css_default18.root },
    import_react29.default.createElement("div", { className: styles_css_default18.trigger }, trigger),
    import_react29.default.createElement("div", { className: clsx_m_default(styles_css_default18.dropdown, { [styles_css_default18.open]: open }), "data-open": open }, children)
  );
};
var mobile_expandable_group_default = MobileExpandableGroup;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/mobile-expandable-category-element.js
var MobileExpandableCategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, variant, position }) => {
  const highlighted = isHighlighted(item);
  const expanded = isExpanded(item);
  const isKeyboardHighlighted = isKeyboardHighlight(item);
  const triggerRef = import_react30.default.useRef(null);
  (0, import_react30.useEffect)(() => {
    if (triggerRef.current && highlighted && !expanded) {
      triggerRef.current.focus();
    }
  }, [expanded, highlighted]);
  const onClick = (e3) => {
    if (!disabled) {
      e3.preventDefault();
      onGroupToggle(item, e3);
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  const isDisabledWithReason = !!item.disabledReason && item.disabled;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const trigger = item.text && import_react30.default.createElement(
    "span",
    Object.assign({
      className: clsx_m_default(styles_css_default17.header, styles_css_default17["expandable-header"], styles_css_default17[`variant-${variant}`], {
        [styles_css_default17.highlighted]: highlighted,
        [styles_css_default17["rolled-down"]]: expanded,
        [styles_css_default17.disabled]: disabled,
        [styles_css_default17["is-focused"]]: isKeyboardHighlighted
      }),
      // We are using the roving tabindex technique to manage the focus state of the dropdown.
      // The current element will always have tabindex=0 which means that it can be tabbed to,
      // while all other items have tabindex=-1 so we can focus them when necessary.
      tabIndex: highlighted ? 0 : -1,
      ref: triggerRef
    }, getMenuItemProps({ parent: true, disabled, expanded }), isDisabledWithReason ? targetProps : {}, getAnalyticsMetadataAttribute(disabled ? {} : {
      action: "expand",
      detail: {
        position: position || "0",
        label: { root: "self" },
        id: item.id || "",
        expanded: `${!expanded}`
      }
    })),
    item.text,
    import_react30.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default17["expand-icon"], {
        [styles_css_default17["expand-icon-up"]]: expanded
      }) },
      import_react30.default.createElement(internal_default, { name: "caret-down-filled" })
    )
  );
  let content;
  if (isDisabledWithReason) {
    content = import_react30.default.createElement(
      import_react30.default.Fragment,
      null,
      descriptionEl,
      import_react30.default.createElement(Tooltip2, { content: item.disabledReason }, trigger)
    );
  } else if (disabled) {
    content = trigger;
  } else {
    content = import_react30.default.createElement(mobile_expandable_group_default, { open: expanded, trigger }, item.items && expanded && import_react30.default.createElement(
      "ul",
      { role: "menu", "aria-label": item.text, className: styles_css_default17["items-list-container"] },
      import_react30.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, hasCategoryHeader: true, variant, position })
    ));
  }
  return import_react30.default.createElement("li", { className: clsx_m_default(styles_css_default17.category, styles_css_default17[`variant-${variant}`], styles_css_default17.expandable, {
    [styles_css_default17.expanded]: expanded,
    [styles_css_default17.disabled]: disabled,
    [styles_css_default17.highlighted]: highlighted || expanded,
    [styles_css_default17.expandable]: true
  }), role: "presentation", onClick, onMouseEnter: onHover, onTouchStart: onHover, "data-testid": item.id }, content);
};
var mobile_expandable_category_element_default = MobileExpandableCategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/item-element/index.js
var import_react31 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/utils/create-items-tree.js
function createItemsTree(items) {
  const itemToIndex = /* @__PURE__ */ new Map();
  const indexToItem = /* @__PURE__ */ new Map();
  const flatIndices = [];
  traverseItems(items, (item, index) => {
    const indexKey = stringifyIndex(index);
    itemToIndex.set(item, indexKey);
    indexToItem.set(indexKey, item);
    flatIndices.push(indexKey);
  });
  return {
    getItem: (index) => {
      const indexKey = stringifyIndex(index);
      return indexToItem.get(indexKey) || null;
    },
    getItemIndex: (item) => {
      const indexKey = itemToIndex.get(item);
      if (!indexKey) {
        throw new Error("Invariant violation: item is not found.");
      }
      return parseIndex(indexKey);
    },
    getSequentialIndex: (index, direction) => {
      const indexKey = stringifyIndex(index);
      const position = flatIndices.indexOf(indexKey);
      const nextIndexKey = flatIndices[position + direction];
      if (!nextIndexKey) {
        return null;
      }
      return parseIndex(nextIndexKey);
    },
    getParentIndex: (item) => {
      const indexKey = itemToIndex.get(item);
      if (!indexKey) {
        throw new Error("Invariant violation: item is not found.");
      }
      const index = parseIndex(indexKey);
      if (index.length === 1) {
        return null;
      }
      return index.slice(0, index.length - 1);
    }
  };
}
function traverseItems(items, act, parentIndex = []) {
  items.forEach((item, index) => {
    const itemIndex = [...parentIndex, index];
    act(item, itemIndex);
    if (isItemGroup(item)) {
      traverseItems(item.items, act, itemIndex);
    }
  });
}
function stringifyIndex(index) {
  return index.join("-");
}
function parseIndex(index) {
  return index.split("-").map((it) => parseInt(it));
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/utils.js
var isItemGroup = (item) => item && item.items !== void 0;
var isLinkItem = (item) => item && item.href !== void 0;
var isCheckboxItem = (item) => item && item.itemType === "checkbox";
var getItemTarget = (item) => item.external ? "_blank" : void 0;
function indexIncludes(source, target) {
  for (let index = 0; index < source.length; index++) {
    if (source[index] !== target[index]) {
      return false;
    }
  }
  return true;
}
function indexEquals(left, right) {
  if (left.length !== right.length) {
    return false;
  }
  for (let index = 0; index < left.length; index++) {
    if (left[index] !== right[index]) {
      return false;
    }
  }
  return true;
}
function hasCheckboxItems(items) {
  let hasCheckboxItems2 = false;
  traverseItems(items, (item) => {
    if (item.itemType === "checkbox") {
      hasCheckboxItems2 = true;
    }
  });
  return hasCheckboxItems2;
}
function hasDisabledReasonItems(items) {
  let hasDisabledReasons = false;
  traverseItems(items, (item) => {
    if (item.disabledReason) {
      hasDisabledReasons = true;
    }
  });
  return hasDisabledReasons;
}

// node_modules/@cloudscape-design/components/button-dropdown/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/button-dropdown/analytics-metadata/styles.scoped.css";
var styles_css_default19 = {
  "trigger-label": "awsui_trigger-label_q2oen_w271r_5",
  "menu-item": "awsui_menu-item_q2oen_w271r_6",
  "main-action-label": "awsui_main-action-label_q2oen_w271r_7"
};

// node_modules/@cloudscape-design/components/button-dropdown/item-element/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/button-dropdown/item-element/styles.scoped.css";
var styles_css_default20 = {
  "item-element": "awsui_item-element_93a1u_idixt_145",
  "disabled": "awsui_disabled_93a1u_idixt_157",
  "show-divider": "awsui_show-divider_93a1u_idixt_164",
  "highlighted": "awsui_highlighted_93a1u_idixt_167",
  "is-focused": "awsui_is-focused_93a1u_idixt_182",
  "visual-refresh": "awsui_visual-refresh_93a1u_idixt_185",
  "menu-item": "awsui_menu-item_93a1u_idixt_189",
  "link-style": "awsui_link-style_93a1u_idixt_201",
  "current-breadcrumb": "awsui_current-breadcrumb_93a1u_idixt_237",
  "link-style-highlighted": "awsui_link-style-highlighted_93a1u_idixt_245",
  "has-category-header": "awsui_has-category-header_93a1u_idixt_251",
  "item-tooltip-wrapper": "awsui_item-tooltip-wrapper_93a1u_idixt_251",
  "has-checkmark": "awsui_has-checkmark_93a1u_idixt_251",
  "icon": "awsui_icon_93a1u_idixt_255",
  "checkmark": "awsui_checkmark_93a1u_idixt_259",
  "external-icon": "awsui_external-icon_93a1u_idixt_266"
};

// node_modules/@cloudscape-design/components/button-dropdown/item-element/index.js
var ItemElement = ({ position = "1", item, disabled, onItemActivate, highlighted, highlightItem, showDivider, hasCategoryHeader, isKeyboardHighlighted = false, analyticsMetadataTransformer = (metadata) => metadata, variant = "normal", linkStyle }) => {
  const isLink = isLinkItem(item);
  const isCheckbox = isCheckboxItem(item);
  const onClick = (event) => {
    event.stopPropagation();
    if (!isLink) {
      event.preventDefault();
    }
    if (!disabled) {
      onItemActivate(item, event);
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  const isVisualRefresh = useVisualRefresh();
  return import_react31.default.createElement(
    "li",
    Object.assign({ className: clsx_m_default(styles_css_default20["item-element"], styles_css_default20[`variant-${variant}`], {
      [styles_css_default20.highlighted]: highlighted,
      [styles_css_default20.disabled]: disabled,
      [styles_css_default20["has-category-header"]]: hasCategoryHeader,
      [styles_css_default20["has-checkmark"]]: isCheckbox,
      [styles_css_default20["show-divider"]]: showDivider,
      [styles_css_default20["is-focused"]]: isKeyboardHighlighted,
      [styles_css_default20["visual-refresh"]]: isVisualRefresh
    }), role: "presentation", "data-testid": item.id, "data-description": item.description, onClick, onMouseEnter: onHover, onTouchStart: onHover }, getAnalyticsMetadataAttribute(disabled ? {} : analyticsMetadataTransformer({
      action: "click",
      detail: {
        position,
        id: item.id,
        label: `.${styles_css_default19["menu-item"]}`,
        href: item.href || ""
      }
    }))),
    import_react31.default.createElement(MenuItem, { item, disabled, highlighted, linkStyle })
  );
};
function MenuItem({ item, disabled, highlighted, linkStyle }) {
  const menuItemRef = (0, import_react31.useRef)(null);
  const isCheckbox = isCheckboxItem(item);
  const isCurrentBreadcrumb = !isCheckbox && item.isCurrentBreadcrumb;
  (0, import_react31.useEffect)(() => {
    if (highlighted && menuItemRef.current) {
      menuItemRef.current.focus();
    }
  }, [highlighted]);
  const isDisabledWithReason = disabled && item.disabledReason;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const menuItemProps = Object.assign(Object.assign({
    "aria-label": item.ariaLabel,
    className: clsx_m_default(styles_css_default20["menu-item"], styles_css_default19["menu-item"], linkStyle && styles_css_default20["link-style"], linkStyle && highlighted && styles_css_default20["link-style-highlighted"], isCurrentBreadcrumb && styles_css_default20["current-breadcrumb"]),
    "aria-current": isCurrentBreadcrumb,
    lang: item.lang,
    ref: menuItemRef,
    // We are using the roving tabindex technique to manage the focus state of the dropdown.
    // The current element will always have tabindex=0 which means that it can be tabbed to,
    // while all other items have tabindex=-1 so we can focus them when necessary.
    tabIndex: highlighted ? 0 : -1
  }, isCheckbox ? getMenuItemCheckboxProps({ disabled, checked: item.checked }) : getMenuItemProps({ disabled })), isDisabledWithReason ? targetProps : {});
  const menuItem = isLinkItem(item) ? import_react31.default.createElement(
    "a",
    Object.assign({}, menuItemProps, { href: !disabled ? item.href : void 0, target: getItemTarget(item), rel: item.external ? "noopener noreferrer" : void 0 }),
    import_react31.default.createElement(MenuItemContent, { item, disabled })
  ) : import_react31.default.createElement(
    "span",
    Object.assign({}, menuItemProps),
    import_react31.default.createElement(MenuItemContent, { item, disabled })
  );
  const { position } = useDropdownContext();
  const tooltipPosition = position === "bottom-left" || position === "top-left" ? "left" : "right";
  return isDisabledWithReason ? import_react31.default.createElement(
    Tooltip2,
    { content: item.disabledReason, position: tooltipPosition, className: styles_css_default20["item-tooltip-wrapper"] },
    menuItem,
    descriptionEl
  ) : menuItem;
}
var MenuItemContent = ({ item, disabled }) => {
  const hasIcon = !!(item.iconName || item.iconUrl || item.iconSvg);
  const hasExternal = isLinkItem(item) && item.external;
  const isCheckbox = isCheckboxItem(item);
  return import_react31.default.createElement(
    import_react31.default.Fragment,
    null,
    isCheckbox && import_react31.default.createElement(MenuItemCheckmark, { checked: item.checked, disabled }),
    hasIcon && import_react31.default.createElement(MenuItemIcon, { name: item.iconName, url: item.iconUrl, svg: item.iconSvg, alt: item.iconAlt, badge: item.badge }),
    item.text,
    hasExternal && import_react31.default.createElement(ExternalIcon, { disabled, ariaLabel: item.externalIconAriaLabel })
  );
};
var MenuItemIcon = (props2) => import_react31.default.createElement(
  "span",
  { className: styles_css_default20.icon },
  import_react31.default.createElement(internal_default, Object.assign({}, props2))
);
var MenuItemCheckmark = ({ disabled, checked }) => {
  const checkmark = import_react31.default.createElement(internal_default, { variant: disabled ? "disabled" : "normal", name: "check" });
  return import_react31.default.createElement("span", { className: clsx_m_default(styles_css_default20.icon, styles_css_default20.checkmark, { [styles_css_default20.disabled]: disabled }), "aria-hidden": "true", style: { visibility: checked ? "visible" : "hidden" } }, checkmark);
};
var ExternalIcon = ({ disabled, ariaLabel }) => {
  const icon = import_react31.default.createElement(internal_default, { variant: disabled ? "disabled" : "normal", name: "external" });
  return import_react31.default.createElement("span", { className: styles_css_default20["external-icon"], role: ariaLabel ? "img" : void 0, "aria-label": ariaLabel }, icon);
};
var item_element_default = ItemElement;

// node_modules/@cloudscape-design/components/button-dropdown/items-list.js
function ItemsList({ items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, categoryDisabled = false, hasExpandableGroups = false, hasCategoryHeader = false, expandToViewport = false, variant = "normal", analyticsMetadataTransformer, position, linkStyle }) {
  const isMobile = useMobile();
  const elements = items.map((item, index) => {
    var _a, _b, _c, _d;
    if (!isItemGroup(item)) {
      const showDivider = index === items.length - 1 && !lastInDropdown || isItemGroup(items[index + 1]);
      return import_react32.default.createElement(item_element_default, { key: index, item, onItemActivate, disabled: (_a = item.disabled) !== null && _a !== void 0 ? _a : categoryDisabled, highlighted: isHighlighted(item), isKeyboardHighlighted: isKeyboardHighlight(item), highlightItem, showDivider, hasCategoryHeader, variant, position: `${position ? `${position},` : ""}${index + 1}`, analyticsMetadataTransformer, linkStyle });
    }
    if (hasExpandableGroups) {
      return item.text ? isMobile ? import_react32.default.createElement(mobile_expandable_category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: lastInDropdown && index === items.length - 1, highlightItem, disabled: (_b = item.disabled) !== null && _b !== void 0 ? _b : false, variant, position: `${position ? `${position},` : ""}${index + 1}` }) : import_react32.default.createElement(expandable_category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: true, highlightItem, disabled: (_c = item.disabled) !== null && _c !== void 0 ? _c : false, expandToViewport, variant, position: `${position ? `${position},` : ""}${index + 1}` }) : null;
    }
    return import_react32.default.createElement(category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: lastInDropdown && index === items.length - 1, highlightItem, disabled: (_d = item.disabled) !== null && _d !== void 0 ? _d : false, variant, position: `${position ? `${position},` : ""}${index + 1}` });
  });
  return import_react32.default.createElement(import_react32.default.Fragment, null, elements);
}

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-open-state.js
var import_react33 = __toESM(require_react());
var useOpenState = ({ onOpen, onClose, defaultOpen = false }) => {
  const [isOpen, setIsOpen] = (0, import_react33.useState)(defaultOpen);
  const [openedWithKeyboard, setOpenedWithKeyboard] = (0, import_react33.useState)(false);
  const openDropdown = (isKeyboard) => {
    if (!isOpen) {
      setIsOpen(true);
      setOpenedWithKeyboard(!!isKeyboard);
      onOpen === null || onOpen === void 0 ? void 0 : onOpen();
    }
  };
  const closeDropdown = () => {
    if (isOpen) {
      setIsOpen(false);
      onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  };
  const toggleDropdown = () => {
    if (isOpen) {
      closeDropdown();
    } else {
      openDropdown(false);
    }
  };
  return { isOpen, openDropdown, closeDropdown, toggleDropdown, openedWithKeyboard };
};

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-highlighted-menu.js
var import_react34 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/utils/move-highlight.js
function moveHighlight({ startIndex, expandedIndex, getNext, hasExpandableGroups, isInRestrictedView }) {
  const tryMove = (currentIndex) => {
    var _a;
    const next = getNext(currentIndex);
    if (!next) {
      return null;
    }
    if (((_a = next.parent) === null || _a === void 0 ? void 0 : _a.disabled) && hasExpandableGroups) {
      return tryMove(next.index);
    }
    if (isItemGroup(next.item) && !hasExpandableGroups) {
      return tryMove(next.index);
    }
    if (hasExpandableGroups && !isInRestrictedView && !isSameParent(startIndex, next.index)) {
      return tryMove(next.index);
    }
    if (hasExpandableGroups && isInRestrictedView && !isSameLevel(next.index, expandedIndex) && !isIncluded(expandedIndex, next.index)) {
      return tryMove(next.index);
    }
    return next.index;
  };
  return tryMove(startIndex);
}
function isSameParent(left, right) {
  return indexEquals(left.slice(0, -1), right.slice(0, -1));
}
function isSameLevel(left, right) {
  return left.length === right.length;
}
function isIncluded(parent, child) {
  return indexEquals(parent, child.slice(0, -1));
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-highlighted-menu.js
function useHighlightedMenu({ items, hasExpandableGroups, isInRestrictedView = false }) {
  const [targetIndex, setTargetIndex] = (0, import_react34.useState)([]);
  const [expandedIndex, setExpandedIndex] = (0, import_react34.useState)([]);
  const [isUsingMouse, setIsUsingMouse] = (0, import_react34.useState)(true);
  const { getItem, getItemIndex: getItemIndex2, getSequentialIndex, getParentIndex } = (0, import_react34.useMemo)(() => createItemsTree(items), [items]);
  const targetItem = (0, import_react34.useMemo)(() => getItem(targetIndex), [targetIndex, getItem]);
  const isHighlighted = (0, import_react34.useCallback)((item) => {
    const index = getItemIndex2(item);
    return indexIncludes(index, targetIndex);
  }, [targetIndex, getItemIndex2]);
  const isKeyboardHighlight = (0, import_react34.useCallback)((item) => {
    const index = getItemIndex2(item);
    return !isUsingMouse && indexEquals(index, targetIndex);
  }, [targetIndex, getItemIndex2, isUsingMouse]);
  const isExpanded = (0, import_react34.useCallback)((group) => {
    const index = getItemIndex2(group);
    return indexIncludes(index, expandedIndex);
  }, [expandedIndex, getItemIndex2]);
  const moveHighlight2 = (0, import_react34.useCallback)((direction) => {
    const getNext = (index) => {
      const nextIndex2 = getSequentialIndex(index, direction);
      const item = getItem(nextIndex2 || [-1]);
      if (!nextIndex2 || !item) {
        return null;
      }
      const parentIndex = getParentIndex(item);
      const parentItem = parentIndex && getItem(parentIndex);
      return { index: nextIndex2, item, parent: parentItem || void 0 };
    };
    const nextIndex = moveHighlight({
      startIndex: targetIndex,
      expandedIndex,
      getNext,
      hasExpandableGroups,
      isInRestrictedView
    });
    if (nextIndex) {
      setTargetIndex(nextIndex);
    }
  }, [targetIndex, expandedIndex, getItem, getSequentialIndex, getParentIndex, hasExpandableGroups, isInRestrictedView]);
  const highlightItem = (0, import_react34.useCallback)((item) => {
    setTargetIndex(getItemIndex2(item));
  }, [getItemIndex2]);
  const expandGroup = (0, import_react34.useCallback)((group) => {
    const groupIndex = group ? getItemIndex2(group) : targetIndex;
    const firstChildIndex = [...groupIndex, 0];
    setTargetIndex(isInRestrictedView ? groupIndex : firstChildIndex);
    setExpandedIndex(groupIndex);
  }, [targetIndex, getItemIndex2, isInRestrictedView]);
  const collapseGroup = (0, import_react34.useCallback)(() => {
    if (expandedIndex.length > 0) {
      setTargetIndex(expandedIndex);
      setExpandedIndex(expandedIndex.slice(0, -1));
    }
  }, [expandedIndex]);
  const reset = (0, import_react34.useCallback)(() => {
    setTargetIndex([]);
    setExpandedIndex([]);
  }, []);
  return {
    targetItem,
    isHighlighted,
    isKeyboardHighlight,
    isExpanded,
    moveHighlight: moveHighlight2,
    highlightItem,
    expandGroup,
    collapseGroup,
    reset,
    setIsUsingMouse
  };
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-button-dropdown.js
function useButtonDropdown({ items, onItemClick, onItemFollow, onReturnFocus, hasExpandableGroups, isInRestrictedView = false, expandToViewport = false }) {
  const { targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, moveHighlight: moveHighlight2, expandGroup, collapseGroup, reset, setIsUsingMouse } = useHighlightedMenu({
    items,
    hasExpandableGroups,
    isInRestrictedView
  });
  const _a = useOpenState({ onClose: reset }), { isOpen, closeDropdown } = _a, openStateProps = __rest(_a, ["isOpen", "closeDropdown"]);
  const toggleDropdown = (options = {}) => {
    var _a2;
    const moveHighlightOnOpen = (_a2 = options.moveHighlightOnOpen) !== null && _a2 !== void 0 ? _a2 : true;
    if (!isOpen && moveHighlightOnOpen) {
      moveHighlight2(1);
    }
    openStateProps.toggleDropdown();
  };
  const onGroupToggle = (item) => !isExpanded(item) ? expandGroup(item) : collapseGroup();
  const onItemActivate = (item, event) => {
    const isCheckbox = isCheckboxItem(item);
    const isLink = isLinkItem(item);
    const details = {
      id: item.id || "undefined",
      href: isLink ? item.href : void 0,
      external: isLink ? item.external : void 0,
      target: isLink ? getItemTarget(item) : void 0,
      checked: isCheckbox ? !item.checked : void 0
    };
    onReturnFocus();
    if (onItemFollow && isLink && isPlainLeftClick(event)) {
      fireCancelableEvent(onItemFollow, details, event);
    }
    if (onItemClick) {
      fireCancelableEvent(onItemClick, details, event);
    }
    closeDropdown();
  };
  const doVerticalNavigation = (direction) => {
    if (isOpen) {
      moveHighlight2(direction);
    }
  };
  const openAndSelectFirst = (event) => {
    toggleDropdown();
    event.preventDefault();
  };
  const actOnParentDropdown = (event) => {
    if (!targetItem) {
      if (isOpen && !isInRestrictedView) {
        toggleDropdown();
      } else {
        openAndSelectFirst(event);
      }
    } else {
      if (isItemGroup(targetItem)) {
        onGroupToggle(targetItem, event);
      } else {
        onItemActivate(targetItem, event);
      }
    }
  };
  const activate = (event, isEnter) => {
    setIsUsingMouse(false);
    if (targetItem && isLinkItem(targetItem) && isEnter) {
      return;
    }
    event.preventDefault();
    actOnParentDropdown(event);
  };
  const onKeyDown = (event) => {
    setIsUsingMouse(false);
    switch (event.keyCode) {
      case KeyCode.down: {
        doVerticalNavigation(1);
        event.preventDefault();
        break;
      }
      case KeyCode.up: {
        doVerticalNavigation(-1);
        event.preventDefault();
        break;
      }
      case KeyCode.space: {
        event.preventDefault();
        break;
      }
      case KeyCode.enter: {
        if (!(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {
          activate(event, true);
        }
        break;
      }
      case KeyCode.left:
      case KeyCode.right: {
        if (targetItem && !targetItem.disabled && isItemGroup(targetItem) && !isExpanded(targetItem)) {
          expandGroup();
        } else if (hasExpandableGroups) {
          collapseGroup();
        }
        event.preventDefault();
        break;
      }
      case KeyCode.escape: {
        onReturnFocus();
        closeDropdown();
        event.preventDefault();
        if (isOpen) {
          event.stopPropagation();
        }
        break;
      }
      case KeyCode.tab: {
        if (expandToViewport) {
          onReturnFocus();
        }
        closeDropdown();
        break;
      }
    }
  };
  const onKeyUp = (event) => {
    if (event.keyCode === KeyCode.space && !(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {
      activate(event);
    }
  };
  return {
    isOpen,
    targetItem,
    isHighlighted,
    isKeyboardHighlight,
    isExpanded,
    highlightItem,
    onKeyDown,
    onKeyUp,
    onItemActivate,
    onGroupToggle,
    toggleDropdown,
    closeDropdown,
    setIsUsingMouse
  };
}

// node_modules/@cloudscape-design/components/button-dropdown/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/button-dropdown/styles.scoped.css";
var styles_css_default21 = {
  "button-dropdown": "awsui_button-dropdown_sne0l_ncm5v_145",
  "full-width": "awsui_full-width_sne0l_ncm5v_148",
  "items-list-container": "awsui_items-list-container_sne0l_ncm5v_153",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_sne0l_ncm5v_1",
  "rotate": "awsui_rotate_sne0l_ncm5v_172",
  "rotate-open": "awsui_rotate-open_sne0l_ncm5v_186",
  "header": "awsui_header_sne0l_ncm5v_190",
  "title": "awsui_title_sne0l_ncm5v_201",
  "description": "awsui_description_sne0l_ncm5v_202",
  "trigger-button": "awsui_trigger-button_sne0l_ncm5v_206",
  "loading": "awsui_loading_sne0l_ncm5v_210",
  "split-trigger-wrapper": "awsui_split-trigger-wrapper_sne0l_ncm5v_214",
  "trigger-item": "awsui_trigger-item_sne0l_ncm5v_217",
  "has-no-text": "awsui_has-no-text_sne0l_ncm5v_226",
  "visual-refresh": "awsui_visual-refresh_sne0l_ncm5v_229",
  "variant-normal": "awsui_variant-normal_sne0l_ncm5v_240",
  "split-trigger": "awsui_split-trigger_sne0l_ncm5v_214",
  "dropdown-trigger": "awsui_dropdown-trigger_sne0l_ncm5v_251",
  "main-action-full-width": "awsui_main-action-full-width_sne0l_ncm5v_255",
  "main-action-trigger-full-width": "awsui_main-action-trigger-full-width_sne0l_ncm5v_259",
  "test-utils-button-trigger": "awsui_test-utils-button-trigger_sne0l_ncm5v_263"
};

// node_modules/@cloudscape-design/components/button-dropdown/internal.js
var InternalButtonDropdown = import_react35.default.forwardRef((_a, ref) => {
  var _b;
  var { items, variant = "normal", loading = false, loadingText, disabled = false, disabledReason, expandableGroups = false, children, onItemClick, onItemFollow, customTriggerBuilder, expandToViewport, ariaLabel, title, description, preferCenter, mainAction, showMainActionOnly, __internalRootRef, analyticsMetadataTransformer, linkStyle, fullWidth, position } = _a, props2 = __rest(_a, ["items", "variant", "loading", "loadingText", "disabled", "disabledReason", "expandableGroups", "children", "onItemClick", "onItemFollow", "customTriggerBuilder", "expandToViewport", "ariaLabel", "title", "description", "preferCenter", "mainAction", "showMainActionOnly", "__internalRootRef", "analyticsMetadataTransformer", "linkStyle", "fullWidth", "position"]);
  const isInRestrictedView = useMobile();
  const dropdownId = useUniqueId("dropdown");
  for (const item of items) {
    if (isLinkItem(item)) {
      checkSafeUrl("ButtonDropdown", item.href);
    }
  }
  if (mainAction) {
    checkSafeUrl("ButtonDropdown", mainAction.href);
  }
  if (isDevelopment2) {
    if (mainAction && variant !== "primary" && variant !== "normal") {
      warnOnce("ButtonDropdown", 'Main action is only supported for "primary" and "normal" component variant.');
    }
  }
  const isMainAction = mainAction && (variant === "primary" || variant === "normal");
  const isVisualRefresh = useVisualRefresh();
  const { isOpen, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, onKeyDown, onKeyUp, onItemActivate, onGroupToggle, toggleDropdown, closeDropdown, setIsUsingMouse } = useButtonDropdown({
    items,
    onItemClick,
    onItemFollow,
    // Scroll is unnecessary when moving focus back to the dropdown trigger.
    onReturnFocus: () => {
      var _a2;
      return (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus({ preventScroll: true });
    },
    expandToViewport,
    hasExpandableGroups: expandableGroups,
    isInRestrictedView
  });
  const handleMouseEvent = () => {
    setIsUsingMouse(true);
  };
  const baseProps = getBaseProps(props2);
  const mainActionRef = (0, import_react35.useRef)(null);
  const triggerRef = (0, import_react35.useRef)(null);
  (0, import_react35.useImperativeHandle)(ref, () => ({
    focus(...args) {
      var _a2;
      (_a2 = (isMainAction ? mainActionRef : triggerRef).current) === null || _a2 === void 0 ? void 0 : _a2.focus(...args);
    },
    focusDropdownTrigger(...args) {
      var _a2;
      (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus(...args);
    }
  }), [mainActionRef, triggerRef, isMainAction]);
  const clickHandler = () => {
    if (!loading && !disabled) {
      toggleDropdown({ moveHighlightOnOpen: !isInRestrictedView });
    }
  };
  const canBeOpened = !loading && !disabled;
  const canBeFullWidth = !!fullWidth && (variant === "primary" || variant === "normal");
  const triggerVariant = variant === "navigation" ? void 0 : variant === "inline-icon" ? "inline-icon" : variant;
  const iconProps = variant === "icon" || variant === "inline-icon" ? {
    iconName: "ellipsis"
  } : {
    iconName: "caret-down-filled",
    iconAlign: "right",
    __iconClass: spinWhenOpen(styles_css_default21, "rotate", canBeOpened && isOpen)
  };
  const baseTriggerProps = Object.assign(Object.assign({ className: clsx_m_default(styles_css_default21["trigger-button"], styles_css_default21["test-utils-button-trigger"], styles_css_default19["trigger-label"]) }, iconProps), {
    variant: triggerVariant,
    loading,
    loadingText,
    disabled,
    disabledReason,
    onClick: (event) => {
      event.preventDefault();
      clickHandler();
    },
    ariaLabel,
    ariaExpanded: canBeOpened && isOpen,
    formAction: "none",
    __nativeAttributes: {
      "aria-haspopup": true
    }
  });
  const triggerId = useUniqueId("awsui-button-dropdown__trigger");
  const triggerHasBadge = () => {
    const flatItems = items.flatMap((item) => {
      if ("items" in item) {
        return item.items;
      }
      return item;
    });
    return variant === "icon" && !!(flatItems === null || flatItems === void 0 ? void 0 : flatItems.find((item) => {
      if ("badge" in item) {
        return item.badge;
      }
    }));
  };
  let trigger = null;
  const analyticsMetadata = disabled ? {} : {
    action: !isOpen ? "expand" : "collapse",
    detail: {
      label: `.${styles_css_default19["trigger-label"]}`
    }
  };
  if (customTriggerBuilder) {
    trigger = import_react35.default.createElement("div", Object.assign({ className: styles_css_default21["dropdown-trigger"] }, getAnalyticsMetadataAttribute(analyticsMetadata)), customTriggerBuilder({
      testUtilsClass: styles_css_default21["test-utils-button-trigger"],
      ariaExpanded: canBeOpened && isOpen,
      onClick: clickHandler,
      triggerRef,
      ariaLabel,
      disabled,
      disabledReason,
      isOpen
    }));
  } else if (isMainAction) {
    const { text, iconName, iconAlt, iconSvg, iconUrl, external, externalIconAriaLabel } = mainAction, mainActionProps = __rest(mainAction, ["text", "iconName", "iconAlt", "iconSvg", "iconUrl", "external", "externalIconAriaLabel"]);
    const mainActionIconProps = external ? { iconName: "external", iconAlign: "right", target: "_blank", rel: "noopener noreferrer" } : { iconName, iconAlt, iconSvg, iconUrl };
    const mainActionAriaLabel = externalIconAriaLabel ? `${(_b = mainAction.ariaLabel) !== null && _b !== void 0 ? _b : mainAction.text} ${mainAction.externalIconAriaLabel}` : mainAction.ariaLabel;
    const hasNoText = !text;
    const mainActionButton = import_react35.default.createElement(InternalButton, Object.assign({ ref: mainActionRef }, mainActionProps, mainActionIconProps, { fullWidth: canBeFullWidth, className: clsx_m_default(styles_css_default21["trigger-button"], hasNoText && styles_css_default21["has-no-text"], isVisualRefresh && styles_css_default21["visual-refresh"], canBeFullWidth && styles_css_default21["main-action-full-width"]), variant, ariaLabel: mainActionAriaLabel, formAction: "none" }), text);
    trigger = import_react35.default.createElement(
      "div",
      { role: "group", "aria-label": ariaLabel, className: styles_css_default21["split-trigger-wrapper"] },
      import_react35.default.createElement("div", Object.assign({
        className: clsx_m_default(styles_css_default21["trigger-item"], styles_css_default21["split-trigger"], styles_css_default21[`variant-${variant}`], mainActionProps.disabled && styles_css_default21.disabled, mainActionProps.loading && styles_css_default21.loading),
        // Close dropdown upon main action click unless event is cancelled.
        onClick: closeDropdown,
        // Prevent keyboard events from propagation to the button dropdown handler.
        onKeyDown: (e3) => e3.stopPropagation(),
        onKeyUp: (e3) => e3.stopPropagation()
      }, getAnalyticsMetadataAttribute({
        action: "click",
        detail: {
          label: `.${styles_css_default19["main-action-label"]}`
        }
      })), mainActionButton),
      !showMainActionOnly && import_react35.default.createElement(
        "div",
        Object.assign({ className: clsx_m_default(styles_css_default21["trigger-item"], styles_css_default21["dropdown-trigger"], isVisualRefresh && styles_css_default21["visual-refresh"], styles_css_default21[`variant-${variant}`], baseTriggerProps.disabled && styles_css_default21.disabled, baseTriggerProps.loading && styles_css_default21.loading) }, getAnalyticsMetadataAttribute(analyticsMetadata)),
        import_react35.default.createElement(InternalButton, Object.assign({ ref: triggerRef }, baseTriggerProps, { className: clsx_m_default(baseTriggerProps.className, {
          [styles_css_default21["main-action-trigger-full-width"]]: canBeFullWidth
        }), __emitPerformanceMarks: false }), children)
      )
    );
  } else {
    trigger = import_react35.default.createElement(
      "div",
      Object.assign({ className: styles_css_default21["dropdown-trigger"] }, getAnalyticsMetadataAttribute(analyticsMetadata)),
      import_react35.default.createElement(InternalButton, Object.assign({ ref: triggerRef, id: triggerId }, baseTriggerProps, { className: clsx_m_default(baseTriggerProps.className, {
        [styles_css_default21["full-width"]]: canBeFullWidth,
        [styles_css_default21.loading]: canBeFullWidth && !!loading
      }), badge: triggerHasBadge(), fullWidth }), children)
    );
  }
  const hasHeader = title || description;
  const headerId = useUniqueId("awsui-button-dropdown__header");
  const shouldLabelWithTrigger = !ariaLabel && !mainAction && variant !== "icon" && variant !== "inline-icon";
  const { loadingButtonCount } = useFunnel();
  (0, import_react35.useEffect)(() => {
    if (loading) {
      loadingButtonCount.current++;
      return () => {
        loadingButtonCount.current--;
      };
    }
  }, [loading, loadingButtonCount]);
  return import_react35.default.createElement(
    "div",
    Object.assign({}, baseProps, { onKeyDown, onKeyUp, onMouseDown: handleMouseEvent, onMouseMove: handleMouseEvent, className: clsx_m_default(styles_css_default21["button-dropdown"], styles_css_default21[`variant-${variant}`], canBeFullWidth && styles_css_default21["full-width"], baseProps.className), "aria-owns": expandToViewport && isOpen ? dropdownId : void 0, ref: __internalRootRef }),
    import_react35.default.createElement(
      dropdown_default,
      { open: canBeOpened && isOpen, stretchWidth: false, stretchTriggerHeight: variant === "navigation", expandToViewport, preferCenter, onDropdownClose: () => toggleDropdown(), trigger, dropdownId },
      hasHeader && import_react35.default.createElement(
        "div",
        { className: styles_css_default21.header, id: headerId },
        title && import_react35.default.createElement(
          "div",
          { className: styles_css_default21.title },
          import_react35.default.createElement(InternalBox, { fontSize: "heading-s", fontWeight: "bold", color: "inherit", tagOverride: "h2", margin: { vertical: "n", horizontal: "n" } }, title)
        ),
        description && import_react35.default.createElement(
          InternalBox,
          { fontSize: "body-s" },
          import_react35.default.createElement("span", { className: styles_css_default21.description }, description)
        )
      ),
      import_react35.default.createElement(
        options_list_default,
        { open: canBeOpened && isOpen, position: "static", role: "menu", decreaseBlockMargin: true, ariaLabel, ariaLabelledby: hasHeader ? headerId : shouldLabelWithTrigger ? triggerId : void 0, statusType: "finished" },
        import_react35.default.createElement(ItemsList, { items, onItemActivate, onGroupToggle, hasExpandableGroups: expandableGroups, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: true, highlightItem, expandToViewport, variant, analyticsMetadataTransformer, linkStyle, position })
      )
    )
  );
});
var internal_default9 = InternalButtonDropdown;

// node_modules/@cloudscape-design/components/app-layout/drawer/overflow-menu.js
var mapDrawerToItem = (drawer, isTypeCheckbox) => ({
  id: drawer.id,
  text: drawer.ariaLabels.drawerName,
  iconName: drawer.trigger.iconName,
  iconSvg: drawer.trigger.iconSvg,
  badge: drawer.badge,
  itemType: isTypeCheckbox ? "checkbox" : void 0,
  checked: drawer.active
});
function OverflowMenu({ items: drawers, onItemClick, customTriggerBuilder, ariaLabel, globalDrawersStartIndex }) {
  const hasGlobalDrawers = globalDrawersStartIndex !== void 0;
  const itemsFlatList = drawers.map((item, index) => mapDrawerToItem(item, hasGlobalDrawers && index >= globalDrawersStartIndex));
  let items;
  if (hasGlobalDrawers) {
    items = [
      { items: itemsFlatList.slice(0, globalDrawersStartIndex) },
      { items: itemsFlatList.slice(globalDrawersStartIndex) }
    ];
  } else {
    items = itemsFlatList;
  }
  return import_react36.default.createElement(internal_default9, { items, className: styles_css_default12["overflow-menu"], onItemClick, ariaLabel, variant: "icon", customTriggerBuilder, expandToViewport: true });
}

// node_modules/@cloudscape-design/components/app-layout/drawer/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/drawer/styles.scoped.css";
var styles_css_default22 = {
  "toggle": "awsui_toggle_1uo6m_o2dyh_193",
  "drawer-triggers": "awsui_drawer-triggers_1uo6m_o2dyh_199",
  "drawer": "awsui_drawer_1uo6m_o2dyh_199",
  "drawer-mobile": "awsui_drawer-mobile_1uo6m_o2dyh_209",
  "drawer-closed": "awsui_drawer-closed_1uo6m_o2dyh_212",
  "drawer-content": "awsui_drawer-content_1uo6m_o2dyh_219",
  "drawer-content-clickable": "awsui_drawer-content-clickable_1uo6m_o2dyh_233",
  "drawer-resize-content": "awsui_drawer-resize-content_1uo6m_o2dyh_243",
  "drawer-content-wrapper": "awsui_drawer-content-wrapper_1uo6m_o2dyh_248",
  "drawer-triggers-wrapper": "awsui_drawer-triggers-wrapper_1uo6m_o2dyh_252",
  "drawer-trigger": "awsui_drawer-trigger_1uo6m_o2dyh_199",
  "drawer-trigger-active": "awsui_drawer-trigger-active_1uo6m_o2dyh_271",
  "resize-handle-wrapper": "awsui_resize-handle-wrapper_1uo6m_o2dyh_279",
  "hide": "awsui_hide_1uo6m_o2dyh_289"
};

// node_modules/@cloudscape-design/components/app-layout/drawer/index.js
var Drawer = import_react37.default.forwardRef(({ id, contentClassName, toggleClassName, closeClassName, width, type, toggleRefs, topOffset, bottomOffset, ariaLabels, children, hideOpenButton, isOpen, isHidden, isMobile, onToggle, onClick, onLoseFocus, resizeHandle }, ref) => {
  const openButtonWrapperRef = (0, import_react37.useRef)(null);
  const { TagName, iconName } = togglesConfig[type];
  const { mainLabel, closeLabel, openLabel } = ariaLabels;
  const drawerContentWidthOpen = isMobile ? void 0 : width;
  const drawerContentWidth = isOpen ? drawerContentWidthOpen : void 0;
  const regularOpenButton = import_react37.default.createElement(
    TagName,
    { ref: openButtonWrapperRef, "aria-label": mainLabel, className: styles_css_default22.toggle, "aria-hidden": isOpen },
    import_react37.default.createElement(ToggleButton, { ref: toggleRefs.toggle, className: toggleClassName, iconName, ariaLabel: openLabel, onClick: () => onToggle(true), ariaExpanded: isOpen ? void 0 : false })
  );
  return import_react37.default.createElement(
    "div",
    { ref, className: clsx_m_default(styles_css_default22.drawer, {
      [styles_css_default22.hide]: isHidden,
      [styles_css_default22["drawer-closed"]]: !isOpen,
      [styles_css_default22["drawer-mobile"]]: isMobile
    }), style: { width: drawerContentWidth }, onBlur: onLoseFocus ? (e3) => {
      if (!e3.relatedTarget || !e3.currentTarget.contains(e3.relatedTarget)) {
        onLoseFocus(e3);
      }
    } : void 0, onClick: (event) => {
      var _a;
      if (onClick) {
        onClick(event);
      }
      if (!isOpen) {
        if (openButtonWrapperRef.current === event.target || !((_a = openButtonWrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
          onToggle(true);
        }
      }
    } },
    import_react37.default.createElement(
      "div",
      { id, style: { width: drawerContentWidth, top: topOffset, bottom: bottomOffset }, className: clsx_m_default(styles_css_default22["drawer-content"], styles_css_default22["drawer-content-clickable"], contentClassName, {
        [styles_css_default12["drawer-closed"]]: !isOpen
      }) },
      !isMobile && !hideOpenButton && regularOpenButton,
      import_react37.default.createElement(
        TagName,
        { className: clsx_m_default(resizeHandle && styles_css_default22["drawer-resize-content"], styles_css_default22["drawer-content-wrapper"]), "aria-label": mainLabel, "aria-hidden": !isOpen, style: {
          blockSize: `calc(100vh - ${(topOffset || 0) + (bottomOffset || 0)}px)`
        } },
        !isMobile && isOpen && import_react37.default.createElement("div", { className: styles_css_default22["resize-handle-wrapper"] }, resizeHandle),
        import_react37.default.createElement(CloseButton, { ref: toggleRefs.close, className: closeClassName, ariaLabel: closeLabel, onClick: () => {
          onToggle(false);
        } }),
        children
      )
    )
  );
});
var DrawerTrigger = import_react37.default.forwardRef(({ testUtilsClassName, ariaLabel, ariaExpanded, ariaControls, badge, itemId, isActive, trigger, onClick }, ref) => import_react37.default.createElement(
  "div",
  { className: clsx_m_default(styles_css_default22["drawer-trigger"], isActive && styles_css_default22["drawer-trigger-active"], isActive && getVisualContextClassname("app-layout-tools-drawer-trigger")), onClick },
  import_react37.default.createElement(ToggleButton, { ref, className: testUtilsClassName, iconName: trigger.iconName, iconSvg: trigger.iconSvg, ariaLabel, ariaExpanded, ariaControls, badge, testId: itemId && `awsui-app-layout-trigger-${itemId}` })
));
var DrawerTriggersBar = ({ isMobile, topOffset, bottomOffset, activeDrawerId, ariaLabels, drawers, drawerRefs, onDrawerChange }) => {
  const containerRef = import_react37.default.useRef(null);
  const previousActiveDrawerId = (0, import_react37.useRef)(activeDrawerId);
  const [containerHeight, triggersContainerRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  const isCompactMode = useDensityMode(containerRef) === "compact";
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  const getIndexOfOverflowItem = () => {
    if (containerHeight) {
      const ITEM_HEIGHT = isCompactMode ? 34 : 38;
      const overflowSpot = containerHeight / 1.5;
      const index = Math.floor(overflowSpot / ITEM_HEIGHT);
      return index;
    }
    return 0;
  };
  const { visibleItems, overflowItems } = splitItems(drawers, getIndexOfOverflowItem(), activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react37.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default22.drawer, styles_css_default22["drawer-closed"], styles_css_default12["drawer-closed"], {
      [styles_css_default22["drawer-mobile"]]: isMobile,
      [styles_css_default22.hide]: drawers.length === 1 && !!activeDrawerId
    }), ref: containerRef },
    import_react37.default.createElement("div", { ref: triggersContainerRef, style: { top: topOffset, bottom: bottomOffset }, className: clsx_m_default(styles_css_default22["drawer-content"], {
      [styles_css_default22["drawer-content-clickable"]]: drawers.length === 1
    }), onClick: drawers.length === 1 ? () => onDrawerChange(drawers[0].id !== activeDrawerId ? drawers[0].id : null) : void 0 }, !isMobile && import_react37.default.createElement(
      "aside",
      { "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "region" },
      import_react37.default.createElement(
        "div",
        { className: styles_css_default22["drawer-triggers-wrapper"], "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "toolbar", "aria-orientation": "vertical" },
        visibleItems.map((item, index) => {
          var _a;
          return import_react37.default.createElement(DrawerTrigger, { key: index, testUtilsClassName: clsx_m_default(styles_css_default12["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default12["tools-toggle"]), ariaExpanded: activeDrawerId === item.id, ref: item.id === previousActiveDrawerId.current ? drawerRefs.toggle : void 0, ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, ariaControls: activeDrawerId === item.id ? item.id : void 0, trigger: item.trigger, badge: item.badge, itemId: item.id, isActive: activeDrawerId === item.id, onClick: drawers.length !== 1 ? () => onDrawerChange(item.id !== activeDrawerId ? item.id : null) : void 0 });
        }),
        overflowItems.length > 0 && import_react37.default.createElement(
          "div",
          { className: styles_css_default22["drawer-trigger"] },
          import_react37.default.createElement(OverflowMenu, { ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow, items: overflowItems, onItemClick: ({ detail }) => onDrawerChange(detail.id) })
        )
      )
    ))
  );
};

// node_modules/@cloudscape-design/components/app-layout/drawer/resizable-drawer.js
var import_react46 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/panel-resize-handle/index.js
var import_react44 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle/index.js
var import_react43 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/index.js
var import_react40 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/direction-button.js
var import_react38 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/styles.scoped.css";
var styles_css_default23 = {
  "direction-button-wrapper": "awsui_direction-button-wrapper_155yk_8a0ow_169",
  "direction-button-wrapper-motion-enter": "awsui_direction-button-wrapper-motion-enter_155yk_8a0ow_189",
  "direction-button-wrapper-motion-entering": "awsui_direction-button-wrapper-motion-entering_155yk_8a0ow_189",
  "direction-button-wrapper-motion-exit": "awsui_direction-button-wrapper-motion-exit_155yk_8a0ow_189",
  "direction-button-wrapper-motion-exiting": "awsui_direction-button-wrapper-motion-exiting_155yk_8a0ow_189",
  "drag-handle-entry": "awsui_drag-handle-entry_155yk_8a0ow_1",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_155yk_8a0ow_1",
  "drag-handle-exit": "awsui_drag-handle-exit_155yk_8a0ow_1",
  "awsui-motion-fade-out-0": "awsui_awsui-motion-fade-out-0_155yk_8a0ow_1",
  "direction-button-wrapper-block-start": "awsui_direction-button-wrapper-block-start_155yk_8a0ow_229",
  "direction-button-wrapper-block-end": "awsui_direction-button-wrapper-block-end_155yk_8a0ow_233",
  "direction-button-wrapper-inline-start": "awsui_direction-button-wrapper-inline-start_155yk_8a0ow_237",
  "direction-button-wrapper-inline-end": "awsui_direction-button-wrapper-inline-end_155yk_8a0ow_238",
  "direction-button-wrapper-rtl": "awsui_direction-button-wrapper-rtl_155yk_8a0ow_238",
  "drag-handle-wrapper": "awsui_drag-handle-wrapper_155yk_8a0ow_247",
  "portal-overlay": "awsui_portal-overlay_155yk_8a0ow_252",
  "portal-overlay-contents": "awsui_portal-overlay-contents_155yk_8a0ow_260",
  "drag-handle": "awsui_drag-handle_155yk_8a0ow_247",
  "direction-button-wrapper-hidden": "awsui_direction-button-wrapper-hidden_155yk_8a0ow_277",
  "direction-button": "awsui_direction-button_155yk_8a0ow_169",
  "direction-button-disabled": "awsui_direction-button-disabled_155yk_8a0ow_320"
};

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/test-classes/styles.scoped.css";
var styles_css_default24 = {
  "root": "awsui_root_8k1rt_1i1h9_5",
  "direction-button": "awsui_direction-button_8k1rt_1i1h9_9",
  "direction-button-visible": "awsui_direction-button-visible_8k1rt_1i1h9_13",
  "direction-button-block-start": "awsui_direction-button-block-start_8k1rt_1i1h9_17",
  "direction-button-block-end": "awsui_direction-button-block-end_8k1rt_1i1h9_21",
  "direction-button-inline-start": "awsui_direction-button-inline-start_8k1rt_1i1h9_25",
  "direction-button-inline-end": "awsui_direction-button-inline-end_8k1rt_1i1h9_29"
};

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/direction-button.js
var ICON_LOGICAL_PROPERTY_MAP = {
  "block-start": "arrow-up",
  "block-end": "arrow-down",
  "inline-start": "arrow-left",
  "inline-end": "arrow-right"
};
function DirectionButton({ direction, state, show, onClick }) {
  return import_react38.default.createElement(Transition, { in: show }, (transitionState, ref) => (
    // The wrapper exists to provide a padding around each direction button that
    // prevents any accidental presses around the button from propagating to any
    // interactive elements behind the button.
    import_react38.default.createElement(
      "span",
      { ref, className: clsx_m_default(styles_css_default23["direction-button-wrapper"], styles_css_default23[`direction-button-wrapper-${direction}`], transitionState === "exited" && styles_css_default23["direction-button-wrapper-hidden"], styles_css_default23[`direction-button-wrapper-motion-${transitionState}`]) },
      import_react38.default.createElement(
        "span",
        {
          className: clsx_m_default(styles_css_default23["direction-button"], state === "disabled" && styles_css_default23["direction-button-disabled"], styles_css_default24[`direction-button-${direction}`], transitionState !== "exited" && styles_css_default24["direction-button-visible"]),
          onClick: state !== "disabled" ? onClick : void 0,
          // This prevents focus from being lost to `document.body` on
          // mouse/pointer press. This allows us to listen to onClick while
          // keeping this button pointer-accessible only.
          onPointerDown: (event) => event.preventDefault()
        },
        import_react38.default.createElement(internal_default, { name: ICON_LOGICAL_PROPERTY_MAP[direction], size: "small" })
      )
    )
  ));
}

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/portal-overlay.js
var import_react39 = __toESM(require_react());
function PortalOverlay({ track, isDisabled, children }) {
  const ref = (0, import_react39.useRef)(null);
  const [container, setContainer] = (0, import_react39.useState)(null);
  (0, import_react39.useLayoutEffect)(() => {
    if (track.current) {
      const newContainer = track.current.ownerDocument.createElement("div");
      track.current.ownerDocument.body.appendChild(newContainer);
      setContainer(newContainer);
      return () => newContainer.remove();
    }
  }, [track]);
  (0, import_react39.useEffect)(() => {
    if (track.current === null || isDisabled) {
      return;
    }
    let cleanedUp = false;
    let lastX;
    let lastY;
    let lastInlineSize;
    let lastBlockSize;
    const updateElement = () => {
      if (track.current && ref.current && document.body.contains(ref.current)) {
        const isRtl = getIsRtl(ref.current);
        const { insetInlineStart, insetBlockStart, inlineSize, blockSize } = getLogicalBoundingClientRect(track.current);
        const newX = (insetInlineStart + getScrollInlineStart(document.documentElement)) * (isRtl ? -1 : 1);
        const newY = insetBlockStart + document.documentElement.scrollTop;
        if (lastX !== newX || lastY !== newY) {
          ref.current.style.translate = `${newX}px ${newY}px`;
          lastX = newX;
          lastY = newY;
        }
        if (lastInlineSize !== inlineSize || lastBlockSize !== blockSize) {
          ref.current.style.width = `${inlineSize}px`;
          ref.current.style.height = `${blockSize}px`;
          lastInlineSize = inlineSize;
          lastBlockSize = blockSize;
        }
      }
      if (!cleanedUp) {
        requestAnimationFrame(updateElement);
      }
    };
    updateElement();
    return () => {
      cleanedUp = true;
    };
  }, [isDisabled, track]);
  return import_react39.default.createElement(
    Portal,
    { container },
    import_react39.default.createElement(
      "span",
      { ref, className: styles_css_default23["portal-overlay"] },
      import_react39.default.createElement("span", { className: styles_css_default23["portal-overlay-contents"] }, children)
    )
  );
}

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/index.js
function DragHandleWrapper({ directions: directions2, tooltipText, children, onDirectionClick, triggerMode = "focus", initialShowButtons = false, hideButtonsOnDrag, clickDragThreshold }) {
  const wrapperRef = (0, import_react40.useRef)(null);
  const dragHandleRef = (0, import_react40.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react40.useState)(false);
  const [showButtons, setShowButtons] = (0, import_react40.useState)(initialShowButtons);
  const isPointerDown = (0, import_react40.useRef)(false);
  const initialPointerPosition = (0, import_react40.useRef)();
  const didPointerDrag = (0, import_react40.useRef)(false);
  const isDisabled = !directions2["block-start"] && !directions2["block-end"] && !directions2["inline-start"] && !directions2["inline-end"];
  const onWrapperFocusIn = (event) => {
    if (document.body.dataset.awsuiFocusVisible && !nodeContains(wrapperRef.current, event.relatedTarget)) {
      setShowTooltip(false);
      if (triggerMode === "focus") {
        setShowButtons(true);
      }
    }
  };
  const onWrapperFocusOut = (event) => {
    if (document.hasFocus() && !nodeContains(wrapperRef.current, event.relatedTarget)) {
      setShowButtons(false);
    }
  };
  (0, import_react40.useEffect)(() => {
    const controller = new AbortController();
    document.addEventListener("pointermove", (event) => {
      if (isPointerDown.current && initialPointerPosition.current && (event.clientX > initialPointerPosition.current.x + clickDragThreshold || event.clientX < initialPointerPosition.current.x - clickDragThreshold || event.clientY > initialPointerPosition.current.y + clickDragThreshold || event.clientY < initialPointerPosition.current.y - clickDragThreshold)) {
        didPointerDrag.current = true;
        if (hideButtonsOnDrag) {
          setShowButtons(false);
        }
      }
    }, { signal: controller.signal });
    const resetPointerDownState = () => {
      isPointerDown.current = false;
      initialPointerPosition.current = void 0;
    };
    document.addEventListener("pointercancel", () => {
      resetPointerDownState();
    }, { signal: controller.signal });
    document.addEventListener("pointerup", () => {
      if (isPointerDown.current && !didPointerDrag.current) {
        setShowButtons(true);
      }
      resetPointerDownState();
    }, { signal: controller.signal });
    return () => controller.abort();
  }, [clickDragThreshold, hideButtonsOnDrag]);
  const onHandlePointerDown = (event) => {
    isPointerDown.current = true;
    didPointerDrag.current = false;
    initialPointerPosition.current = { x: event.clientX, y: event.clientY };
    setShowTooltip(false);
  };
  const onTooltipGroupPointerEnter = () => {
    if (!isPointerDown.current) {
      setShowTooltip(true);
    }
  };
  const onTooltipGroupPointerLeave = () => {
    setShowTooltip(false);
  };
  const onDragHandleKeyDown = (event) => {
    if (event.key === "Escape") {
      setShowButtons(false);
    } else if (triggerMode === "keyboard-activate" && (event.key === "Enter" || event.key === " ")) {
      setShowButtons((prevshowButtons) => !prevshowButtons);
    } else if (event.key !== "Alt" && event.key !== "Control" && event.key !== "Meta" && event.key !== "Shift" && triggerMode !== "keyboard-activate") {
      setShowButtons(true);
    }
  };
  const onInternalDirectionClick = (direction) => {
    var _a;
    if (dragHandleRef.current) {
      (_a = getFirstFocusable(dragHandleRef.current)) === null || _a === void 0 ? void 0 : _a.focus();
    }
    onDirectionClick === null || onDirectionClick === void 0 ? void 0 : onDirectionClick(direction);
  };
  return import_react40.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default23["drag-handle-wrapper"], showButtons && styles_css_default23["drag-handle-wrapper-open"]), ref: wrapperRef, onFocus: onWrapperFocusIn, onBlur: onWrapperFocusOut },
    import_react40.default.createElement(
      "div",
      { onPointerEnter: onTooltipGroupPointerEnter, onPointerLeave: onTooltipGroupPointerLeave },
      import_react40.default.createElement("div", { className: styles_css_default23["drag-handle"], ref: dragHandleRef, onPointerDown: onHandlePointerDown, onKeyDown: onDragHandleKeyDown }, children),
      !isDisabled && !showButtons && showTooltip && tooltipText && import_react40.default.createElement(Tooltip, { trackRef: dragHandleRef, value: tooltipText, onDismiss: () => setShowTooltip(false) })
    ),
    import_react40.default.createElement(
      PortalOverlay,
      { track: dragHandleRef, isDisabled: !showButtons },
      directions2["block-start"] && import_react40.default.createElement(DirectionButton, { show: !isDisabled && showButtons, direction: "block-start", state: directions2["block-start"], onClick: () => onInternalDirectionClick("block-start") }),
      directions2["block-end"] && import_react40.default.createElement(DirectionButton, { show: !isDisabled && showButtons, direction: "block-end", state: directions2["block-end"], onClick: () => onInternalDirectionClick("block-end") }),
      directions2["inline-start"] && import_react40.default.createElement(DirectionButton, { show: !isDisabled && showButtons, direction: "inline-start", state: directions2["inline-start"], onClick: () => onInternalDirectionClick("inline-start") }),
      directions2["inline-end"] && import_react40.default.createElement(DirectionButton, { show: !isDisabled && showButtons, direction: "inline-end", state: directions2["inline-end"], onClick: () => onInternalDirectionClick("inline-end") })
    )
  );
}

// node_modules/@cloudscape-design/components/internal/components/drag-handle/button.js
var import_react42 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle/resize-icon.js
var import_react41 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/drag-handle/styles.scoped.css";
var styles_css_default25 = {
  "handle": "awsui_handle_sdha6_1vz91_145",
  "handle-size-normal": "awsui_handle-size-normal_sdha6_1vz91_153",
  "handle-size-small": "awsui_handle-size-small_sdha6_1vz91_157",
  "handle-drag-indicator": "awsui_handle-drag-indicator_sdha6_1vz91_160",
  "handle-disabled": "awsui_handle-disabled_sdha6_1vz91_160",
  "active": "awsui_active_sdha6_1vz91_163",
  "handle-resize-area": "awsui_handle-resize-area_sdha6_1vz91_166",
  "handle-resize-horizontal": "awsui_handle-resize-horizontal_sdha6_1vz91_173",
  "handle-resize-vertical": "awsui_handle-resize-vertical_sdha6_1vz91_176",
  "hide-focus": "awsui_hide-focus_sdha6_1vz91_186",
  "resize-icon": "awsui_resize-icon_sdha6_1vz91_208",
  "resize-icon-vertical": "awsui_resize-icon-vertical_sdha6_1vz91_214",
  "resize-icon-horizontal": "awsui_resize-icon-horizontal_sdha6_1vz91_218"
};

// node_modules/@cloudscape-design/components/internal/components/drag-handle/resize-icon.js
function ResizeIcon({ variant }) {
  return import_react41.default.createElement(
    "svg",
    { focusable: "false", className: clsx_m_default(styles_css_default25["resize-icon"], styles_css_default25[`resize-icon-${variant}`]), xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16", "aria-hidden": true },
    import_react41.default.createElement("path", { d: "M2 8H14", strokeWidth: "2", strokeLinecap: "round" })
  );
}

// node_modules/@cloudscape-design/components/internal/components/drag-handle/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/drag-handle/test-classes/styles.scoped.css";
var styles_css_default26 = {
  "root": "awsui_root_1om0h_im8v7_5"
};

// node_modules/@cloudscape-design/components/internal/components/drag-handle/button.js
var DragHandleButton = (0, import_react42.forwardRef)(({ variant = "drag-indicator", size = "normal", active = false, className: className2, ariaLabel, ariaLabelledBy, ariaDescribedby, ariaValue, disabled, onPointerDown, onKeyDown }, ref) => {
  const dragHandleRefObject = (0, import_react42.useRef)(null);
  const iconProps = (() => {
    const shared = { variant: disabled ? "disabled" : void 0, size };
    switch (variant) {
      case "drag-indicator":
        return Object.assign(Object.assign({}, shared), { name: "drag-indicator" });
      case "resize-area":
        return Object.assign(Object.assign({}, shared), { name: "resize-area" });
      case "resize-horizontal":
        return Object.assign(Object.assign({}, shared), { svg: import_react42.default.createElement(ResizeIcon, { variant: "horizontal" }) });
      case "resize-vertical":
        return Object.assign(Object.assign({}, shared), { svg: import_react42.default.createElement(ResizeIcon, { variant: "vertical" }) });
    }
  })();
  return (
    // We need to use a div with button role instead of a button
    // so that Safari will focus on it when clicking it.
    // (See https://bugs.webkit.org/show_bug.cgi?id=22261)
    // Otherwise, we can't reliably catch keyboard events coming from the handle
    // when it is being dragged.
    import_react42.default.createElement(
      "div",
      { ref: useMergeRefs(ref, dragHandleRefObject), role: ariaValue ? "slider" : "application", tabIndex: 0, className: clsx_m_default(className2, styles_css_default25.handle, styles_css_default26.root, styles_css_default25[`handle-${variant}`], styles_css_default25[`handle-size-${size}`], disabled && styles_css_default25["handle-disabled"], active && styles_css_default25.active), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedby, "aria-disabled": disabled, "aria-valuemax": ariaValue === null || ariaValue === void 0 ? void 0 : ariaValue.valueMax, "aria-valuemin": ariaValue === null || ariaValue === void 0 ? void 0 : ariaValue.valueMin, "aria-valuenow": ariaValue === null || ariaValue === void 0 ? void 0 : ariaValue.valueNow, onPointerDown, onKeyDown },
      import_react42.default.createElement(internal_default, Object.assign({}, iconProps))
    )
  );
});
var button_default2 = DragHandleButton;

// node_modules/@cloudscape-design/components/internal/components/drag-handle/index.js
var InternalDragHandle = (0, import_react43.forwardRef)((_a, ref) => {
  var { variant, size, ariaLabel, ariaLabelledBy, ariaDescribedby, tooltipText, ariaValue, disabled, directions: directions2 = {}, onPointerDown, onKeyDown, onDirectionClick, triggerMode, initialShowButtons, hideButtonsOnDrag = false, clickDragThreshold = 3, active } = _a, rest = __rest(_a, ["variant", "size", "ariaLabel", "ariaLabelledBy", "ariaDescribedby", "tooltipText", "ariaValue", "disabled", "directions", "onPointerDown", "onKeyDown", "onDirectionClick", "triggerMode", "initialShowButtons", "hideButtonsOnDrag", "clickDragThreshold", "active"]);
  const baseProps = getBaseProps(rest);
  return import_react43.default.createElement(
    DragHandleWrapper,
    { directions: !disabled ? directions2 : {}, tooltipText, onDirectionClick, triggerMode, initialShowButtons, hideButtonsOnDrag, clickDragThreshold },
    import_react43.default.createElement(button_default2, { ref, className: baseProps.className, variant, size, ariaLabel, ariaLabelledBy, ariaDescribedby, ariaValue, disabled, active, onPointerDown, onKeyDown })
  );
});
var drag_handle_default = InternalDragHandle;

// node_modules/@cloudscape-design/components/internal/components/panel-resize-handle/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/panel-resize-handle/styles.scoped.css";
var styles_css_default27 = {
  "slider": "awsui_slider_cqzlk_1swl4_145",
  "slider-side": "awsui_slider-side_cqzlk_1swl4_179"
};

// node_modules/@cloudscape-design/components/internal/components/panel-resize-handle/index.js
var panel_resize_handle_default = import_react44.default.forwardRef(function PanelResizeHandle({ className: className2, ariaLabel, tooltipText, ariaValuenow, position, onDirectionClick, onKeyDown, onPointerDown }, ref) {
  return import_react44.default.createElement(drag_handle_default, { className: clsx_m_default(className2, styles_css_default27.slider, styles_css_default27[`slider-${position}`]), ariaLabel, tooltipText, ariaValue: { valueMin: 0, valueMax: 100, valueNow: ariaValuenow }, variant: position === "side" ? "resize-horizontal" : "resize-vertical", directions: position === "side" ? {
    "inline-end": ariaValuenow === 0 ? "disabled" : "active",
    "inline-start": ariaValuenow === 100 ? "disabled" : "active"
  } : {
    "block-end": ariaValuenow === 0 ? "disabled" : "active",
    "block-start": ariaValuenow === 100 ? "disabled" : "active"
  }, onDirectionClick, onKeyDown, onPointerDown, ref });
});

// node_modules/@cloudscape-design/components/app-layout/utils/use-keyboard-events.js
var KEYBOARD_SINGLE_STEP_SIZE = 10;
var KEYBOARD_MULTIPLE_STEPS_SIZE = 60;
var getCurrentSize = (panelRef) => {
  if (!panelRef || !panelRef.current) {
    return {
      panelHeight: 0,
      panelWidth: 0
    };
  }
  return {
    panelHeight: panelRef.current.clientHeight,
    panelWidth: panelRef.current.clientWidth
  };
};
var useKeyboardEvents = ({ position, onResize, panelRef }) => {
  return {
    onDirectionClick: (direction) => {
      let currentSize;
      const { panelHeight, panelWidth } = getCurrentSize(panelRef);
      if (position === "side") {
        currentSize = panelWidth;
      } else {
        currentSize = panelHeight;
      }
      const singleStepUp = () => onResize(currentSize + KEYBOARD_SINGLE_STEP_SIZE);
      const singleStepDown = () => onResize(currentSize - KEYBOARD_SINGLE_STEP_SIZE);
      switch (direction) {
        case "block-start":
        case "inline-start":
          singleStepUp();
          break;
        case "block-end":
        case "inline-end":
          singleStepDown();
          break;
      }
    },
    onKeyDown: (event) => {
      let currentSize;
      let maxSize;
      const { panelHeight, panelWidth } = getCurrentSize(panelRef);
      if (position === "side") {
        currentSize = panelWidth;
        maxSize = window.innerWidth;
      } else {
        currentSize = panelHeight;
        maxSize = window.innerHeight;
      }
      let isEventHandled = true;
      const singleStepUp = () => onResize(currentSize + KEYBOARD_SINGLE_STEP_SIZE);
      const singleStepDown = () => onResize(currentSize - KEYBOARD_SINGLE_STEP_SIZE);
      const multipleStepUp = () => onResize(currentSize + KEYBOARD_MULTIPLE_STEPS_SIZE);
      const multipleStepDown = () => onResize(currentSize - KEYBOARD_MULTIPLE_STEPS_SIZE);
      handleKey(event, {
        onBlockStart: () => {
          position === "bottom" ? singleStepUp() : singleStepDown();
        },
        onBlockEnd: () => {
          position === "bottom" ? singleStepDown() : singleStepUp();
        },
        onInlineEnd: () => {
          position === "bottom" ? singleStepUp() : singleStepDown();
        },
        onInlineStart: () => {
          position === "bottom" ? singleStepDown() : singleStepUp();
        },
        onPageDown: () => multipleStepDown(),
        onPageUp: () => multipleStepUp(),
        onHome: () => onResize(maxSize),
        onEnd: () => onResize(0),
        onDefault: () => isEventHandled = false
      });
      if (isEventHandled) {
        event.preventDefault();
      }
    }
  };
};

// node_modules/@cloudscape-design/components/app-layout/utils/use-pointer-events.js
var import_react45 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/resize/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/resize/styles.scoped.css";
var styles_css_default28 = {
  "with-motion-vertical": "awsui_with-motion-vertical_b18tp_pelqr_146",
  "with-motion-horizontal": "awsui_with-motion-horizontal_b18tp_pelqr_165",
  "resize-active": "awsui_resize-active_b18tp_pelqr_184",
  "resize-side": "awsui_resize-side_b18tp_pelqr_195",
  "resize-bottom": "awsui_resize-bottom_b18tp_pelqr_198"
};

// node_modules/@cloudscape-design/components/app-layout/utils/use-pointer-events.js
var usePointerEvents = ({ position, panelRef, handleRef, onResize }) => {
  const onDocumentPointerMove = (0, import_react45.useCallback)((event) => {
    if (!panelRef || !panelRef.current || !handleRef || !handleRef.current) {
      return;
    }
    if (position === "side") {
      const mouseClientX = getLogicalClientX(event, getIsRtl(panelRef.current)) || 0;
      const handleOffset = getLogicalBoundingClientRect(handleRef.current).inlineSize / 2;
      const width = getLogicalBoundingClientRect(panelRef.current).insetInlineEnd - mouseClientX + handleOffset;
      onResize(width);
    } else {
      const mouseClientY = event.clientY || 0;
      const handleOffset = getLogicalBoundingClientRect(handleRef.current).blockSize / 2;
      const height = getLogicalBoundingClientRect(panelRef.current).insetBlockEnd - mouseClientY + handleOffset;
      onResize(height);
    }
  }, [position, panelRef, handleRef, onResize]);
  const onDocumentPointerUp = (0, import_react45.useCallback)(() => {
    const panelElement = panelRef === null || panelRef === void 0 ? void 0 : panelRef.current;
    if (!panelElement) {
      return;
    }
    const currentDocument = panelElement.ownerDocument;
    currentDocument.body.classList.remove(styles_css_default28["resize-active"]);
    currentDocument.body.classList.remove(styles_css_default28[`resize-${position}`]);
    currentDocument.removeEventListener("pointerup", onDocumentPointerUp);
    currentDocument.removeEventListener("pointermove", onDocumentPointerMove);
  }, [panelRef, onDocumentPointerMove, position]);
  const onSliderPointerDown = (0, import_react45.useCallback)(() => {
    const panelElement = panelRef === null || panelRef === void 0 ? void 0 : panelRef.current;
    if (!panelElement) {
      return;
    }
    const currentDocument = panelElement.ownerDocument;
    currentDocument.body.classList.add(styles_css_default28["resize-active"]);
    currentDocument.body.classList.add(styles_css_default28[`resize-${position}`]);
    currentDocument.addEventListener("pointerup", onDocumentPointerUp);
    currentDocument.addEventListener("pointermove", onDocumentPointerMove);
  }, [panelRef, onDocumentPointerMove, onDocumentPointerUp, position]);
  return onSliderPointerDown;
};

// node_modules/@cloudscape-design/components/app-layout/drawer/resizable-drawer.js
var ResizableDrawer = (_a) => {
  var _b, _c, _d, _e, _f;
  var { onResize, maxWidth, minWidth, refs, activeDrawer, toolsContent } = _a, props2 = __rest(_a, ["onResize", "maxWidth", "minWidth", "refs", "activeDrawer", "toolsContent"]);
  const { isOpen, children, width, isMobile } = props2;
  const clampedWidth = getLimitedValue(minWidth, width, maxWidth);
  const relativeSize = (clampedWidth - minWidth) / (maxWidth - minWidth) * 100;
  const setSidePanelWidth = (newWidth) => {
    const size = getLimitedValue(minWidth, newWidth, maxWidth);
    const id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
    if (isOpen && id && maxWidth >= minWidth) {
      onResize({ size, id });
    }
  };
  const drawerRefObject = (0, import_react46.useRef)(null);
  const sizeControlProps = {
    position: "side",
    panelRef: drawerRefObject,
    handleRef: refs.slider,
    onResize: setSidePanelWidth
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const { onKeyDown, onDirectionClick } = useKeyboardEvents(sizeControlProps);
  return import_react46.default.createElement(
    Drawer,
    Object.assign({}, props2, { id: activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id, width: clampedWidth, ref: drawerRefObject, isHidden: !activeDrawer, resizeHandle: !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && import_react46.default.createElement(panel_resize_handle_default, { ref: refs.slider, position: "side", className: styles_css_default12["drawers-slider"], ariaLabel: (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.resizeHandle, tooltipText: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.resizeHandleTooltipText, ariaValuenow: relativeSize, onKeyDown, onDirectionClick, onPointerDown: onSliderPointerDown }), ariaLabels: {
      openLabel: (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _d === void 0 ? void 0 : _d.triggerButton,
      mainLabel: (_e = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _e === void 0 ? void 0 : _e.drawerName,
      closeLabel: (_f = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _f === void 0 ? void 0 : _f.closeButton
    } }),
    toolsContent && import_react46.default.createElement("div", { className: clsx_m_default((activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== TOOLS_DRAWER_ID && styles_css_default22.hide) }, toolsContent),
    (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== TOOLS_DRAWER_ID ? children : null
  );
};

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/index.js
var import_react47 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/styles.scoped.css";
var styles_css_default29 = {
  "root": "awsui_root_lm6vo_j45og_153",
  "root-no-scroll": "awsui_root-no-scroll_lm6vo_j45og_160",
  "layout": "awsui_layout_lm6vo_j45og_165",
  "layout-no-scroll": "awsui_layout-no-scroll_lm6vo_j45og_171",
  "layout-main": "awsui_layout-main_lm6vo_j45og_175",
  "layout-main-scrollable": "awsui_layout-main-scrollable_lm6vo_j45og_181",
  "unfocusable": "awsui_unfocusable_lm6vo_j45og_186",
  "breadcrumbs-desktop": "awsui_breadcrumbs-desktop_lm6vo_j45og_190",
  "content-header-wrapper": "awsui_content-header-wrapper_lm6vo_j45og_195",
  "content-wrapper": "awsui_content-wrapper_lm6vo_j45og_199",
  "content-overlapped": "awsui_content-overlapped_lm6vo_j45og_203",
  "content-extra-top-padding": "awsui_content-extra-top-padding_lm6vo_j45og_207"
};

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/styles.scoped.css";
var styles_css_default30 = {
  "block-body-scroll": "awsui_block-body-scroll_19d8l_ug653_153",
  "mobile-bar": "awsui_mobile-bar_19d8l_ug653_157",
  "mobile-bar-breadcrumbs": "awsui_mobile-bar-breadcrumbs_19d8l_ug653_170",
  "mobile-toggle": "awsui_mobile-toggle_19d8l_ug653_177",
  "mobile-toggle-type-navigation": "awsui_mobile-toggle-type-navigation_19d8l_ug653_186",
  "mobile-toggle-type-tools": "awsui_mobile-toggle-type-tools_19d8l_ug653_189",
  "mobile-toggle-type-drawer": "awsui_mobile-toggle-type-drawer_19d8l_ug653_189",
  "drawers-container": "awsui_drawers-container_19d8l_ug653_196"
};

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/index.js
var MobileToggle = import_react47.default.forwardRef(({ className: className2, ariaLabels, type, disabled, onClick }, ref) => {
  const { TagName, iconName, getLabels } = togglesConfig[type];
  const { mainLabel, openLabel } = getLabels(ariaLabels);
  return import_react47.default.createElement(
    TagName,
    { className: clsx_m_default(styles_css_default30["mobile-toggle"], styles_css_default30[`mobile-toggle-type-${type}`]), "aria-hidden": disabled, "aria-label": mainLabel, onClick: (e3) => e3.target === e3.currentTarget && onClick() },
    import_react47.default.createElement(ToggleButton, { ref, className: className2, iconName, onClick, ariaLabel: openLabel, disabled, ariaExpanded: disabled })
  );
});
function MobileToolbar({ ariaLabels, toggleRefs, topOffset, navigationHide, toolsHide, anyPanelOpen, unfocusable, drawers, activeDrawerId, children, onNavigationOpen, onToolsOpen, onDrawerChange, mobileBarRef }) {
  (0, import_react47.useEffect)(() => {
    if (anyPanelOpen) {
      document.body.classList.add(styles_css_default30["block-body-scroll"]);
      return () => {
        document.body.classList.remove(styles_css_default30["block-body-scroll"]);
      };
    } else {
      document.body.classList.remove(styles_css_default30["block-body-scroll"]);
    }
  }, [anyPanelOpen]);
  const { overflowItems, visibleItems } = splitItems(drawers, 2, activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react47.default.createElement(
    "div",
    { ref: mobileBarRef, className: clsx_m_default(styles_css_default30["mobile-bar"], styles_css_default12["mobile-bar"], unfocusable && styles_css_default29.unfocusable), style: { top: topOffset } },
    !navigationHide && import_react47.default.createElement(MobileToggle, { ref: toggleRefs.navigation, type: "navigation", className: styles_css_default12["navigation-toggle"], ariaLabels, disabled: anyPanelOpen, onClick: onNavigationOpen }),
    import_react47.default.createElement("div", { className: styles_css_default30["mobile-bar-breadcrumbs"] }, children && import_react47.default.createElement("div", { className: styles_css_default12.breadcrumbs }, children)),
    !toolsHide && !drawers && import_react47.default.createElement(MobileToggle, { ref: toggleRefs.tools, type: "tools", className: styles_css_default12["tools-toggle"], ariaLabels, disabled: anyPanelOpen, onClick: onToolsOpen }),
    drawers && import_react47.default.createElement(
      "aside",
      { "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "region" },
      import_react47.default.createElement(
        "div",
        { className: styles_css_default30["drawers-container"], "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "toolbar", "aria-orientation": "horizontal" },
        visibleItems.map((item, index) => {
          var _a;
          return import_react47.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default30["mobile-toggle"], styles_css_default30["mobile-toggle-type-drawer"]), key: index, onClick: () => onDrawerChange(item.id) },
            import_react47.default.createElement(ToggleButton, { className: clsx_m_default(styles_css_default12["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default12["tools-toggle"]), iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, badge: item.badge, ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, ariaExpanded: activeDrawerId === item.id, testId: `awsui-app-layout-trigger-${item.id}` })
          );
        }),
        overflowItems.length > 0 && import_react47.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default30["mobile-toggle"], styles_css_default30["mobile-toggle-type-drawer"]) },
          import_react47.default.createElement(OverflowMenu, { ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow, items: overflowItems, onItemClick: ({ detail }) => onDrawerChange(detail.id) })
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/notifications/index.js
var import_react48 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/notifications/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/notifications/styles.scoped.css";
var styles_css_default31 = {
  "notifications": "awsui_notifications_1hmm4_1prmt_9",
  "notifications-sticky": "awsui_notifications-sticky_1hmm4_1prmt_10",
  "no-content-paddings": "awsui_no-content-paddings_1hmm4_1prmt_25"
};

// node_modules/@cloudscape-design/components/app-layout/notifications/index.js
var Notifications = import_react48.default.forwardRef((_a, ref) => {
  var _b, _c;
  var { sticky, disableContentPaddings } = _a, props2 = __rest(_a, ["sticky", "disableContentPaddings"]);
  return sticky ? import_react48.default.createElement(
    "div",
    { ref, className: styles_css_default31["notifications-sticky"], style: { top: props2.topOffset } },
    import_react48.default.createElement("div", { role: "region", className: clsx_m_default(props2.testUtilsClassName, disableContentPaddings && styles_css_default31["no-content-paddings"]), "aria-label": (_b = props2.labels) === null || _b === void 0 ? void 0 : _b.notifications }, props2.children)
  ) : import_react48.default.createElement("div", { role: "region", ref, className: clsx_m_default(props2.testUtilsClassName, styles_css_default31.notifications, disableContentPaddings && styles_css_default31["no-content-paddings"]), "aria-label": (_c = props2.labels) === null || _c === void 0 ? void 0 : _c.notifications }, props2.children);
});

// node_modules/@cloudscape-design/components/app-layout/split-panel/constants.js
var SPLIT_PANEL_MIN_HEIGHT = 160;
var SPLIT_PANEL_MIN_WIDTH = 280;

// node_modules/@cloudscape-design/components/app-layout/split-panel/drawer.js
var import_react50 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/split-panel-context.js
var import_react49 = __toESM(require_react());
var SplitPanelContext = (0, import_react49.createContext)(null);
var SplitPanelContextProvider = SplitPanelContext.Provider;
function useSplitPanelContext() {
  const ctx = (0, import_react49.useContext)(SplitPanelContext);
  if (!ctx) {
    throw new Error("Split panel can only be used inside app layout");
  }
  return ctx;
}

// node_modules/@cloudscape-design/components/app-layout/split-panel/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/split-panel/styles.scoped.css";
var styles_css_default32 = {
  "drawer-displayed": "awsui_drawer-displayed_1lh3u_16xqy_149",
  "drawer-content": "awsui_drawer-content_1lh3u_16xqy_153"
};

// node_modules/@cloudscape-design/components/app-layout/split-panel/drawer.js
function SideSplitPanelDrawer({ displayed, children }) {
  const { isOpen, size, topOffset, bottomOffset } = useSplitPanelContext();
  const width = isOpen && children ? size : void 0;
  return import_react50.default.createElement(
    "div",
    { className: clsx_m_default(displayed && styles_css_default32["drawer-displayed"]), style: { width }, "data-testid": "side-split-panel-drawer" },
    import_react50.default.createElement("div", { className: styles_css_default32["drawer-content"], style: { width, top: topOffset, bottom: bottomOffset } }, children)
  );
}

// node_modules/@cloudscape-design/components/app-layout/split-panel/provider.js
var import_react51 = __toESM(require_react());
function SplitPanelProvider(_a) {
  var { children, size, getMaxHeight, maxWidth, reportSize, onResize } = _a, rest = __rest(_a, ["children", "size", "getMaxHeight", "maxWidth", "reportSize", "onResize"]);
  const { position, isOpen } = rest;
  const [maxHeight, setMaxHeight] = (0, import_react51.useState)(size);
  const minSize = position === "bottom" ? SPLIT_PANEL_MIN_HEIGHT : SPLIT_PANEL_MIN_WIDTH;
  const maxSize = position === "bottom" ? maxHeight : maxWidth;
  const cappedSize = getLimitedValue(minSize, size, maxSize);
  const relativeSize = (size - minSize) / (maxSize - minSize) * 100;
  const onResizeWithValidation = (newSize) => {
    const maxSize2 = position === "side" ? maxWidth : getMaxHeight();
    const isResizeValid = position === "side" ? maxSize2 >= SPLIT_PANEL_MIN_WIDTH : maxSize2 >= SPLIT_PANEL_MIN_HEIGHT;
    if (isOpen && isResizeValid) {
      onResize(getLimitedValue(minSize, newSize, maxSize2));
    }
  };
  (0, import_react51.useEffect)(() => {
    if (position !== "bottom") {
      return;
    }
    const handle = requestAnimationFrame(() => setMaxHeight(getMaxHeight()));
    return () => cancelAnimationFrame(handle);
  }, [size, minSize, position, getMaxHeight]);
  (0, import_react51.useEffect)(() => {
    reportSize(cappedSize);
  }, [reportSize, cappedSize]);
  (0, import_react51.useEffect)(() => {
    if (position !== "bottom") {
      return;
    }
    const handler = () => setMaxHeight(getMaxHeight());
    window.addEventListener("resize", handler);
    return () => window.removeEventListener("resize", handler);
  }, [position, getMaxHeight]);
  return import_react51.default.createElement(SplitPanelContextProvider, { value: Object.assign(Object.assign({}, rest), { size: cappedSize, relativeSize, onResize: onResizeWithValidation }) }, children);
}

// node_modules/@cloudscape-design/components/app-layout/split-panel/split-panel-forced-position.js
function checkBasedOnPreviousPosition() {
  let isForced = false;
  return (availableWidthForSplitPanel) => {
    const minWidth = isForced ? SPLIT_PANEL_MIN_WIDTH + browserScrollbarSize().width : SPLIT_PANEL_MIN_WIDTH;
    isForced = availableWidthForSplitPanel < minWidth;
    return isForced;
  };
}
var checkForcedPosition = checkBasedOnPreviousPosition();
function shouldSplitPanelBeForcedToBottom({ isMobile, availableWidthForSplitPanel }) {
  if (isMobile) {
    return true;
  }
  return checkForcedPosition(availableWidthForSplitPanel);
}

// node_modules/@cloudscape-design/components/app-layout/utils/sticky-offsets.js
function getStickyOffsetVars(headerHeight, footerHeight, stickyNotificationsHeight, mobileToolbarHeight, disableBodyScroll, isMobile) {
  return {
    [global_vars_default.stickyVerticalTopOffset]: `calc(${!disableBodyScroll ? headerHeight : 0}px + ${isMobile ? mobileToolbarHeight : stickyNotificationsHeight})`,
    [global_vars_default.stickyVerticalBottomOffset]: `${!disableBodyScroll ? footerHeight : 0}px`
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-focus-control.js
var import_react52 = __toESM(require_react());
function useMultipleFocusControl(restoreFocus, activeDrawersIds) {
  const refs = (0, import_react52.useRef)({});
  activeDrawersIds.forEach((drawerId) => {
    if (!refs.current[drawerId]) {
      refs.current[drawerId] = {
        toggle: (0, import_react52.createRef)(),
        close: (0, import_react52.createRef)(),
        slider: (0, import_react52.createRef)()
      };
    }
  });
  const doFocus = (0, import_react52.useCallback)((drawerId, open = true) => {
    var _a, _b, _c, _d, _e, _f;
    if (!shouldFocus.current) {
      return;
    }
    const ref = refs.current[drawerId];
    if (open) {
      previousFocusedElement.current = document.activeElement !== document.body ? document.activeElement : void 0;
      if ((_a = ref === null || ref === void 0 ? void 0 : ref.slider) === null || _a === void 0 ? void 0 : _a.current) {
        (_b = ref.slider.current) === null || _b === void 0 ? void 0 : _b.focus();
      } else {
        (_d = (_c = ref === null || ref === void 0 ? void 0 : ref.close) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.focus();
      }
    } else {
      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {
        previousFocusedElement.current.focus();
        previousFocusedElement.current = void 0;
      } else {
        (_f = (_e = ref === null || ref === void 0 ? void 0 : ref.toggle) === null || _e === void 0 ? void 0 : _e.current) === null || _f === void 0 ? void 0 : _f.focus();
      }
    }
    shouldFocus.current = false;
  }, [refs, restoreFocus]);
  const setFocus = (params) => {
    const { force = false, drawerId = null, open = true } = params || {};
    shouldFocus.current = true;
    if (force && (!drawerId || activeDrawersIds.includes(drawerId))) {
      doFocus(drawerId, open);
    }
  };
  const loseFocus = (0, import_react52.useCallback)(() => {
    previousFocusedElement.current = void 0;
  }, []);
  const previousFocusedElement = (0, import_react52.useRef)();
  const shouldFocus = (0, import_react52.useRef)(false);
  (0, import_react52.useEffect)(() => {
    doFocus(activeDrawersIds[0]);
  }, [activeDrawersIds, doFocus]);
  return {
    refs: refs.current,
    setFocus,
    loseFocus
  };
}
function useFocusControl(isOpen, restoreFocus = false, activeDrawerId) {
  const refs = {
    toggle: (0, import_react52.useRef)(null),
    close: (0, import_react52.useRef)(null),
    slider: (0, import_react52.useRef)(null)
  };
  const previousFocusedElement = (0, import_react52.useRef)();
  const shouldFocus = (0, import_react52.useRef)(false);
  const doFocus = () => {
    var _a, _b, _c;
    if (!shouldFocus.current) {
      return;
    }
    if (isOpen) {
      previousFocusedElement.current = document.activeElement !== document.body ? document.activeElement : void 0;
      if (refs.slider.current) {
        (_a = refs.slider.current) === null || _a === void 0 ? void 0 : _a.focus();
      } else {
        (_b = refs.close.current) === null || _b === void 0 ? void 0 : _b.focus();
      }
    } else {
      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {
        previousFocusedElement.current.focus();
        previousFocusedElement.current = void 0;
      } else {
        (_c = refs.toggle.current) === null || _c === void 0 ? void 0 : _c.focus();
      }
    }
    shouldFocus.current = false;
  };
  const setFocus = (force) => {
    shouldFocus.current = true;
    if (force && isOpen) {
      doFocus();
    }
  };
  (0, import_react52.useEffect)(doFocus, [isOpen, activeDrawerId]);
  const loseFocus = (0, import_react52.useCallback)(() => {
    previousFocusedElement.current = void 0;
  }, []);
  return {
    refs,
    setFocus,
    loseFocus
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-split-panel-focus-control.js
var import_react53 = __toESM(require_react());
function useSplitPanelFocusControl(dependencies) {
  const refs = {
    toggle: (0, import_react53.useRef)(null),
    slider: (0, import_react53.useRef)(null),
    preferences: (0, import_react53.useRef)(null)
  };
  const lastInteraction = (0, import_react53.useRef)(null);
  (0, import_react53.useEffect)(() => {
    var _a, _b, _c, _d;
    switch ((_a = lastInteraction.current) === null || _a === void 0 ? void 0 : _a.type) {
      case "open":
        (_b = refs.slider.current) === null || _b === void 0 ? void 0 : _b.focus();
        break;
      case "close":
        (_c = refs.toggle.current) === null || _c === void 0 ? void 0 : _c.focus();
        break;
      case "position":
        (_d = refs.preferences.current) === null || _d === void 0 ? void 0 : _d.focus();
        break;
    }
    lastInteraction.current = null;
  }, dependencies);
  return {
    refs,
    setLastInteraction: (interaction) => lastInteraction.current = interaction
  };
}

// node_modules/@cloudscape-design/components/app-layout/classic.js
var ClassicAppLayout = import_react54.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f, _g, _h;
  var { navigation, navigationWidth, navigationHide, navigationOpen, tools, toolsWidth, toolsHide, toolsOpen: controlledToolsOpen, breadcrumbs, notifications, stickyNotifications, contentHeader, disableContentHeaderOverlap, content, contentType, disableContentPaddings, disableBodyScroll, maxContentWidth, minContentWidth, placement, ariaLabels, splitPanel, splitPanelSize: controlledSplitPanelSize, splitPanelOpen: controlledSplitPanelOpen, splitPanelPreferences: controlledSplitPanelPreferences, onSplitPanelPreferencesChange, onSplitPanelResize, onSplitPanelToggle, onNavigationChange, onToolsChange, drawers: controlledDrawers, onDrawerChange, activeDrawerId: controlledActiveDrawerId } = _a, rest = __rest(_a, ["navigation", "navigationWidth", "navigationHide", "navigationOpen", "tools", "toolsWidth", "toolsHide", "toolsOpen", "breadcrumbs", "notifications", "stickyNotifications", "contentHeader", "disableContentHeaderOverlap", "content", "contentType", "disableContentPaddings", "disableBodyScroll", "maxContentWidth", "minContentWidth", "placement", "ariaLabels", "splitPanel", "splitPanelSize", "splitPanelOpen", "splitPanelPreferences", "onSplitPanelPreferencesChange", "onSplitPanelResize", "onSplitPanelToggle", "onNavigationChange", "onToolsChange", "drawers", "onDrawerChange", "activeDrawerId"]);
  const __embeddedViewMode = Boolean(rest.__embeddedViewMode);
  const rootRef = (0, import_react54.useRef)(null);
  const isMobile = useMobile();
  const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, false, {
    componentName: "AppLayout",
    controlledProp: "toolsOpen",
    changeHandler: "onToolsChange"
  });
  const onToolsToggle = (open) => {
    setToolsOpen(open);
    if (hasDrawers) {
      focusDrawersButtons();
    } else {
      focusToolsButtons();
    }
    fireNonCancelableEvent(onToolsChange, { open });
  };
  const { drawers, activeDrawer, minDrawerSize, activeDrawerSize, activeDrawerId, ariaLabelsWithDrawers, onActiveDrawerChange, onActiveDrawerResize } = useDrawers(Object.assign({ drawers: controlledDrawers, onDrawerChange, activeDrawerId: controlledActiveDrawerId }, rest), ariaLabels, {
    disableDrawersMerge: true,
    ariaLabels,
    tools,
    toolsOpen,
    toolsHide,
    toolsWidth,
    onToolsToggle
  });
  ariaLabels = ariaLabelsWithDrawers;
  const hasDrawers = !!drawers;
  const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(navigationOpen);
  const { refs: toolsRefs, setFocus: focusToolsButtons, loseFocus: loseToolsFocus } = useFocusControl(toolsOpen || activeDrawer !== void 0, true);
  const { refs: drawerRefs, setFocus: focusDrawersButtons, loseFocus: loseDrawersFocus } = useFocusControl(!!activeDrawerId, true, activeDrawerId);
  const onNavigationToggle = useStableCallback((open) => {
    focusNavButtons();
    fireNonCancelableEvent(onNavigationChange, { open });
  });
  const onNavigationClick = (event) => {
    const hasLink = findUpUntil(event.target, (node) => node.tagName === "A" && !!node.href);
    if (hasLink) {
      onNavigationToggle(false);
    }
  };
  (0, import_react54.useEffect)(() => {
    if (isMobile) {
      onNavigationToggle(false);
    }
  }, [isMobile, onNavigationToggle]);
  const navigationVisible = !navigationHide && navigationOpen;
  const toolsVisible = !toolsHide && toolsOpen;
  const [headerFooterHeight, setHeaderFooterHeight] = (0, import_react54.useState)(0);
  (0, import_react54.useEffect)(() => {
    const id = requestAnimationFrame(() => setHeaderFooterHeight(placement.insetBlockStart + placement.insetBlockEnd));
    return () => cancelAnimationFrame(id);
  }, [placement.insetBlockStart, placement.insetBlockEnd]);
  const contentHeightStyle = {
    [disableBodyScroll ? "blockSize" : "minBlockSize"]: `calc(100vh - ${headerFooterHeight}px)`
  };
  const [notificationsHeight, notificationsRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  const anyPanelOpen = navigationVisible || toolsVisible || !!activeDrawer;
  const hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;
  const stickyNotificationsHeight = stickyNotifications ? notificationsHeight !== null && notificationsHeight !== void 0 ? notificationsHeight : 0 : 0;
  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  });
  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {
    componentName: "AppLayout",
    controlledProp: "splitPanelOpen",
    changeHandler: "onSplitPanelToggle"
  });
  const splitPanelPosition = (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) || "bottom";
  const [splitPanelReportedToggle, setSplitPanelReportedToggle] = (0, import_react54.useState)({
    displayed: false,
    ariaLabel: void 0
  });
  const splitPanelDisplayed = !!(splitPanel && (splitPanelReportedToggle.displayed || splitPanelOpen));
  const closedDrawerWidth = 40;
  const effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;
  const defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);
  const [splitPanelSize = defaultSplitPanelSize, setSplitPanelSize] = useControllable(controlledSplitPanelSize, onSplitPanelResize, defaultSplitPanelSize, {
    componentName: "AppLayout",
    controlledProp: "splitPanelSize",
    changeHandler: "onSplitPanelResize"
  });
  const mainContentRef = (0, import_react54.useRef)(null);
  const legacyScrollRootRef = (0, import_react54.useRef)(null);
  const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([
    splitPanelPreferences,
    splitPanelOpen
  ]);
  const onSplitPanelPreferencesSet = (0, import_react54.useCallback)((detail) => {
    setSplitPanelPreferences(detail);
    setSplitPanelLastInteraction({ type: "position" });
    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);
  }, [setSplitPanelPreferences, onSplitPanelPreferencesChange, setSplitPanelLastInteraction]);
  const onSplitPanelSizeSet = (0, import_react54.useCallback)((newSize) => {
    setSplitPanelSize(newSize);
    fireNonCancelableEvent(onSplitPanelResize, { size: newSize });
  }, [setSplitPanelSize, onSplitPanelResize]);
  const onSplitPanelToggleHandler = (0, import_react54.useCallback)(() => {
    setSplitPanelOpen(!splitPanelOpen);
    setSplitPanelLastInteraction({ type: splitPanelOpen ? "close" : "open" });
    fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });
  }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle, setSplitPanelLastInteraction]);
  const getSplitPanelMaxHeight = useStableCallback(() => {
    if (typeof document === "undefined") {
      return 0;
    } else if (disableBodyScroll && legacyScrollRootRef.current) {
      const availableHeight = legacyScrollRootRef.current.clientHeight;
      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;
    } else {
      const availableHeight = document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;
      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT : availableHeight - MAIN_PANEL_MIN_HEIGHT;
    }
  });
  const rightDrawerBarWidth = drawers ? drawers.length > 1 ? closedDrawerWidth : 0 : 0;
  const contentPadding = 80;
  const resizableSpaceAvailable = Math.max(0, placement.inlineSize - effectiveNavigationWidth - minContentWidth - contentPadding - rightDrawerBarWidth);
  const getEffectiveToolsWidth = () => {
    if (activeDrawerSize && activeDrawer) {
      return Math.min(resizableSpaceAvailable, activeDrawerSize);
    }
    if (toolsHide || drawers) {
      return 0;
    }
    if (toolsOpen) {
      return toolsWidth;
    }
    return closedDrawerWidth;
  };
  const effectiveToolsWidth = getEffectiveToolsWidth();
  const availableWidthForSplitPanel = resizableSpaceAvailable - effectiveToolsWidth;
  const isSplitPanelForcedPosition = shouldSplitPanelBeForcedToBottom({
    isMobile,
    availableWidthForSplitPanel
  });
  const finalSplitPanePosition = isSplitPanelForcedPosition ? "bottom" : splitPanelPosition;
  const splitPaneAvailableOnTheSide = splitPanelDisplayed && finalSplitPanePosition === "side";
  const sideSplitPanelSize = splitPaneAvailableOnTheSide ? splitPanelOpen ? splitPanelSize : closedDrawerWidth : 0;
  const sideSplitPanelMaxWidth = Math.max(0, resizableSpaceAvailable - effectiveToolsWidth);
  const drawerMaxSize = Math.max(0, resizableSpaceAvailable - sideSplitPanelSize);
  const navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;
  const contentMaxWidthStyle = !isMobile ? { maxWidth: maxContentWidth } : void 0;
  const [splitPanelReportedSize, setSplitPanelReportedSize] = (0, import_react54.useState)(0);
  const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = (0, import_react54.useState)(0);
  const splitPanelContextProps = {
    topOffset: placement.insetBlockStart + (finalSplitPanePosition === "bottom" ? stickyNotificationsHeight : 0),
    bottomOffset: placement.insetBlockEnd,
    leftOffset: placement.insetInlineStart + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),
    rightOffset: isMobile ? 0 : placement.insetInlineEnd + effectiveToolsWidth + rightDrawerBarWidth,
    position: finalSplitPanePosition,
    size: splitPanelSize,
    maxWidth: sideSplitPanelMaxWidth,
    getMaxHeight: getSplitPanelMaxHeight,
    disableContentPaddings,
    contentWidthStyles: contentMaxWidthStyle,
    isOpen: splitPanelOpen,
    isForcedPosition: isSplitPanelForcedPosition,
    onResize: onSplitPanelSizeSet,
    onToggle: onSplitPanelToggleHandler,
    onPreferencesChange: onSplitPanelPreferencesSet,
    setSplitPanelToggle: setSplitPanelReportedToggle,
    reportSize: setSplitPanelReportedSize,
    reportHeaderHeight: setSplitPanelReportedHeaderHeight,
    refs: splitPanelRefs
  };
  const splitPanelWrapped = splitPanel && import_react54.default.createElement(SplitPanelProvider, Object.assign({}, splitPanelContextProps), finalSplitPanePosition === "side" ? import_react54.default.createElement(SideSplitPanelDrawer, { displayed: splitPanelDisplayed }, splitPanel) : splitPanel);
  const contentWrapperProps = {
    contentType,
    navigationPadding: navigationHide || !!navigationOpen,
    contentWidthStyles: !isMobile ? { minWidth: minContentWidth, maxWidth: maxContentWidth } : void 0,
    toolsPadding: (
      // tools padding is displayed in one of the three cases
      // 1. Nothing on the that screen edge (no tools panel and no split panel)
      toolsHide || hasDrawers && !activeDrawer && (!splitPanelDisplayed || finalSplitPanePosition !== "side") || // 2. Tools panel is present and open
      toolsVisible || // 3. Split panel is open in side position
      splitPaneAvailableOnTheSide && splitPanelOpen
    ),
    isMobile
  };
  (0, import_react54.useImperativeHandle)(ref, () => ({
    openTools: () => onToolsToggle(true),
    closeNavigationIfNecessary: () => {
      if (isMobile) {
        onNavigationToggle(false);
      }
    },
    focusToolsClose: () => {
      if (hasDrawers) {
        focusDrawersButtons(true);
      } else {
        focusToolsButtons(true);
      }
    },
    focusActiveDrawer: () => focusDrawersButtons(true),
    focusSplitPanel: () => {
      var _a2;
      return (_a2 = splitPanelRefs.slider.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }));
  const splitPanelBottomOffset = (_b = !splitPanelDisplayed || finalSplitPanePosition !== "bottom" ? void 0 : splitPanelOpen ? splitPanelReportedSize : splitPanelReportedHeaderHeight) !== null && _b !== void 0 ? _b : void 0;
  const [mobileBarHeight, mobileBarRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  return import_react54.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default29.root, styles_css_default12.root, disableBodyScroll && styles_css_default29["root-no-scroll"]), ref: rootRef, style: contentHeightStyle },
    isMobile && !__embeddedViewMode && (!toolsHide || !navigationHide || breadcrumbs) && import_react54.default.createElement(MobileToolbar, { anyPanelOpen, toggleRefs: { navigation: navigationRefs.toggle, tools: toolsRefs.toggle }, topOffset: placement.insetBlockStart, ariaLabels, navigationHide, toolsHide, onNavigationOpen: () => onNavigationToggle(true), onToolsOpen: () => onToolsToggle(true), unfocusable: anyPanelOpen, mobileBarRef, drawers, activeDrawerId, onDrawerChange: (newDrawerId) => {
      onActiveDrawerChange(newDrawerId, { initiatedByUserAction: true });
      if (newDrawerId !== activeDrawerId) {
        focusToolsButtons();
        focusDrawersButtons();
      }
    } }, breadcrumbs),
    import_react54.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default29.layout, disableBodyScroll && styles_css_default29["layout-no-scroll"]) },
      !navigationHide && import_react54.default.createElement(Drawer, { contentClassName: styles_css_default12.navigation, toggleClassName: styles_css_default12["navigation-toggle"], closeClassName: styles_css_default12["navigation-close"], ariaLabels: togglesConfig.navigation.getLabels(ariaLabels), bottomOffset: placement.insetBlockEnd, topOffset: placement.insetBlockStart, isMobile, isOpen: navigationOpen, onClick: isMobile ? onNavigationClick : void 0, onToggle: onNavigationToggle, toggleRefs: navigationRefs, type: "navigation", width: navigationWidth }, navigation),
      import_react54.default.createElement(
        "main",
        { ref: legacyScrollRootRef, className: clsx_m_default(styles_css_default29["layout-main"], {
          [styles_css_default29["layout-main-scrollable"]]: disableBodyScroll,
          [styles_css_default12["disable-body-scroll-root"]]: disableBodyScroll,
          [styles_css_default29.unfocusable]: isMobile && anyPanelOpen
        }) },
        import_react54.default.createElement(
          "div",
          { style: {
            marginBottom: splitPanelBottomOffset
          } },
          notifications && import_react54.default.createElement(Notifications, { disableContentPaddings, testUtilsClassName: styles_css_default12.notifications, labels: ariaLabels, topOffset: disableBodyScroll ? 0 : placement.insetBlockStart, sticky: !isMobile && stickyNotifications, ref: notificationsRef }, notifications),
          (!isMobile && breadcrumbs || contentHeader) && import_react54.default.createElement(
            content_wrapper_default,
            Object.assign({}, contentWrapperProps),
            !isMobile && breadcrumbs && import_react54.default.createElement("div", { className: clsx_m_default(styles_css_default12.breadcrumbs, styles_css_default29["breadcrumbs-desktop"]) }, breadcrumbs),
            contentHeader && import_react54.default.createElement("div", { className: clsx_m_default(styles_css_default29["content-header-wrapper"], !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles_css_default29["content-extra-top-padding"], !hasRenderedNotifications && !breadcrumbs && styles_css_default29["content-header-wrapper-first-child"], !disableContentHeaderOverlap && styles_css_default29["content-header-wrapper-overlapped"]) }, contentHeader)
          ),
          import_react54.default.createElement(content_wrapper_default, Object.assign({}, contentWrapperProps, { ref: mainContentRef, disablePaddings: disableContentPaddings, className: clsx_m_default(!disableContentPaddings && styles_css_default29["content-wrapper"], !disableContentPaddings && (isMobile || !breadcrumbs) && !contentHeader && styles_css_default29["content-extra-top-padding"], styles_css_default12.content, !disableContentHeaderOverlap && contentHeader && styles_css_default29["content-overlapped"], !hasRenderedNotifications && !breadcrumbs && !isMobile && !contentHeader && styles_css_default29["content-wrapper-first-child"]), style: getStickyOffsetVars(placement.insetBlockStart, placement.insetBlockEnd + (splitPanelBottomOffset || 0), `${stickyNotificationsHeight}px`, mobileBarHeight && !disableBodyScroll ? `${mobileBarHeight}px` : "0px", !!disableBodyScroll, isMobile) }), content)
        ),
        finalSplitPanePosition === "bottom" && splitPanelWrapped
      ),
      finalSplitPanePosition === "side" && splitPanelWrapped,
      hasDrawers ? import_react54.default.createElement(ResizableDrawer, { contentClassName: clsx_m_default(activeDrawerId && styles_css_default12["active-drawer"], activeDrawerId === TOOLS_DRAWER_ID && styles_css_default12.tools), toggleClassName: styles_css_default12["tools-toggle"], closeClassName: clsx_m_default(styles_css_default12["active-drawer-close-button"], activeDrawerId === TOOLS_DRAWER_ID && styles_css_default12["tools-close"]), ariaLabels: {
        openLabel: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.triggerButton,
        closeLabel: (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _d === void 0 ? void 0 : _d.closeButton,
        mainLabel: (_e = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _e === void 0 ? void 0 : _e.drawerName,
        resizeHandle: (_f = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _f === void 0 ? void 0 : _f.resizeHandle,
        resizeHandleTooltipText: (_g = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _g === void 0 ? void 0 : _g.resizeHandleTooltipText
      }, minWidth: minDrawerSize, maxWidth: drawerMaxSize, width: activeDrawerSize, bottomOffset: placement.insetBlockEnd, topOffset: placement.insetBlockStart, isMobile, onToggle: (isOpen) => {
        if (!isOpen) {
          focusToolsButtons();
          focusDrawersButtons();
          onActiveDrawerChange(null, { initiatedByUserAction: true });
        }
      }, isOpen: true, hideOpenButton: true, toggleRefs: drawerRefs, type: "tools", onLoseFocus: loseDrawersFocus, activeDrawer, onResize: (changeDetail) => onActiveDrawerResize(changeDetail), refs: drawerRefs, toolsContent: (_h = drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === TOOLS_DRAWER_ID)) === null || _h === void 0 ? void 0 : _h.content }, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content) : !toolsHide && import_react54.default.createElement(Drawer, { contentClassName: styles_css_default12.tools, toggleClassName: styles_css_default12["tools-toggle"], closeClassName: styles_css_default12["tools-close"], ariaLabels: togglesConfig.tools.getLabels(ariaLabels), width: toolsWidth, bottomOffset: placement.insetBlockEnd, topOffset: placement.insetBlockStart, isMobile, onToggle: onToolsToggle, isOpen: toolsOpen, toggleRefs: toolsRefs, type: "tools", onLoseFocus: loseToolsFocus }, tools),
      hasDrawers && drawers.length > 0 && import_react54.default.createElement(DrawerTriggersBar, { drawerRefs, bottomOffset: placement.insetBlockEnd, topOffset: placement.insetBlockStart, isMobile, drawers, activeDrawerId, onDrawerChange: (newDrawerId) => {
        if (activeDrawerId !== newDrawerId) {
          focusToolsButtons();
          focusDrawersButtons();
        }
        onActiveDrawerChange(newDrawerId, { initiatedByUserAction: true });
      }, ariaLabels })
    )
  );
});
var classic_default = ClassicAppLayout;

// node_modules/@cloudscape-design/components/app-layout/utils/feature-flags.js
var import_react56 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/contexts.js
var import_react55 = __toESM(require_react());
var BreadcrumbsSlotContext = awsuiPluginsInternal.sharedReactContexts.createContext(import_react55.default, "BreadcrumbsSlotContext");
var AppLayoutVisibilityContext = awsuiPluginsInternal.sharedReactContexts.createContext(import_react55.default, "AppLayoutVisibilityContext");
var AppLayoutToolbarPublicContext = awsuiPluginsInternal.sharedReactContexts.createContext(import_react55.default, "AppLayoutToolbarPublicContext");

// node_modules/@cloudscape-design/components/app-layout/utils/feature-flags.js
var useAppLayoutFlagEnabled = () => {
  const isRefresh = useVisualRefresh();
  return isRefresh && (getGlobalFlag("appLayoutWidget") || getGlobalFlag("appLayoutToolbar"));
};
var useAppLayoutToolbarDesignEnabled = () => {
  var _a;
  const isToolbarPrivate = useAppLayoutFlagEnabled();
  const isToolbarPublic = (_a = (0, import_react56.useContext)(AppLayoutToolbarPublicContext)) !== null && _a !== void 0 ? _a : false;
  return isToolbarPublic || isToolbarPrivate;
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/index.js
var import_react73 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/background.js
var import_react62 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/content-header-utils.js
var highContrastHeaderClassName = "awsui-context-content-header";

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/context.js
var import_react61 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/dynamic-overlap-context.js
var import_react57 = __toESM(require_react());
var DynamicOverlapContext = (0, import_react57.createContext)(() => {
});

// node_modules/@cloudscape-design/components/app-layout/utils/use-resize.js
var import_react58 = __toESM(require_react());
function useResize(drawerRefObject, { activeDrawer, activeDrawerSize, onActiveDrawerResize, drawersRefs, isToolsOpen, drawersMinWidth, drawersMaxWidth }) {
  var _a, _b;
  const [relativeSize, setRelativeSize] = (0, import_react58.useState)(0);
  const drawerSize = !activeDrawer && !isToolsOpen ? 0 : activeDrawerSize;
  (0, import_react58.useEffect)(() => {
    const handle = requestAnimationFrame(() => {
      const maxSize = drawersMaxWidth;
      setRelativeSize((drawerSize - drawersMinWidth) / (maxSize - drawersMinWidth) * 100);
    });
    return () => cancelAnimationFrame(handle);
  }, [drawerSize, drawersMaxWidth, drawersMinWidth]);
  const setSidePanelWidth = (width) => {
    const maxWidth = drawersMaxWidth;
    const size = getLimitedValue(drawersMinWidth, width, maxWidth);
    const id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
    if (id && maxWidth >= drawersMinWidth) {
      onActiveDrawerResize({ size, id });
    }
  };
  const sizeControlProps = {
    position: "side",
    panelRef: drawerRefObject,
    handleRef: drawersRefs.slider,
    onResize: setSidePanelWidth
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const { onKeyDown, onDirectionClick } = useKeyboardEvents(sizeControlProps);
  const resizeHandle = import_react58.default.createElement(panel_resize_handle_default, { ref: drawersRefs.slider, position: "side", ariaLabel: (_a = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _a === void 0 ? void 0 : _a.resizeHandle, tooltipText: (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.resizeHandleTooltipText, ariaValuenow: relativeSize, className: styles_css_default12["drawers-slider"], onKeyDown, onDirectionClick, onPointerDown: onSliderPointerDown });
  return { resizeHandle, drawerSize };
}
var use_resize_default = useResize;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/split-panel.js
var import_react59 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh/styles.scoped.css";
var styles_css_default33 = {
  "background": "awsui_background_hyvsj_xt8mb_149",
  "scrolling-background": "awsui_scrolling-background_hyvsj_xt8mb_152",
  "breadcrumbs": "awsui_breadcrumbs_hyvsj_xt8mb_163",
  "drawers-container": "awsui_drawers-container_hyvsj_xt8mb_176",
  "has-open-drawer": "awsui_has-open-drawer_hyvsj_xt8mb_187",
  "disable-body-scroll": "awsui_disable-body-scroll_hyvsj_xt8mb_208",
  "drawers-desktop-triggers-container": "awsui_drawers-desktop-triggers-container_hyvsj_xt8mb_213",
  "has-multiple-triggers": "awsui_has-multiple-triggers_hyvsj_xt8mb_251",
  "drawers-mobile-triggers-container": "awsui_drawers-mobile-triggers-container_hyvsj_xt8mb_261",
  "drawers-trigger-content": "awsui_drawers-trigger-content_hyvsj_xt8mb_266",
  "drawers-trigger-overflow": "awsui_drawers-trigger-overflow_hyvsj_xt8mb_280",
  "drawers-trigger": "awsui_drawers-trigger_hyvsj_xt8mb_266",
  "drawer": "awsui_drawer_hyvsj_xt8mb_176",
  "drawer-content-container": "awsui_drawer-content-container_hyvsj_xt8mb_311",
  "drawer-close-button": "awsui_drawer-close-button_hyvsj_xt8mb_320",
  "drawer-content": "awsui_drawer-content_hyvsj_xt8mb_311",
  "drawer-content-hidden": "awsui_drawer-content-hidden_hyvsj_xt8mb_329",
  "drawer-slider": "awsui_drawer-slider_hyvsj_xt8mb_332",
  "is-drawer-open": "awsui_is-drawer-open_hyvsj_xt8mb_339",
  "content": "awsui_content_hyvsj_xt8mb_365",
  "layout": "awsui_layout_hyvsj_xt8mb_390",
  "has-max-content-width": "awsui_has-max-content-width_hyvsj_xt8mb_462",
  "content-type-dashboard": "awsui_content-type-dashboard_hyvsj_xt8mb_477",
  "content-type-table": "awsui_content-type-table_hyvsj_xt8mb_491",
  "content-type-cards": "awsui_content-type-cards_hyvsj_xt8mb_491",
  "is-overlap-disabled": "awsui_is-overlap-disabled_hyvsj_xt8mb_497",
  "is-hide-mobile-toolbar": "awsui_is-hide-mobile-toolbar_hyvsj_xt8mb_500",
  "has-content-gap-left": "awsui_has-content-gap-left_hyvsj_xt8mb_514",
  "has-content-gap-right": "awsui_has-content-gap-right_hyvsj_xt8mb_517",
  "has-breadcrumbs": "awsui_has-breadcrumbs_hyvsj_xt8mb_527",
  "content-first-child-header": "awsui_content-first-child-header_hyvsj_xt8mb_530",
  "content-first-child-notifications": "awsui_content-first-child-notifications_hyvsj_xt8mb_530",
  "has-header": "awsui_has-header_hyvsj_xt8mb_530",
  "content-first-child-main": "awsui_content-first-child-main_hyvsj_xt8mb_545",
  "disable-content-paddings": "awsui_disable-content-paddings_hyvsj_xt8mb_545",
  "has-left-toggles-gutter": "awsui_has-left-toggles-gutter_hyvsj_xt8mb_565",
  "has-right-toggles-gutter": "awsui_has-right-toggles-gutter_hyvsj_xt8mb_568",
  "has-split-panel": "awsui_has-split-panel_hyvsj_xt8mb_588",
  "split-panel-position-bottom": "awsui_split-panel-position-bottom_hyvsj_xt8mb_588",
  "block-body-scroll": "awsui_block-body-scroll_hyvsj_xt8mb_596",
  "unfocusable": "awsui_unfocusable_hyvsj_xt8mb_601",
  "container": "awsui_container_hyvsj_xt8mb_611",
  "is-navigation-open": "awsui_is-navigation-open_hyvsj_xt8mb_637",
  "is-tools-open": "awsui_is-tools-open_hyvsj_xt8mb_640",
  "is-split-panel-open": "awsui_is-split-panel-open_hyvsj_xt8mb_640",
  "split-panel-position-side": "awsui_split-panel-position-side_hyvsj_xt8mb_640",
  "has-active-drawer": "awsui_has-active-drawer_hyvsj_xt8mb_640",
  "mobile-toolbar": "awsui_mobile-toolbar_hyvsj_xt8mb_653",
  "remove-high-contrast-header": "awsui_remove-high-contrast-header_hyvsj_xt8mb_670",
  "mobile-toolbar-nav": "awsui_mobile-toolbar-nav_hyvsj_xt8mb_674",
  "mobile-toolbar-breadcrumbs": "awsui_mobile-toolbar-breadcrumbs_hyvsj_xt8mb_678",
  "mobile-toolbar-tools": "awsui_mobile-toolbar-tools_hyvsj_xt8mb_682",
  "navigation-container": "awsui_navigation-container_hyvsj_xt8mb_691",
  "show-navigation": "awsui_show-navigation_hyvsj_xt8mb_729",
  "animating": "awsui_animating_hyvsj_xt8mb_752",
  "showButtons": "awsui_showButtons_hyvsj_xt8mb_1",
  "navigation": "awsui_navigation_hyvsj_xt8mb_691",
  "openNavigation": "awsui_openNavigation_hyvsj_xt8mb_1",
  "animated-content": "awsui_animated-content_hyvsj_xt8mb_816",
  "content-container": "awsui_content-container_hyvsj_xt8mb_819",
  "hide-navigation": "awsui_hide-navigation_hyvsj_xt8mb_828",
  "notifications": "awsui_notifications_hyvsj_xt8mb_838",
  "has-notification-content": "awsui_has-notification-content_hyvsj_xt8mb_843",
  "sticky-notifications": "awsui_sticky-notifications_hyvsj_xt8mb_847",
  "high-contrast": "awsui_high-contrast_hyvsj_xt8mb_852",
  "split-panel-bottom": "awsui_split-panel-bottom_hyvsj_xt8mb_870",
  "position-bottom": "awsui_position-bottom_hyvsj_xt8mb_917",
  "openSplitPanelBottom": "awsui_openSplitPanelBottom_hyvsj_xt8mb_1",
  "split-panel-side": "awsui_split-panel-side_hyvsj_xt8mb_946",
  "position-side": "awsui_position-side_hyvsj_xt8mb_959",
  "tools-container": "awsui_tools-container_hyvsj_xt8mb_981",
  "tools": "awsui_tools_hyvsj_xt8mb_981",
  "openTools": "awsui_openTools_hyvsj_xt8mb_1",
  "has-tools-form-persistence": "awsui_has-tools-form-persistence_hyvsj_xt8mb_1070",
  "hide-tools": "awsui_hide-tools_hyvsj_xt8mb_1080",
  "show-tools": "awsui_show-tools_hyvsj_xt8mb_1092",
  "has-tools-form": "awsui_has-tools-form_hyvsj_xt8mb_1070",
  "trigger-button-styles": "awsui_trigger-button-styles_hyvsj_xt8mb_1172",
  "trigger-badge-wrapper": "awsui_trigger-badge-wrapper_hyvsj_xt8mb_1188",
  "trigger": "awsui_trigger_hyvsj_xt8mb_1172",
  "selected": "awsui_selected_hyvsj_xt8mb_1240",
  "badge": "awsui_badge_hyvsj_xt8mb_1260",
  "trigger-wrapper": "awsui_trigger-wrapper_hyvsj_xt8mb_1264",
  "trigger-wrapper-tooltip-visible": "awsui_trigger-wrapper-tooltip-visible_hyvsj_xt8mb_1275",
  "dot": "awsui_dot_hyvsj_xt8mb_1279",
  "trigger-tooltip": "awsui_trigger-tooltip_hyvsj_xt8mb_1292"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/split-panel.js
function SplitPanel({ children }) {
  const { footerHeight, handleSplitPanelClick, handleSplitPanelPreferencesChange, handleSplitPanelResize, headerHeight, isSplitPanelForcedPosition, isSplitPanelOpen, setSplitPanelReportedSize, setSplitPanelReportedHeaderHeight, setSplitPanelToggle, splitPanelPosition, splitPanelRefs, splitPanelSize } = useAppLayoutInternals();
  const props2 = {
    bottomOffset: 0,
    getMaxHeight: () => {
      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;
      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;
    },
    maxWidth: typeof document !== "undefined" ? document.documentElement.clientWidth : Number.POSITIVE_INFINITY,
    isForcedPosition: isSplitPanelForcedPosition,
    isOpen: isSplitPanelOpen,
    leftOffset: 0,
    onPreferencesChange: handleSplitPanelPreferencesChange,
    onResize: handleSplitPanelResize,
    onToggle: handleSplitPanelClick,
    position: splitPanelPosition,
    reportSize: setSplitPanelReportedSize,
    reportHeaderHeight: setSplitPanelReportedHeaderHeight,
    rightOffset: 0,
    size: splitPanelSize || 0,
    topOffset: 0,
    setSplitPanelToggle,
    refs: splitPanelRefs
  };
  return import_react59.default.createElement(SplitPanelProvider, Object.assign({}, props2), children);
}
function SplitPanelBottom() {
  const { disableBodyScroll, hasOpenDrawer, navigationOpen, isSplitPanelOpen, splitPanel, splitPanelPosition, splitPanelReportedSize, splitPanelReportedHeaderHeight } = useAppLayoutInternals();
  if (!splitPanel) {
    return null;
  }
  return import_react59.default.createElement(Transition, { in: isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false, exit: false }, (state, transitionEventsRef) => import_react59.default.createElement("section", { className: clsx_m_default(styles_css_default33["split-panel-bottom"], styles_css_default33[`position-${splitPanelPosition}`], {
    [styles_css_default33.animating]: state === "entering",
    [styles_css_default33["disable-body-scroll"]]: disableBodyScroll,
    [styles_css_default33["has-open-drawer"]]: hasOpenDrawer,
    [styles_css_default33["is-navigation-open"]]: navigationOpen,
    [styles_css_default33["is-split-panel-open"]]: isSplitPanelOpen
  }), ref: transitionEventsRef, style: {
    [custom_css_properties_default.splitPanelReportedSize]: `${splitPanelReportedSize}px`,
    [custom_css_properties_default.splitPanelReportedHeaderSize]: `${splitPanelReportedHeaderHeight}px`
  } }, splitPanelPosition === "bottom" && splitPanel));
}
function SplitPanelSide() {
  const { isSplitPanelOpen, splitPanel, splitPanelPosition, splitPanelMaxWidth, splitPanelControlId, isToolsOpen, activeDrawerId } = useAppLayoutInternals();
  if (!splitPanel) {
    return null;
  }
  return import_react59.default.createElement("section", { id: splitPanelControlId, "aria-hidden": !isSplitPanelOpen || splitPanelPosition === "bottom" ? true : false, className: clsx_m_default(styles_css_default33["split-panel-side"], styles_css_default33[`position-${splitPanelPosition}`], {
    [styles_css_default33["is-split-panel-open"]]: isSplitPanelOpen,
    [styles_css_default33["has-open-drawer"]]: !!activeDrawerId || isToolsOpen
  }), style: {
    [custom_css_properties_default.splitPanelMaxWidth]: `${splitPanelMaxWidth}px`,
    [custom_css_properties_default.splitPanelMinWidth]: `${SPLIT_PANEL_MIN_WIDTH}px`
  } }, splitPanelPosition === "side" && splitPanel);
}
function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {
  let splitPanelPosition = "bottom";
  if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === "side") {
    splitPanelPosition = "side";
  }
  return splitPanelPosition;
}
SplitPanel.Bottom = SplitPanelBottom;
SplitPanel.Side = SplitPanelSide;
var split_panel_default = SplitPanel;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/use-background-overlap.js
var import_react60 = __toESM(require_react());
function useBackgroundOverlap({ contentHeader, disableContentHeaderOverlap, layoutElement }) {
  const hasContentHeader = !!contentHeader;
  const [hasBackgroundOverlap, setHasBackgroundOverlap] = (0, import_react60.useState)(hasContentHeader);
  const updateBackgroundOverlapHeight = (0, import_react60.useCallback)((height) => {
    const hasOverlap = hasContentHeader || height > 0;
    setHasBackgroundOverlap(hasOverlap);
    const element = typeof layoutElement !== "function" && (layoutElement === null || layoutElement === void 0 ? void 0 : layoutElement.current);
    if (!element) {
      return;
    }
    if (disableContentHeaderOverlap || !hasOverlap || height <= 0) {
      element.style.removeProperty(custom_css_properties_default.overlapHeight);
    } else {
      element.style.setProperty(custom_css_properties_default.overlapHeight, `${height}px`);
    }
  }, [hasContentHeader, layoutElement, disableContentHeaderOverlap]);
  return {
    hasBackgroundOverlap,
    updateBackgroundOverlapHeight
  };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/context.js
var AppLayoutInternalsContext = (0, import_react61.createContext)(null);
function useAppLayoutInternals() {
  const ctx = (0, import_react61.useContext)(AppLayoutInternalsContext);
  if (!ctx) {
    throw new Error("Invariant violation: this context is only available inside app layout");
  }
  return ctx;
}
var AppLayoutInternalsProvider = import_react61.default.forwardRef((props2, forwardRef27) => {
  var _a, _b, _c, _d, _e;
  const { toolsHide, toolsOpen: controlledToolsOpen, navigationHide, navigationOpen, contentType, placement, children, splitPanel } = props2;
  const isMobile = useMobile();
  const __embeddedViewMode = Boolean(props2.__embeddedViewMode);
  const geckoMaxCssLength = ((1 << 30) - 1) / 60;
  const halfGeckoMaxCssLength2 = geckoMaxCssLength / 2;
  const maxContentWidth = props2.maxContentWidth && props2.maxContentWidth > halfGeckoMaxCssLength2 ? halfGeckoMaxCssLength2 : (_a = props2.maxContentWidth) !== null && _a !== void 0 ? _a : 0;
  const minContentWidth = (_b = props2.minContentWidth) !== null && _b !== void 0 ? _b : 280;
  const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(navigationOpen);
  const handleNavigationClick = useStableCallback(function handleNavigationChange(isOpen) {
    focusNavButtons();
    fireNonCancelableEvent(props2.onNavigationChange, { open: isOpen });
  });
  (0, import_react61.useEffect)(() => {
    if (isMobile) {
      handleNavigationClick(false);
    }
  }, [isMobile, handleNavigationClick]);
  const toolsWidth = props2.toolsWidth;
  const [isToolsOpen = false, setIsToolsOpen] = useControllable(controlledToolsOpen, props2.onToolsChange, false, {
    componentName: "AppLayout",
    controlledProp: "toolsOpen",
    changeHandler: "onToolsChange"
  });
  const { refs: toolsRefs, setFocus: focusToolsButtons, loseFocus: loseToolsFocus } = useFocusControl(isToolsOpen, true);
  const handleToolsClick = (0, import_react61.useCallback)(function handleToolsChange(isOpen, skipFocusControl) {
    setIsToolsOpen(isOpen);
    if (!skipFocusControl) {
      focusToolsButtons();
    }
    fireNonCancelableEvent(props2.onToolsChange, { open: isOpen });
  }, [props2.onToolsChange, setIsToolsOpen, focusToolsButtons]);
  const [splitPanelMaxWidth, setSplitPanelMaxWidth] = (0, import_react61.useState)(SPLIT_PANEL_MIN_WIDTH);
  const [isSplitPanelOpen, setIsSplitPanelOpen] = useControllable(props2.splitPanelOpen, props2.onSplitPanelToggle, false, { componentName: "AppLayout", controlledProp: "splitPanelOpen", changeHandler: "onSplitPanelToggle" });
  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(props2.splitPanelPreferences, props2.onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  });
  const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([
    splitPanelPreferences,
    isSplitPanelOpen
  ]);
  const handleSplitPanelClick = (0, import_react61.useCallback)(function handleSplitPanelChange() {
    setIsSplitPanelOpen(!isSplitPanelOpen);
    setSplitPanelLastInteraction({ type: isSplitPanelOpen ? "close" : "open" });
    fireNonCancelableEvent(props2.onSplitPanelToggle, { open: !isSplitPanelOpen });
  }, [props2.onSplitPanelToggle, isSplitPanelOpen, setIsSplitPanelOpen, setSplitPanelLastInteraction]);
  const isSplitPanelForcedPosition = shouldSplitPanelBeForcedToBottom({
    isMobile,
    availableWidthForSplitPanel: splitPanelMaxWidth
  });
  const splitPanelPosition = getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences);
  const [splitPanelReportedSize, setSplitPanelReportedSize] = (0, import_react61.useState)(0);
  const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = (0, import_react61.useState)(0);
  const [splitPanelToggle, setSplitPanelToggle] = (0, import_react61.useState)({
    displayed: false,
    ariaLabel: void 0
  });
  const splitPanelDisplayed = !!(splitPanelToggle.displayed || isSplitPanelOpen) && !!splitPanel;
  const splitPanelControlId = useUniqueId("split-panel-");
  const toolsControlId = useUniqueId("tools-");
  const [splitPanelSize, setSplitPanelSize] = useControllable(props2.splitPanelSize, props2.onSplitPanelResize, getSplitPanelDefaultSize(splitPanelPosition), { componentName: "AppLayout", controlledProp: "splitPanelSize", changeHandler: "onSplitPanelResize" });
  const handleSplitPanelResize = (0, import_react61.useCallback)((size) => {
    setSplitPanelSize(size);
    fireNonCancelableEvent(props2.onSplitPanelResize, { size });
  }, [props2.onSplitPanelResize, setSplitPanelSize]);
  const handleSplitPanelPreferencesChange = (0, import_react61.useCallback)(function handleSplitPanelChange(detail) {
    setSplitPanelPreferences(detail);
    setSplitPanelLastInteraction({ type: "position" });
    fireNonCancelableEvent(props2.onSplitPanelPreferencesChange, detail);
  }, [props2.onSplitPanelPreferencesChange, setSplitPanelPreferences, setSplitPanelLastInteraction]);
  const _f = useDrawers(props2, props2.ariaLabels, {
    disableDrawersMerge: true,
    ariaLabels: props2.ariaLabels,
    toolsHide,
    toolsOpen: isToolsOpen,
    tools: props2.tools,
    toolsWidth,
    onToolsToggle: handleToolsClick
  }), { drawers, activeDrawer, activeDrawerId, minDrawerSize: drawersMinWidth, onActiveDrawerChange, onActiveDrawerResize, activeDrawerSize } = _f, drawersProps = __rest(_f, ["drawers", "activeDrawer", "activeDrawerId", "minDrawerSize", "onActiveDrawerChange", "onActiveDrawerResize", "activeDrawerSize"]);
  const [drawersMaxWidth, setDrawersMaxWidth] = (0, import_react61.useState)(toolsWidth);
  const hasDrawers = !!drawers && drawers.length > 0;
  const { refs: drawersRefs, setFocus: focusDrawersButtons, loseFocus: loseDrawersFocus } = useFocusControl(!!activeDrawerId, true, activeDrawerId);
  const drawerRef = (0, import_react61.useRef)(null);
  const { resizeHandle, drawerSize } = use_resize_default(drawerRef, {
    onActiveDrawerResize,
    activeDrawerSize,
    activeDrawer,
    drawersRefs,
    isToolsOpen,
    drawersMaxWidth,
    drawersMinWidth
  });
  const handleDrawersClick = (id, skipFocusControl) => {
    const newActiveDrawerId = id !== activeDrawerId ? id : null;
    onActiveDrawerChange(newActiveDrawerId, { initiatedByUserAction: true });
    if (!skipFocusControl) {
      focusDrawersButtons();
    }
  };
  let drawersTriggerCount = drawers ? drawers.length : !toolsHide ? 1 : 0;
  if (splitPanelDisplayed && splitPanelPosition === "side") {
    drawersTriggerCount++;
  }
  const hasOpenDrawer = !!activeDrawerId || !toolsHide && isToolsOpen || splitPanelDisplayed && splitPanelPosition === "side" && isSplitPanelOpen;
  const hasDrawerViewportOverlay = isMobile && (!!activeDrawerId || !navigationHide && navigationOpen || !toolsHide && isToolsOpen);
  const layoutElement = (0, import_react61.useRef)(null);
  const mainElement = (0, import_react61.useRef)(null);
  const [mainOffsetLeft, setMainOffsetLeft] = (0, import_react61.useState)(0);
  const { hasBackgroundOverlap, updateBackgroundOverlapHeight } = useBackgroundOverlap({
    contentHeader: props2.contentHeader,
    disableContentHeaderOverlap: props2.disableContentHeaderOverlap,
    layoutElement
  });
  (0, import_react61.useLayoutEffect)(function handleMainOffsetLeft() {
    const offsetInlineStart = (mainElement === null || mainElement === void 0 ? void 0 : mainElement.current) ? getOffsetInlineStart(mainElement === null || mainElement === void 0 ? void 0 : mainElement.current) : 0;
    setMainOffsetLeft(offsetInlineStart);
  }, [placement.inlineSize, navigationOpen, isToolsOpen, splitPanelReportedSize]);
  (0, import_react61.useEffect)(function handleBodyScroll() {
    if (isMobile && (navigationOpen || isToolsOpen || !!activeDrawer)) {
      document.body.classList.add(styles_css_default33["block-body-scroll"]);
    } else {
      document.body.classList.remove(styles_css_default33["block-body-scroll"]);
    }
    return function cleanup() {
      document.body.classList.remove(styles_css_default33["block-body-scroll"]);
    };
  }, [isMobile, navigationOpen, isToolsOpen, activeDrawer]);
  const [notificationsHeight, setNotificationsHeight] = (0, import_react61.useState)(0);
  const hasNotificationsContent = notificationsHeight > 0;
  let offsetBottom = placement.insetBlockEnd;
  if (splitPanelDisplayed && splitPanelPosition === "bottom") {
    if (isSplitPanelOpen) {
      offsetBottom += splitPanelReportedSize;
    } else {
      offsetBottom += splitPanelReportedHeaderHeight;
    }
  }
  (0, import_react61.useLayoutEffect)(function handleSplitPanelMaxWidth() {
    const contentGapRight = 50;
    const toolsFormOffsetWidth = 120;
    const getPanelOffsetWidth = () => {
      if (drawers) {
        return activeDrawerId ? drawerSize : 0;
      }
      return isToolsOpen ? toolsWidth : 0;
    };
    setSplitPanelMaxWidth(placement.inlineSize - mainOffsetLeft - minContentWidth - contentGapRight - toolsFormOffsetWidth - getPanelOffsetWidth());
    setDrawersMaxWidth(placement.inlineSize - mainOffsetLeft - minContentWidth - contentGapRight - toolsFormOffsetWidth);
  }, [
    activeDrawerId,
    drawerSize,
    drawers,
    navigationOpen,
    isToolsOpen,
    placement.inlineSize,
    mainOffsetLeft,
    minContentWidth,
    toolsWidth
  ]);
  (0, import_react61.useImperativeHandle)(forwardRef27, function createImperativeHandle() {
    return {
      closeNavigationIfNecessary: function() {
        if (isMobile) {
          handleNavigationClick(false);
        }
      },
      openTools: function() {
        handleToolsClick(true, hasDrawers);
        if (hasDrawers) {
          focusDrawersButtons(true);
        }
      },
      focusToolsClose: () => {
        if (hasDrawers) {
          focusDrawersButtons(true);
        } else {
          focusToolsButtons(true);
        }
      },
      focusActiveDrawer: () => focusDrawersButtons(true),
      focusSplitPanel: () => {
        var _a2;
        return (_a2 = splitPanelRefs.slider.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      }
    };
  }, [
    isMobile,
    handleNavigationClick,
    handleToolsClick,
    focusToolsButtons,
    focusDrawersButtons,
    splitPanelRefs.slider,
    hasDrawers
  ]);
  return import_react61.default.createElement(
    AppLayoutInternalsContext.Provider,
    { value: Object.assign(Object.assign({}, props2), {
      activeDrawerId,
      contentType,
      drawers,
      drawersAriaLabel: (_c = drawersProps.ariaLabelsWithDrawers) === null || _c === void 0 ? void 0 : _c.drawers,
      drawersOverflowAriaLabel: (_d = drawersProps.ariaLabelsWithDrawers) === null || _d === void 0 ? void 0 : _d.drawersOverflow,
      drawersOverflowWithBadgeAriaLabel: (_e = drawersProps.ariaLabelsWithDrawers) === null || _e === void 0 ? void 0 : _e.drawersOverflowWithBadge,
      drawersRefs,
      drawersMinWidth,
      drawersMaxWidth,
      drawerSize,
      drawerRef,
      resizeHandle,
      drawersTriggerCount,
      headerHeight: placement.insetBlockStart,
      footerHeight: placement.insetBlockEnd,
      hasDrawerViewportOverlay,
      handleDrawersClick,
      handleNavigationClick,
      handleSplitPanelClick,
      handleSplitPanelPreferencesChange,
      handleSplitPanelResize,
      handleToolsClick,
      hasBackgroundOverlap,
      hasNotificationsContent,
      hasOpenDrawer,
      isBackgroundOverlapDisabled: props2.disableContentHeaderOverlap || !hasBackgroundOverlap,
      isMobile,
      isSplitPanelForcedPosition,
      isSplitPanelOpen,
      isToolsOpen,
      layoutElement,
      layoutWidth: placement.inlineSize,
      loseToolsFocus,
      loseDrawersFocus,
      mainElement,
      mainOffsetLeft,
      maxContentWidth,
      minContentWidth,
      navigationHide,
      navigationRefs,
      notificationsHeight,
      setNotificationsHeight,
      offsetBottom,
      setSplitPanelReportedSize,
      setSplitPanelReportedHeaderHeight,
      splitPanel,
      splitPanelControlId,
      splitPanelDisplayed,
      splitPanelMaxWidth,
      splitPanelPosition,
      splitPanelPreferences,
      splitPanelReportedSize,
      splitPanelReportedHeaderHeight,
      splitPanelSize,
      splitPanelToggle,
      setSplitPanelToggle,
      splitPanelRefs,
      toolsControlId,
      toolsHide,
      toolsOpen: isToolsOpen,
      toolsWidth,
      toolsRefs,
      __embeddedViewMode
    }) },
    import_react61.default.createElement(DynamicOverlapContext.Provider, { value: updateBackgroundOverlapHeight }, children)
  );
});

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/background.js
function Background() {
  const { breadcrumbs, hasBackgroundOverlap, hasNotificationsContent, isMobile, headerVariant } = useAppLayoutInternals();
  if (!hasNotificationsContent && (!breadcrumbs || isMobile) && !hasBackgroundOverlap) {
    return null;
  }
  return import_react62.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default33.background, { [highContrastHeaderClassName]: headerVariant === "high-contrast" }) },
    import_react62.default.createElement("div", { className: styles_css_default33["scrolling-background"] })
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/breadcrumbs.js
var import_react63 = __toESM(require_react());
function Breadcrumbs() {
  const { breadcrumbs, isMobile, headerVariant } = useAppLayoutInternals();
  if (isMobile || !breadcrumbs) {
    return null;
  }
  return import_react63.default.createElement("div", { className: clsx_m_default(styles_css_default33.breadcrumbs, styles_css_default12.breadcrumbs, {
    [highContrastHeaderClassName]: headerVariant === "high-contrast"
  }) }, breadcrumbs);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/drawers.js
var import_react65 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/trigger-button.js
var import_react64 = __toESM(require_react());
function TriggerButton({ ariaLabel, className: className2, iconName, iconSvg, ariaExpanded, ariaControls, onClick, testId, disabled = false, badge, selected = false, highContrastHeader }, ref) {
  const { isMobile } = useAppLayoutInternals();
  return import_react64.default.createElement("div", { className: clsx_m_default(styles_css_default33["trigger-wrapper"], !highContrastHeader && styles_css_default33["remove-high-contrast-header"]) }, isMobile ? import_react64.default.createElement(InternalButton, { ariaExpanded, ariaLabel, ariaControls, className: className2, disabled, ref, formAction: "none", iconName, iconSvg, badge, onClick, variant: "icon", __nativeAttributes: Object.assign({ "aria-haspopup": true }, testId && {
    "data-testid": testId
  }) }) : import_react64.default.createElement(
    import_react64.default.Fragment,
    null,
    import_react64.default.createElement(
      "button",
      { "aria-expanded": ariaExpanded, "aria-controls": ariaControls, "aria-haspopup": true, "aria-label": ariaLabel, "aria-disabled": disabled, disabled, className: clsx_m_default(styles_css_default33.trigger, styles_css_default33["trigger-button-styles"], {
        [styles_css_default33.selected]: selected,
        [styles_css_default33.badge]: badge
      }, className2), onClick, ref, type: "button", "data-testid": testId },
      import_react64.default.createElement("span", { className: clsx_m_default(badge && clsx_m_default(styles_css_default33["trigger-badge-wrapper"], styles_css_default33["trigger-button-styles"])) }, (iconName || iconSvg) && import_react64.default.createElement(internal_default, { name: iconName, svg: iconSvg }))
    ),
    badge && import_react64.default.createElement("div", { className: styles_css_default33.dot })
  ));
}
var trigger_button_default = import_react64.default.forwardRef(TriggerButton);

// node_modules/@cloudscape-design/components/split-panel/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/split-panel/test-classes/styles.scoped.css";
var styles_css_default34 = {
  "root": "awsui_root_rjqu5_zu8o5_5",
  "header-text": "awsui_header-text_rjqu5_zu8o5_6",
  "open-button": "awsui_open-button_rjqu5_zu8o5_7",
  "close-button": "awsui_close-button_rjqu5_zu8o5_8",
  "preferences-button": "awsui_preferences-button_rjqu5_zu8o5_9",
  "slider": "awsui_slider_rjqu5_zu8o5_10",
  "open-position-bottom": "awsui_open-position-bottom_rjqu5_zu8o5_11",
  "open-position-side": "awsui_open-position-side_rjqu5_zu8o5_12"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/drawers.js
var VISIBLE_MOBILE_TOOLBAR_TRIGGERS_LIMIT = 2;
function Drawers() {
  const { disableBodyScroll, drawers, drawersTriggerCount, hasDrawerViewportOverlay, hasOpenDrawer, navigationOpen, navigationHide, isMobile } = useAppLayoutInternals();
  const isUnfocusable = hasDrawerViewportOverlay && navigationOpen && !navigationHide;
  if (!drawers || drawersTriggerCount === 0) {
    return null;
  }
  return import_react65.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default33["drawers-container"], {
      [styles_css_default33["disable-body-scroll"]]: disableBodyScroll,
      [styles_css_default33["has-open-drawer"]]: hasOpenDrawer,
      [styles_css_default33.unfocusable]: isUnfocusable
    }) },
    import_react65.default.createElement(split_panel_default.Side, null),
    import_react65.default.createElement(ActiveDrawer, null),
    !isMobile && import_react65.default.createElement(DesktopTriggers, null)
  );
}
function ActiveDrawer() {
  var _a, _b, _c, _d;
  const { activeDrawerId, ariaLabels, drawers, drawersRefs, handleDrawersClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, navigationOpen, navigationHide, loseDrawersFocus, resizeHandle, drawerSize, drawersMinWidth, drawersMaxWidth, drawerRef } = useAppLayoutInternals();
  const activeDrawer = (_a = drawers === null || drawers === void 0 ? void 0 : drawers.find((item) => item.id === activeDrawerId)) !== null && _a !== void 0 ? _a : null;
  const computedAriaLabels = {
    closeButton: activeDrawerId ? (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,
    content: activeDrawerId ? (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools
  };
  const isHidden = !activeDrawerId;
  const isUnfocusable = isHidden || hasDrawerViewportOverlay && navigationOpen && !navigationHide;
  const isToolsDrawer = activeDrawerId === TOOLS_DRAWER_ID;
  const toolsContent = (_d = drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === TOOLS_DRAWER_ID)) === null || _d === void 0 ? void 0 : _d.content;
  const size = getLimitedValue(drawersMinWidth, drawerSize, drawersMaxWidth);
  return import_react65.default.createElement(
    "aside",
    { id: activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : void 0, "aria-hidden": isHidden, "aria-label": computedAriaLabels.content, className: clsx_m_default(styles_css_default33.drawer, {
      [styles_css_default33["is-drawer-open"]]: activeDrawerId,
      [styles_css_default33.unfocusable]: isUnfocusable,
      [styles_css_default12["active-drawer"]]: activeDrawerId,
      [styles_css_default12.tools]: isToolsDrawer
    }), style: Object.assign({}, !isMobile && drawerSize && { [custom_css_properties_default.drawerSize]: `${size}px` }), ref: drawerRef, onBlur: (e3) => {
      if (!e3.relatedTarget || !e3.currentTarget.contains(e3.relatedTarget)) {
        loseDrawersFocus();
      }
    } },
    !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && import_react65.default.createElement("div", { className: styles_css_default33["drawer-slider"] }, resizeHandle),
    import_react65.default.createElement(
      "div",
      { className: styles_css_default33["drawer-content-container"] },
      import_react65.default.createElement(
        "div",
        { className: styles_css_default33["drawer-close-button"] },
        import_react65.default.createElement(InternalButton, { ariaLabel: computedAriaLabels.closeButton, className: clsx_m_default({
          [styles_css_default12["active-drawer-close-button"]]: activeDrawerId,
          [styles_css_default12["tools-close"]]: isToolsDrawer
        }), formAction: "none", iconName: isMobile ? "close" : "angle-right", onClick: () => {
          handleDrawersClick(activeDrawerId);
          handleToolsClick(false);
        }, ref: drawersRefs.close, variant: "icon" })
      ),
      toolsContent && import_react65.default.createElement("div", { className: clsx_m_default(styles_css_default33["drawer-content"], activeDrawerId !== TOOLS_DRAWER_ID && styles_css_default33["drawer-content-hidden"]) }, toolsContent),
      activeDrawerId !== TOOLS_DRAWER_ID && import_react65.default.createElement("div", { className: styles_css_default33["drawer-content"] }, activeDrawerId && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content))
    )
  );
}
function DesktopTriggers() {
  const { activeDrawerId, drawers, drawersAriaLabel, drawersOverflowAriaLabel, drawersOverflowWithBadgeAriaLabel, drawersRefs, drawersTriggerCount, handleDrawersClick, handleSplitPanelClick, hasOpenDrawer, isSplitPanelOpen, splitPanel, splitPanelControlId, splitPanelDisplayed, splitPanelPosition, splitPanelRefs, splitPanelToggle, splitPanelReportedHeaderHeight, splitPanelReportedSize, headerVariant } = useAppLayoutInternals();
  const hasMultipleTriggers = drawersTriggerCount > 1;
  const hasSplitPanel = splitPanel && splitPanelDisplayed && splitPanelPosition === "side";
  const previousActiveDrawerId = (0, import_react65.useRef)(activeDrawerId);
  const [containerHeight, triggersContainerRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  const splitPanelHeight = isSplitPanelOpen && splitPanelPosition === "bottom" ? splitPanelReportedSize : splitPanelReportedHeaderHeight;
  const getIndexOfOverflowItem = () => {
    if (containerHeight) {
      const ITEM_HEIGHT = 48;
      const overflowSpot = activeDrawerId && isSplitPanelOpen ? (containerHeight - splitPanelReportedHeaderHeight) / 1.5 : (containerHeight - splitPanelHeight) / 1.5;
      const index = Math.floor(overflowSpot / ITEM_HEIGHT);
      let splitPanelItem = 0;
      if (hasSplitPanel && splitPanelToggle.displayed) {
        splitPanelItem = 1;
      }
      return index - splitPanelItem;
    }
    return 0;
  };
  const { visibleItems, overflowItems } = splitItems(drawers !== null && drawers !== void 0 ? drawers : void 0, getIndexOfOverflowItem(), activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react65.default.createElement(
    "aside",
    { className: clsx_m_default(styles_css_default33["drawers-desktop-triggers-container"], {
      [styles_css_default33["has-multiple-triggers"]]: hasMultipleTriggers,
      [styles_css_default33["has-open-drawer"]]: hasOpenDrawer
    }), "aria-label": drawersAriaLabel, ref: triggersContainerRef, role: "region" },
    import_react65.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default33["drawers-trigger-content"], {
        [styles_css_default33["has-multiple-triggers"]]: hasMultipleTriggers,
        [styles_css_default33["has-open-drawer"]]: hasOpenDrawer
      }), "aria-label": drawersAriaLabel, role: "toolbar", "aria-orientation": "vertical" },
      visibleItems.map((item) => {
        var _a, _b, _c;
        const isForPreviousActiveDrawer = (previousActiveDrawerId === null || previousActiveDrawerId === void 0 ? void 0 : previousActiveDrawerId.current) === item.id;
        return import_react65.default.createElement(trigger_button_default, { ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, ariaExpanded: item.id === activeDrawerId, ariaControls: activeDrawerId === item.id ? item.id : void 0, className: clsx_m_default(styles_css_default33["drawers-trigger"], styles_css_default12["drawers-trigger"], {
          [styles_css_default12["drawers-trigger-with-badge"]]: item.badge,
          [styles_css_default12["tools-toggle"]]: item.id === TOOLS_DRAWER_ID
        }), iconName: (_b = item === null || item === void 0 ? void 0 : item.trigger) === null || _b === void 0 ? void 0 : _b.iconName, iconSvg: (_c = item === null || item === void 0 ? void 0 : item.trigger) === null || _c === void 0 ? void 0 : _c.iconSvg, key: item.id, onClick: () => handleDrawersClick(item.id), ref: isForPreviousActiveDrawer ? drawersRefs.toggle : void 0, badge: item.badge, testId: `awsui-app-layout-trigger-${item.id}`, highContrastHeader: headerVariant === "high-contrast", selected: item.id === activeDrawerId });
      }),
      overflowItems.length > 0 && import_react65.default.createElement(OverflowMenu, { items: overflowItems, ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel, customTriggerBuilder: ({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => import_react65.default.createElement(trigger_button_default, { ref: triggerRef, ariaLabel, ariaExpanded, badge: overflowMenuHasBadge, className: clsx_m_default(styles_css_default33["drawers-trigger"], styles_css_default12["drawers-trigger"], testUtilsClass), iconName: "ellipsis", onClick, highContrastHeader: headerVariant === "high-contrast" }), onItemClick: ({ detail }) => {
        handleDrawersClick(detail.id);
      } }),
      hasSplitPanel && splitPanelToggle.displayed && import_react65.default.createElement(trigger_button_default, { ariaLabel: splitPanelToggle.ariaLabel, ariaControls: splitPanelControlId, ariaExpanded: !!isSplitPanelOpen, className: clsx_m_default(styles_css_default33["drawers-trigger"], styles_css_default34["open-button"]), iconName: "view-vertical", onClick: () => handleSplitPanelClick(), selected: hasSplitPanel && isSplitPanelOpen, ref: splitPanelRefs.toggle, highContrastHeader: headerVariant === "high-contrast" })
    )
  );
}
function MobileTriggers() {
  const { activeDrawerId, drawers, drawersAriaLabel, drawersOverflowAriaLabel, drawersOverflowWithBadgeAriaLabel, drawersRefs, handleDrawersClick, hasDrawerViewportOverlay, headerVariant } = useAppLayoutInternals();
  const previousActiveDrawerId = (0, import_react65.useRef)(activeDrawerId);
  if (!drawers) {
    return null;
  }
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  const { visibleItems, overflowItems } = splitItems(drawers, VISIBLE_MOBILE_TOOLBAR_TRIGGERS_LIMIT, activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react65.default.createElement(
    "aside",
    { "aria-hidden": hasDrawerViewportOverlay, className: clsx_m_default({
      [styles_css_default33.unfocusable]: hasDrawerViewportOverlay
    }), "aria-label": drawersAriaLabel, role: "region" },
    import_react65.default.createElement(
      "div",
      { className: styles_css_default33["drawers-mobile-triggers-container"], "aria-label": drawersAriaLabel, role: "toolbar", "aria-orientation": "horizontal" },
      visibleItems.map((item) => {
        var _a, _b, _c;
        const isForPreviousActiveDrawer = (previousActiveDrawerId === null || previousActiveDrawerId === void 0 ? void 0 : previousActiveDrawerId.current) === item.id;
        return import_react65.default.createElement(trigger_button_default, { ariaExpanded: item.id === activeDrawerId, ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, ariaControls: activeDrawerId === item.id ? item.id : void 0, className: clsx_m_default(styles_css_default33["drawers-trigger"], styles_css_default12["drawers-trigger"], {
          [styles_css_default12["drawers-trigger-with-badge"]]: item.badge,
          [styles_css_default12["tools-toggle"]]: item.id === TOOLS_DRAWER_ID
        }), disabled: hasDrawerViewportOverlay, ref: isForPreviousActiveDrawer ? drawersRefs.toggle : void 0, iconName: (_b = item === null || item === void 0 ? void 0 : item.trigger) === null || _b === void 0 ? void 0 : _b.iconName, iconSvg: (_c = item === null || item === void 0 ? void 0 : item.trigger) === null || _c === void 0 ? void 0 : _c.iconSvg, badge: item.badge, key: item.id, onClick: () => handleDrawersClick(item.id), testId: `awsui-app-layout-trigger-${item.id}`, highContrastHeader: headerVariant === "high-contrast", selected: item.id === activeDrawerId });
      }),
      overflowItems.length > 0 && import_react65.default.createElement(OverflowMenu, { items: overflowItems, ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel, onItemClick: ({ detail }) => handleDrawersClick(detail.id) })
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/header.js
var import_react66 = __toESM(require_react());
function Header2() {
  const { breadcrumbs, contentHeader, hasDrawerViewportOverlay, hasNotificationsContent, headerVariant } = useAppLayoutInternals();
  if (!contentHeader) {
    return null;
  }
  return import_react66.default.createElement("header", { className: clsx_m_default(styles_css_default33.content, {
    [styles_css_default33["has-breadcrumbs"]]: breadcrumbs,
    [styles_css_default33["has-notifications-content"]]: hasNotificationsContent,
    [styles_css_default33.unfocusable]: hasDrawerViewportOverlay,
    [highContrastHeaderClassName]: headerVariant === "high-contrast"
  }) }, contentHeader);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/layout.js
var import_react67 = __toESM(require_react());
function Layout({ children }) {
  const { breadcrumbs, contentHeader, contentType, disableBodyScroll, disableContentPaddings, drawersTriggerCount, footerHeight, hasNotificationsContent, hasOpenDrawer, headerHeight, isBackgroundOverlapDisabled, isMobile, navigationOpen, layoutElement, layoutWidth, mainOffsetLeft, maxContentWidth, minContentWidth, navigationHide, notificationsHeight, __embeddedViewMode, splitPanelPosition, splitPanelDisplayed } = useAppLayoutInternals();
  const contentFirstChild = getContentFirstChild(breadcrumbs, contentHeader, hasNotificationsContent, isMobile);
  const hasContentGapLeft = navigationOpen || navigationHide;
  const hasContentGapRight = drawersTriggerCount === 0 || hasOpenDrawer;
  return import_react67.default.createElement("main", { className: clsx_m_default(styles_css_default33.layout, styles_css_default33[`content-first-child-${contentFirstChild}`], styles_css_default33[`content-type-${contentType}`], styles_css_default33[`split-panel-position-${splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom"}`], {
    [styles_css_default33["disable-body-scroll"]]: disableBodyScroll,
    [styles_css_default12["disable-body-scroll-root"]]: disableBodyScroll,
    [styles_css_default33["disable-content-paddings"]]: disableContentPaddings,
    [styles_css_default33["has-breadcrumbs"]]: breadcrumbs && !isMobile,
    [styles_css_default33["has-content-gap-left"]]: hasContentGapLeft,
    [styles_css_default33["has-content-gap-right"]]: hasContentGapRight,
    [styles_css_default33["has-header"]]: contentHeader,
    [styles_css_default33["has-max-content-width"]]: maxContentWidth && maxContentWidth > 0,
    [styles_css_default33["has-split-panel"]]: splitPanelDisplayed,
    [styles_css_default33["is-overlap-disabled"]]: isBackgroundOverlapDisabled,
    [styles_css_default33["is-hide-mobile-toolbar"]]: __embeddedViewMode,
    [styles_css_default33["has-left-toggles-gutter"]]: !(isMobile || navigationHide || navigationOpen),
    [styles_css_default33["has-right-toggles-gutter"]]: !isMobile && !hasContentGapRight
  }, styles_css_default12.root), ref: layoutElement, style: Object.assign(Object.assign(Object.assign({ [custom_css_properties_default.headerHeight]: `${headerHeight}px`, [custom_css_properties_default.footerHeight]: `${footerHeight}px`, [custom_css_properties_default.layoutWidth]: `${layoutWidth}px`, [custom_css_properties_default.mainOffsetLeft]: `${mainOffsetLeft}px` }, maxContentWidth && { [custom_css_properties_default.maxContentWidth]: `${maxContentWidth}px` }), minContentWidth && { [custom_css_properties_default.minContentWidth]: `${minContentWidth}px` }), { [custom_css_properties_default.notificationsHeight]: `${notificationsHeight}px` }) }, children);
}
function getContentFirstChild(breadcrumbs, contentHeader, hasNotificationsContent, isMobile) {
  let contentFirstChild = "main";
  if (hasNotificationsContent) {
    contentFirstChild = "notifications";
  } else if (breadcrumbs && !isMobile) {
    contentFirstChild = "breadcrumbs";
  } else if (contentHeader) {
    contentFirstChild = "header";
  }
  return contentFirstChild;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/main.js
var import_react68 = __toESM(require_react());
function Main() {
  const { content, disableBodyScroll, disableContentPaddings, footerHeight, hasDrawerViewportOverlay, navigationOpen, placement, isMobile, isSplitPanelOpen, isToolsOpen, mainElement, notificationsHeight, stickyNotifications, offsetBottom, splitPanelDisplayed, splitPanelPosition, activeDrawerId } = useAppLayoutInternals();
  const splitPanelHeight = offsetBottom - footerHeight;
  return import_react68.default.createElement("div", { className: clsx_m_default(styles_css_default33.container, styles_css_default33[`split-panel-position-${splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom"}`], {
    [styles_css_default33["disable-content-paddings"]]: disableContentPaddings,
    [styles_css_default33["has-split-panel"]]: splitPanelDisplayed,
    [styles_css_default33["is-navigation-open"]]: navigationOpen,
    [styles_css_default33["is-tools-open"]]: isToolsOpen,
    [styles_css_default33["has-active-drawer"]]: !!activeDrawerId,
    [styles_css_default33["is-split-panel-open"]]: isSplitPanelOpen,
    [styles_css_default33.unfocusable]: hasDrawerViewportOverlay
  }, styles_css_default12.content), ref: mainElement, style: Object.assign({ [custom_css_properties_default.splitPanelHeight]: `${splitPanelHeight}px` }, getStickyOffsetVars(placement.insetBlockStart, offsetBottom, stickyNotifications && notificationsHeight > 0 ? `${spaceXs} + ${notificationsHeight}px` : "0px", `var(${custom_css_properties_default.mobileBarHeight})`, !!disableBodyScroll, isMobile)) }, content);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/mobile-toolbar.js
var import_react69 = __toESM(require_react());
function MobileToolbar2() {
  var _a, _b, _c, _d;
  const { ariaLabels, breadcrumbs, drawers, handleNavigationClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, navigationOpen, __embeddedViewMode, isToolsOpen, navigationHide, navigationRefs, toolsHide, toolsRefs, headerVariant } = useAppLayoutInternals();
  if (!isMobile || __embeddedViewMode || navigationHide && !breadcrumbs && toolsHide && (!drawers || drawers.length === 0)) {
    return null;
  }
  return import_react69.default.createElement(
    "section",
    { className: clsx_m_default(styles_css_default33["mobile-toolbar"], [styles_css_default12["mobile-bar"]], {
      [styles_css_default33["has-breadcrumbs"]]: breadcrumbs,
      [styles_css_default33.unfocusable]: hasDrawerViewportOverlay,
      [highContrastHeaderClassName]: headerVariant === "high-contrast"
    }, styles_css_default12["mobile-bar"], headerVariant !== "high-contrast" && styles_css_default33["remove-high-contrast-header"]) },
    !navigationHide && import_react69.default.createElement(
      "nav",
      { "aria-hidden": navigationOpen, "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _a !== void 0 ? _a : void 0, "aria-orientation": "horizontal", className: clsx_m_default(styles_css_default33["mobile-toolbar-nav"], { [styles_css_default12["drawer-closed"]]: !navigationOpen }) },
      import_react69.default.createElement(InternalButton, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _b !== void 0 ? _b : void 0, ariaExpanded: navigationOpen ? void 0 : false, iconName: "menu", formAction: "none", onClick: () => handleNavigationClick(true), variant: "icon", className: styles_css_default12["navigation-toggle"], ref: navigationRefs.toggle, disabled: hasDrawerViewportOverlay, __nativeAttributes: { "aria-haspopup": navigationOpen ? void 0 : true } })
    ),
    breadcrumbs && import_react69.default.createElement("div", { className: clsx_m_default(styles_css_default33["mobile-toolbar-breadcrumbs"], styles_css_default12.breadcrumbs) }, breadcrumbs),
    drawers ? import_react69.default.createElement(MobileTriggers, null) : !toolsHide && import_react69.default.createElement(
      "aside",
      { "aria-hidden": isToolsOpen, "aria-label": (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _c !== void 0 ? _c : void 0, className: clsx_m_default(styles_css_default33["mobile-toolbar-tools"], { [styles_css_default12["drawer-closed"]]: !isToolsOpen }) },
      import_react69.default.createElement(InternalButton, { className: styles_css_default12["tools-toggle"], ariaExpanded: isToolsOpen, disabled: hasDrawerViewportOverlay, ariaLabel: (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _d !== void 0 ? _d : void 0, iconName: "status-info", formAction: "none", onClick: () => handleToolsClick(true), variant: "icon", ref: toolsRefs.toggle, __nativeAttributes: { "aria-haspopup": true } })
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/navigation.js
var import_react70 = __toESM(require_react());
function Navigation() {
  const { ariaLabels, disableBodyScroll, handleNavigationClick, hasDrawerViewportOverlay, isMobile, navigationOpen, isToolsOpen, navigation, navigationHide, navigationRefs, navigationWidth, toolsHide, headerVariant } = useAppLayoutInternals();
  if (navigationHide) {
    return null;
  }
  const onNavigationClick = (event) => {
    const hasLink = findUpUntil(event.target, (node) => node.tagName === "A" && !!node.href);
    if (hasLink && isMobile) {
      handleNavigationClick(false);
    }
  };
  const isUnfocusable = hasDrawerViewportOverlay && (!navigationOpen || isToolsOpen && !toolsHide);
  return import_react70.default.createElement(Transition, { in: navigationOpen }, (state, transitionEventsRef) => {
    var _a, _b, _c;
    return import_react70.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default33["navigation-container"], {
        [styles_css_default33["disable-body-scroll"]]: disableBodyScroll,
        [styles_css_default33.unfocusable]: isUnfocusable
      }), style: { [custom_css_properties_default.navigationWidth]: `${navigationWidth}px` } },
      !isMobile && import_react70.default.createElement(
        "nav",
        { "aria-hidden": isMobile || navigationOpen, "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default33["show-navigation"], {
          [styles_css_default33.animating]: state === "exiting",
          [styles_css_default33["is-navigation-open"]]: navigationOpen
        }), ref: state === "exiting" ? transitionEventsRef : void 0 },
        import_react70.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle, ariaExpanded: navigationOpen ? void 0 : false, iconName: "menu", className: styles_css_default12["navigation-toggle"], onClick: () => handleNavigationClick(true), ref: navigationRefs.toggle, highContrastHeader: headerVariant === "high-contrast" })
      ),
      import_react70.default.createElement(
        "nav",
        { "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _b !== void 0 ? _b : void 0, className: clsx_m_default(styles_css_default33.navigation, styles_css_default12.navigation, {
          [styles_css_default12["drawer-closed"]]: !navigationOpen,
          [styles_css_default33.animating]: state === "entering",
          [styles_css_default33["is-navigation-open"]]: navigationOpen
        }), ref: state !== "exiting" ? transitionEventsRef : void 0, "aria-hidden": !navigationOpen, onClick: onNavigationClick },
        import_react70.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default33["content-container"], styles_css_default33["animated-content"]) },
          import_react70.default.createElement(
            "div",
            { className: styles_css_default33["hide-navigation"] },
            import_react70.default.createElement(InternalButton, { ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationClose) !== null && _c !== void 0 ? _c : void 0, iconName: isMobile ? "close" : "angle-left", onClick: () => handleNavigationClick(false), variant: "icon", formAction: "none", className: styles_css_default12["navigation-close"], ref: navigationRefs.close })
          ),
          navigation
        )
      )
    );
  });
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/notifications.js
var import_react71 = __toESM(require_react());
function Notifications2() {
  const { notifications } = useAppLayoutInternals();
  if (!notifications) {
    return null;
  }
  return import_react71.default.createElement(NotificationsImplementation, null);
}
function NotificationsImplementation() {
  var _a;
  const { ariaLabels, hasDrawerViewportOverlay, notifications, setNotificationsHeight, stickyNotifications, headerVariant, hasNotificationsContent } = useAppLayoutInternals();
  const ref = (0, import_react71.useRef)(null);
  useResizeObserver(ref, (entry) => setNotificationsHeight(entry.contentBoxHeight));
  (0, import_react71.useEffect)(() => {
    return () => {
      setNotificationsHeight(0);
    };
  }, []);
  return import_react71.default.createElement(
    "div",
    { role: "region", "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.notifications) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default33.notifications, {
      [styles_css_default33["sticky-notifications"]]: stickyNotifications,
      [styles_css_default33["has-notification-content"]]: hasNotificationsContent,
      [styles_css_default33.unfocusable]: hasDrawerViewportOverlay,
      [highContrastHeaderClassName]: headerVariant === "high-contrast",
      [styles_css_default33["high-contrast"]]: headerVariant === "high-contrast"
    }, styles_css_default12.notifications) },
    import_react71.default.createElement("div", { ref }, notifications)
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/tools.js
var import_react72 = __toESM(require_react());
function Tools({ children }) {
  const { ariaLabels, disableBodyScroll, drawers, handleSplitPanelClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, isSplitPanelOpen, isToolsOpen, loseToolsFocus, splitPanel, splitPanelControlId, splitPanelDisplayed, splitPanelPosition, splitPanelRefs, splitPanelToggle, tools, toolsControlId, toolsHide, toolsRefs, toolsWidth, headerVariant } = useAppLayoutInternals();
  const hasSplitPanel = !!splitPanel && splitPanelPosition === "side";
  const hasToolsForm = getToolsFormStatus(hasSplitPanel && splitPanelDisplayed, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);
  const hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);
  const isUnfocusable = hasDrawerViewportOverlay && !isToolsOpen;
  if (toolsHide && !hasSplitPanel || drawers) {
    return null;
  }
  return import_react72.default.createElement(Transition, { in: isToolsOpen !== null && isToolsOpen !== void 0 ? isToolsOpen : false }, (state, transitionEventsRef) => {
    var _a, _b, _c;
    return import_react72.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default33["tools-container"], {
        [styles_css_default33["disable-body-scroll"]]: disableBodyScroll,
        [styles_css_default33.unfocusable]: isUnfocusable
      }), style: {
        [custom_css_properties_default.toolsAnimationStartingOpacity]: `${hasSplitPanel && isSplitPanelOpen ? 1 : 0}`,
        [custom_css_properties_default.toolsWidth]: `${toolsWidth}px`
      }, onBlur: (e3) => {
        if (!e3.relatedTarget || !e3.currentTarget.contains(e3.relatedTarget)) {
          loseToolsFocus();
        }
      } },
      children,
      !toolsHide && import_react72.default.createElement(
        "aside",
        { id: toolsControlId, "aria-hidden": !isToolsOpen ? true : false, "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default33.tools, {
          [styles_css_default33.animating]: state === "entering",
          [styles_css_default33["has-tools-form-persistence"]]: hasToolsFormPersistence,
          [styles_css_default33["is-tools-open"]]: isToolsOpen,
          [styles_css_default12["drawer-closed"]]: !isToolsOpen
        }, styles_css_default12.tools), ref: state !== "exiting" ? transitionEventsRef : void 0 },
        import_react72.default.createElement(
          "div",
          { className: styles_css_default33["animated-content"] },
          import_react72.default.createElement(
            "div",
            { className: styles_css_default33["hide-tools"] },
            import_react72.default.createElement(InternalButton, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose) !== null && _b !== void 0 ? _b : void 0, iconName: isMobile ? "close" : "angle-right", onClick: () => handleToolsClick(false), variant: "icon", formAction: "none", className: styles_css_default12["tools-close"], ref: toolsRefs.close })
          ),
          tools
        )
      ),
      !isMobile && import_react72.default.createElement(
        "aside",
        { "aria-hidden": !hasToolsForm ? true : false, "aria-label": (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _c !== void 0 ? _c : void 0, className: clsx_m_default(styles_css_default33["show-tools"], {
          [styles_css_default33.animating]: state === "exiting",
          [styles_css_default33["has-tools-form"]]: hasToolsForm,
          [styles_css_default33["has-tools-form-persistence"]]: hasToolsFormPersistence
        }), ref: state === "exiting" ? transitionEventsRef : void 0, "data-testid": "side-split-panel-drawer" },
        !toolsHide && import_react72.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle, ariaControls: toolsControlId, ariaExpanded: isToolsOpen, iconName: "status-info", onClick: () => handleToolsClick(!isToolsOpen), selected: hasSplitPanel && isToolsOpen, className: styles_css_default12["tools-toggle"], ref: toolsRefs.toggle, highContrastHeader: headerVariant === "high-contrast" }),
        hasSplitPanel && splitPanelToggle.displayed && import_react72.default.createElement(trigger_button_default, { ariaLabel: splitPanelToggle.ariaLabel, ariaControls: splitPanelControlId, ariaExpanded: !!isSplitPanelOpen, iconName: "view-vertical", onClick: () => handleSplitPanelClick(), selected: hasSplitPanel && isSplitPanelOpen, className: styles_css_default34["open-button"], ref: splitPanelRefs.toggle, highContrastHeader: headerVariant === "high-contrast" })
      )
    );
  });
}
function getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide) {
  let hasToolsForm = false;
  if (!isMobile) {
    if (hasSplitPanel && !toolsHide) {
      hasToolsForm = true;
    }
    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {
      hasToolsForm = true;
    }
    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {
      hasToolsForm = true;
    }
  }
  return hasToolsForm;
}
function getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide) {
  let hasToolsFormPersistence = false;
  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {
    hasToolsFormPersistence = true;
  }
  return hasToolsFormPersistence;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/index.js
var AppLayoutWithRef = import_react73.default.forwardRef(function AppLayout(props2, ref) {
  return import_react73.default.createElement(
    AppLayoutInternalsProvider,
    Object.assign({}, props2, { ref }),
    import_react73.default.createElement(
      split_panel_default,
      null,
      import_react73.default.createElement(
        Layout,
        null,
        import_react73.default.createElement(Background, null),
        import_react73.default.createElement(Navigation, null),
        import_react73.default.createElement(MobileToolbar2, null),
        import_react73.default.createElement(Notifications2, null),
        import_react73.default.createElement(Breadcrumbs, null),
        import_react73.default.createElement(Header2, null),
        import_react73.default.createElement(Main, null),
        import_react73.default.createElement(split_panel_default.Bottom, null),
        import_react73.default.createElement(
          Tools,
          null,
          import_react73.default.createElement(split_panel_default.Side, null)
        ),
        import_react73.default.createElement(Drawers, null)
      )
    )
  );
});
var visual_refresh_default = AppLayoutWithRef;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/index.js
var import_react95 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/plugins/helpers/use-global-breadcrumbs.js
var import_react74 = __toESM(require_react());
function useSetGlobalBreadcrumbsImplementation(_a) {
  var _b, _c;
  var { __disableGlobalization } = _a, props2 = __rest(_a, ["__disableGlobalization"]);
  const { isInToolbar } = (_b = (0, import_react74.useContext)(BreadcrumbsSlotContext)) !== null && _b !== void 0 ? _b : {};
  const isLayoutVisible = (_c = (0, import_react74.useContext)(AppLayoutVisibilityContext)) !== null && _c !== void 0 ? _c : true;
  const registrationRef = (0, import_react74.useRef)();
  const [registered, setRegistered] = (0, import_react74.useState)(false);
  (0, import_react74.useEffect)(() => {
    if (isInToolbar || __disableGlobalization || !isLayoutVisible) {
      return;
    }
    const registration = awsuiPluginsInternal.breadcrumbs.registerBreadcrumbs(props2, (isRegistered) => setRegistered(isRegistered !== null && isRegistered !== void 0 ? isRegistered : true));
    registrationRef.current = registration;
    return () => {
      registration.cleanup();
    };
  }, [isInToolbar, __disableGlobalization, isLayoutVisible]);
  (0, import_react74.useLayoutEffect)(() => {
    var _a2;
    (_a2 = registrationRef.current) === null || _a2 === void 0 ? void 0 : _a2.update(props2);
  });
  return registered;
}
function useSetGlobalBreadcrumbs(props2) {
  if (!useAppLayoutFlagEnabled()) {
    return false;
  }
  return useSetGlobalBreadcrumbsImplementation(props2);
}
function useGetGlobalBreadcrumbs(enabled) {
  const [discoveredBreadcrumbs, setDiscoveredBreadcrumbs] = (0, import_react74.useState)(null);
  (0, import_react74.useEffect)(() => {
    if (!enabled) {
      return;
    }
    return awsuiPluginsInternal.breadcrumbs.registerAppLayout((breadcrumbs) => {
      setDiscoveredBreadcrumbs(breadcrumbs);
    });
  }, [enabled]);
  return discoveredBreadcrumbs;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/compute-layout.js
var CONTENT_PADDING = 2 * 24;
function computeHorizontalLayout({ navigationOpen, navigationWidth, placement, minContentWidth, activeDrawerSize, splitPanelOpen, splitPanelPosition, splitPanelSize, isMobile, activeGlobalDrawersSizes }) {
  const activeNavigationWidth = navigationOpen ? navigationWidth : 0;
  let resizableSpaceAvailable = Math.max(0, placement.inlineSize - minContentWidth - CONTENT_PADDING - activeNavigationWidth);
  const totalActiveGlobalDrawersSize = Object.values(activeGlobalDrawersSizes).reduce((acc, size) => acc + size, 0);
  const availableWidthForSplitPanel = resizableSpaceAvailable - activeDrawerSize;
  const splitPanelForcedPosition = shouldSplitPanelBeForcedToBottom({
    isMobile,
    availableWidthForSplitPanel
  });
  const resolvedSplitPanelPosition = splitPanelForcedPosition ? "bottom" : splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom";
  const sideSplitPanelSize = resolvedSplitPanelPosition === "side" && splitPanelOpen ? splitPanelSize !== null && splitPanelSize !== void 0 ? splitPanelSize : 0 : 0;
  const maxSplitPanelSize = Math.max(resizableSpaceAvailable - totalActiveGlobalDrawersSize - activeDrawerSize, 0);
  resizableSpaceAvailable -= sideSplitPanelSize;
  const maxDrawerSize = resizableSpaceAvailable - totalActiveGlobalDrawersSize;
  const maxGlobalDrawersSizes = Object.keys(activeGlobalDrawersSizes).reduce((acc, drawerId) => {
    return Object.assign(Object.assign({}, acc), { [drawerId]: resizableSpaceAvailable - activeDrawerSize - totalActiveGlobalDrawersSize + activeGlobalDrawersSizes[drawerId] });
  }, {});
  return {
    splitPanelPosition: resolvedSplitPanelPosition,
    splitPanelForcedPosition,
    sideSplitPanelSize,
    maxSplitPanelSize,
    maxDrawerSize,
    maxGlobalDrawersSizes,
    totalActiveGlobalDrawersSize,
    resizableSpaceAvailable
  };
}
function computeVerticalLayout({ topOffset, hasVisibleToolbar, toolbarHeight, stickyNotifications, notificationsHeight }) {
  const toolbar = topOffset;
  let notifications = topOffset;
  let drawers = topOffset;
  if (hasVisibleToolbar) {
    notifications += toolbarHeight;
    drawers += toolbarHeight;
  }
  let header = notifications;
  if (stickyNotifications) {
    header += notificationsHeight;
  }
  return { toolbar, notifications, header, drawers };
}
function computeSplitPanelOffsets({ hasSplitPanel, splitPanelPosition, placement, splitPanelOpen, splitPanelFullHeight, splitPanelHeaderHeight }) {
  if (!hasSplitPanel || splitPanelPosition !== "bottom") {
    return {
      stickyVerticalBottomOffset: placement.insetBlockEnd,
      mainContentPaddingBlockEnd: void 0
    };
  }
  const mainContentBottomOffset = splitPanelOpen ? splitPanelFullHeight : splitPanelHeaderHeight;
  return {
    stickyVerticalBottomOffset: mainContentBottomOffset + placement.insetBlockEnd,
    mainContentPaddingBlockEnd: mainContentBottomOffset
  };
}
function getDrawerStyles(verticalOffsets, isMobile, placement) {
  var _a;
  const drawerTopOffset = isMobile ? verticalOffsets.toolbar : (_a = verticalOffsets.drawers) !== null && _a !== void 0 ? _a : placement.insetBlockStart;
  const drawerHeight = `calc(100vh - ${drawerTopOffset}px - ${placement.insetBlockEnd}px)`;
  return { drawerTopOffset, drawerHeight };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/local-drawer.js
var import_react76 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/widgets/index.js
var import_react75 = __toESM(require_react());
function createWidgetizedComponent(Implementation, Skeleton) {
  return (Loader) => {
    return (props2) => {
      const isRefresh = useVisualRefresh();
      if (isRefresh && getGlobalFlag("appLayoutWidget") && Loader) {
        return import_react75.default.createElement(Loader, Object.assign({ Skeleton }, props2));
      }
      return import_react75.default.createElement(Implementation, Object.assign({}, props2));
    };
  };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/use-resize.js
function useResize2({ currentWidth, minWidth, maxWidth, panelRef, handleRef, onResize }) {
  const onResizeHandler = (newWidth) => {
    const size = getLimitedValue(minWidth, newWidth, maxWidth);
    if (maxWidth >= minWidth) {
      onResize(size);
    }
  };
  const sizeControlProps = {
    position: "side",
    panelRef,
    handleRef,
    onResize: onResizeHandler
  };
  const clampedWidth = getLimitedValue(minWidth, currentWidth, maxWidth);
  const relativeSize = (clampedWidth - minWidth) / (maxWidth - minWidth) * 100;
  const onPointerDown = usePointerEvents(sizeControlProps);
  const { onKeyDown, onDirectionClick } = useKeyboardEvents(sizeControlProps);
  return { onKeyDown, onDirectionClick, onPointerDown, relativeSize };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/styles.scoped.css";
var styles_css_default35 = {
  "drawer": "awsui_drawer_12i0j_12u2z_189",
  "with-expanded-motion": "awsui_with-expanded-motion_12i0j_12u2z_203",
  "legacy": "awsui_legacy_12i0j_12u2z_217",
  "last-opened": "awsui_last-opened_12i0j_12u2z_225",
  "drawer-global": "awsui_drawer-global_12i0j_12u2z_229",
  "drawer-expanded": "awsui_drawer-expanded_12i0j_12u2z_238",
  "drawer-hidden": "awsui_drawer-hidden_12i0j_12u2z_242",
  "has-next-siblings": "awsui_has-next-siblings_12i0j_12u2z_252",
  "global-drawer-wrapper": "awsui_global-drawer-wrapper_12i0j_12u2z_252",
  "drawer-content-container": "awsui_drawer-content-container_12i0j_12u2z_266",
  "drawer-gap": "awsui_drawer-gap_12i0j_12u2z_269",
  "drawer-close-button": "awsui_drawer-close-button_12i0j_12u2z_287",
  "drawer-expanded-mode-button": "awsui_drawer-expanded-mode-button_12i0j_12u2z_293",
  "drawer-content": "awsui_drawer-content_12i0j_12u2z_266",
  "drawer-content-hidden": "awsui_drawer-content-hidden_12i0j_12u2z_305",
  "drawer-slider": "awsui_drawer-slider_12i0j_12u2z_308",
  "drawer-actions": "awsui_drawer-actions_12i0j_12u2z_358"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/local-drawer.js
function AppLayoutDrawerImplementation({ appLayoutInternals }) {
  var _a, _b, _c;
  const { activeDrawer, minDrawerSize, activeDrawerSize, maxDrawerSize, ariaLabels, drawers, drawersFocusControl, isMobile, placement, verticalOffsets, drawersOpenQueue, onActiveDrawerChange, onActiveDrawerResize } = appLayoutInternals;
  const drawerRef = (0, import_react76.useRef)(null);
  const activeDrawerId = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
  const computedAriaLabels = {
    closeButton: activeDrawer ? (_a = activeDrawer.ariaLabels) === null || _a === void 0 ? void 0 : _a.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,
    content: activeDrawer ? (_b = activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools
  };
  const { drawerTopOffset, drawerHeight } = getDrawerStyles(verticalOffsets, isMobile, placement);
  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;
  const isToolsDrawer = (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) === TOOLS_DRAWER_ID || toolsOnlyMode;
  const toolsContent = (_c = drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === TOOLS_DRAWER_ID)) === null || _c === void 0 ? void 0 : _c.content;
  const resizeProps = useResize2({
    currentWidth: activeDrawerSize,
    minWidth: minDrawerSize,
    maxWidth: maxDrawerSize,
    panelRef: drawerRef,
    handleRef: drawersFocusControl.refs.slider,
    onResize: (size2) => onActiveDrawerResize({ id: activeDrawerId, size: size2 })
  });
  const isLegacyDrawer = drawersOpenQueue === void 0;
  const size = getLimitedValue(minDrawerSize, activeDrawerSize, maxDrawerSize);
  const lastOpenedDrawerId = (drawersOpenQueue === null || drawersOpenQueue === void 0 ? void 0 : drawersOpenQueue.length) ? drawersOpenQueue[0] : activeDrawerId;
  const animationDisabled = (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultActive) && !drawersOpenQueue.includes(activeDrawer.id);
  return import_react76.default.createElement(Transition_default, { nodeRef: drawerRef, in: !!activeDrawer, appear: true, timeout: 0 }, (state) => {
    var _a2, _b2;
    return import_react76.default.createElement(
      "aside",
      { id: activeDrawerId, "aria-hidden": !activeDrawer, "aria-label": computedAriaLabels.content, className: clsx_m_default(styles_css_default35.drawer, {
        [styles_css_default28["with-motion-horizontal"]]: !animationDisabled,
        [styles_css_default35["last-opened"]]: lastOpenedDrawerId === activeDrawerId,
        [styles_css_default35.legacy]: isLegacyDrawer,
        [styles_css_default12["active-drawer"]]: !toolsOnlyMode && activeDrawerId,
        [styles_css_default12.tools]: isToolsDrawer,
        [styles_css_default35["drawer-hidden"]]: !activeDrawer,
        [styles_css_default12["drawer-closed"]]: !activeDrawer
      }), ref: drawerRef, onBlur: (e3) => {
        if (!e3.relatedTarget || !e3.currentTarget.contains(e3.relatedTarget)) {
          drawersFocusControl.loseFocus();
        }
      }, style: Object.assign({ blockSize: drawerHeight, insetBlockStart: drawerTopOffset }, !isMobile && !isLegacyDrawer && {
        [custom_css_properties_default.drawerSize]: `${["entering", "entered"].includes(state) ? size : 0}px`
      }), "data-testid": activeDrawerId && `awsui-app-layout-drawer-${activeDrawerId}` },
      !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && import_react76.default.createElement(
        "div",
        { className: styles_css_default35["drawer-slider"] },
        import_react76.default.createElement(panel_resize_handle_default, { ref: drawersFocusControl.refs.slider, position: "side", className: styles_css_default12["drawers-slider"], ariaLabel: (_a2 = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.resizeHandle, tooltipText: (_b2 = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b2 === void 0 ? void 0 : _b2.resizeHandleTooltipText, ariaValuenow: resizeProps.relativeSize, onKeyDown: resizeProps.onKeyDown, onPointerDown: resizeProps.onPointerDown, onDirectionClick: resizeProps.onDirectionClick })
      ),
      import_react76.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default35["drawer-content-container"], styles_css_default28["with-motion-horizontal"]) },
        import_react76.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default35["drawer-close-button"]) },
          import_react76.default.createElement(InternalButton, { ariaLabel: computedAriaLabels.closeButton, className: clsx_m_default({
            [styles_css_default12["active-drawer-close-button"]]: !isToolsDrawer && activeDrawerId,
            [styles_css_default12["tools-close"]]: isToolsDrawer
          }), formAction: "none", iconName: isMobile ? "close" : "angle-right", onClick: () => onActiveDrawerChange(null, { initiatedByUserAction: true }), ref: drawersFocusControl.refs.close, variant: "icon", analyticsAction: "close" })
        ),
        import_react76.default.createElement("div", { className: clsx_m_default(styles_css_default35["drawer-content"], activeDrawerId !== TOOLS_DRAWER_ID && styles_css_default35["drawer-content-hidden"]), style: { blockSize: drawerHeight } }, toolsContent),
        activeDrawerId !== TOOLS_DRAWER_ID && import_react76.default.createElement("div", { className: styles_css_default35["drawer-content"], style: { blockSize: drawerHeight } }, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content)
      )
    );
  });
}
var createWidgetizedAppLayoutDrawer = createWidgetizedComponent(AppLayoutDrawerImplementation);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/global-drawers.js
var import_react78 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/global-drawer.js
var import_react77 = __toESM(require_react());
function AppLayoutGlobalDrawerImplementation({ appLayoutInternals, show, activeGlobalDrawer }) {
  var _a, _b, _c, _d, _e, _f;
  const { ariaLabels, globalDrawersFocusControl, isMobile, placement, onActiveGlobalDrawersChange, onActiveDrawerResize, minGlobalDrawersSizes, maxGlobalDrawersSizes, activeGlobalDrawersSizes, activeGlobalDrawers, verticalOffsets, drawersOpenQueue, expandedDrawerId, setExpandedDrawerId } = appLayoutInternals;
  const drawerRef = (0, import_react77.useRef)(null);
  const activeDrawerId = (_a = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.id) !== null && _a !== void 0 ? _a : "";
  const computedAriaLabels = {
    closeButton: activeGlobalDrawer ? (_b = activeGlobalDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,
    content: activeGlobalDrawer ? (_c = activeGlobalDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools
  };
  const { drawerTopOffset, drawerHeight } = getDrawerStyles(verticalOffsets, isMobile, placement);
  const activeDrawerSize = (_d = activeDrawerId ? activeGlobalDrawersSizes[activeDrawerId] : 0) !== null && _d !== void 0 ? _d : 0;
  const minDrawerSize = (_e = activeDrawerId ? minGlobalDrawersSizes[activeDrawerId] : 0) !== null && _e !== void 0 ? _e : 0;
  const maxDrawerSize = (_f = activeDrawerId ? maxGlobalDrawersSizes[activeDrawerId] : 0) !== null && _f !== void 0 ? _f : 0;
  const refs = globalDrawersFocusControl.refs[activeDrawerId];
  const resizeProps = useResize2({
    currentWidth: activeDrawerSize,
    minWidth: minDrawerSize,
    maxWidth: maxDrawerSize,
    panelRef: drawerRef,
    handleRef: refs === null || refs === void 0 ? void 0 : refs.slider,
    onResize: (size2) => onActiveDrawerResize({ id: activeDrawerId, size: size2 })
  });
  const size = getLimitedValue(minDrawerSize, activeDrawerSize, maxDrawerSize);
  const lastOpenedDrawerId = drawersOpenQueue.length ? drawersOpenQueue[0] : null;
  const hasTriggerButton = !!(activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.trigger);
  const isExpanded = (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.isExpandable) && expandedDrawerId === activeDrawerId;
  const wasExpanded = usePrevious(isExpanded);
  const animationDisabled = (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.defaultActive) && !drawersOpenQueue.includes(activeGlobalDrawer.id) || wasExpanded && !isExpanded;
  return import_react77.default.createElement(Transition_default, { nodeRef: drawerRef, in: show || isExpanded, appear: show || isExpanded, timeout: 0 }, (state) => {
    var _a2, _b2, _c2;
    return import_react77.default.createElement(
      "aside",
      { id: activeDrawerId, "aria-hidden": !show, "aria-label": computedAriaLabels.content, className: clsx_m_default(styles_css_default35.drawer, styles_css_default35["drawer-global"], styles_css_default35[state], !animationDisabled && styles_css_default28["with-motion-horizontal"], !animationDisabled && isExpanded && styles_css_default35["with-expanded-motion"], {
        [styles_css_default35["drawer-hidden"]]: !show,
        [styles_css_default35["last-opened"]]: lastOpenedDrawerId === activeDrawerId || isExpanded,
        [styles_css_default12["active-drawer"]]: show,
        [styles_css_default35["drawer-expanded"]]: isExpanded,
        [styles_css_default35["has-next-siblings"]]: activeGlobalDrawers.findIndex((drawer) => drawer.id === activeDrawerId) + 1 < activeGlobalDrawers.length
      }), ref: drawerRef, onBlur: (e3) => {
        if (!hasTriggerButton) {
          return;
        }
        if (!e3.relatedTarget || !e3.currentTarget.contains(e3.relatedTarget)) {
          globalDrawersFocusControl.loseFocus();
        }
      }, style: Object.assign({ blockSize: drawerHeight, insetBlockStart: drawerTopOffset }, !isMobile && {
        [custom_css_properties_default.drawerSize]: `${["entering", "entered"].includes(state) ? isExpanded ? "100%" : size + "px" : 0}`
      }), "data-testid": `awsui-app-layout-drawer-${activeDrawerId}` },
      import_react77.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default35["global-drawer-wrapper"]) },
        !isMobile && import_react77.default.createElement("div", { className: styles_css_default35["drawer-gap"] }),
        !isMobile && (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.resizable) && !isExpanded && import_react77.default.createElement(
          "div",
          { className: styles_css_default35["drawer-slider"] },
          import_react77.default.createElement(panel_resize_handle_default, { ref: refs === null || refs === void 0 ? void 0 : refs.slider, position: "side", className: styles_css_default12["drawers-slider"], ariaLabel: (_a2 = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.resizeHandle, tooltipText: (_b2 = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.ariaLabels) === null || _b2 === void 0 ? void 0 : _b2.resizeHandleTooltipText, ariaValuenow: resizeProps.relativeSize, onKeyDown: resizeProps.onKeyDown, onDirectionClick: resizeProps.onDirectionClick, onPointerDown: resizeProps.onPointerDown })
        ),
        import_react77.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default35["drawer-content-container"], styles_css_default28["with-motion-horizontal"]), "data-testid": `awsui-app-layout-drawer-content-${activeDrawerId}` },
          import_react77.default.createElement(
            "div",
            { className: styles_css_default35["drawer-actions"] },
            !isMobile && (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.isExpandable) && import_react77.default.createElement(
              "div",
              { className: styles_css_default35["drawer-expanded-mode-button"] },
              import_react77.default.createElement(InternalButton, { ariaLabel: (_c2 = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.ariaLabels) === null || _c2 === void 0 ? void 0 : _c2.expandedModeButton, className: styles_css_default12["active-drawer-expanded-mode-button"], formAction: "none", ariaExpanded: isExpanded, iconName: isExpanded ? "shrink" : "expand", onClick: () => setExpandedDrawerId(isExpanded ? null : activeDrawerId), variant: "icon", analyticsAction: isExpanded ? "expand" : "collapse" })
            ),
            import_react77.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default35["drawer-close-button"]) },
              import_react77.default.createElement(InternalButton, { ariaLabel: computedAriaLabels.closeButton, className: clsx_m_default({
                [styles_css_default12["active-drawer-close-button"]]: activeDrawerId
              }), formAction: "none", iconName: isMobile ? "close" : "angle-right", onClick: () => onActiveGlobalDrawersChange(activeDrawerId, { initiatedByUserAction: true }), ref: refs === null || refs === void 0 ? void 0 : refs.close, variant: "icon", analyticsAction: "close" })
            )
          ),
          import_react77.default.createElement("div", { className: styles_css_default35["drawer-content"], style: { blockSize: drawerHeight } }, activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.content)
        )
      )
    );
  });
}
var global_drawer_default = AppLayoutGlobalDrawerImplementation;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/global-drawers.js
function AppLayoutGlobalDrawersImplementation({ appLayoutInternals }) {
  const { globalDrawers, activeGlobalDrawersIds, expandedDrawerId } = appLayoutInternals;
  const openDrawersHistory = (0, import_react78.useRef)(/* @__PURE__ */ new Set());
  if (!globalDrawers.length) {
    return import_react78.default.createElement(import_react78.default.Fragment, null);
  }
  return import_react78.default.createElement(import_react78.default.Fragment, null, globalDrawers.filter((drawer) => activeGlobalDrawersIds.includes(drawer.id) || drawer.preserveInactiveContent && openDrawersHistory.current.has(drawer.id)).map((drawer) => {
    openDrawersHistory.current.add(drawer.id);
    return import_react78.default.createElement(global_drawer_default, { key: drawer.id, show: activeGlobalDrawersIds.includes(drawer.id) && (!expandedDrawerId || drawer.id === expandedDrawerId), activeGlobalDrawer: drawer, appLayoutInternals });
  }));
}
var createWidgetizedAppLayoutGlobalDrawers = createWidgetizedComponent(AppLayoutGlobalDrawersImplementation);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/navigation/index.js
var import_react80 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/slot-wrappers.js
var import_react79 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/styles.scoped.css";
var styles_css_default36 = {
  "root": "awsui_root_7nfqu_1hhs8_153",
  "has-adaptive-widths-default": "awsui_has-adaptive-widths-default_7nfqu_1hhs8_197",
  "has-adaptive-widths-dashboard": "awsui_has-adaptive-widths-dashboard_7nfqu_1hhs8_202",
  "drawer-expanded-mode": "awsui_drawer-expanded-mode_7nfqu_1hhs8_217",
  "navigation": "awsui_navigation_7nfqu_1hhs8_222",
  "tools": "awsui_tools_7nfqu_1hhs8_223",
  "global-tools": "awsui_global-tools_7nfqu_1hhs8_224",
  "tools-open": "awsui_tools-open_7nfqu_1hhs8_262",
  "split-panel-side": "awsui_split-panel-side_7nfqu_1hhs8_276",
  "split-panel-bottom": "awsui_split-panel-bottom_7nfqu_1hhs8_283",
  "panel-hidden": "awsui_panel-hidden_7nfqu_1hhs8_296",
  "toolbar-container": "awsui_toolbar-container_7nfqu_1hhs8_306",
  "notifications-container": "awsui_notifications-container_7nfqu_1hhs8_312",
  "notifications-background": "awsui_notifications-background_7nfqu_1hhs8_316",
  "main-landmark": "awsui_main-landmark_7nfqu_1hhs8_327",
  "main": "awsui_main_7nfqu_1hhs8_327",
  "main-disable-paddings": "awsui_main-disable-paddings_7nfqu_1hhs8_336",
  "content-header": "awsui_content-header_7nfqu_1hhs8_346",
  "content": "awsui_content_7nfqu_1hhs8_346",
  "unfocusable-mobile": "awsui_unfocusable-mobile_7nfqu_1hhs8_356",
  "hidden": "awsui_hidden_7nfqu_1hhs8_361"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/slot-wrappers.js
var ToolbarSlot = import_react79.default.forwardRef(({ className: className2, style, children }, ref) => import_react79.default.createElement("section", { ref, className: clsx_m_default(styles_css_default36["toolbar-container"], className2), style }, children));
var NotificationsSlot = import_react79.default.forwardRef(({ className: className2, style, children }, ref) => import_react79.default.createElement("div", { ref, className: clsx_m_default(styles_css_default36["notifications-container"], className2), style }, children));

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/navigation/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/navigation/styles.scoped.css";
var styles_css_default37 = {
  "navigation-container": "awsui_navigation-container_2p2ab_mig6v_153",
  "is-navigation-open": "awsui_is-navigation-open_2p2ab_mig6v_164",
  "navigation": "awsui_navigation_2p2ab_mig6v_153",
  "hide-navigation": "awsui_hide-navigation_2p2ab_mig6v_184"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/navigation/index.js
function AppLayoutNavigationImplementation({ appLayoutInternals }) {
  var _a, _b;
  const { ariaLabels, onNavigationToggle, isMobile, navigationOpen, navigation, navigationFocusControl, placement, verticalOffsets } = appLayoutInternals;
  const { drawerTopOffset, drawerHeight } = getDrawerStyles(verticalOffsets, isMobile, placement);
  const onNavigationClick = (event) => {
    const hasLink = findUpUntil(event.target, (node) => node.tagName === "A" && !!node.href);
    if (hasLink && isMobile) {
      onNavigationToggle(false);
    }
  };
  return import_react80.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default37["navigation-container"], styles_css_default28["with-motion-horizontal"], {
      [styles_css_default37["is-navigation-open"]]: navigationOpen
    }), style: {
      blockSize: drawerHeight,
      insetBlockStart: drawerTopOffset
    } },
    import_react80.default.createElement(
      "nav",
      { "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default37.navigation, {
        [styles_css_default12["drawer-closed"]]: !navigationOpen
      }, styles_css_default12.navigation), "aria-hidden": !navigationOpen, onClick: onNavigationClick },
      import_react80.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default37["hide-navigation"]) },
        import_react80.default.createElement(InternalButton, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationClose) !== null && _b !== void 0 ? _b : void 0, iconName: isMobile ? "close" : "angle-left", onClick: () => onNavigationToggle(false), variant: "icon", formAction: "none", className: styles_css_default12["navigation-close"], ref: navigationFocusControl.refs.close, analyticsAction: "close" })
      ),
      navigation
    )
  );
}
var createWidgetizedAppLayoutNavigation = createWidgetizedComponent(AppLayoutNavigationImplementation, NotificationsSlot);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/notifications/index.js
var import_react88 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/slot-skeletons.js
var import_react87 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/breadcrumbs/index.js
var import_react86 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/implementation.js
var import_react85 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/all-items-dropdown.js
var import_react81 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/breadcrumb-group/styles.scoped.css";
var styles_css_default38 = {
  "breadcrumb-group": "awsui_breadcrumb-group_d19fg_1h5ta_145",
  "breadcrumb-group-list": "awsui_breadcrumb-group-list_d19fg_1h5ta_180",
  "ghost": "awsui_ghost_d19fg_1h5ta_191",
  "item": "awsui_item_d19fg_1h5ta_196",
  "ghost-item": "awsui_ghost-item_d19fg_1h5ta_197",
  "ellipsis": "awsui_ellipsis_d19fg_1h5ta_198",
  "hide": "awsui_hide_d19fg_1h5ta_209",
  "visible": "awsui_visible_d19fg_1h5ta_215",
  "icon": "awsui_icon_d19fg_1h5ta_219",
  "breadcrumbs-skeleton": "awsui_breadcrumbs-skeleton_d19fg_1h5ta_225",
  "collapsed-button": "awsui_collapsed-button_d19fg_1h5ta_229",
  "button-icon": "awsui_button-icon_d19fg_1h5ta_311",
  "button-icon-open": "awsui_button-icon-open_d19fg_1h5ta_325",
  "hidden": "awsui_hidden_d19fg_1h5ta_329"
};

// node_modules/@cloudscape-design/components/breadcrumb-group/all-items-dropdown.js
var metadataTypeAttribute = {
  [DATA_ATTR_RESOURCE_TYPE]: "true"
};
var AllItemsDropdown = ({ items, onItemClick, onItemFollow }) => {
  var _a;
  return import_react81.default.createElement(
    import_react81.default.Fragment,
    null,
    import_react81.default.createElement(internal_default9, { items: items.map((item, index) => {
      const isCurrentBreadcrumb = index === items.length - 1;
      return {
        id: index.toString(),
        text: item.text,
        href: isCurrentBreadcrumb ? void 0 : item.href,
        isCurrentBreadcrumb
      };
    }), customTriggerBuilder: getDropdownTrigger((_a = items[items.length - 1]) === null || _a === void 0 ? void 0 : _a.text), linkStyle: true, fullWidth: true, onItemClick, onItemFollow, analyticsMetadataTransformer: (metadata) => {
      var _a2, _b;
      if ((_a2 = metadata.detail) === null || _a2 === void 0 ? void 0 : _a2.id) {
        delete metadata.detail.id;
      }
      if ((_b = metadata.detail) === null || _b === void 0 ? void 0 : _b.position) {
        metadata.detail.position = `${parseInt(metadata.detail.position, 10) + 1}`;
      }
      return metadata;
    } }),
    items.length > 1 && import_react81.default.createElement("span", Object.assign({ className: styles_css_default38.hidden }, metadataTypeAttribute), items[1].text)
  );
};
var getDropdownTrigger = (currentPage) => ({ ariaLabel, triggerRef, testUtilsClass, isOpen, onClick }) => {
  const metadataAttributes = {
    [DATA_ATTR_FUNNEL_KEY]: FUNNEL_KEY_FUNNEL_NAME
  };
  return import_react81.default.createElement(
    "button",
    Object.assign({ ref: triggerRef }, metadataAttributes, { className: clsx_m_default(styles_css_default38["collapsed-button"], testUtilsClass), onClick: (event) => {
      event.preventDefault();
      onClick();
    }, "aria-expanded": isOpen, "aria-haspopup": true, "aria-label": ariaLabel, formAction: "none" }),
    import_react81.default.createElement(internal_default, { name: "caret-down-filled", className: spinWhenOpen(styles_css_default38, "button-icon", isOpen) }),
    import_react81.default.createElement("span", null, currentPage)
  );
};

// node_modules/@cloudscape-design/components/breadcrumb-group/item/item.js
var import_react83 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/utils.js
var getEventDetail = (item) => ({
  item,
  text: item.text,
  href: item.href
});
var MIN_BREADCRUMB_WIDTH = 70;
var ELLIPSIS_WIDTH = 50;
var getItemsDisplayProperties = (itemsWidths, navWidth) => {
  const widthsWithFinalCollapsed = [...itemsWidths];
  widthsWithFinalCollapsed[itemsWidths.length - 1] = Math.min(itemsWidths[itemsWidths.length - 1], MIN_BREADCRUMB_WIDTH);
  return {
    collapsed: computeNumberOfCollapsedItems(widthsWithFinalCollapsed, navWidth)
  };
};
var computeNumberOfCollapsedItems = (itemWidths, navWidth) => {
  if (typeof navWidth !== "number") {
    return 0;
  }
  let usedWidth = itemWidths.reduce((acc, width) => acc + width, 0);
  let collapsedItems = 0;
  while (collapsedItems < itemWidths.length - 1) {
    if (usedWidth <= navWidth) {
      break;
    }
    collapsedItems += 1;
    usedWidth = usedWidth - itemWidths[collapsedItems];
    if (collapsedItems === 1) {
      usedWidth += ELLIPSIS_WIDTH;
    }
  }
  return collapsedItems;
};

// node_modules/@cloudscape-design/components/breadcrumb-group/item/funnel.js
var import_react82 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/breadcrumb-group/analytics-metadata/styles.scoped.css";
var styles_css_default39 = {
  "breadcrumb-item": "awsui_breadcrumb-item_1c68o_b6unx_5"
};

// node_modules/@cloudscape-design/components/breadcrumb-group/item/funnel.js
var FunnelBreadcrumbItem = import_react82.default.forwardRef(({ className: className2, text, itemIndex, totalCount, disableAnalytics }, ref) => {
  const funnelAttributes = {};
  if (!disableAnalytics) {
    if (itemIndex === totalCount - 1) {
      funnelAttributes[DATA_ATTR_FUNNEL_KEY] = FUNNEL_KEY_FUNNEL_NAME;
    }
    if (itemIndex === 1) {
      funnelAttributes[DATA_ATTR_RESOURCE_TYPE] = "true";
    }
  }
  return import_react82.default.createElement("span", Object.assign({}, funnelAttributes, { className: clsx_m_default(className2, !disableAnalytics && styles_css_default39["breadcrumb-item"]), ref }), text);
});

// node_modules/@cloudscape-design/components/breadcrumb-group/item/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/breadcrumb-group/item/styles.scoped.css";
var styles_css_default40 = {
  "link": "awsui_link_1kosq_k3g2h_145",
  "breadcrumb": "awsui_breadcrumb_1kosq_k3g2h_149",
  "ghost-breadcrumb": "awsui_ghost-breadcrumb_1kosq_k3g2h_150",
  "icon": "awsui_icon_1kosq_k3g2h_153",
  "anchor": "awsui_anchor_1kosq_k3g2h_159",
  "text": "awsui_text_1kosq_k3g2h_206",
  "last": "awsui_last_1kosq_k3g2h_225"
};

// node_modules/@cloudscape-design/components/breadcrumb-group/item/item.js
var BreadcrumbItemWithPopover = ({ item, isLast, anchorAttributes, itemAttributes, children }) => {
  const [showTooltip, setShowTooltip] = (0, import_react83.useState)(false);
  const textRef = (0, import_react83.useRef)(null);
  return import_react83.default.createElement(
    Item,
    Object.assign({ ref: textRef, isLast, onFocus: () => {
      setShowTooltip(true);
    }, onBlur: () => setShowTooltip(false), onMouseEnter: () => {
      setShowTooltip(true);
    }, onMouseLeave: () => setShowTooltip(false), anchorAttributes }, itemAttributes),
    children,
    showTooltip && import_react83.default.createElement(Tooltip, { trackRef: textRef, value: item.text, size: "medium", onDismiss: () => setShowTooltip(false) })
  );
};
var Item = import_react83.default.forwardRef((_a, ref) => {
  var { anchorAttributes, children, isLast } = _a, itemAttributes = __rest(_a, ["anchorAttributes", "children", "isLast"]);
  return isLast ? import_react83.default.createElement("span", Object.assign({ ref, className: styles_css_default40.anchor }, itemAttributes), children) : import_react83.default.createElement("a", Object.assign({ ref, className: styles_css_default40.anchor }, itemAttributes, anchorAttributes), children);
});
function BreadcrumbItem({ item, itemIndex, totalCount, onClick, onFollow, isGhost = false, isTruncated = false }) {
  const isLast = itemIndex === totalCount - 1;
  const preventDefault3 = (event) => event.preventDefault();
  const onClickHandler = (event) => {
    if (isPlainLeftClick(event)) {
      fireCancelableEvent(onFollow, getEventDetail(item), event);
    }
    fireCancelableEvent(onClick, getEventDetail(item), event);
  };
  const anchorAttributes = {
    href: item.href || "#",
    onClick: isLast ? preventDefault3 : onClickHandler,
    tabIndex: 0
  };
  const itemAttributes = {};
  if (isGhost) {
    anchorAttributes.tabIndex = -1;
  }
  if (isLast && !isGhost) {
    itemAttributes["aria-current"] = "page";
    itemAttributes["aria-disabled"] = true;
    itemAttributes.tabIndex = 0;
    itemAttributes.role = "link";
  }
  const breadcrumbItem = import_react83.default.createElement(FunnelBreadcrumbItem, { className: styles_css_default40.text, itemIndex, totalCount, text: item.text, disableAnalytics: isGhost });
  return import_react83.default.createElement(
    "div",
    { className: clsx_m_default(!isGhost && styles_css_default40.breadcrumb, isGhost && styles_css_default40["ghost-breadcrumb"], isLast && styles_css_default40.last) },
    isTruncated && !isGhost ? import_react83.default.createElement(BreadcrumbItemWithPopover, { item, isLast, anchorAttributes, itemAttributes }, breadcrumbItem) : import_react83.default.createElement(Item, Object.assign({ isLast, anchorAttributes }, itemAttributes), breadcrumbItem),
    !isLast ? import_react83.default.createElement(
      "span",
      { className: styles_css_default40.icon },
      import_react83.default.createElement(internal_default, { name: "angle-right" })
    ) : null
  );
}

// node_modules/@cloudscape-design/components/breadcrumb-group/skeleton.js
var import_react84 = __toESM(require_react());
var BreadcrumbGroupSkeleton = import_react84.default.forwardRef(({ items }, ref) => import_react84.default.createElement("div", { ref, className: styles_css_default38["breadcrumbs-skeleton"] }, items.map((item, index) => import_react84.default.createElement(FunnelBreadcrumbItem, { itemIndex: index, totalCount: items.length, text: item.text, key: index }))));

// node_modules/@cloudscape-design/components/breadcrumb-group/implementation.js
var DEFAULT_EXPAND_ARIA_LABEL = "Show path";
var getEllipsisDropdownTrigger = ({ ariaLabel, triggerRef, testUtilsClass, isOpen, onClick }) => {
  return import_react85.default.createElement(InternalButton, { ref: triggerRef, className: testUtilsClass, onClick: (event) => {
    event.preventDefault();
    onClick();
  }, ariaExpanded: isOpen, "aria-haspopup": true, ariaLabel, variant: "breadcrumb-group", formAction: "none" }, "...");
};
var EllipsisDropdown = ({ ariaLabel, dropdownItems, onDropdownItemClick, onDropdownItemFollow, visible }) => {
  var _a;
  const i18n = useInternalI18n("breadcrumb-group");
  return import_react85.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default38.ellipsis, visible && styles_css_default38.visible) },
    import_react85.default.createElement(internal_default9, { ariaLabel: (_a = i18n("expandAriaLabel", ariaLabel)) !== null && _a !== void 0 ? _a : DEFAULT_EXPAND_ARIA_LABEL, items: dropdownItems, onItemClick: onDropdownItemClick, onItemFollow: onDropdownItemFollow, customTriggerBuilder: getEllipsisDropdownTrigger, linkStyle: true, analyticsMetadataTransformer: (metadata) => {
      var _a2, _b;
      if ((_a2 = metadata.detail) === null || _a2 === void 0 ? void 0 : _a2.id) {
        delete metadata.detail.id;
      }
      if ((_b = metadata.detail) === null || _b === void 0 ? void 0 : _b.position) {
        metadata.detail.position = `${parseInt(metadata.detail.position, 10) + 1}`;
      }
      return metadata;
    } }),
    import_react85.default.createElement(
      "span",
      { className: styles_css_default38.icon },
      import_react85.default.createElement(internal_default, { name: "angle-right" })
    )
  );
};
var areArrayEqual = (first, second2) => {
  if (first.length !== second2.length) {
    return false;
  }
  return first.every((item, index) => item === second2[index]);
};
function BreadcrumbGroupImplementation(_a) {
  var { items = [], ariaLabel, expandAriaLabel, onClick, onFollow, __internalRootRef, __injectAnalyticsComponentMetadata } = _a, props2 = __rest(_a, ["items", "ariaLabel", "expandAriaLabel", "onClick", "onFollow", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  for (const item of items) {
    checkSafeUrl("BreadcrumbGroup", item.href);
  }
  const baseProps = getBaseProps(props2);
  const [navWidth, navRef] = useContainerQuery((rect) => rect.borderBoxWidth);
  const mergedRef = useMergeRefs(navRef, __internalRootRef);
  const itemsRefs = (0, import_react85.useRef)({ ghost: {}, real: {} });
  const setBreadcrumb = (type, index, node) => {
    if (node) {
      itemsRefs.current[type][index] = node;
    } else {
      delete itemsRefs.current[type][index];
    }
  };
  const [itemsWidths, setItemsWidths] = (0, import_react85.useState)({ ghost: [], real: [] });
  (0, import_react85.useEffect)(() => {
    if (itemsRefs.current) {
      const newItemsWidths = { ghost: [], real: [] };
      for (const node of Object.values(itemsRefs.current.ghost)) {
        const width = getLogicalBoundingClientRect(node).inlineSize;
        newItemsWidths.ghost.push(width);
      }
      for (const node of Object.values(itemsRefs.current.real)) {
        const width = getLogicalBoundingClientRect(node).inlineSize;
        newItemsWidths.real.push(width);
      }
      setItemsWidths((oldWidths) => {
        if (!areArrayEqual(newItemsWidths.ghost, oldWidths.ghost) || !areArrayEqual(newItemsWidths.real, oldWidths.real)) {
          return newItemsWidths;
        } else {
          return oldWidths;
        }
      });
    }
  }, [items, navWidth]);
  const { collapsed } = getItemsDisplayProperties(itemsWidths.ghost, navWidth);
  let breadcrumbItems = items.map((item, index) => {
    const isLast = index === items.length - 1;
    const isDisplayed = index === 0 || index > collapsed;
    const clickAnalyticsMetadata = {
      action: "click",
      detail: {
        position: `${index + 1}`,
        label: `.${styles_css_default39["breadcrumb-item"]}`,
        href: item.href || ""
      }
    };
    return import_react85.default.createElement(
      "li",
      Object.assign({ className: clsx_m_default(styles_css_default38.item, !isDisplayed && styles_css_default38.hide), key: index }, isLast ? {} : getAnalyticsMetadataAttribute(clickAnalyticsMetadata), { ref: (node) => setBreadcrumb("real", `${index}`, node) }),
      import_react85.default.createElement(BreadcrumbItem, { item, onClick, onFollow, itemIndex: index, totalCount: items.length, isTruncated: itemsWidths.ghost[index] - itemsWidths.real[index] > 0 })
    );
  });
  const hiddenBreadcrumbItems = items.map((item, index) => import_react85.default.createElement(
    "li",
    { className: styles_css_default38["ghost-item"], key: index, ref: (node) => setBreadcrumb("ghost", `${index}`, node) },
    import_react85.default.createElement(BreadcrumbItem, { item, itemIndex: index, totalCount: items.length, isGhost: true })
  ));
  const getEventItem = (e3) => {
    const { id } = e3.detail;
    return items[parseInt(id)];
  };
  if (breadcrumbItems.length >= 2) {
    const dropdownItems = items.slice(1, 1 + collapsed).map((item, index) => ({
      id: (index + 1).toString(),
      text: item.text,
      href: item.href || "#"
    }));
    breadcrumbItems = [
      breadcrumbItems[0],
      import_react85.default.createElement(EllipsisDropdown, { key: "ellipsis", visible: collapsed > 0, ariaLabel: expandAriaLabel, dropdownItems, onDropdownItemClick: (e3) => fireCancelableEvent(onClick, getEventDetail(getEventItem(e3)), e3), onDropdownItemFollow: (e3) => fireCancelableEvent(onFollow, getEventDetail(getEventItem(e3)), e3) }),
      ...breadcrumbItems.slice(1)
    ];
  }
  const componentAnalyticsMetadata2 = {
    name: "awsui.BreadcrumbGroup",
    label: { root: "self" }
  };
  return import_react85.default.createElement(
    "nav",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default38["breadcrumb-group"], baseProps.className), "aria-label": ariaLabel || void 0, ref: mergedRef }, __injectAnalyticsComponentMetadata ? Object.assign({}, getAnalyticsMetadataAttribute({
      component: componentAnalyticsMetadata2
    })) : {}),
    collapsed > 0 && collapsed === items.length - 1 ? import_react85.default.createElement(AllItemsDropdown, { items, onItemClick: (e3) => e3.detail.id !== (items.length - 1).toString() && fireCancelableEvent(onClick, getEventDetail(getEventItem(e3)), e3), onItemFollow: (e3) => e3.detail.id !== (items.length - 1).toString() && fireCancelableEvent(onFollow, getEventDetail(getEventItem(e3)), e3) }) : import_react85.default.createElement("ol", { className: styles_css_default38["breadcrumb-group-list"] }, breadcrumbItems),
    import_react85.default.createElement("ol", { className: clsx_m_default(styles_css_default38["breadcrumb-group-list"], styles_css_default38.ghost), "aria-hidden": true, tabIndex: -1 }, hiddenBreadcrumbItems)
  );
}
var createWidgetizedBreadcrumbGroup = createWidgetizedComponent(BreadcrumbGroupImplementation, BreadcrumbGroupSkeleton);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/breadcrumbs/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/breadcrumbs/styles.scoped.css";
var styles_css_default41 = {
  "breadcrumbs-own": "awsui_breadcrumbs-own_ete58_yonx9_5",
  "breadcrumbs-discovered": "awsui_breadcrumbs-discovered_ete58_yonx9_5"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/breadcrumbs/index.js
function BreadcrumbsSlot({ ownBreadcrumbs, discoveredBreadcrumbs }) {
  return import_react86.default.createElement(
    BreadcrumbsSlotContext.Provider,
    { value: { isInToolbar: true } },
    import_react86.default.createElement("div", { className: styles_css_default41["breadcrumbs-own"] }, ownBreadcrumbs),
    discoveredBreadcrumbs && import_react86.default.createElement(
      "div",
      { className: styles_css_default41["breadcrumbs-discovered"] },
      import_react86.default.createElement(BreadcrumbGroupImplementation, Object.assign({}, discoveredBreadcrumbs, { "data-awsui-discovered-breadcrumbs": true, __injectAnalyticsComponentMetadata: true }))
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/slot-skeletons.js
var ToolbarSkeleton = import_react87.default.forwardRef(({ appLayoutInternals }, ref) => import_react87.default.createElement(
  ToolbarSlot,
  { ref },
  import_react87.default.createElement(BreadcrumbsSlot, { ownBreadcrumbs: appLayoutInternals.breadcrumbs, discoveredBreadcrumbs: appLayoutInternals.discoveredBreadcrumbs })
));
var NotificationsSkeleton = import_react87.default.forwardRef((props2, ref) => import_react87.default.createElement(NotificationsSlot, { ref }));

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/notifications/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/notifications/styles.scoped.css";
var styles_css_default42 = {
  "sticky-notifications": "awsui_sticky-notifications_154bi_yk7p7_9",
  "sticky-notifications-with-background": "awsui_sticky-notifications-with-background_154bi_yk7p7_13",
  "has-notifications-content": "awsui_has-notifications-content_154bi_yk7p7_17"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/notifications/index.js
function AppLayoutNotificationsImplementation({ appLayoutInternals, children }) {
  const { ariaLabels, stickyNotifications, setNotificationsHeight, verticalOffsets } = appLayoutInternals;
  const [hasNotificationsContent, setHasNotificationsContent] = (0, import_react88.useState)(false);
  const rootRef = (0, import_react88.useRef)(null);
  useResizeObserver(rootRef, (entry) => {
    const hasContent = entry.contentBoxHeight > 0;
    setNotificationsHeight(hasContent ? entry.borderBoxHeight : 0);
    setHasNotificationsContent(hasContent);
  });
  (0, import_react88.useEffect)(() => {
    return () => {
      setNotificationsHeight(0);
    };
  }, []);
  return import_react88.default.createElement(
    NotificationsSlot,
    { ref: rootRef, className: clsx_m_default(appLayoutInternals.headerVariant === "high-contrast" && highContrastHeaderClassName, stickyNotifications && styles_css_default42["sticky-notifications"], hasNotificationsContent && styles_css_default42["has-notifications-content"], appLayoutInternals.headerVariant !== "high-contrast" && styles_css_default42["sticky-notifications-with-background"]), style: {
      insetBlockStart: stickyNotifications ? verticalOffsets.notifications : void 0
    } },
    import_react88.default.createElement("div", { className: styles_css_default12.notifications, role: "region", "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.notifications }, children)
  );
}
var createWidgetizedAppLayoutNotifications = createWidgetizedComponent(AppLayoutNotificationsImplementation, NotificationsSkeleton);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/split-panel/index.js
var import_react89 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/split-panel/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/split-panel/styles.scoped.css";
var styles_css_default43 = {
  "split-panel-side": "awsui_split-panel-side_j4v3w_1dcwh_145"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/split-panel/index.js
function AppLayoutSplitPanelDrawerSideImplementation({ children, appLayoutInternals, splitPanelInternals }) {
  const { splitPanelControlId, placement, verticalOffsets, isMobile, splitPanelAnimationDisabled } = appLayoutInternals;
  const { drawerTopOffset, drawerHeight } = getDrawerStyles(verticalOffsets, isMobile, placement);
  return import_react89.default.createElement(
    SplitPanelProvider,
    Object.assign({}, splitPanelInternals, { animationDisabled: splitPanelAnimationDisabled }),
    import_react89.default.createElement("section", { id: splitPanelControlId, className: styles_css_default43["split-panel-side"], style: {
      blockSize: drawerHeight,
      insetBlockStart: drawerTopOffset
    } }, children)
  );
}
function AppLayoutSplitPanelDrawerBottomImplementation({ children, splitPanelInternals, appLayoutInternals }) {
  const { splitPanelControlId, splitPanelAnimationDisabled } = appLayoutInternals;
  return import_react89.default.createElement(
    SplitPanelProvider,
    Object.assign({}, splitPanelInternals, { animationDisabled: splitPanelAnimationDisabled }),
    import_react89.default.createElement("section", { id: splitPanelControlId }, children)
  );
}
var createWidgetizedAppLayoutSplitPanelDrawerSide = createWidgetizedComponent(AppLayoutSplitPanelDrawerSideImplementation);
var createWidgetizedAppLayoutSplitPanelDrawerBottom = createWidgetizedComponent(AppLayoutSplitPanelDrawerBottomImplementation);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/index.js
var import_react92 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/drawer-triggers.js
var import_react91 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/trigger-button/index.js
var import_react90 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/trigger-button/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/trigger-button/styles.scoped.css";
var styles_css_default44 = {
  "trigger": "awsui_trigger_lpshu_1xloi_145",
  "trigger-with-badge": "awsui_trigger-with-badge_lpshu_1xloi_157",
  "selected": "awsui_selected_lpshu_1xloi_175",
  "trigger-wrapper": "awsui_trigger-wrapper_lpshu_1xloi_186",
  "dot": "awsui_dot_lpshu_1xloi_211"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/trigger-button/index.js
function TriggerButton2({ ariaLabel, className: className2, iconName, iconSvg, ariaExpanded, ariaControls, onClick, testId, disabled = false, badge, selected = false, hasTooltip = false, tooltipText, hasOpenDrawer = false, isMobile = false, isForPreviousActiveDrawer = false, isForSplitPanel = false }, ref) {
  const containerRef = (0, import_react90.useRef)(null);
  const tooltipValue = tooltipText ? tooltipText : ariaLabel ? ariaLabel : "";
  const [showTooltip, setShowTooltip] = (0, import_react90.useState)(false);
  const [suppressTooltip, setSupressTooltip] = (0, import_react90.useState)(false);
  const handleTriggerClick = (event) => {
    event.stopPropagation();
    setShowTooltip(false);
    setSupressTooltip(true);
    onClick(event);
  };
  const handleBlur = (keepSupressed = false) => {
    setSupressTooltip(keepSupressed);
    setShowTooltip(false);
  };
  const handlePointerEnter = () => {
    setSupressTooltip(false);
    setShowTooltip(true);
  };
  const handleOnFocus = (0, import_react90.useCallback)((event) => {
    var _a;
    let shouldShowTooltip = false;
    const eventWithRelatedTarget = event;
    const relatedTarget = eventWithRelatedTarget === null || eventWithRelatedTarget === void 0 ? void 0 : eventWithRelatedTarget.relatedTarget;
    const isFromAnotherTrigger = ((_a = relatedTarget === null || relatedTarget === void 0 ? void 0 : relatedTarget.dataset) === null || _a === void 0 ? void 0 : _a.shiftFocus) === "awsui-layout-drawer-trigger";
    if (isForSplitPanel && !!relatedTarget || // relatedTarget is null when split panel is closed
    !isForSplitPanel && (isFromAnotherTrigger || // for key navigation from another trigger button
    !isForPreviousActiveDrawer)) {
      shouldShowTooltip = true;
    }
    setSupressTooltip(!shouldShowTooltip);
    setShowTooltip(true);
  }, [
    // To assert reference equality check
    isForPreviousActiveDrawer,
    isForSplitPanel
  ]);
  const tooltipVisible = (0, import_react90.useMemo)(() => {
    return hasTooltip && showTooltip && !suppressTooltip && !!(containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) && tooltipValue && !(isMobile && hasOpenDrawer);
  }, [hasTooltip, showTooltip, containerRef, tooltipValue, isMobile, hasOpenDrawer, suppressTooltip]);
  (0, import_react90.useEffect)(() => {
    if (hasTooltip && tooltipValue) {
      const close = () => {
        setShowTooltip(false);
        setSupressTooltip(false);
      };
      const shouldCloseTooltip = (event) => {
        var _a;
        if (event.target && containerRef && ((_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
          return false;
        }
        return true;
      };
      const handlePointerDownEvent = (event) => {
        if (shouldCloseTooltip(event)) {
          close();
        }
      };
      const handleKeyDownEvent = (event) => {
        if (event.key === "Escape") {
          close();
        }
      };
      const wrapperDiv = containerRef.current;
      if (wrapperDiv) {
        const controller = new AbortController();
        wrapperDiv.addEventListener("pointerdown", handlePointerDownEvent, { signal: controller.signal });
        wrapperDiv.addEventListener("keydown", handleKeyDownEvent, { signal: controller.signal });
        return () => {
          controller.abort();
        };
      }
    }
  }, [containerRef, hasTooltip, tooltipValue]);
  const triggerEventMetadata = {
    action: selected ? "close" : "open",
    detail: { label: { root: "self" } }
  };
  return import_react90.default.createElement(
    "div",
    Object.assign({ ref: containerRef }, hasTooltip && {
      onPointerEnter: () => handlePointerEnter(),
      onPointerLeave: () => handleBlur(true),
      onFocus: (e3) => handleOnFocus(e3),
      onBlur: () => handleBlur(true)
    }, { className: styles_css_default44["trigger-wrapper"] }),
    import_react90.default.createElement("button", Object.assign({ "aria-expanded": ariaExpanded, "aria-controls": ariaControls, "aria-haspopup": true, "aria-label": ariaLabel, "aria-disabled": disabled, disabled, className: clsx_m_default(styles_css_default44.trigger, {
      [styles_css_default44.selected]: selected,
      [styles_css_default44["trigger-with-badge"]]: badge,
      [styles_css_default12["drawers-trigger-with-badge"]]: badge
    }, className2), onClick: handleTriggerClick, ref, type: "button", "data-testid": testId, "data-shift-focus": "awsui-layout-drawer-trigger" }, getAnalyticsMetadataAttribute(triggerEventMetadata)), (iconName || iconSvg) && import_react90.default.createElement(internal_default, { name: iconName, svg: iconSvg })),
    badge && import_react90.default.createElement("div", { className: styles_css_default44.dot }),
    tooltipVisible && import_react90.default.createElement(Tooltip, { trackRef: containerRef, value: tooltipValue, className: styles_css_default12["trigger-tooltip"], onDismiss: () => {
      setShowTooltip(false);
      setSupressTooltip(false);
    } })
  );
}
var trigger_button_default2 = import_react90.default.forwardRef(TriggerButton2);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/styles.scoped.css";
var styles_css_default45 = {
  "universal-toolbar": "awsui_universal-toolbar_1kzri_1ig2m_153",
  "disable-body-scroll": "awsui_disable-body-scroll_1kzri_1ig2m_174",
  "toolbar-container": "awsui_toolbar-container_1kzri_1ig2m_177",
  "universal-toolbar-nav": "awsui_universal-toolbar-nav_1kzri_1ig2m_186",
  "universal-toolbar-breadcrumbs": "awsui_universal-toolbar-breadcrumbs_1kzri_1ig2m_190",
  "universal-toolbar-drawers": "awsui_universal-toolbar-drawers_1kzri_1ig2m_195",
  "drawers-desktop-triggers-container": "awsui_drawers-desktop-triggers-container_1kzri_1ig2m_203",
  "drawers-mobile-triggers-container": "awsui_drawers-mobile-triggers-container_1kzri_1ig2m_204",
  "drawers-trigger-content": "awsui_drawers-trigger-content_1kzri_1ig2m_247",
  "group-divider": "awsui_group-divider_1kzri_1ig2m_257",
  "drawers-trigger": "awsui_drawers-trigger_1kzri_1ig2m_247",
  "block-body-scroll": "awsui_block-body-scroll_1kzri_1ig2m_270"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/drawer-triggers.js
function DrawerTriggers({ ariaLabels, activeDrawerId, drawers, drawersFocusRef, onActiveDrawerChange, splitPanelOpen, splitPanelPosition = "bottom", splitPanelFocusRef, splitPanelToggleProps, onSplitPanelToggle, disabled, activeGlobalDrawersIds, globalDrawers, globalDrawersFocusControl, onActiveGlobalDrawersChange, expandedDrawerId, setExpandedDrawerId }) {
  const isMobile = useMobile();
  const hasMultipleTriggers = drawers.length > 1;
  const previousActiveLocalDrawerId = (0, import_react91.useRef)(activeDrawerId);
  const previousActiveGlobalDrawersIds = (0, import_react91.useRef)(activeGlobalDrawersIds);
  const [containerWidth, triggersContainerRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  if (!drawers.length && !globalDrawers.length && !splitPanelToggleProps) {
    return null;
  }
  if (activeDrawerId) {
    previousActiveLocalDrawerId.current = activeDrawerId;
  }
  if (activeGlobalDrawersIds.length) {
    previousActiveGlobalDrawersIds.current = activeGlobalDrawersIds;
  }
  const getIndexOfOverflowItem = () => {
    if (isMobile) {
      return 2;
    }
    if (containerWidth) {
      const ITEM_WIDTH = 50;
      const overflowSpot = containerWidth;
      const index = Math.floor(overflowSpot / ITEM_WIDTH);
      let splitPanelItem = 0;
      if (splitPanelToggleProps) {
        splitPanelItem = 1;
      }
      return index - splitPanelItem;
    }
    return 0;
  };
  const indexOfOverflowItem = getIndexOfOverflowItem();
  const { visibleItems, overflowItems } = splitItems([...drawers, ...globalDrawers], indexOfOverflowItem, activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : null);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;
  const globalDrawersStartIndex = drawers.length;
  const hasOpenDrawer = !!activeDrawerId || splitPanelPosition === "side" && splitPanelOpen;
  const splitPanelResolvedPosition = splitPanelToggleProps === null || splitPanelToggleProps === void 0 ? void 0 : splitPanelToggleProps.position;
  const exitExpandedMode = () => {
    if (setExpandedDrawerId) {
      setExpandedDrawerId(null);
    }
  };
  return import_react91.default.createElement(
    "aside",
    { className: styles_css_default45[`drawers-${isMobile ? "mobile" : "desktop"}-triggers-container`], "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, ref: triggersContainerRef, role: "region" },
    import_react91.default.createElement(
      "div",
      { className: styles_css_default45["drawers-trigger-content"], "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "toolbar", "aria-orientation": "horizontal" },
      splitPanelToggleProps && import_react91.default.createElement(
        import_react91.default.Fragment,
        null,
        import_react91.default.createElement(trigger_button_default2, { ariaLabel: splitPanelToggleProps.ariaLabel, ariaControls: splitPanelToggleProps.controlId, ariaExpanded: !expandedDrawerId && splitPanelToggleProps.active, className: clsx_m_default(styles_css_default45["drawers-trigger"], styles_css_default12["drawers-trigger"], styles_css_default34["open-button"]), iconName: splitPanelResolvedPosition === "side" ? "view-vertical" : "view-horizontal", onClick: () => {
          exitExpandedMode();
          if (!!expandedDrawerId && splitPanelToggleProps.active) {
            return;
          }
          onSplitPanelToggle === null || onSplitPanelToggle === void 0 ? void 0 : onSplitPanelToggle();
        }, selected: !expandedDrawerId && splitPanelToggleProps.active, ref: splitPanelResolvedPosition === "side" ? splitPanelFocusRef : void 0, hasTooltip: true, isMobile, isForSplitPanel: true, disabled }),
        hasMultipleTriggers ? import_react91.default.createElement("div", { className: styles_css_default45["group-divider"] }) : null
      ),
      visibleItems.slice(0, globalDrawersStartIndex).map((item) => {
        var _a, _b;
        const isForPreviousActiveDrawer = (previousActiveLocalDrawerId === null || previousActiveLocalDrawerId === void 0 ? void 0 : previousActiveLocalDrawerId.current) === item.id;
        const selected = !expandedDrawerId && item.id === activeDrawerId;
        return import_react91.default.createElement(trigger_button_default2, { ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, ariaExpanded: selected, ariaControls: activeDrawerId === item.id ? item.id : void 0, className: clsx_m_default(styles_css_default45["drawers-trigger"], !toolsOnlyMode && styles_css_default12["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default12["tools-toggle"]), iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, key: item.id, onClick: () => {
          exitExpandedMode();
          if (!!expandedDrawerId && activeDrawerId === item.id) {
            return;
          }
          onActiveDrawerChange === null || onActiveDrawerChange === void 0 ? void 0 : onActiveDrawerChange(activeDrawerId !== item.id ? item.id : null, { initiatedByUserAction: true });
        }, ref: item.id === previousActiveLocalDrawerId.current ? drawersFocusRef : void 0, selected, badge: item.badge, testId: `awsui-app-layout-trigger-${item.id}`, hasTooltip: true, hasOpenDrawer, tooltipText: (_b = item.ariaLabels) === null || _b === void 0 ? void 0 : _b.drawerName, isForPreviousActiveDrawer, isMobile, disabled });
      }),
      globalDrawersStartIndex > 0 && visibleItems.length > globalDrawersStartIndex && import_react91.default.createElement("div", { className: styles_css_default45["group-divider"] }),
      visibleItems.slice(globalDrawersStartIndex).map((item) => {
        var _a, _b, _c;
        const isForPreviousActiveDrawer = previousActiveGlobalDrawersIds === null || previousActiveGlobalDrawersIds === void 0 ? void 0 : previousActiveGlobalDrawersIds.current.includes(item.id);
        const selected = activeGlobalDrawersIds.includes(item.id) && (!expandedDrawerId || item.id === expandedDrawerId);
        return import_react91.default.createElement(trigger_button_default2, { ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, ariaExpanded: selected, ariaControls: selected ? item.id : void 0, className: clsx_m_default(styles_css_default45["drawers-trigger"], styles_css_default12["drawers-trigger"], styles_css_default12["drawers-trigger-global"]), iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, key: item.id, onClick: () => {
          exitExpandedMode();
          if (!!expandedDrawerId && item.id !== expandedDrawerId && activeGlobalDrawersIds.includes(item.id)) {
            return;
          }
          onActiveGlobalDrawersChange === null || onActiveGlobalDrawersChange === void 0 ? void 0 : onActiveGlobalDrawersChange(item.id, { initiatedByUserAction: true });
        }, ref: (_b = globalDrawersFocusControl === null || globalDrawersFocusControl === void 0 ? void 0 : globalDrawersFocusControl.refs[item.id]) === null || _b === void 0 ? void 0 : _b.toggle, selected, badge: item.badge, testId: `awsui-app-layout-trigger-${item.id}`, hasTooltip: true, hasOpenDrawer, tooltipText: (_c = item.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName, isForPreviousActiveDrawer, isMobile, disabled });
      }),
      overflowItems.length > 0 && import_react91.default.createElement(OverflowMenu, { items: overflowItems.map((item) => Object.assign(Object.assign({}, item), { active: activeGlobalDrawersIds.includes(item.id) && (!expandedDrawerId || item.id === expandedDrawerId) })), ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow, customTriggerBuilder: ({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => {
        return import_react91.default.createElement(trigger_button_default2, { ref: triggerRef, ariaLabel, ariaExpanded, badge: overflowMenuHasBadge, className: clsx_m_default(styles_css_default45["drawers-trigger"], styles_css_default12["drawers-trigger"], styles_css_default12["drawers-trigger-global"], testUtilsClass), iconName: "ellipsis", onClick, disabled });
      }, onItemClick: (event) => {
        const id = event.detail.id;
        exitExpandedMode();
        if (globalDrawers.find((drawer) => drawer.id === id)) {
          if (!!expandedDrawerId && id !== expandedDrawerId && activeGlobalDrawersIds.includes(id)) {
            return;
          }
          onActiveGlobalDrawersChange === null || onActiveGlobalDrawersChange === void 0 ? void 0 : onActiveGlobalDrawersChange(id, { initiatedByUserAction: true });
        } else {
          onActiveDrawerChange === null || onActiveDrawerChange === void 0 ? void 0 : onActiveDrawerChange(event.detail.id, { initiatedByUserAction: true });
        }
      }, globalDrawersStartIndex: globalDrawersStartIndex - indexOfOverflowItem })
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/index.js
function AppLayoutToolbarImplementation({
  appLayoutInternals,
  // the value could be undefined if this component is loaded as a widget by a different app layout version
  // not testable in a single-version setup
  toolbarProps = {}
}) {
  var _a, _b, _c;
  const { breadcrumbs, discoveredBreadcrumbs, verticalOffsets, isMobile, setToolbarHeight } = appLayoutInternals;
  const { ariaLabels, activeDrawerId, drawers, drawersFocusRef, onActiveDrawerChange, globalDrawersFocusControl, globalDrawers, activeGlobalDrawersIds, onActiveGlobalDrawersChange, hasNavigation, navigationOpen, navigationFocusRef, onNavigationToggle, hasSplitPanel, splitPanelFocusRef, splitPanelToggleProps, onSplitPanelToggle, expandedDrawerId, setExpandedDrawerId } = toolbarProps;
  const drawerExpandedMode = !!expandedDrawerId;
  const ref = (0, import_react92.useRef)(null);
  useResizeObserver(ref, (entry) => setToolbarHeight(entry.borderBoxHeight));
  (0, import_react92.useEffect)(() => {
    return () => {
      setToolbarHeight(0);
    };
  }, []);
  const anyPanelOpenInMobile = !!isMobile && (!!activeDrawerId || !!navigationOpen && !!hasNavigation);
  (0, import_react92.useEffect)(() => {
    if (anyPanelOpenInMobile) {
      document.body.classList.add(styles_css_default45["block-body-scroll"]);
    } else {
      document.body.classList.remove(styles_css_default45["block-body-scroll"]);
    }
    return () => {
      document.body.classList.remove(styles_css_default45["block-body-scroll"]);
    };
  }, [anyPanelOpenInMobile]);
  const navLandmarkAttributes = navigationOpen ? { role: "presentation" } : { role: "navigation", "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation };
  return import_react92.default.createElement(
    ToolbarSlot,
    { ref, className: clsx_m_default(styles_css_default45["universal-toolbar"], styles_css_default12.toolbar, {
      [styles_css_default12["mobile-bar"]]: isMobile
    }), style: {
      insetBlockStart: verticalOffsets.toolbar
    } },
    import_react92.default.createElement(
      "div",
      { className: styles_css_default45["toolbar-container"] },
      hasNavigation && import_react92.default.createElement(
        "nav",
        Object.assign({}, navLandmarkAttributes, { className: clsx_m_default(styles_css_default45["universal-toolbar-nav"]) }),
        import_react92.default.createElement(trigger_button_default2, { ariaLabel: (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _a !== void 0 ? _a : void 0, ariaExpanded: !drawerExpandedMode && navigationOpen, iconName: "menu", className: styles_css_default12["navigation-toggle"], onClick: () => {
          if (setExpandedDrawerId) {
            setExpandedDrawerId(null);
          }
          if (navigationOpen && expandedDrawerId) {
            return;
          }
          onNavigationToggle === null || onNavigationToggle === void 0 ? void 0 : onNavigationToggle(!navigationOpen);
        }, ref: navigationFocusRef, selected: !drawerExpandedMode && navigationOpen, disabled: anyPanelOpenInMobile })
      ),
      (breadcrumbs || discoveredBreadcrumbs) && import_react92.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default45["universal-toolbar-breadcrumbs"], styles_css_default12.breadcrumbs) },
        import_react92.default.createElement(BreadcrumbsSlot, { ownBreadcrumbs: appLayoutInternals.breadcrumbs, discoveredBreadcrumbs: appLayoutInternals.discoveredBreadcrumbs })
      ),
      ((drawers === null || drawers === void 0 ? void 0 : drawers.length) || (globalDrawers === null || globalDrawers === void 0 ? void 0 : globalDrawers.length) || hasSplitPanel && (splitPanelToggleProps === null || splitPanelToggleProps === void 0 ? void 0 : splitPanelToggleProps.displayed)) && import_react92.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default45["universal-toolbar-drawers"]) },
        import_react92.default.createElement(DrawerTriggers, { ariaLabels, activeDrawerId: activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : null, drawers: (_b = drawers === null || drawers === void 0 ? void 0 : drawers.filter((item) => !!item.trigger)) !== null && _b !== void 0 ? _b : [], drawersFocusRef, onActiveDrawerChange, splitPanelToggleProps: (splitPanelToggleProps === null || splitPanelToggleProps === void 0 ? void 0 : splitPanelToggleProps.displayed) ? splitPanelToggleProps : void 0, splitPanelFocusRef, onSplitPanelToggle, disabled: anyPanelOpenInMobile, globalDrawersFocusControl, globalDrawers: (_c = globalDrawers === null || globalDrawers === void 0 ? void 0 : globalDrawers.filter((item) => !!item.trigger)) !== null && _c !== void 0 ? _c : [], activeGlobalDrawersIds: activeGlobalDrawersIds !== null && activeGlobalDrawersIds !== void 0 ? activeGlobalDrawersIds : [], onActiveGlobalDrawersChange, expandedDrawerId, setExpandedDrawerId })
      )
    )
  );
}
var createWidgetizedAppLayoutToolbar = createWidgetizedComponent(AppLayoutToolbarImplementation, ToolbarSkeleton);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/internal.js
var AppLayoutNavigation = createWidgetizedAppLayoutNavigation();
var AppLayoutDrawer = createWidgetizedAppLayoutDrawer();
var AppLayoutGlobalDrawers = createWidgetizedAppLayoutGlobalDrawers();
var AppLayoutNotifications = createWidgetizedAppLayoutNotifications();
var AppLayoutToolbar = createWidgetizedAppLayoutToolbar();
var AppLayoutSplitPanelBottom = createWidgetizedAppLayoutSplitPanelDrawerBottom();
var AppLayoutSplitPanelSide = createWidgetizedAppLayoutSplitPanelDrawerSide();

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/multi-layout.js
var import_react93 = __toESM(require_react());
function checkAlreadyExists(value, propName) {
  if (value) {
    warnOnce("AppLayout", `Another app layout instance on this page already defines ${propName} property. This instance will be ignored.`);
    return true;
  }
  return false;
}
function mergeProps(ownProps, additionalProps) {
  var _a, _b;
  const toolbar = {};
  for (const props2 of [ownProps, ...additionalProps]) {
    toolbar.ariaLabels = Object.assign((_a = toolbar.ariaLabels) !== null && _a !== void 0 ? _a : {}, props2.ariaLabels);
    if (props2.drawers && props2.drawers.some((drawer) => drawer.trigger) && !checkAlreadyExists(!!toolbar.drawers, "tools or drawers")) {
      toolbar.drawers = props2.drawers;
      toolbar.activeDrawerId = props2.activeDrawerId;
      toolbar.drawersFocusRef = props2.drawersFocusRef;
      toolbar.onActiveDrawerChange = props2.onActiveDrawerChange;
    }
    if (props2.globalDrawers && !checkAlreadyExists(!!toolbar.globalDrawers, "globalDrawers")) {
      toolbar.globalDrawersFocusControl = props2.globalDrawersFocusControl;
      toolbar.globalDrawers = props2.globalDrawers;
      toolbar.activeGlobalDrawersIds = props2.activeGlobalDrawersIds;
      toolbar.onActiveGlobalDrawersChange = props2.onActiveGlobalDrawersChange;
    }
    if (props2.navigation && !checkAlreadyExists(!!toolbar.hasNavigation, "navigation")) {
      toolbar.hasNavigation = true;
      toolbar.navigationOpen = props2.navigationOpen;
      toolbar.navigationFocusRef = props2.navigationFocusRef;
      toolbar.onNavigationToggle = props2.onNavigationToggle;
    }
    if (props2.splitPanel && ((_b = props2.splitPanelToggleProps) === null || _b === void 0 ? void 0 : _b.displayed) && !checkAlreadyExists(!!toolbar.hasSplitPanel, "splitPanel")) {
      toolbar.hasSplitPanel = true;
      toolbar.splitPanelFocusRef = props2.splitPanelFocusRef;
      toolbar.splitPanelToggleProps = props2.splitPanelToggleProps;
      toolbar.onSplitPanelToggle = props2.onSplitPanelToggle;
    }
    if (props2.breadcrumbs && !checkAlreadyExists(!!toolbar.hasBreadcrumbsPortal, "hasBreadcrumbsPortal")) {
      toolbar.hasBreadcrumbsPortal = true;
    }
    if (props2.expandedDrawerId && !checkAlreadyExists(!!toolbar.expandedDrawerId, "expandedDrawerId")) {
      toolbar.expandedDrawerId = props2.expandedDrawerId;
      toolbar.setExpandedDrawerId = props2.setExpandedDrawerId;
    }
  }
  return Object.keys(toolbar).filter((key2) => key2 !== "ariaLabels").length > 0 ? toolbar : null;
}
function useMultiAppLayout(props2, isEnabled) {
  const [registration, setRegistration] = (0, import_react93.useState)(null);
  const { forceDeduplicationType } = props2;
  const isToolbar = useAppLayoutFlagEnabled();
  (0, import_react93.useLayoutEffect)(() => {
    if (!isEnabled || forceDeduplicationType === "suspended" || !isToolbar) {
      return;
    }
    if (forceDeduplicationType === "off") {
      setRegistration({ type: "primary", discoveredProps: [] });
      return;
    }
    return awsuiPluginsInternal.appLayoutWidget.register(forceDeduplicationType, (props3) => setRegistration(props3));
  }, [forceDeduplicationType, isEnabled, isToolbar]);
  (0, import_react93.useLayoutEffect)(() => {
    if ((registration === null || registration === void 0 ? void 0 : registration.type) === "secondary") {
      registration.update(props2);
    }
  });
  if (!isToolbar) {
    return {
      registered: "primary",
      // mergeProps is needed here because the toolbar's behavior depends on reconciliation logic
      // in this function. For example, navigation trigger visibility
      toolbarProps: mergeProps(props2, [])
    };
  }
  return {
    registered: !!(registration === null || registration === void 0 ? void 0 : registration.type),
    toolbarProps: (registration === null || registration === void 0 ? void 0 : registration.type) === "primary" ? mergeProps(props2, registration.discoveredProps) : null
  };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/index.js
var import_react94 = __toESM(require_react());
var contentTypeCustomWidths = ["dashboard", "cards", "table"];
var componentAnalyticsMetadata = {
  name: "awsui.AppLayoutToolbar",
  label: {
    selector: "h1",
    root: "body"
  }
};
var SkeletonLayout = import_react94.default.forwardRef(({ style, notifications, headerVariant, contentHeader, content, navigation, navigationOpen, navigationWidth, tools, globalTools, toolsOpen, toolsWidth, toolbar, sideSplitPanel, bottomSplitPanel, splitPanelOpen, placement, contentType, maxContentWidth, disableContentPaddings, globalToolsOpen, navigationAnimationDisabled, isNested, drawerExpandedMode, drawerExpandedModeInChildLayout }, ref) => {
  const isMobile = useMobile();
  const isMaxWidth = maxContentWidth === Number.MAX_VALUE || maxContentWidth === Number.MAX_SAFE_INTEGER;
  const anyPanelOpen = navigationOpen || toolsOpen;
  return import_react94.default.createElement(
    VisualContext,
    { contextName: "app-layout-toolbar" },
    import_react94.default.createElement(
      "div",
      Object.assign({ ref, className: clsx_m_default(styles_css_default36.root, styles_css_default12.root, {
        [styles_css_default36["has-adaptive-widths-default"]]: !contentTypeCustomWidths.includes(contentType),
        [styles_css_default36["has-adaptive-widths-dashboard"]]: contentType === "dashboard",
        [styles_css_default36["drawer-expanded-mode"]]: drawerExpandedMode
      }), style: {
        minBlockSize: isNested ? "100%" : `calc(100vh - ${placement.insetBlockStart + placement.insetBlockEnd}px)`,
        [custom_css_properties_default.maxContentWidth]: isMaxWidth ? "100%" : maxContentWidth ? `${maxContentWidth}px` : "",
        [custom_css_properties_default.navigationWidth]: `${navigationWidth}px`,
        [custom_css_properties_default.toolsWidth]: `${toolsWidth}px`
      } }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata })),
      toolbar,
      navigation && import_react94.default.createElement("div", { className: clsx_m_default(styles_css_default36.navigation, !navigationOpen && styles_css_default36["panel-hidden"], toolsOpen && styles_css_default36["unfocusable-mobile"], !navigationAnimationDisabled && styles_css_default28["with-motion-horizontal"], (drawerExpandedMode || drawerExpandedModeInChildLayout) && styles_css_default36.hidden) }, navigation),
      import_react94.default.createElement(
        "main",
        { className: clsx_m_default(styles_css_default36["main-landmark"], isMobile && anyPanelOpen && styles_css_default36["unfocusable-mobile"], drawerExpandedMode && styles_css_default36.hidden) },
        notifications && import_react94.default.createElement("div", { className: clsx_m_default(styles_css_default36["notifications-background"], headerVariant === "high-contrast" && highContrastHeaderClassName) }),
        notifications,
        import_react94.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default36.main, { [styles_css_default36["main-disable-paddings"]]: disableContentPaddings }), style },
          contentHeader && import_react94.default.createElement("div", { className: styles_css_default36["content-header"] }, contentHeader),
          import_react94.default.createElement("div", { className: clsx_m_default(styles_css_default36.content, styles_css_default12.content) }, content)
        ),
        bottomSplitPanel && import_react94.default.createElement("div", { className: clsx_m_default(styles_css_default36["split-panel-bottom"]), style: { insetBlockEnd: placement.insetBlockEnd } }, bottomSplitPanel)
      ),
      sideSplitPanel && import_react94.default.createElement("div", { className: clsx_m_default(styles_css_default36["split-panel-side"], !splitPanelOpen && styles_css_default36["panel-hidden"], drawerExpandedMode && styles_css_default36.hidden) }, sideSplitPanel),
      import_react94.default.createElement("div", { className: clsx_m_default(styles_css_default36.tools, !toolsOpen && styles_css_default36["panel-hidden"], styles_css_default28["with-motion-horizontal"], navigationOpen && !toolsOpen && styles_css_default36["unfocusable-mobile"], toolsOpen && styles_css_default36["tools-open"], drawerExpandedMode && styles_css_default36.hidden) }, tools),
      import_react94.default.createElement("div", { className: clsx_m_default(styles_css_default36["global-tools"], !globalToolsOpen && styles_css_default36["panel-hidden"]) }, globalTools)
    )
  );
});

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/index.js
var AppLayoutVisualRefreshToolbar = import_react95.default.forwardRef((_a, forwardRef27) => {
  var _b, _c;
  var { ariaLabels, contentHeader, content, navigationOpen, navigationWidth, navigation, navigationHide, onNavigationChange, tools, toolsOpen: controlledToolsOpen, onToolsChange, toolsHide, toolsWidth, contentType, headerVariant, breadcrumbs, notifications, stickyNotifications, splitPanelPreferences: controlledSplitPanelPreferences, splitPanelOpen: controlledSplitPanelOpen, splitPanel, splitPanelSize: controlledSplitPanelSize, onSplitPanelToggle, onSplitPanelResize, onSplitPanelPreferencesChange, disableContentPaddings, minContentWidth, maxContentWidth, placement, navigationTriggerHide } = _a, rest = __rest(_a, ["ariaLabels", "contentHeader", "content", "navigationOpen", "navigationWidth", "navigation", "navigationHide", "onNavigationChange", "tools", "toolsOpen", "onToolsChange", "toolsHide", "toolsWidth", "contentType", "headerVariant", "breadcrumbs", "notifications", "stickyNotifications", "splitPanelPreferences", "splitPanelOpen", "splitPanel", "splitPanelSize", "onSplitPanelToggle", "onSplitPanelResize", "onSplitPanelPreferencesChange", "disableContentPaddings", "minContentWidth", "maxContentWidth", "placement", "navigationTriggerHide"]);
  const isMobile = useMobile();
  const { __embeddedViewMode: embeddedViewMode, __forceDeduplicationType: forceDeduplicationType } = rest;
  const splitPanelControlId = useUniqueId("split-panel");
  const [toolbarState, setToolbarState] = (0, import_react95.useState)("show");
  const [toolbarHeight, setToolbarHeight] = (0, import_react95.useState)(0);
  const [notificationsHeight, setNotificationsHeight] = (0, import_react95.useState)(0);
  const [navigationAnimationDisabled, setNavigationAnimationDisabled] = (0, import_react95.useState)(true);
  const [splitPanelAnimationDisabled, setSplitPanelAnimationDisabled] = (0, import_react95.useState)(true);
  const [isNested, setIsNested] = (0, import_react95.useState)(false);
  const rootRef = (0, import_react95.useRef)(null);
  const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, false, {
    componentName: "AppLayout",
    controlledProp: "toolsOpen",
    changeHandler: "onToolsChange"
  });
  const onToolsToggle = (open) => {
    setToolsOpen(open);
    drawersFocusControl.setFocus();
    fireNonCancelableEvent(onToolsChange, { open });
  };
  const onGlobalDrawerFocus = (drawerId, open) => {
    globalDrawersFocusControl.setFocus({ force: true, drawerId, open });
  };
  const onAddNewActiveDrawer = (drawerId) => {
    var _a2, _b2;
    if (activeDrawer && (drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === drawerId))) {
      return;
    }
    const combinedDrawers = [...drawers || [], ...globalDrawers];
    const newDrawer = combinedDrawers.find((drawer) => drawer.id === drawerId);
    if (!newDrawer) {
      return;
    }
    const newDrawerSize = Math.min((_b2 = (_a2 = newDrawer.defaultSize) !== null && _a2 !== void 0 ? _a2 : drawerSizes[drawerId]) !== null && _b2 !== void 0 ? _b2 : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);
    const availableSpaceForNewDrawer = resizableSpaceAvailable - totalActiveDrawersMinSize;
    if (availableSpaceForNewDrawer >= newDrawerSize) {
      return;
    }
    closeFirstDrawer();
  };
  const { drawers, activeDrawer, minDrawerSize, minGlobalDrawersSizes, activeDrawerSize, ariaLabelsWithDrawers, globalDrawers, activeGlobalDrawers, activeGlobalDrawersIds, activeGlobalDrawersSizes, drawerSizes, drawersOpenQueue, onActiveDrawerChange, onActiveDrawerResize, onActiveGlobalDrawersChange, expandedDrawerId, setExpandedDrawerId } = useDrawers(Object.assign(Object.assign({}, rest), { onGlobalDrawerFocus, onAddNewActiveDrawer }), ariaLabels, {
    ariaLabels,
    toolsHide,
    toolsOpen,
    tools,
    toolsWidth,
    onToolsToggle
  });
  const onActiveDrawerChangeHandler = (drawerId, params = { initiatedByUserAction: true }) => {
    onActiveDrawerChange(drawerId, params);
    drawersFocusControl.setFocus();
  };
  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {
    componentName: "AppLayout",
    controlledProp: "splitPanelOpen",
    changeHandler: "onSplitPanelToggle"
  });
  const onSplitPanelToggleHandler = () => {
    setSplitPanelAnimationDisabled(false);
    setSplitPanelOpen(!splitPanelOpen);
    splitPanelFocusControl.setLastInteraction({ type: splitPanelOpen ? "close" : "open" });
    fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });
  };
  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  });
  const onSplitPanelPreferencesChangeHandler = (detail) => {
    setSplitPanelPreferences(detail);
    splitPanelFocusControl.setLastInteraction({ type: "position" });
    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);
  };
  const [splitPanelSize = 0, setSplitPanelSize] = useControllable(controlledSplitPanelSize, onSplitPanelResize, getSplitPanelDefaultSize((_b = splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) !== null && _b !== void 0 ? _b : "bottom"), { componentName: "AppLayout", controlledProp: "splitPanelSize", changeHandler: "onSplitPanelResize" });
  const [splitPanelReportedSize, setSplitPanelReportedSize] = (0, import_react95.useState)(0);
  const [splitPanelHeaderBlockSize, setSplitPanelHeaderBlockSize] = (0, import_react95.useState)(0);
  const onSplitPanelResizeHandler = (size) => {
    setSplitPanelSize(size);
    fireNonCancelableEvent(onSplitPanelResize, { size });
  };
  const [splitPanelToggleConfig, setSplitPanelToggleConfig] = (0, import_react95.useState)({
    ariaLabel: void 0,
    displayed: false
  });
  const globalDrawersFocusControl = useMultipleFocusControl(true, activeGlobalDrawersIds);
  const drawersFocusControl = useFocusControl(!!(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id), true, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id);
  const navigationFocusControl = useFocusControl(navigationOpen, navigationTriggerHide);
  const splitPanelFocusControl = useSplitPanelFocusControl([splitPanelPreferences, splitPanelOpen]);
  const onNavigationToggle = useStableCallback((open) => {
    setNavigationAnimationDisabled(false);
    navigationFocusControl.setFocus();
    fireNonCancelableEvent(onNavigationChange, { open });
  });
  (0, import_react95.useImperativeHandle)(forwardRef27, () => ({
    closeNavigationIfNecessary: () => isMobile && onNavigationToggle(false),
    openTools: () => onToolsToggle(true),
    focusToolsClose: () => drawersFocusControl.setFocus(true),
    focusActiveDrawer: () => drawersFocusControl.setFocus(true),
    focusSplitPanel: () => {
      var _a2;
      return (_a2 = splitPanelFocusControl.refs.slider.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    },
    focusNavigation: () => navigationFocusControl.setFocus(true)
  }));
  const resolvedStickyNotifications = !!stickyNotifications && !isMobile;
  const resolvedNavigation = navigationHide ? null : navigation || import_react95.default.createElement(import_react95.default.Fragment, null);
  const resolvedNavigationOpen = !!resolvedNavigation && navigationOpen;
  const { maxDrawerSize, maxSplitPanelSize, splitPanelForcedPosition, splitPanelPosition, maxGlobalDrawersSizes, resizableSpaceAvailable } = computeHorizontalLayout({
    activeDrawerSize: activeDrawer ? activeDrawerSize : 0,
    splitPanelSize,
    minContentWidth,
    navigationOpen: resolvedNavigationOpen,
    navigationWidth,
    placement,
    splitPanelOpen,
    splitPanelPosition: splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position,
    isMobile,
    activeGlobalDrawersSizes
  });
  const { ref: intersectionObserverRef, isIntersecting } = useIntersectionObserver({ initialState: true });
  const { registered, toolbarProps } = useMultiAppLayout({
    forceDeduplicationType,
    ariaLabels: ariaLabelsWithDrawers,
    navigation: resolvedNavigation && !navigationTriggerHide,
    navigationOpen: resolvedNavigationOpen,
    onNavigationToggle,
    navigationFocusRef: navigationFocusControl.refs.toggle,
    breadcrumbs,
    activeDrawerId: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== null && _c !== void 0 ? _c : null,
    // only pass it down if there are non-empty drawers or tools
    drawers: (drawers === null || drawers === void 0 ? void 0 : drawers.length) || !toolsHide ? drawers : void 0,
    globalDrawersFocusControl,
    globalDrawers: (globalDrawers === null || globalDrawers === void 0 ? void 0 : globalDrawers.length) ? globalDrawers : void 0,
    activeGlobalDrawersIds,
    onActiveGlobalDrawersChange,
    onActiveDrawerChange: onActiveDrawerChangeHandler,
    drawersFocusRef: drawersFocusControl.refs.toggle,
    splitPanel,
    splitPanelToggleProps: Object.assign(Object.assign({}, splitPanelToggleConfig), { active: splitPanelOpen, controlId: splitPanelControlId, position: splitPanelPosition }),
    splitPanelFocusRef: splitPanelFocusControl.refs.toggle,
    onSplitPanelToggle: onSplitPanelToggleHandler,
    expandedDrawerId,
    setExpandedDrawerId
  }, isIntersecting);
  const hasToolbar = !embeddedViewMode && !!toolbarProps;
  const discoveredBreadcrumbs = useGetGlobalBreadcrumbs(hasToolbar && !breadcrumbs);
  const verticalOffsets = computeVerticalLayout({
    topOffset: placement.insetBlockStart,
    hasVisibleToolbar: hasToolbar && toolbarState !== "hide",
    notificationsHeight: notificationsHeight !== null && notificationsHeight !== void 0 ? notificationsHeight : 0,
    toolbarHeight: toolbarHeight !== null && toolbarHeight !== void 0 ? toolbarHeight : 0,
    stickyNotifications: resolvedStickyNotifications
  });
  const appLayoutInternals = {
    ariaLabels: ariaLabelsWithDrawers,
    headerVariant,
    isMobile,
    breadcrumbs,
    discoveredBreadcrumbs,
    stickyNotifications: resolvedStickyNotifications,
    navigationOpen: resolvedNavigationOpen,
    navigation: resolvedNavigation,
    navigationFocusControl,
    activeDrawer,
    activeDrawerSize,
    minDrawerSize,
    maxDrawerSize,
    minGlobalDrawersSizes,
    maxGlobalDrawersSizes,
    drawers,
    globalDrawers,
    activeGlobalDrawers,
    activeGlobalDrawersIds,
    activeGlobalDrawersSizes,
    onActiveGlobalDrawersChange,
    drawersFocusControl,
    globalDrawersFocusControl,
    splitPanelPosition,
    splitPanelToggleConfig,
    splitPanelOpen,
    splitPanelControlId,
    splitPanelFocusControl,
    placement,
    toolbarState,
    setToolbarState,
    verticalOffsets,
    drawersOpenQueue,
    setToolbarHeight,
    setNotificationsHeight,
    onSplitPanelToggle: onSplitPanelToggleHandler,
    onNavigationToggle,
    onActiveDrawerChange: onActiveDrawerChangeHandler,
    onActiveDrawerResize,
    splitPanelAnimationDisabled,
    expandedDrawerId,
    setExpandedDrawerId
  };
  const splitPanelInternals = {
    bottomOffset: 0,
    getMaxHeight: () => {
      const availableHeight = document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;
      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;
    },
    maxWidth: maxSplitPanelSize,
    isForcedPosition: splitPanelForcedPosition,
    isOpen: splitPanelOpen,
    leftOffset: 0,
    onPreferencesChange: onSplitPanelPreferencesChangeHandler,
    onResize: onSplitPanelResizeHandler,
    onToggle: onSplitPanelToggleHandler,
    position: splitPanelPosition,
    reportSize: (size) => setSplitPanelReportedSize(size),
    reportHeaderHeight: (size) => setSplitPanelHeaderBlockSize(size),
    headerHeight: splitPanelHeaderBlockSize,
    rightOffset: 0,
    size: splitPanelSize,
    topOffset: 0,
    setSplitPanelToggle: setSplitPanelToggleConfig,
    refs: splitPanelFocusControl.refs
  };
  const closeFirstDrawer = useStableCallback(() => {
    const drawerToClose = drawersOpenQueue[drawersOpenQueue.length - 1];
    if (activeDrawer && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) === drawerToClose) {
      onActiveDrawerChange(null, { initiatedByUserAction: true });
    } else if (activeGlobalDrawersIds.includes(drawerToClose)) {
      onActiveGlobalDrawersChange(drawerToClose, { initiatedByUserAction: true });
    }
  });
  (0, import_react95.useEffect)(() => {
    if (isMobile) {
      onNavigationToggle(false);
    }
  }, [isMobile]);
  const getTotalActiveDrawersMinSize = () => {
    var _a2;
    const combinedDrawers = [...drawers || [], ...globalDrawers];
    let result = activeGlobalDrawersIds.map((activeDrawerId) => {
      var _a3, _b2;
      return Math.min((_b2 = (_a3 = combinedDrawers.find((drawer) => drawer.id === activeDrawerId)) === null || _a3 === void 0 ? void 0 : _a3.defaultSize) !== null && _b2 !== void 0 ? _b2 : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);
    }).reduce((acc, curr) => acc + curr, 0);
    if (activeDrawer) {
      result += Math.min((_a2 = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _a2 !== void 0 ? _a2 : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);
    }
    return result;
  };
  const totalActiveDrawersMinSize = getTotalActiveDrawersMinSize();
  (0, import_react95.useEffect)(() => {
    if (isMobile) {
      return;
    }
    const activeNavigationWidth = !navigationHide && navigationOpen ? navigationWidth : 0;
    const scrollWidth = activeNavigationWidth + CONTENT_PADDING + totalActiveDrawersMinSize;
    const hasHorizontalScroll = scrollWidth > placement.inlineSize;
    if (hasHorizontalScroll) {
      if (!navigationHide && navigationOpen) {
        onNavigationToggle(false);
        return;
      }
      closeFirstDrawer();
    }
  }, [
    totalActiveDrawersMinSize,
    closeFirstDrawer,
    isMobile,
    navigationHide,
    navigationOpen,
    navigationWidth,
    onNavigationToggle,
    placement.inlineSize
  ]);
  const getIsNestedInAppLayout = (element) => {
    var _a2;
    let currentElement = (_a2 = element === null || element === void 0 ? void 0 : element.parentElement) !== null && _a2 !== void 0 ? _a2 : null;
    while (currentElement) {
      if (getComputedStyle(currentElement).getPropertyValue(global_vars_default.stickyVerticalTopOffset)) {
        return true;
      }
      currentElement = currentElement.parentElement;
    }
    return false;
  };
  (0, import_react95.useLayoutEffect)(() => {
    if (!hasToolbar) {
      setIsNested(getIsNestedInAppLayout(rootRef.current));
    }
  }, [hasToolbar]);
  const splitPanelOffsets = computeSplitPanelOffsets({
    placement,
    hasSplitPanel: !!splitPanel,
    splitPanelOpen,
    splitPanelPosition,
    splitPanelFullHeight: splitPanelReportedSize,
    splitPanelHeaderHeight: splitPanelHeaderBlockSize
  });
  return import_react95.default.createElement(
    AppLayoutVisibilityContext.Provider,
    { value: isIntersecting },
    !hasToolbar && breadcrumbs ? import_react95.default.createElement(ScreenreaderOnly, null, breadcrumbs) : null,
    import_react95.default.createElement(SkeletonLayout, {
      ref: useMergeRefs(intersectionObserverRef, rootRef),
      isNested,
      // Why not use drawerExpandedMode={!!expandedDrawerId || !!toolbarProps?.expandedDrawerId} instead?
      // Because in nested layouts, the parent layout hides its main content area,
      // which means the child layout isn't rendered at all in that case
      drawerExpandedModeInChildLayout: !!(toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.expandedDrawerId),
      drawerExpandedMode: !!expandedDrawerId,
      style: Object.assign(Object.assign({ paddingBlockEnd: splitPanelOffsets.mainContentPaddingBlockEnd }, hasToolbar || !isNested ? {
        [global_vars_default.stickyVerticalTopOffset]: `${verticalOffsets.header}px`,
        [global_vars_default.stickyVerticalBottomOffset]: `${splitPanelOffsets.stickyVerticalBottomOffset}px`
      } : {}), !isMobile ? { minWidth: `${minContentWidth}px` } : {}),
      toolbar: hasToolbar && import_react95.default.createElement(AppLayoutToolbar, { appLayoutInternals, toolbarProps }),
      notifications: notifications && import_react95.default.createElement(AppLayoutNotifications, { appLayoutInternals }, notifications),
      headerVariant,
      contentHeader,
      // delay rendering the content until registration of this instance is complete
      content: registered ? content : null,
      navigation: resolvedNavigation && import_react95.default.createElement(AppLayoutNavigation, { appLayoutInternals }),
      navigationOpen: resolvedNavigationOpen,
      navigationWidth,
      navigationAnimationDisabled,
      tools: drawers && drawers.length > 0 && import_react95.default.createElement(AppLayoutDrawer, { appLayoutInternals }),
      globalTools: import_react95.default.createElement(
        ActiveDrawersContext.Provider,
        { value: activeGlobalDrawersIds },
        import_react95.default.createElement(AppLayoutGlobalDrawers, { appLayoutInternals })
      ),
      globalToolsOpen: !!activeGlobalDrawersIds.length,
      toolsOpen: !!activeDrawer,
      toolsWidth: activeDrawerSize,
      sideSplitPanel: splitPanelPosition === "side" && import_react95.default.createElement(AppLayoutSplitPanelSide, { appLayoutInternals, splitPanelInternals }, splitPanel),
      bottomSplitPanel: splitPanelPosition === "bottom" && import_react95.default.createElement(AppLayoutSplitPanelBottom, { appLayoutInternals, splitPanelInternals }, splitPanel),
      splitPanelOpen,
      placement,
      contentType,
      maxContentWidth,
      disableContentPaddings
    })
  );
});
var visual_refresh_toolbar_default = AppLayoutVisualRefreshToolbar;

// node_modules/@cloudscape-design/components/app-layout/internal.js
var AppLayoutInternal = import_react96.default.forwardRef((props2, ref) => {
  const isRefresh = useVisualRefresh();
  const isToolbar = useAppLayoutFlagEnabled();
  if (isRefresh) {
    if (isToolbar) {
      return import_react96.default.createElement(visual_refresh_toolbar_default, Object.assign({ ref }, props2));
    } else {
      return import_react96.default.createElement(visual_refresh_default, Object.assign({ ref }, props2));
    }
  }
  return import_react96.default.createElement(classic_default, Object.assign({ ref }, props2));
});

// node_modules/@cloudscape-design/components/app-layout/utils/use-app-layout-placement.js
var import_react98 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/utils/use-observed-element.js
var import_react97 = __toESM(require_react());
function useObservedElement(rootElementRef, selector) {
  const getElement = (0, import_react97.useCallback)(() => {
    var _a, _b;
    const document2 = (_b = (_a = rootElementRef.current) === null || _a === void 0 ? void 0 : _a.ownerDocument) !== null && _b !== void 0 ? _b : window.document;
    return document2.querySelector(selector);
  }, [rootElementRef, selector]);
  const [height, setHeight] = (0, import_react97.useState)(0);
  useResizeObserver(getElement, (entry) => setHeight(entry.borderBoxHeight));
  return height;
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-app-layout-placement.js
function useAppLayoutPlacement(headerSelector, footerSelector) {
  const mainElementRef = (0, import_react98.useRef)(null);
  const headerHeight = useObservedElement(mainElementRef, headerSelector);
  const footerHeight = useObservedElement(mainElementRef, footerSelector);
  const [offsets, setOffsets] = (0, import_react98.useState)({
    insetInlineStart: 0,
    insetInlineEnd: 0,
    inlineSize: Number.POSITIVE_INFINITY
  });
  const updatePosition = (0, import_react98.useCallback)(() => {
    if (!mainElementRef.current) {
      return;
    }
    const { insetInlineStart, insetInlineEnd, inlineSize } = getLogicalBoundingClientRect(mainElementRef.current);
    if (inlineSize === 0) {
      return;
    }
    setOffsets({ insetInlineStart, insetInlineEnd: inlineSize - insetInlineEnd, inlineSize });
  }, []);
  (0, import_react98.useEffect)(() => {
    window.addEventListener("resize", updatePosition);
    return () => window.removeEventListener("resize", updatePosition);
  }, [updatePosition]);
  useResizeObserver(mainElementRef, updatePosition);
  return [mainElementRef, Object.assign(Object.assign({}, offsets), { insetBlockStart: headerHeight, insetBlockEnd: footerHeight })];
}

// node_modules/@cloudscape-design/components/app-layout/index.js
var AppLayout2 = import_react99.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
  var { contentType = "default", headerSelector = "#b #h", footerSelector = "#b #f", navigationWidth = 280, toolsWidth = 290, maxContentWidth, minContentWidth, navigationOpen: controlledNavigationOpen, onNavigationChange: controlledOnNavigationChange, analyticsMetadata } = _a, rest = __rest(_a, ["contentType", "headerSelector", "footerSelector", "navigationWidth", "toolsWidth", "maxContentWidth", "minContentWidth", "navigationOpen", "onNavigationChange", "analyticsMetadata"]);
  if (isDevelopment2) {
    if (rest.toolsOpen && rest.toolsHide) {
      warnOnce("AppLayout", `You have enabled both the \`toolsOpen\` prop and the \`toolsHide\` prop. This is not supported. Set \`toolsOpen\` to \`false\` when you set \`toolsHide\` to \`true\`.`);
    }
  }
  const { __internalRootRef } = useBaseComponent("AppLayout", {
    props: {
      contentType,
      disableContentPaddings: rest.disableContentPaddings,
      disableBodyScroll: rest.disableBodyScroll,
      navigationWidth,
      navigationHide: rest.navigationHide,
      toolsHide: rest.toolsHide,
      toolsWidth,
      maxContentWidth,
      minContentWidth,
      stickyNotifications: rest.stickyNotifications,
      disableContentHeaderOverlap: rest.disableContentHeaderOverlap
    },
    metadata: {
      drawersCount: (_c = (_b = rest.drawers) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : null,
      hasContentHeader: !!rest.contentHeader
    }
  }, analyticsMetadata);
  const isRefresh = useVisualRefresh();
  const isMobile = useMobile();
  const i18n = useInternalI18n("app-layout");
  const ariaLabels = {
    navigation: i18n("ariaLabels.navigation", (_d = rest.ariaLabels) === null || _d === void 0 ? void 0 : _d.navigation),
    navigationClose: i18n("ariaLabels.navigationClose", (_e = rest.ariaLabels) === null || _e === void 0 ? void 0 : _e.navigationClose),
    navigationToggle: i18n("ariaLabels.navigationToggle", (_f = rest.ariaLabels) === null || _f === void 0 ? void 0 : _f.navigationToggle),
    notifications: i18n("ariaLabels.notifications", (_g = rest.ariaLabels) === null || _g === void 0 ? void 0 : _g.notifications),
    tools: i18n("ariaLabels.tools", (_h = rest.ariaLabels) === null || _h === void 0 ? void 0 : _h.tools),
    toolsClose: i18n("ariaLabels.toolsClose", (_j = rest.ariaLabels) === null || _j === void 0 ? void 0 : _j.toolsClose),
    toolsToggle: i18n("ariaLabels.toolsToggle", (_k = rest.ariaLabels) === null || _k === void 0 ? void 0 : _k.toolsToggle),
    drawers: i18n("ariaLabels.drawers", (_l = rest.ariaLabels) === null || _l === void 0 ? void 0 : _l.drawers),
    drawersOverflow: i18n("ariaLabels.drawersOverflow", (_m = rest.ariaLabels) === null || _m === void 0 ? void 0 : _m.drawersOverflow),
    drawersOverflowWithBadge: i18n("ariaLabels.drawersOverflowWithBadge", (_o = rest.ariaLabels) === null || _o === void 0 ? void 0 : _o.drawersOverflowWithBadge)
  };
  const _p = applyDefaults(contentType, { maxContentWidth, minContentWidth }, isRefresh), { navigationOpen: defaultNavigationOpen } = _p, restDefaults = __rest(_p, ["navigationOpen"]);
  const [navigationOpen = false, setNavigationOpen] = useControllable(controlledNavigationOpen, controlledOnNavigationChange, isMobile ? false : defaultNavigationOpen, { componentName: "AppLayout", controlledProp: "navigationOpen", changeHandler: "onNavigationChange" });
  const onNavigationChange = (event) => {
    setNavigationOpen(event.detail.open);
    controlledOnNavigationChange === null || controlledOnNavigationChange === void 0 ? void 0 : controlledOnNavigationChange(event);
  };
  const [rootRef, placement] = useAppLayoutPlacement(headerSelector, footerSelector);
  const props2 = Object.assign(Object.assign(Object.assign({
    contentType,
    navigationWidth,
    toolsWidth,
    navigationOpen,
    onNavigationChange
  }, restDefaults), rest), {
    ariaLabels,
    placement
  });
  const baseProps = getBaseProps(rest);
  return import_react99.default.createElement(
    "div",
    Object.assign({ ref: useMergeRefs(__internalRootRef, rootRef) }, baseProps),
    import_react99.default.createElement(AppLayoutInternal, Object.assign({ ref }, props2))
  );
});
applyDisplayName(AppLayout2, "AppLayout");
var app_layout_default = AppLayout2;

// node_modules/@cloudscape-design/components/app-layout-toolbar/index.js
var import_react100 = __toESM(require_react());
var AppLayoutToolbar2 = import_react100.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
  var { contentType = "default", headerSelector = "#b #h", footerSelector = "#b #f", navigationWidth = 280, toolsWidth = 290, maxContentWidth, minContentWidth, navigationOpen: controlledNavigationOpen, onNavigationChange: controlledOnNavigationChange, analyticsMetadata } = _a, rest = __rest(_a, ["contentType", "headerSelector", "footerSelector", "navigationWidth", "toolsWidth", "maxContentWidth", "minContentWidth", "navigationOpen", "onNavigationChange", "analyticsMetadata"]);
  const isRefresh = useVisualRefresh();
  if (!isRefresh) {
    throw new Error(`AppLayoutToolbar component is not supported in the Classic theme. Please switch to the Refresh theme. For more details, refer to the documentation.`);
  }
  if (isDevelopment2) {
    if (rest.toolsOpen && rest.toolsHide) {
      warnOnce("AppLayoutToolbar", `You have enabled both the \`toolsOpen\` prop and the \`toolsHide\` prop. This is not supported. Set \`toolsOpen\` to \`false\` when you set \`toolsHide\` to \`true\`.`);
    }
  }
  const { __internalRootRef } = useBaseComponent("AppLayoutToolbar", {
    props: {
      contentType,
      disableContentPaddings: rest.disableContentPaddings,
      navigationWidth,
      navigationHide: rest.navigationHide,
      toolsHide: rest.toolsHide,
      toolsWidth,
      maxContentWidth,
      minContentWidth,
      stickyNotifications: rest.stickyNotifications,
      disableContentHeaderOverlap: rest.disableContentHeaderOverlap,
      navigationTriggerHide: rest.navigationTriggerHide
    },
    metadata: {
      drawersCount: (_c = (_b = rest.drawers) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : null,
      hasContentHeader: !!rest.contentHeader
    }
  }, analyticsMetadata);
  const isMobile = useMobile();
  const i18n = useInternalI18n("app-layout");
  const ariaLabels = {
    navigation: i18n("ariaLabels.navigation", (_d = rest.ariaLabels) === null || _d === void 0 ? void 0 : _d.navigation),
    navigationClose: i18n("ariaLabels.navigationClose", (_e = rest.ariaLabels) === null || _e === void 0 ? void 0 : _e.navigationClose),
    navigationToggle: i18n("ariaLabels.navigationToggle", (_f = rest.ariaLabels) === null || _f === void 0 ? void 0 : _f.navigationToggle),
    notifications: i18n("ariaLabels.notifications", (_g = rest.ariaLabels) === null || _g === void 0 ? void 0 : _g.notifications),
    tools: i18n("ariaLabels.tools", (_h = rest.ariaLabels) === null || _h === void 0 ? void 0 : _h.tools),
    toolsClose: i18n("ariaLabels.toolsClose", (_j = rest.ariaLabels) === null || _j === void 0 ? void 0 : _j.toolsClose),
    toolsToggle: i18n("ariaLabels.toolsToggle", (_k = rest.ariaLabels) === null || _k === void 0 ? void 0 : _k.toolsToggle),
    drawers: i18n("ariaLabels.drawers", (_l = rest.ariaLabels) === null || _l === void 0 ? void 0 : _l.drawers),
    drawersOverflow: i18n("ariaLabels.drawersOverflow", (_m = rest.ariaLabels) === null || _m === void 0 ? void 0 : _m.drawersOverflow),
    drawersOverflowWithBadge: i18n("ariaLabels.drawersOverflowWithBadge", (_o = rest.ariaLabels) === null || _o === void 0 ? void 0 : _o.drawersOverflowWithBadge)
  };
  const _p = applyDefaults(contentType, { maxContentWidth, minContentWidth }, isRefresh), { navigationOpen: defaultNavigationOpen } = _p, restDefaults = __rest(_p, ["navigationOpen"]);
  const [navigationOpen = false, setNavigationOpen] = useControllable(controlledNavigationOpen, controlledOnNavigationChange, isMobile ? false : defaultNavigationOpen, { componentName: "AppLayoutToolbar", controlledProp: "navigationOpen", changeHandler: "onNavigationChange" });
  const onNavigationChange = (event) => {
    setNavigationOpen(event.detail.open);
    controlledOnNavigationChange === null || controlledOnNavigationChange === void 0 ? void 0 : controlledOnNavigationChange(event);
  };
  const [rootRef, placement] = useAppLayoutPlacement(headerSelector, footerSelector);
  const props2 = Object.assign(Object.assign(Object.assign({
    contentType,
    navigationWidth,
    toolsWidth,
    navigationOpen,
    onNavigationChange
  }, restDefaults), rest), {
    ariaLabels,
    placement
  });
  const baseProps = getBaseProps(rest);
  return import_react100.default.createElement(
    AppLayoutToolbarPublicContext.Provider,
    { value: true },
    import_react100.default.createElement(
      "div",
      Object.assign({ ref: useMergeRefs(__internalRootRef, rootRef) }, baseProps),
      import_react100.default.createElement(visual_refresh_toolbar_default, Object.assign({ ref }, props2))
    )
  );
});
applyDisplayName(AppLayoutToolbar2, "AppLayoutToolbar");
var app_layout_toolbar_default = AppLayoutToolbar2;

// node_modules/@cloudscape-design/components/area-chart/index.js
var import_react169 = __toESM(require_react());

// node_modules/@cloudscape-design/components/area-chart/internal.js
var import_react168 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-status-container/index.js
var import_react102 = __toESM(require_react());

// node_modules/@cloudscape-design/components/link/internal.js
var import_react101 = __toESM(require_react());

// node_modules/@cloudscape-design/components/link/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/link/styles.scoped.css";
var styles_css_default46 = {
  "link": "awsui_link_4c84z_1k2o2_145",
  "variant-secondary": "awsui_variant-secondary_4c84z_1k2o2_211",
  "variant-primary": "awsui_variant-primary_4c84z_1k2o2_246",
  "variant-info": "awsui_variant-info_4c84z_1k2o2_279",
  "variant-value-large": "awsui_variant-value-large_4c84z_1k2o2_314",
  "variant-top-navigation": "awsui_variant-top-navigation_4c84z_1k2o2_346",
  "variant-recovery": "awsui_variant-recovery_4c84z_1k2o2_381",
  "button": "awsui_button_4c84z_1k2o2_414",
  "color-inverted": "awsui_color-inverted_4c84z_1k2o2_449",
  "font-size-body-s": "awsui_font-size-body-s_4c84z_1k2o2_470",
  "font-size-body-m": "awsui_font-size-body-m_4c84z_1k2o2_477",
  "font-size-heading-xs": "awsui_font-size-heading-xs_4c84z_1k2o2_483",
  "font-size-heading-s": "awsui_font-size-heading-s_4c84z_1k2o2_489",
  "font-size-heading-m": "awsui_font-size-heading-m_4c84z_1k2o2_496",
  "font-size-heading-l": "awsui_font-size-heading-l_4c84z_1k2o2_503",
  "font-size-heading-xl": "awsui_font-size-heading-xl_4c84z_1k2o2_510",
  "font-size-display-l": "awsui_font-size-display-l_4c84z_1k2o2_517",
  "font-size-inherit": "awsui_font-size-inherit_4c84z_1k2o2_524",
  "icon-wrapper": "awsui_icon-wrapper_4c84z_1k2o2_532",
  "icon": "awsui_icon_4c84z_1k2o2_532"
};

// node_modules/@cloudscape-design/components/link/internal.js
var InternalLink = import_react101.default.forwardRef((_a, ref) => {
  var { variant: providedVariant, fontSize = "body-m", color: color2 = "normal", external = false, target, href, rel, ariaLabel, externalIconAriaLabel, onFollow, onClick, children, __internalRootRef = null } = _a, props2 = __rest(_a, ["variant", "fontSize", "color", "external", "target", "href", "rel", "ariaLabel", "externalIconAriaLabel", "onFollow", "onClick", "children", "__internalRootRef"]);
  checkSafeUrl("Link", href);
  const isButton = !href;
  const { defaultVariant } = (0, import_react101.useContext)(LinkDefaultVariantContext);
  const variant = providedVariant || defaultVariant;
  const specialStyles = ["top-navigation", "link", "recovery"];
  const hasSpecialStyle = specialStyles.indexOf(variant) > -1;
  const i18n = useInternalI18n("link");
  const baseProps = getBaseProps(props2);
  const anchorTarget = target !== null && target !== void 0 ? target : external ? "_blank" : void 0;
  const anchorRel = rel !== null && rel !== void 0 ? rel : anchorTarget === "_blank" ? "noopener noreferrer" : void 0;
  const uniqueId = useUniqueId("link");
  const linkId = useUniqueId("link-self");
  const infoId = useUniqueId("link-info");
  const infoLinkLabelFromContext = (0, import_react101.useContext)(InfoLinkLabelContext);
  const { funnelIdentifier, funnelInteractionId } = useFunnel();
  const { stepIdentifier, stepNumber, stepNameSelector } = useFunnelStep();
  const { subStepIdentifier, subStepSelector, subStepNameSelector } = useFunnelSubStep();
  const fireFunnelEvent = (funnelInteractionId2) => {
    if (variant === "info") {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      FunnelMetrics.helpPanelInteracted({
        funnelIdentifier,
        funnelInteractionId: funnelInteractionId2,
        stepIdentifier,
        stepNumber,
        stepName,
        subStepIdentifier,
        stepNameSelector,
        subStepSelector,
        subStepName,
        subStepNameSelector,
        elementSelector: getFunnelValueSelector(uniqueId),
        subStepAllSelector: getSubStepAllSelector()
      });
    } else if (external) {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      FunnelMetrics.externalLinkInteracted({
        funnelIdentifier,
        funnelInteractionId: funnelInteractionId2,
        stepIdentifier,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepIdentifier,
        subStepSelector,
        subStepName,
        subStepNameSelector,
        elementSelector: getFunnelValueSelector(uniqueId),
        subStepAllSelector: getSubStepAllSelector()
      });
    }
  };
  const fireFollowEvent = (event) => {
    if (funnelInteractionId) {
      fireFunnelEvent(funnelInteractionId);
    }
    fireCancelableEvent(onFollow, { href, external, target: anchorTarget }, event);
  };
  const fireClickEvent = (event) => {
    const { altKey, ctrlKey, metaKey, shiftKey } = event;
    const button = "button" in event ? event.button : 0;
    fireNonCancelableEvent(onClick, { altKey, button, ctrlKey, metaKey, shiftKey });
  };
  const handleLinkClick = (event) => {
    if (isPlainLeftClick(event)) {
      fireFollowEvent(event);
    }
    fireClickEvent(event);
  };
  const handleButtonClick = (event) => {
    fireFollowEvent(event);
    fireClickEvent(event);
  };
  const handleButtonKeyDown = (event) => {
    if (event.keyCode === KeyCode.space || event.keyCode === KeyCode.enter) {
      event.preventDefault();
      fireFollowEvent(event);
      fireClickEvent(event);
    }
  };
  const linkRef = (0, import_react101.useRef)(null);
  const isVisualRefresh = useVisualRefresh();
  useForwardFocus(ref, linkRef);
  const applyButtonStyles = isButton && isVisualRefresh && !hasSpecialStyle;
  const sharedProps = Object.assign(Object.assign({ id: linkId }, baseProps), {
    // https://github.com/microsoft/TypeScript/issues/36659
    ref: useMergeRefs(linkRef, __internalRootRef),
    className: clsx_m_default(styles_css_default46.link, baseProps.className, applyButtonStyles ? styles_css_default46.button : null, styles_css_default46[getVariantStyle(variant)], styles_css_default46[getFontSizeStyle(variant, fontSize)], styles_css_default46[getColorStyle(variant, color2)]),
    "aria-label": ariaLabel,
    "aria-labelledby": void 0,
    [DATA_ATTR_FUNNEL_VALUE]: uniqueId
  });
  if (variant === "info" && infoLinkLabelFromContext && !ariaLabel) {
    sharedProps["aria-labelledby"] = `${sharedProps.id} ${infoId} ${infoLinkLabelFromContext}`;
  }
  const renderedExternalIconAriaLabel = i18n("externalIconAriaLabel", externalIconAriaLabel);
  const content = import_react101.default.createElement(
    import_react101.default.Fragment,
    null,
    children,
    external && import_react101.default.createElement(
      "span",
      { className: styles_css_default46["icon-wrapper"] },
      " ",
      import_react101.default.createElement(
        "span",
        { className: styles_css_default46.icon, "aria-label": renderedExternalIconAriaLabel, role: renderedExternalIconAriaLabel ? "img" : void 0 },
        import_react101.default.createElement(internal_default, { name: "external", size: "inherit" })
      )
    ),
    variant === "info" && import_react101.default.createElement("span", { hidden: true, id: infoId }, ":")
  );
  const { tabIndex } = useSingleTabStopNavigation(linkRef, { tabIndex: isButton ? 0 : void 0 });
  if (isButton) {
    return import_react101.default.createElement("a", Object.assign({}, sharedProps, { role: "button", tabIndex, onKeyDown: handleButtonKeyDown, onClick: handleButtonClick }), content);
  }
  return import_react101.default.createElement("a", Object.assign({}, sharedProps, { tabIndex, target: anchorTarget, rel: anchorRel, href, onClick: handleLinkClick }), content);
});
function getVariantStyle(variant) {
  return `variant-${variant.replace(/^awsui-/, "")}`;
}
function getFontSizeStyle(variant, fontSize) {
  switch (variant) {
    case "info":
      return "font-size-body-s";
    case "awsui-value-large":
      return "font-size-display-l";
    default:
      return `font-size-${fontSize}`;
  }
}
function getColorStyle(variant, color2) {
  return `color-${variant === "info" ? "normal" : color2}`;
}
var internal_default10 = InternalLink;

// node_modules/@cloudscape-design/components/internal/components/chart-status-container/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/chart-status-container/styles.scoped.css";
var styles_css_default47 = {
  "root": "awsui_root_11n0s_1s2zk_9",
  "empty": "awsui_empty_11n0s_1s2zk_13"
};

// node_modules/@cloudscape-design/components/internal/components/chart-status-container/index.js
function getChartStatus({ externalData, visibleData, statusType }) {
  const isEmpty = !visibleData || visibleData.length === 0;
  const isNoMatch = isEmpty && visibleData.length !== externalData.length;
  const showChart = statusType === "finished" && !isEmpty;
  return { isEmpty, isNoMatch, showChart };
}
function ChartStatusContainer({ statusType, errorText, loadingText, recoveryText, noMatch, empty, onRecoveryClick, isNoMatch, isEmpty, showChart }) {
  const i18n = useInternalI18n("[charts]");
  const statusContainer = (0, import_react102.useMemo)(() => {
    const handleRecoveryClick = (event) => {
      event.preventDefault();
      fireNonCancelableEvent(onRecoveryClick);
    };
    if (statusType === "error") {
      const renderedRecoveryText = i18n("recoveryText", recoveryText);
      return import_react102.default.createElement(
        "span",
        null,
        import_react102.default.createElement(StatusIndicator, { type: "error" }, i18n("errorText", errorText)),
        " ",
        !!renderedRecoveryText && !!onRecoveryClick && import_react102.default.createElement(internal_default10, { onFollow: handleRecoveryClick, variant: "recovery" }, renderedRecoveryText)
      );
    }
    if (statusType === "loading") {
      return import_react102.default.createElement(StatusIndicator, { type: "loading" }, i18n("loadingText", loadingText));
    }
    if (isNoMatch) {
      return import_react102.default.createElement("div", { className: styles_css_default47.empty }, noMatch);
    }
    if (isEmpty) {
      return import_react102.default.createElement("div", { className: styles_css_default47.empty }, empty);
    }
  }, [i18n, statusType, onRecoveryClick, isEmpty, isNoMatch, recoveryText, loadingText, errorText, empty, noMatch]);
  return import_react102.default.createElement(
    "div",
    { className: styles_css_default47.root },
    import_react102.default.createElement(internal_default2, null, !showChart && statusContainer)
  );
}

// node_modules/@cloudscape-design/components/internal/components/chart-wrapper/index.js
var import_react103 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-wrapper/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/chart-wrapper/styles.scoped.css";
var styles_css_default48 = {
  "wrapper": "awsui_wrapper_z5mul_rqo6_181",
  "wrapper--fit-height": "awsui_wrapper--fit-height_z5mul_rqo6_214",
  "inner-wrapper--fit-height": "awsui_inner-wrapper--fit-height_z5mul_rqo6_219",
  "has-default-filter": "awsui_has-default-filter_z5mul_rqo6_225",
  "content": "awsui_content_z5mul_rqo6_229",
  "content--reserve-filter": "awsui_content--reserve-filter_z5mul_rqo6_236",
  "content--reserve-legend": "awsui_content--reserve-legend_z5mul_rqo6_240",
  "content--fit-height": "awsui_content--fit-height_z5mul_rqo6_244",
  "filter-container": "awsui_filter-container_z5mul_rqo6_248"
};

// node_modules/@cloudscape-design/components/internal/components/chart-wrapper/index.js
var ChartWrapper = (0, import_react103.forwardRef)((_a, ref) => {
  var { defaultFilter, additionalFilters, reserveFilterSpace, reserveLegendSpace, chartStatus, chart, legend, onBlur, contentClassName, contentMinHeight, fitHeight } = _a, props2 = __rest(_a, ["defaultFilter", "additionalFilters", "reserveFilterSpace", "reserveLegendSpace", "chartStatus", "chart", "legend", "onBlur", "contentClassName", "contentMinHeight", "fitHeight"]);
  const baseProps = getBaseProps(props2);
  const filtersNode = (defaultFilter || additionalFilters) && import_react103.default.createElement(
    InternalBox,
    { className: styles_css_default48["filter-container"], margin: { bottom: "l" } },
    import_react103.default.createElement(
      internal_default4,
      { size: "l", direction: "horizontal", className: clsx_m_default({ [styles_css_default48["has-default-filter"]]: !!defaultFilter }) },
      defaultFilter,
      additionalFilters
    )
  );
  const legendNode = legend && import_react103.default.createElement(InternalBox, { margin: { top: "m" } }, legend);
  if (fitHeight) {
    return import_react103.default.createElement(
      "div",
      Object.assign({ ref }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default48.wrapper, styles_css_default48["wrapper--fit-height"]), onBlur }),
      import_react103.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default48["inner-wrapper"], styles_css_default48["inner-wrapper--fit-height"]) },
        filtersNode,
        import_react103.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default48.content, contentClassName, {
            [styles_css_default48["content--reserve-filter"]]: reserveFilterSpace,
            [styles_css_default48["content--reserve-legend"]]: reserveLegendSpace,
            [styles_css_default48["content--fit-height"]]: true
          }) },
          chartStatus,
          chart
        ),
        legendNode
      )
    );
  }
  return import_react103.default.createElement(
    "div",
    Object.assign({ ref }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default48.wrapper), onBlur }),
    filtersNode,
    import_react103.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default48.content, contentClassName, {
        [styles_css_default48["content--reserve-filter"]]: reserveFilterSpace,
        [styles_css_default48["content--reserve-legend"]]: reserveLegendSpace
      }), style: { minHeight: contentMinHeight } },
      chartStatus,
      chart
    ),
    legendNode
  );
});

// node_modules/@cloudscape-design/components/area-chart/chart-container.js
var import_react128 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/axis-label.js
var import_react104 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/cartesian-chart/styles.scoped.css";
var styles_css_default49 = {
  "axis": "awsui_axis_f0fot_1tlqz_9",
  "vertical-marker": "awsui_vertical-marker_f0fot_1tlqz_10",
  "axis--emphasized": "awsui_axis--emphasized_f0fot_1tlqz_15",
  "axis-label": "awsui_axis-label_f0fot_1tlqz_19",
  "axis-label--x": "awsui_axis-label--x_f0fot_1tlqz_24",
  "axis-label--y": "awsui_axis-label--y_f0fot_1tlqz_25",
  "grid": "awsui_grid_f0fot_1tlqz_29",
  "ticks__line": "awsui_ticks__line_f0fot_1tlqz_34",
  "ticks__text": "awsui_ticks__text_f0fot_1tlqz_39",
  "ticks--y": "awsui_ticks--y_f0fot_1tlqz_44",
  "ticks--x": "awsui_ticks--x_f0fot_1tlqz_45",
  "ticks--bottom": "awsui_ticks--bottom_f0fot_1tlqz_49",
  "labels-inline-start": "awsui_labels-inline-start_f0fot_1tlqz_54",
  "ticks": "awsui_ticks_f0fot_1tlqz_34",
  "labels-inline-start__label": "awsui_labels-inline-start__label_f0fot_1tlqz_69",
  "labels-inline-start--hidden": "awsui_labels-inline-start--hidden_f0fot_1tlqz_73",
  "labels-block-end": "awsui_labels-block-end_f0fot_1tlqz_81",
  "vertical-marker-circle": "awsui_vertical-marker-circle_f0fot_1tlqz_92",
  "vertical-marker-circle-active": "awsui_vertical-marker-circle-active_f0fot_1tlqz_98",
  "focus-outline": "awsui_focus-outline_f0fot_1tlqz_103",
  "chart-container": "awsui_chart-container_f0fot_1tlqz_111",
  "fit-height": "awsui_fit-height_f0fot_1tlqz_116",
  "chart-container-outer": "awsui_chart-container-outer_f0fot_1tlqz_121",
  "has-filters": "awsui_has-filters_f0fot_1tlqz_127",
  "chart-container-inner": "awsui_chart-container-inner_f0fot_1tlqz_131",
  "chart-container-plot-wrapper": "awsui_chart-container-plot-wrapper_f0fot_1tlqz_138",
  "chart-container-plot": "awsui_chart-container-plot_f0fot_1tlqz_138",
  "chart-container-bottom-labels": "awsui_chart-container-bottom-labels_f0fot_1tlqz_150"
};

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/axis-label.js
var axis_label_default = (0, import_react104.memo)(AxisLabel);
function AxisLabel({ title, axis, position }) {
  if (!title) {
    return null;
  }
  return import_react104.default.createElement(
    InternalBox,
    { className: clsx_m_default(styles_css_default49["axis-label"], axis === "x" ? styles_css_default49["axis-label--x"] : styles_css_default49["axis-label--y"]), fontWeight: "bold", textAlign: position === "left" ? "left" : "center", margin: { bottom: position === "left" ? "l" : "n" } },
    import_react104.default.createElement("span", { "aria-hidden": "true" }, title)
  );
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/block-end-labels.js
var import_react105 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/constants.js
var TICK_LENGTH = 8;
var TICK_MARGIN = 4;
var TICK_LINE_HEIGHT = 16;
var X_TICK_COUNT_RATIO = 100;
var Y_TICK_COUNT_RATIO = 50;

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/label-utils.js
var SPACE_BETWEEN = 4;
function formatTicks({ ticks: ticks2, scale, getLabelSpace, tickFormatter }) {
  return ticks2.map((tick) => {
    var _a;
    const position = (_a = scale.d3Scale(tick)) !== null && _a !== void 0 ? _a : NaN;
    const label = tickFormatter ? tickFormatter(tick) : tick.toString();
    const lines = (label + "").split("\n");
    return { position, lines, space: Math.max(...lines.map(getLabelSpace)) };
  });
}
function getVisibleTicks(ticks2, from, until, balanceTicks = false) {
  ticks2 = getTicksInRange(ticks2, from, until);
  return balanceTicks ? getReducedTicks(ticks2) : removeIntersections(ticks2);
}
function getTicksInRange(ticks2, from, until) {
  return ticks2.filter((tick) => from <= tick.position - tick.space / 2 && tick.position + tick.space / 2 <= until);
}
function getReducedTicks(ticks2) {
  const reduceLabelRatio = findReduceLabelRatio(ticks2);
  const reducedTicks = [];
  for (let index = 0; index < ticks2.length; index += reduceLabelRatio) {
    reducedTicks.push(ticks2[index]);
  }
  return reducedTicks;
}
function findReduceLabelRatio(ticks2, ratio = 1) {
  if (ratio >= ticks2.length) {
    return ratio;
  }
  for (let i2 = ratio; i2 < ticks2.length; i2 += ratio) {
    if (hasIntersection(ticks2[i2 - ratio], ticks2[i2])) {
      return findReduceLabelRatio(ticks2, ratio + 1);
    }
  }
  return ratio;
}
function removeIntersections(ticks2) {
  const visibleTicks = [];
  let prevTick = null;
  for (const tick of ticks2) {
    if (!prevTick || !hasIntersection(prevTick, tick)) {
      visibleTicks.push(tick);
      prevTick = tick;
    }
  }
  return visibleTicks;
}
function hasIntersection(a4, b2) {
  const [left, right] = a4.position < b2.position ? [a4, b2] : [b2, a4];
  const leftEdge = left.position + left.space / 2 + SPACE_BETWEEN;
  const rightEdge = right.position - right.space / 2;
  return leftEdge > rightEdge;
}
function getSVGTextSize(element) {
  if (element && element.getBBox) {
    return element.getBBox();
  }
  return void 0;
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/block-end-labels.js
function useBLockEndLabels({ ticks: ticks2, scale, tickFormatter }) {
  const virtualTextRef = (0, import_react105.useRef)(null);
  const cacheRef = (0, import_react105.useRef)({});
  const getLabelSpace = (label) => {
    if (cacheRef.current[label] !== void 0 && cacheRef.current[label] !== 0) {
      return cacheRef.current[label];
    }
    if (virtualTextRef.current && virtualTextRef.current.getComputedTextLength) {
      virtualTextRef.current.textContent = label;
      cacheRef.current[label] = virtualTextRef.current.getComputedTextLength();
      return cacheRef.current[label];
    }
    return 0;
  };
  const formattedTicks = formatTicks({ ticks: ticks2, scale, getLabelSpace, tickFormatter });
  if (virtualTextRef.current) {
    virtualTextRef.current.textContent = "";
  }
  let height = TICK_LENGTH + TICK_MARGIN;
  for (const { lines } of formattedTicks) {
    height = Math.max(height, TICK_LENGTH + TICK_MARGIN + lines.length * TICK_LINE_HEIGHT);
  }
  return { virtualTextRef, formattedTicks, height };
}
var block_end_labels_default = (0, import_react105.memo)(BlockEndLabels);
function BlockEndLabels({ axis = "x", width, height, scale, title, ariaRoleDescription, offsetLeft = 0, offsetRight = 0, virtualTextRef, formattedTicks, isRTL = false }) {
  const i18n = useInternalI18n("[charts]");
  const xOffset = scale.isCategorical() && axis === "x" ? Math.max(0, scale.d3Scale.bandwidth() - 1) / 2 : 0;
  const offsetInlineStart = isRTL ? offsetRight : offsetLeft;
  const offsetInlineEnd = isRTL ? offsetLeft : offsetRight;
  const from = 0 - offsetInlineStart - xOffset;
  const until = width + offsetInlineEnd - xOffset;
  const balanceLabels = axis === "x" && scale.scaleType !== "log";
  const visibleTicks = getVisibleTicks(formattedTicks, from, until, balanceLabels);
  return import_react105.default.createElement(
    "g",
    { transform: `translate(0,${height})`, className: styles_css_default49["labels-block-end"], "aria-label": title, role: "list", "aria-roledescription": i18n("i18nStrings.chartAriaRoleDescription", ariaRoleDescription), "aria-hidden": true },
    visibleTicks.map(({ position, lines }, index) => isFinite(position) && import_react105.default.createElement(
      "g",
      { key: index, transform: `translate(${position + xOffset},0)`, className: clsx_m_default(styles_css_default49.ticks, styles_css_default49["ticks--bottom"], {
        [styles_css_default49["ticks--x"]]: axis === "x",
        [styles_css_default49["ticks--y"]]: axis === "y"
      }), role: "listitem", "aria-label": lines.join("\n") },
      import_react105.default.createElement("line", { className: styles_css_default49.ticks__line, x1: 0, x2: 0, y1: 0, y2: TICK_LENGTH, "aria-hidden": "true" }),
      lines.map((line, lineIndex) => import_react105.default.createElement("text", { className: styles_css_default49.ticks__text, key: lineIndex, x: 0, y: TICK_LENGTH + TICK_MARGIN + lineIndex * TICK_LINE_HEIGHT }, line))
    )),
    import_react105.default.createElement("text", { ref: virtualTextRef, x: 0, y: 0, style: { visibility: "hidden" }, "aria-hidden": "true" })
  );
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/chart-container.js
var import_react106 = __toESM(require_react());
var CONTENT_MIN_HEIGHT_BOUNDARY = 40;
var CartesianChartContainer = (0, import_react106.forwardRef)(({ minHeight, fitHeight, leftAxisLabel, leftAxisLabelMeasure, bottomAxisLabel, chartPlot, popover, hasFilters }, ref) => {
  if (fitHeight) {
    return import_react106.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default49["chart-container"], styles_css_default49["fit-height"]), ref },
      leftAxisLabel,
      import_react106.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default49["chart-container-outer"], styles_css_default49["fit-height"], hasFilters && styles_css_default49["has-filters"]) },
        leftAxisLabelMeasure,
        import_react106.default.createElement(
          "div",
          { className: styles_css_default49["chart-container-inner"] },
          import_react106.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default49["chart-container-plot-wrapper"], styles_css_default49["fit-height"]), style: { minHeight: Math.max(minHeight, CONTENT_MIN_HEIGHT_BOUNDARY) } },
            import_react106.default.createElement("div", { className: clsx_m_default(styles_css_default49["chart-container-plot"], styles_css_default49["fit-height"]) }, chartPlot)
          ),
          import_react106.default.createElement("div", { className: clsx_m_default(styles_css_default49["chart-container-bottom-labels"], styles_css_default49["fit-height"]) }, bottomAxisLabel)
        ),
        popover
      )
    );
  }
  return import_react106.default.createElement(
    "div",
    { className: styles_css_default49["chart-container"], ref },
    leftAxisLabel,
    import_react106.default.createElement(
      "div",
      { className: styles_css_default49["chart-container-outer"] },
      leftAxisLabelMeasure,
      import_react106.default.createElement(
        "div",
        { className: styles_css_default49["chart-container-inner"] },
        chartPlot,
        bottomAxisLabel
      ),
      popover
    )
  );
});

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/emphasized-baseline.js
var import_react107 = __toESM(require_react());
var emphasized_baseline_default = (0, import_react107.memo)(EmphasizedBaseline);
function EmphasizedBaseline({ axis = "x", width, height, scale }) {
  var _a;
  const baselineY = (_a = scale.d3Scale(0)) !== null && _a !== void 0 ? _a : NaN;
  const showYBaseline = axis === "x" && isFinite(baselineY) && baselineY <= height;
  if (showYBaseline) {
    return import_react107.default.createElement("line", { className: clsx_m_default(styles_css_default49.axis, styles_css_default49["axis--emphasized"]), x1: -TICK_MARGIN, x2: width, y1: baselineY, y2: baselineY, "aria-hidden": "true" });
  }
  if (axis === "y") {
    return import_react107.default.createElement("line", { className: clsx_m_default(styles_css_default49.axis, styles_css_default49["axis--emphasized"]), x1: 0, y1: 0, x2: 0, y2: height + TICK_LENGTH, "aria-hidden": "true" });
  }
  return null;
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/inline-start-labels.js
var import_react109 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/responsive-text/index.js
var import_react108 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/responsive-text/responsive-text-utils.js
function getTextWidth(textNode) {
  if (textNode.getComputedTextLength) {
    return textNode.getComputedTextLength();
  }
  return -1;
}

// node_modules/@cloudscape-design/components/internal/components/responsive-text/index.js
var responsive_text_default = (0, import_react108.memo)(ResponsiveText);
function ResponsiveText({ x: x3, y: y4, className: className2, children, maxWidth }) {
  const textRef = (0, import_react108.useRef)(null);
  (0, import_react108.useEffect)(() => {
    const isRtl = getIsRtl(textRef.current);
    renderTextContent(textRef.current, children, maxWidth, isRtl);
  }, [maxWidth, children]);
  return import_react108.default.createElement("text", { ref: textRef, x: x3, y: y4, style: { textAnchor: "end" }, className: className2 }, children);
}
function renderTextContent(textNode, text, maxWidth, isRtl) {
  let visibleLength = text.length;
  while (visibleLength >= 0) {
    textNode.textContent = truncateText(text, visibleLength, isRtl);
    if (getTextWidth(textNode) <= maxWidth) {
      return;
    } else {
      visibleLength--;
    }
  }
}
function truncateText(text, maxLength, isRtl) {
  if (text.length === maxLength) {
    return text;
  }
  if (isRtl) {
    return text.slice(text.length - maxLength) + "…";
  }
  return text.slice(0, maxLength) + "…";
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/inline-start-labels.js
var OFFSET_PX = 12;
var inline_start_labels_default = (0, import_react109.memo)(InlineStartLabels);
function InlineStartLabels({ axis = "y", plotWidth, plotHeight, maxLabelsWidth = Number.POSITIVE_INFINITY, scale, ticks: ticks2, tickFormatter, title, ariaRoleDescription }) {
  const i18n = useInternalI18n("[charts]");
  const virtualTextRef = (0, import_react109.useRef)(null);
  const yOffset = axis === "x" && scale.isCategorical() ? Math.max(0, scale.d3Scale.bandwidth() - 1) / 2 : 0;
  const labelToBoxCache = (0, import_react109.useRef)({});
  const getLabelSpace = (label) => {
    var _a, _b, _c, _d;
    if (labelToBoxCache.current[label] !== void 0) {
      return (_b = (_a = labelToBoxCache.current[label]) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0;
    }
    if (virtualTextRef.current) {
      virtualTextRef.current.textContent = label;
    }
    labelToBoxCache.current[label] = getSVGTextSize(virtualTextRef.current);
    return (_d = (_c = labelToBoxCache.current[label]) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : 0;
  };
  const formattedTicks = formatTicks({ ticks: ticks2, scale, getLabelSpace, tickFormatter });
  if (virtualTextRef.current) {
    virtualTextRef.current.textContent = "";
  }
  const from = 0 - OFFSET_PX - yOffset;
  const until = plotHeight + OFFSET_PX - yOffset;
  const visibleTicks = getVisibleTicks(formattedTicks, from, until);
  const isRtl = virtualTextRef.current ? getIsRtl(virtualTextRef.current) : false;
  return import_react109.default.createElement(
    "g",
    { className: styles_css_default49["labels-inline-start"], "aria-label": title, role: "list", "aria-roledescription": i18n("i18nStrings.chartAriaRoleDescription", ariaRoleDescription), "aria-hidden": true },
    visibleTicks.map(({ position, lines }, index) => isFinite(position) && import_react109.default.createElement(
      "g",
      { key: index, role: "listitem", transform: `translate(0,${position + yOffset})`, className: clsx_m_default(styles_css_default49.ticks, axis === "x" ? styles_css_default49["ticks--x"] : styles_css_default49["ticks--y"]) },
      axis === "y" && import_react109.default.createElement("line", { className: clsx_m_default(styles_css_default49.grid, styles_css_default49.ticks_line), x1: -TICK_LENGTH, y1: 0, x2: plotWidth, y2: 0, "aria-hidden": "true" }),
      lines.map((line, lineIndex) => {
        var _a, _b;
        const x3 = -(TICK_LENGTH + TICK_MARGIN);
        const lineTextProps = {
          x: !isRtl ? x3 : plotWidth - x3,
          y: (lineIndex - (lines.length - 1) * 0.5) * TICK_LINE_HEIGHT,
          className: styles_css_default49.ticks__text,
          children: line
        };
        return ((_b = (_a = labelToBoxCache.current[lines[0]]) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0) > maxLabelsWidth ? import_react109.default.createElement(responsive_text_default, Object.assign({ key: lineIndex }, lineTextProps, { maxWidth: maxLabelsWidth })) : import_react109.default.createElement("text", Object.assign({ key: lineIndex }, lineTextProps));
      })
    )),
    import_react109.default.createElement("text", { ref: virtualTextRef, x: 0, y: 0, style: { visibility: "hidden" }, "aria-hidden": "true" })
  );
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/labels-measure.js
var import_react110 = __toESM(require_react());
var labels_measure_default = (0, import_react110.memo)(LabelsMeasure);
function LabelsMeasure({ scale, ticks: ticks2, tickFormatter, autoWidth, maxLabelsWidth }) {
  const [width, ref] = useContainerQuery((rect) => rect.contentBoxWidth);
  (0, import_react110.useEffect)(() => {
    autoWidth(width || 0);
  }, [autoWidth, width]);
  const labelMapper = (value) => {
    const scaledValue = scale.d3Scale(value);
    if (scaledValue === void 0 || !isFinite(scaledValue)) {
      return null;
    }
    const formattedValue = tickFormatter ? tickFormatter(value) : value.toString();
    const lines = (formattedValue + "").split("\n");
    return import_react110.default.createElement(import_react110.Fragment, { key: `${value}` }, lines.map((line, lineIndex) => import_react110.default.createElement("div", { key: lineIndex, className: styles_css_default49["labels-inline-start__label"], "aria-hidden": "true" }, line)));
  };
  return import_react110.default.createElement("div", { ref, className: clsx_m_default(styles_css_default49["labels-inline-start"], styles_css_default49["labels-inline-start--hidden"]), style: { maxWidth: maxLabelsWidth } }, ticks2.map(labelMapper));
}

// node_modules/@cloudscape-design/components/internal/components/chart-plot/index.js
var import_react113 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-plot/application-controller.js
var import_react111 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-plot/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/chart-plot/styles.scoped.css";
var styles_css_default50 = {
  "root": "awsui_root_1fcus_5bfgt_145",
  "clickable": "awsui_clickable_1fcus_5bfgt_154",
  "precise": "awsui_precise_1fcus_5bfgt_158",
  "focus-outline": "awsui_focus-outline_1fcus_5bfgt_162",
  "application": "awsui_application_1fcus_5bfgt_171"
};

// node_modules/@cloudscape-design/components/internal/components/chart-plot/application-controller.js
var application_controller_default = (0, import_react111.forwardRef)(ApplicationController);
function ApplicationController({ activeElementKey, activeElementRef, onFocus, onBlur, onKeyDown }, ref) {
  const containerRef = (0, import_react111.useRef)(null);
  const applicationRef = (0, import_react111.useRef)(null);
  const focusTransitionRef = (0, import_react111.useRef)(false);
  const [isFocused, setFocused] = (0, import_react111.useState)(false);
  const onApplicationFocus = (0, import_react111.useCallback)((event) => {
    if (focusTransitionRef.current === false) {
      setFocused(true);
      onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);
    } else {
      focusTransitionRef.current = false;
    }
  }, [onFocus]);
  const onApplicationBlur = (0, import_react111.useCallback)((event) => {
    if (focusTransitionRef.current === false) {
      setFocused(false);
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);
      muteApplication(applicationRef.current);
    }
  }, [onBlur]);
  const onApplicationKeyDown = onKeyDown;
  (0, import_react111.useImperativeHandle)(ref, () => ({
    focus: () => focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null)
  }), [activeElementRef]);
  (0, import_react111.useEffect)(() => {
    if (!isFocused || focusTransitionRef.current === true) {
      return;
    }
    focusTransitionRef.current = true;
    containerRef.current.removeChild(applicationRef.current);
    containerRef.current.appendChild(applicationRef.current);
    focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null);
  }, [isFocused, activeElementKey, activeElementRef]);
  return import_react111.default.createElement(
    "g",
    { ref: containerRef },
    import_react111.default.createElement("g", { tabIndex: -1, ref: applicationRef, onFocus: onApplicationFocus, onBlur: onApplicationBlur, onKeyDown: onApplicationKeyDown, className: styles_css_default50.application })
  );
}
function focusApplication(app, target) {
  for (const attributeName of app.getAttributeNames()) {
    if (attributeName === "role" || attributeName.slice(0, 4) === "aria") {
      app.removeAttribute(attributeName);
    }
  }
  if (target) {
    for (const attributeName of target.getAttributeNames()) {
      if (attributeName === "role" || attributeName.slice(0, 4) === "aria") {
        const attributeValue = target.getAttribute(attributeName);
        if (attributeValue) {
          app.setAttribute(attributeName, attributeValue);
        }
      }
    }
  }
  app.tabIndex = 0;
  app.setAttribute("focusable", "true");
  app.setAttribute("aria-hidden", "false");
  app.focus({ preventScroll: true });
}
function muteApplication(app) {
  for (const attributeName of app.getAttributeNames()) {
    if (attributeName === "role" || attributeName.slice(0, 4) === "aria") {
      app.removeAttribute(attributeName);
    }
  }
  app.tabIndex = -1;
  app.setAttribute("focusable", "false");
  app.setAttribute("aria-hidden", "true");
}

// node_modules/@cloudscape-design/components/internal/components/chart-plot/focus-outline.js
var import_react112 = __toESM(require_react());
function useFocusVisibleState() {
  const [focusVisible, setFocusVisible] = (0, import_react112.useState)(false);
  (0, import_react112.useEffect)(() => {
    function handleMousedown() {
      return setFocusVisible(false);
    }
    function handleKeydown(event) {
      if (!isModifierKey(event)) {
        setFocusVisible(true);
      }
    }
    const controller = new AbortController();
    document.addEventListener("mousedown", handleMousedown, { signal: controller.signal });
    document.addEventListener("keydown", handleKeydown, { signal: controller.signal });
    return () => {
      controller.abort();
    };
  });
  return focusVisible;
}
function FocusOutline({ elementKey, elementRef, offset = 0 }) {
  const ref = (0, import_react112.useRef)(null);
  const focusVisible = useFocusVisibleState();
  (0, import_react112.useEffect)(() => {
    if (!ref.current) {
      return;
    }
    if (focusVisible && elementKey && elementRef && elementRef.current && elementRef.current.getBBox) {
      const element = elementRef.current.getBBox();
      showOutline(ref.current, element, offset);
    } else {
      hideOutline(ref.current);
    }
  }, [focusVisible, elementKey, elementRef, offset]);
  return import_react112.default.createElement("rect", { ref, "aria-hidden": "true", className: styles_css_default50["focus-outline"], rx: "2" });
}
function showOutline(el, position, offset) {
  const offsetX = typeof offset === "number" ? offset : offset.x;
  const offsetY = typeof offset === "number" ? offset : offset.y;
  el.setAttribute("x", (position.x - offsetX).toString());
  el.setAttribute("y", (position.y - offsetY).toString());
  el.setAttribute("width", (position.width + 2 * offsetX).toString());
  el.setAttribute("height", (position.height + 2 * offsetY).toString());
  el.style.visibility = "visible";
}
function hideOutline(el) {
  el.style.visibility = "hidden";
  el.removeAttribute("x");
  el.removeAttribute("y");
  el.removeAttribute("width");
  el.removeAttribute("height");
}

// node_modules/@cloudscape-design/components/internal/components/chart-plot/index.js
var DEFAULT_PLOT_FOCUS_OFFSET = 3;
var DEFAULT_ELEMENT_FOCUS_OFFSET = 3;
var chart_plot_default = (0, import_react113.forwardRef)(ChartPlot);
function ChartPlot({ width, height, transform, offsetTop, offsetBottom, offsetLeft, offsetRight, ariaLabel, ariaLabelledby, ariaRoleDescription, ariaDescription, ariaDescribedby, activeElementKey, activeElementRef, ariaLiveRegion, isClickable, isPrecise, children, onClick, onKeyDown, focusOffset = DEFAULT_PLOT_FOCUS_OFFSET, activeElementFocusOffset = DEFAULT_ELEMENT_FOCUS_OFFSET, onMouseMove, onMouseOut, onApplicationBlur, onApplicationFocus }, ref) {
  const i18n = useInternalI18n("[charts]");
  const svgRef = (0, import_react113.useRef)(null);
  const applicationRef = (0, import_react113.useRef)(null);
  const plotClickedRef = (0, import_react113.useRef)(false);
  const [isPlotFocused, setPlotFocused] = (0, import_react113.useState)(false);
  const [isApplicationFocused, setApplicationFocused] = (0, import_react113.useState)(false);
  const internalDescriptionId = useUniqueId("awsui-chart-plot__description");
  const ariaDescriptionId = [ariaDescription && internalDescriptionId, ariaDescribedby].filter(Boolean).join(" ");
  (0, import_react113.useImperativeHandle)(ref, () => ({
    svg: svgRef.current,
    focusPlot: () => svgRef.current.focus(),
    focusApplication: () => applicationRef.current.focus()
  }));
  const onPlotMouseDown = () => {
    plotClickedRef.current = true;
  };
  const onPlotFocus = (event) => {
    if (plotClickedRef.current || !!activeElementKey) {
      applicationRef.current.focus();
    } else if (event.target === svgRef.current) {
      setPlotFocused(true);
    }
  };
  const onPlotBlur = (event) => {
    if (event.target === svgRef.current) {
      setPlotFocused(false);
    }
  };
  const onPlotKeyDown = (event) => {
    if (isPlotFocused) {
      const codes = [KeyCode.space, KeyCode.enter, KeyCode.up, KeyCode.left, KeyCode.right, KeyCode.down];
      if (codes.indexOf(event.keyCode) !== -1) {
        applicationRef.current.focus();
      }
    }
  };
  const onPlotApplicationFocus = (event) => {
    onApplicationFocus === null || onApplicationFocus === void 0 ? void 0 : onApplicationFocus(event, plotClickedRef.current ? "mouse" : "keyboard");
    plotClickedRef.current = false;
    setApplicationFocused(true);
  };
  const onPlotApplicationBlur = (event) => {
    onApplicationBlur === null || onApplicationBlur === void 0 ? void 0 : onApplicationBlur(event);
    setApplicationFocused(false);
  };
  const onApplicationKeyDown = onKeyDown;
  const plotFocusable = !isApplicationFocused;
  const plotTabIndex = plotFocusable ? 0 : -1;
  const plotAria = !isApplicationFocused ? {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescriptionId,
    "aria-roledescription": i18n("i18nStrings.chartAriaRoleDescription", ariaRoleDescription)
  } : {};
  return import_react113.default.createElement(
    import_react113.default.Fragment,
    null,
    import_react113.default.createElement(
      "svg",
      Object.assign({ onMouseMove, onMouseOut, focusable: plotFocusable, tabIndex: plotTabIndex, role: "application", "aria-hidden": "false" }, plotAria, { ref: svgRef, style: {
        width,
        height,
        marginTop: offsetTop,
        marginBottom: offsetBottom,
        marginLeft: offsetLeft,
        marginRight: offsetRight
      }, className: clsx_m_default(styles_css_default50.root, {
        [styles_css_default50.clickable]: isClickable,
        [styles_css_default50.precise]: isPrecise
      }), onMouseDown: onPlotMouseDown, onClick, onFocus: onPlotFocus, onBlur: onPlotBlur, onKeyDown: onPlotKeyDown }),
      import_react113.default.createElement(FocusOutline, { elementRef: svgRef, elementKey: isPlotFocused, offset: focusOffset }),
      import_react113.default.createElement(
        "g",
        { transform },
        import_react113.default.createElement(application_controller_default, { activeElementKey: isApplicationFocused && activeElementKey || null, activeElementRef, ref: applicationRef, onFocus: onPlotApplicationFocus, onBlur: onPlotApplicationBlur, onKeyDown: onApplicationKeyDown }),
        ariaDescription && plotFocusable && import_react113.default.createElement("desc", { "aria-hidden": "true", id: internalDescriptionId }, ariaDescription),
        children,
        import_react113.default.createElement(FocusOutline, { elementRef: activeElementRef, elementKey: isApplicationFocused && activeElementKey, offset: activeElementFocusOffset })
      )
    ),
    import_react113.default.createElement(internal_default2, { hidden: true, tagName: "span" }, ariaLiveRegion)
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/chart-popover.js
var import_react120 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-popover/index.js
var import_react114 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-popover/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/chart-popover/styles.scoped.css";
var styles_css_default51 = {
  "root": "awsui_root_1t44z_1wh64_145",
  "popover-body": "awsui_popover-body_1t44z_1wh64_178",
  "footer": "awsui_footer_1t44z_1wh64_182"
};

// node_modules/@cloudscape-design/components/internal/components/chart-popover/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/chart-popover/test-classes/styles.scoped.css";
var styles_css_default52 = {
  "header": "awsui_header_dgs8z_qsmmj_5",
  "body": "awsui_body_dgs8z_qsmmj_6",
  "footer": "awsui_footer_dgs8z_qsmmj_7"
};

// node_modules/@cloudscape-design/components/internal/components/chart-popover/index.js
var chart_popover_default = import_react114.default.forwardRef(ChartPopover);
function ChartPopover(_a, ref) {
  var { position = "right", size = "medium", fixedWidth = false, dismissButton: dismissButton3 = false, dismissAriaLabel, children, footer, title, trackRef, getTrack, trackKey, onDismiss, container, minVisibleBlockSize, onMouseEnter, onMouseLeave, onBlur } = _a, restProps = __rest(_a, ["position", "size", "fixedWidth", "dismissButton", "dismissAriaLabel", "children", "footer", "title", "trackRef", "getTrack", "trackKey", "onDismiss", "container", "minVisibleBlockSize", "onMouseEnter", "onMouseLeave", "onBlur"]);
  const baseProps = getBaseProps(restProps);
  const popoverObjectRef = (0, import_react114.useRef)(null);
  const popoverRef = useMergeRefs(popoverObjectRef, ref);
  (0, import_react114.useEffect)(() => {
    const onDocumentClick = (event) => {
      if (event.target && !nodeBelongs(popoverObjectRef.current, event.target) && // click not in popover
      !nodeContains(container, event.target)) {
        onDismiss(true);
      }
    };
    document.addEventListener("mousedown", onDocumentClick, { capture: true });
    return () => {
      document.removeEventListener("mousedown", onDocumentClick, { capture: true });
    };
  }, [container, onDismiss]);
  const isPinned = dismissButton3;
  return import_react114.default.createElement(
    "div",
    Object.assign({}, baseProps, {
      className: clsx_m_default(styles_css_default.root, styles_css_default51.root, baseProps.className),
      ref: popoverRef,
      onMouseEnter,
      onMouseLeave,
      onBlur,
      // The tabIndex makes it so that clicking inside popover assigns this element as blur target.
      // That is necessary in charts to ensure the blur target is within the chart and no cleanup is needed.
      tabIndex: -1
    }),
    import_react114.default.createElement(
      PopoverContainer,
      { size, fixedWidth, position, trackRef, getTrack, trackKey, minVisibleBlockSize, arrow: (position2) => import_react114.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default.arrow, styles_css_default[`arrow-position-${position2}`]) },
        import_react114.default.createElement("div", { className: styles_css_default["arrow-outer"] }),
        import_react114.default.createElement("div", { className: styles_css_default["arrow-inner"] })
      ), keepPosition: true, allowVerticalOverflow: true, allowScrollToFit: isPinned, hoverArea: true },
      import_react114.default.createElement(
        PopoverBody,
        { dismissButton: dismissButton3, dismissAriaLabel, header: import_react114.default.createElement("span", { className: styles_css_default52.header }, title), onDismiss, overflowVisible: "content", className: styles_css_default51["popover-body"], variant: "chart" },
        import_react114.default.createElement("div", { className: styles_css_default52.body }, children),
        footer && import_react114.default.createElement("div", { className: clsx_m_default(styles_css_default52.footer, styles_css_default51.footer) }, footer)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/internal/components/chart-series-details/index.js
var import_react119 = __toESM(require_react());

// node_modules/@cloudscape-design/components/expandable-section/internal.js
var import_react117 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-series-details/series-details-text.js
var screenReaderTextClass = "awsui-screenreader-text";
function getSeriesDetailsText(element) {
  const elementsWithText = Array.from(element.querySelectorAll(`.${screenReaderTextClass}`));
  return elementsWithText.map((element2) => {
    var _a;
    if (element2 instanceof HTMLElement) {
      return (_a = element2.innerText) === null || _a === void 0 ? void 0 : _a.split("\n").map((s4) => s4.trim()).join(" ").trim();
    }
  }).filter(Boolean).join(", ");
}

// node_modules/@cloudscape-design/components/expandable-section/expandable-section-container.js
var import_react115 = __toESM(require_react());

// node_modules/@cloudscape-design/components/expandable-section/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/expandable-section/analytics-metadata/styles.scoped.css";
var styles_css_default53 = {
  "header-label": "awsui_header-label_4mvj3_1h74t_5",
  "root": "awsui_root_4mvj3_1h74t_6"
};

// node_modules/@cloudscape-design/components/expandable-section/expandable-section-container.js
var ExpandableSectionContainer = (_a) => {
  var { className: className2, children, header, variant, expanded, disableContentPaddings, __internalRootRef, __injectAnalyticsComponentMetadata } = _a, rest = __rest(_a, ["className", "children", "header", "variant", "expanded", "disableContentPaddings", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  const analyticsMetadata = getAnalyticsMetadataProps(rest);
  const analyticsComponentMetadata = {
    name: "awsui.ExpandableSection",
    label: { root: "self" },
    properties: { variant, expanded: `${!!expanded}` }
  };
  const metadataAttribute = __injectAnalyticsComponentMetadata ? getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata }) : {};
  if (variant === "container" || variant === "stacked") {
    return import_react115.default.createElement(
      AnalyticsFunnelSubStep,
      { subStepIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, subStepErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext },
      import_react115.default.createElement(InternalContainerAsSubstep, Object.assign({}, rest, { className: className2, header, variant: variant === "stacked" ? "stacked" : "default", disableContentPaddings: disableContentPaddings || !expanded, disableHeaderPaddings: true, __hiddenContent: !expanded, __internalRootRef }, metadataAttribute), children)
    );
  }
  return import_react115.default.createElement(
    "div",
    Object.assign({ className: className2 }, rest, { ref: __internalRootRef }, metadataAttribute, getAnalyticsLabelAttribute(`.${styles_css_default53["header-label"]}`)),
    header,
    children
  );
};

// node_modules/@cloudscape-design/components/expandable-section/expandable-section-header.js
var import_react116 = __toESM(require_react());

// node_modules/@cloudscape-design/components/expandable-section/utils.js
var variantIsOneOf = (variant, oneOf) => oneOf.includes(variant);
function variantSupportsDescription(variant) {
  return variantIsOneOf(variant, ["container", "default", "footer", "inline"]);
}
function variantSupportsActions(variant) {
  return variantIsOneOf(variant, ["container", "compact", "default", "inline"]);
}
function variantSupportsInfoLink(variant) {
  return variantIsOneOf(variant, ["container", "compact"]);
}
function variantRequiresActionsDivider(variant) {
  return variantIsOneOf(variant, ["default", "inline"]);
}

// node_modules/@cloudscape-design/components/expandable-section/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/expandable-section/styles.scoped.css";
var styles_css_default54 = {
  "content-enter": "awsui_content-enter_gwq0h_nchqn_161",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_gwq0h_nchqn_1",
  "trigger-expanded": "awsui_trigger-expanded_gwq0h_nchqn_183",
  "icon": "awsui_icon_gwq0h_nchqn_197",
  "root": "awsui_root_gwq0h_nchqn_211",
  "expand-button": "awsui_expand-button_gwq0h_nchqn_246",
  "expanded": "awsui_expanded_gwq0h_nchqn_254",
  "icon-container": "awsui_icon-container_gwq0h_nchqn_264",
  "icon-container-container": "awsui_icon-container-container_gwq0h_nchqn_268",
  "wrapper": "awsui_wrapper_gwq0h_nchqn_272",
  "wrapper-default": "awsui_wrapper-default_gwq0h_nchqn_280",
  "wrapper-inline": "awsui_wrapper-inline_gwq0h_nchqn_280",
  "wrapper-footer": "awsui_wrapper-footer_gwq0h_nchqn_280",
  "wrapper-navigation": "awsui_wrapper-navigation_gwq0h_nchqn_284",
  "wrapper-container": "awsui_wrapper-container_gwq0h_nchqn_287",
  "wrapper-compact": "awsui_wrapper-compact_gwq0h_nchqn_291",
  "header-deprecated": "awsui_header-deprecated_gwq0h_nchqn_304",
  "wrapper-expanded": "awsui_wrapper-expanded_gwq0h_nchqn_310",
  "header": "awsui_header_gwq0h_nchqn_304",
  "header-wrapper": "awsui_header-wrapper_gwq0h_nchqn_347",
  "header-actions-wrapper": "awsui_header-actions-wrapper_gwq0h_nchqn_359",
  "header-button": "awsui_header-button_gwq0h_nchqn_365",
  "header-container-button": "awsui_header-container-button_gwq0h_nchqn_365",
  "header-container": "awsui_header-container_gwq0h_nchqn_365",
  "header-navigation": "awsui_header-navigation_gwq0h_nchqn_400",
  "header-text": "awsui_header-text_gwq0h_nchqn_437",
  "content": "awsui_content_gwq0h_nchqn_161",
  "content-default": "awsui_content-default_gwq0h_nchqn_450",
  "content-inline": "awsui_content-inline_gwq0h_nchqn_450",
  "content-footer": "awsui_content-footer_gwq0h_nchqn_454",
  "content-expanded": "awsui_content-expanded_gwq0h_nchqn_458",
  "content-compact": "awsui_content-compact_gwq0h_nchqn_461",
  "focusable": "awsui_focusable_gwq0h_nchqn_465",
  "click-target": "awsui_click-target_gwq0h_nchqn_480"
};

// node_modules/@cloudscape-design/components/expandable-section/expandable-section-header.js
var componentName = "ExpandableSection";
var getExpandActionAnalyticsMetadataAttribute = (expanded) => {
  const metadata = {
    action: !expanded ? "expand" : "collapse",
    detail: {
      label: { rootSelector: `.${styles_css_default53.root}` }
    }
  };
  return getAnalyticsMetadataAttribute(metadata);
};
var ExpandableDeprecatedHeader = ({ id, className: className2, onClick, ariaLabel, ariaControls, expanded, children, icon, onKeyUp, onKeyDown, variant }) => {
  return import_react116.default.createElement(
    "div",
    Object.assign({ id, role: "button", className: clsx_m_default(className2, styles_css_default54["expand-button"], styles_css_default54["click-target"], styles_css_default54["header-deprecated"], styles_css_default53["header-label"]), tabIndex: 0, onKeyUp, onKeyDown, onClick, "aria-label": ariaLabel, "aria-controls": ariaControls, "aria-expanded": expanded }, getExpandActionAnalyticsMetadataAttribute(expanded)),
    import_react116.default.createElement("div", { className: clsx_m_default(styles_css_default54["icon-container"], styles_css_default54[`icon-container-${variant}`]) }, icon),
    children
  );
};
var ExpandableNavigationHeader = ({ id, className: className2, onClick, ariaLabelledBy, ariaLabel, ariaControls, expanded, children, icon }) => {
  return import_react116.default.createElement(
    "div",
    { id, className: clsx_m_default(className2, styles_css_default54["click-target"], styles_css_default53["header-label"]) },
    import_react116.default.createElement("button", Object.assign({ className: clsx_m_default(styles_css_default54["icon-container"], styles_css_default54["expand-button"]), "aria-labelledby": ariaLabelledBy, "aria-label": ariaLabel, "aria-controls": ariaControls, "aria-expanded": expanded, type: "button", onClick }, getExpandActionAnalyticsMetadataAttribute(expanded)), icon),
    children
  );
};
var ExpandableHeaderTextWrapper = ({ id, descriptionId, className: className2, onClick, ariaLabel, ariaControls, expanded, children, icon, headerDescription, headerCounter, headerInfo, headerActions, variant, headingTagOverride, onKeyUp, onKeyDown }) => {
  const isContainer = variant === "container";
  const HeadingTag = headingTagOverride || "div";
  const supportsInteractiveElements = variantSupportsActions(variant);
  const restrictClickableArea = supportsInteractiveElements && (headerInfo || headerActions);
  const actions = supportsInteractiveElements && headerActions;
  const description = variantSupportsDescription(variant) && headerDescription && import_react116.default.createElement("span", { id: descriptionId, className: styles_css_default54[`description-${variant}`] }, headerDescription);
  const listeners = { onClick, onKeyDown, onKeyUp };
  const headerButtonListeners = restrictClickableArea ? listeners : void 0;
  const headingTagListeners = !headerButtonListeners && !isContainer && description ? listeners : void 0;
  const wrapperListeners = !headerButtonListeners && !headingTagListeners ? listeners : void 0;
  const headerButton = import_react116.default.createElement(
    "span",
    Object.assign({ className: clsx_m_default(styles_css_default54["expand-button"], isContainer ? styles_css_default54["header-container-button"] : styles_css_default54["header-button"], headerButtonListeners && styles_css_default54["click-target"]), role: "button", tabIndex: 0, "aria-label": ariaLabel, "aria-labelledby": !ariaLabel && description ? id : void 0, "aria-describedby": description ? descriptionId : void 0, "aria-controls": ariaControls, "aria-expanded": expanded }, headerButtonListeners, headerButtonListeners ? getExpandActionAnalyticsMetadataAttribute(expanded) : {}),
    import_react116.default.createElement("span", { className: clsx_m_default(styles_css_default54["icon-container"], styles_css_default54[`icon-container-${variant}`]) }, icon),
    import_react116.default.createElement("span", { id, className: clsx_m_default(styles_css_default54["header-text"], styles_css_default53["header-label"]) }, children)
  );
  return import_react116.default.createElement("div", Object.assign({ className: clsx_m_default(className2, wrapperListeners && styles_css_default54["click-target"]) }, wrapperListeners, wrapperListeners ? getExpandActionAnalyticsMetadataAttribute(expanded) : {}), isContainer ? import_react116.default.createElement(InternalHeader, { variant: "h2", description, counter: headerCounter, info: headerInfo, actions, headingTagOverride }, headerButton) : import_react116.default.createElement(
    import_react116.default.Fragment,
    null,
    import_react116.default.createElement(
      "div",
      { className: clsx_m_default(actions && styles_css_default54["header-actions-wrapper"]) },
      import_react116.default.createElement(HeadingTag, Object.assign({ className: clsx_m_default(styles_css_default54["header-wrapper"], headingTagListeners && styles_css_default54["click-target"]) }, headingTagListeners, headingTagListeners ? getExpandActionAnalyticsMetadataAttribute(expanded) : {}), headerButton),
      actions
    ),
    description && import_react116.default.createElement(Description, { variantOverride: "h3" }, description)
  ));
};
var ExpandableSectionHeader = ({ id, descriptionId, className: className2, variant, header, headerText, headerDescription, headerCounter, headerInfo, headerActions, headingTagOverride, expanded, ariaControls, ariaLabel, ariaLabelledBy, onKeyUp, onKeyDown, onClick }) => {
  const alwaysShowDivider = variantRequiresActionsDivider(variant) && headerActions;
  const icon = import_react116.default.createElement(internal_default, { size: variant === "container" ? "medium" : "normal", className: clsx_m_default(styles_css_default54.icon, expanded && styles_css_default54.expanded), name: "caret-down-filled" });
  const defaultHeaderProps = {
    id,
    icon,
    expanded,
    ariaControls,
    ariaLabel,
    onClick,
    variant
  };
  if ((headerCounter || headerInfo) && !variantSupportsInfoLink(variant) && isDevelopment2) {
    warnOnce(componentName, 'The `headerCounter` and `headerInfo` props are only supported for the "container" variant.');
  }
  if (headerActions && !variantSupportsActions(variant) && isDevelopment2) {
    warnOnce(componentName, `The \`headerActions\` prop is only supported for the "container" and "default" variants.`);
  }
  if (headerDescription && !variantSupportsDescription(variant) && isDevelopment2) {
    warnOnce(componentName, `The \`headerDescription\` prop is not supported for the ${variant} variant.`);
  }
  const wrapperClassName = clsx_m_default(styles_css_default54.wrapper, styles_css_default54[`wrapper-${variant}`], (expanded || alwaysShowDivider) && styles_css_default54["wrapper-expanded"]);
  if (variant === "navigation") {
    return import_react116.default.createElement(ExpandableNavigationHeader, Object.assign({ className: clsx_m_default(className2, wrapperClassName), ariaLabelledBy }, defaultHeaderProps), headerText !== null && headerText !== void 0 ? headerText : header);
  }
  if (headerText || variant === "inline") {
    if (!headerText && header && variant === "inline") {
      warnOnce(componentName, "Only `headerText` instead of `header` is supported for `inline` variant.");
    }
    return import_react116.default.createElement(ExpandableHeaderTextWrapper, Object.assign({ className: clsx_m_default(className2, wrapperClassName, expanded && styles_css_default54.expanded), descriptionId, headerDescription, headerCounter, headerInfo, headerActions, headingTagOverride, onKeyUp, onKeyDown }, defaultHeaderProps), headerText);
  }
  if (variant === "container" && header && isDevelopment2) {
    warnOnce(componentName, "Use `headerText` instead of `header` to provide the button within the heading for a11y.");
  }
  return import_react116.default.createElement(ExpandableDeprecatedHeader, Object.assign({ className: clsx_m_default(className2, wrapperClassName, styles_css_default54.focusable, expanded && styles_css_default54.expanded), onKeyUp, onKeyDown }, defaultHeaderProps), header);
};

// node_modules/@cloudscape-design/components/expandable-section/internal.js
function InternalExpandableSection(_a) {
  var { expanded: controlledExpanded, defaultExpanded, onChange, variant = "default", children, header, headerText, headerCounter, headerDescription, headerInfo, headerActions, headingTagOverride, disableContentPaddings, headerAriaLabel, __internalRootRef, __injectAnalyticsComponentMetadata } = _a, props2 = __rest(_a, ["expanded", "defaultExpanded", "onChange", "variant", "children", "header", "headerText", "headerCounter", "headerDescription", "headerInfo", "headerActions", "headingTagOverride", "disableContentPaddings", "headerAriaLabel", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  const ref = (0, import_react117.useRef)(null);
  const controlId = useUniqueId();
  const triggerControlId = `${controlId}-trigger`;
  const descriptionId = `${controlId}-description`;
  const baseProps = getBaseProps(props2);
  const [expanded, setExpanded] = useControllable(controlledExpanded, onChange, defaultExpanded, {
    componentName: "ExpandableSection",
    controlledProp: "expanded",
    changeHandler: "onChange"
  });
  const onExpandChange = (0, import_react117.useCallback)((expanded2) => {
    setExpanded(expanded2);
    fireNonCancelableEvent(onChange, { expanded: expanded2 });
  }, [onChange, setExpanded]);
  const onClick = (0, import_react117.useCallback)(() => {
    onExpandChange(!expanded);
  }, [onExpandChange, expanded]);
  const onKeyUp = (0, import_react117.useCallback)((event) => {
    const interactionKeys = [KeyCode.enter, KeyCode.space];
    if (interactionKeys.indexOf(event.keyCode) !== -1) {
      onExpandChange(!expanded);
    }
  }, [onExpandChange, expanded]);
  const onKeyDown = (0, import_react117.useCallback)((event) => {
    if (event.keyCode === KeyCode.space) {
      event.preventDefault();
    }
  }, []);
  const triggerProps = {
    ariaControls: controlId,
    ariaLabel: headerAriaLabel,
    ariaLabelledBy: headerAriaLabel ? void 0 : triggerControlId,
    onKeyUp,
    onKeyDown,
    onClick
  };
  const baseVariant = variant === "stacked" ? "container" : variant;
  return import_react117.default.createElement(
    ExpandableSectionContainer,
    Object.assign({}, props2, { expanded, className: clsx_m_default(baseProps.className, styles_css_default54.root, styles_css_default53.root), variant, disableContentPaddings, __injectAnalyticsComponentMetadata, header: import_react117.default.createElement(ExpandableSectionHeader, Object.assign({ id: triggerControlId, descriptionId, className: clsx_m_default(styles_css_default54.header, styles_css_default54[`header-${baseVariant}`], screenReaderTextClass), variant: baseVariant, expanded: !!expanded, header, headerText, headerDescription, headerCounter, headerInfo, headerActions, headingTagOverride }, triggerProps)), __internalRootRef }),
    import_react117.default.createElement(
      CSSTransition_default,
      { in: expanded, timeout: 30, classNames: { enter: styles_css_default54["content-enter"] }, nodeRef: ref },
      import_react117.default.createElement("div", { id: controlId, ref, className: clsx_m_default(styles_css_default54.content, styles_css_default54[`content-${baseVariant}`], expanded && styles_css_default54["content-expanded"]), role: "group", "aria-label": triggerProps.ariaLabel, "aria-labelledby": triggerProps.ariaLabelledBy, "aria-describedby": variantSupportsDescription(baseVariant) && headerDescription ? descriptionId : void 0 }, children)
    )
  );
}

// node_modules/@cloudscape-design/components/internal/components/chart-series-marker/index.js
var import_react118 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-series-marker/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/chart-series-marker/styles.scoped.css";
var styles_css_default55 = {
  "marker": "awsui_marker_1isd1_1esa0_145",
  "marker--line": "awsui_marker--line_1isd1_1esa0_185",
  "marker--rectangle": "awsui_marker--rectangle_1isd1_1esa0_189",
  "marker--hollow-rectangle": "awsui_marker--hollow-rectangle_1isd1_1esa0_196",
  "marker--dashed": "awsui_marker--dashed_1isd1_1esa0_212"
};

// node_modules/@cloudscape-design/components/internal/components/chart-series-marker/index.js
var chart_series_marker_default = (0, import_react118.memo)(ChartSeriesMarker);
function ChartSeriesMarker({ type = "line", color: color2 }) {
  return import_react118.default.createElement("span", { className: clsx_m_default(styles_css_default55.marker, styles_css_default55[`marker--${type}`]), style: { backgroundColor: color2 }, "aria-hidden": "true" });
}

// node_modules/@cloudscape-design/components/internal/components/chart-series-details/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/chart-series-details/styles.scoped.css";
var styles_css_default56 = {
  "dimmed": "awsui_dimmed_10ipo_8y0ip_153",
  "marker": "awsui_marker_10ipo_8y0ip_205",
  "marker--line": "awsui_marker--line_10ipo_8y0ip_245",
  "marker--rectangle": "awsui_marker--rectangle_10ipo_8y0ip_249",
  "marker--hollow-rectangle": "awsui_marker--hollow-rectangle_10ipo_8y0ip_256",
  "marker--dashed": "awsui_marker--dashed_10ipo_8y0ip_272",
  "root": "awsui_root_10ipo_8y0ip_291",
  "value": "awsui_value_10ipo_8y0ip_323",
  "expandable": "awsui_expandable_10ipo_8y0ip_327",
  "list-item": "awsui_list-item_10ipo_8y0ip_331",
  "inner-list-item": "awsui_inner-list-item_10ipo_8y0ip_332",
  "key-value-pair": "awsui_key-value-pair_10ipo_8y0ip_337",
  "expandable-section": "awsui_expandable-section_10ipo_8y0ip_338",
  "key": "awsui_key_10ipo_8y0ip_337",
  "sub-items": "awsui_sub-items_10ipo_8y0ip_353",
  "list": "awsui_list_10ipo_8y0ip_331",
  "compact": "awsui_compact_10ipo_8y0ip_379",
  "with-sub-items": "awsui_with-sub-items_10ipo_8y0ip_384",
  "full-width": "awsui_full-width_10ipo_8y0ip_389"
};

// node_modules/@cloudscape-design/components/internal/components/chart-series-details/index.js
var chart_series_details_default = (0, import_react119.memo)((0, import_react119.forwardRef)(ChartSeriesDetails));
function ChartSeriesDetails(_a, ref) {
  var { details, expandedSeries, setPopoverText, setExpandedState, compactList } = _a, restProps = __rest(_a, ["details", "expandedSeries", "setPopoverText", "setExpandedState", "compactList"]);
  const baseProps = getBaseProps(restProps);
  const className2 = clsx_m_default(baseProps.className, styles_css_default56.root);
  const detailsRef = (0, import_react119.useRef)(null);
  const mergedRef = useMergeRefs(ref, detailsRef);
  (0, import_react119.useEffect)(() => {
    if (setPopoverText) {
      if (detailsRef.current) {
        setPopoverText(getSeriesDetailsText(detailsRef.current));
      }
      return () => {
        setPopoverText("");
      };
    }
  }, [details, setPopoverText]);
  const isExpanded = (seriesTitle) => !!expandedSeries && expandedSeries.has(seriesTitle);
  return import_react119.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: className2, ref: mergedRef }),
    import_react119.default.createElement("ul", { className: clsx_m_default(styles_css_default56.list, compactList && styles_css_default56.compact) }, details.map(({ key: key2, value, markerType, color: color2, isDimmed, subItems, expandableId }, index) => import_react119.default.createElement("li", { key: index, className: clsx_m_default({
      [styles_css_default56.dimmed]: isDimmed,
      [styles_css_default56["list-item"]]: true,
      [styles_css_default56["with-sub-items"]]: subItems === null || subItems === void 0 ? void 0 : subItems.length,
      [styles_css_default56.expandable]: !!expandableId
    }) }, (subItems === null || subItems === void 0 ? void 0 : subItems.length) && !!expandableId ? import_react119.default.createElement(ExpandableSeries, { itemKey: key2, value, markerType, color: color2, subItems, expanded: isExpanded(expandableId), setExpandedState: (state) => setExpandedState && setExpandedState(expandableId, state) }) : import_react119.default.createElement(NonExpandableSeries, { itemKey: key2, value, markerType, color: color2, subItems }))))
  );
}
function SubItems({ items, expandable, expanded }) {
  return import_react119.default.createElement("ul", { className: clsx_m_default(styles_css_default56["sub-items"], expandable && styles_css_default56.expandable) }, items.map(({ key: key2, value }, index) => import_react119.default.createElement(
    "li",
    { key: index, className: clsx_m_default(styles_css_default56["inner-list-item"], styles_css_default56["key-value-pair"], (expanded || !expandable) && screenReaderTextClass) },
    import_react119.default.createElement("span", { className: styles_css_default56.key }, key2),
    import_react119.default.createElement("span", { className: styles_css_default56.value }, value)
  )));
}
function ExpandableSeries({ itemKey, value, subItems, markerType, color: color2, expanded, setExpandedState }) {
  return import_react119.default.createElement(
    "div",
    { className: styles_css_default56["expandable-section"] },
    markerType && color2 && import_react119.default.createElement(chart_series_marker_default, { type: markerType, color: color2 }),
    import_react119.default.createElement(
      "div",
      { className: styles_css_default56["full-width"] },
      import_react119.default.createElement(
        InternalExpandableSection,
        { variant: "compact", headerText: itemKey, headerActions: import_react119.default.createElement("span", { className: clsx_m_default(styles_css_default56.value, styles_css_default56.expandable) }, value), expanded, onChange: ({ detail }) => setExpandedState(detail.expanded) },
        import_react119.default.createElement(SubItems, { items: subItems, expandable: true, expanded })
      )
    )
  );
}
function NonExpandableSeries({ itemKey, value, subItems, markerType, color: color2 }) {
  return import_react119.default.createElement(
    import_react119.default.Fragment,
    null,
    import_react119.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default56["key-value-pair"], screenReaderTextClass) },
      import_react119.default.createElement(
        "div",
        { className: styles_css_default56.key },
        markerType && color2 && import_react119.default.createElement(chart_series_marker_default, { type: markerType, color: color2 }),
        import_react119.default.createElement("span", null, itemKey)
      ),
      import_react119.default.createElement("span", { className: styles_css_default56.value }, value)
    ),
    subItems && import_react119.default.createElement(SubItems, { items: subItems })
  );
}

// node_modules/@cloudscape-design/components/area-chart/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/area-chart/styles.scoped.css";
var styles_css_default57 = {
  "series": "awsui_series_y1yrh_expam_189",
  "root": "awsui_root_y1yrh_expam_203",
  "series--highlighted": "awsui_series--highlighted_y1yrh_expam_215",
  "series--dimmed": "awsui_series--dimmed_y1yrh_expam_219",
  "series--threshold": "awsui_series--threshold_y1yrh_expam_223",
  "popover-divider": "awsui_popover-divider_y1yrh_expam_228"
};

// node_modules/@cloudscape-design/components/area-chart/elements/chart-popover.js
function AreaChartPopover({ model, highlightDetails, dismissAriaLabel, footer, size, onBlur }) {
  if (!highlightDetails) {
    return null;
  }
  const popoverProps = {
    title: highlightDetails.formattedX,
    trackRef: model.refs.verticalMarker,
    trackKey: highlightDetails.highlightIndex,
    dismissButton: highlightDetails.isPopoverPinned,
    onDismiss: model.handlers.onPopoverDismiss,
    onMouseLeave: model.handlers.onPopoverLeave,
    ref: model.refs.popoverRef
  };
  return import_react120.default.createElement(
    chart_popover_default,
    Object.assign({}, popoverProps, { container: model.refs.container.current, dismissAriaLabel, size, onBlur, footer }),
    import_react120.default.createElement(chart_series_details_default, { details: highlightDetails.seriesDetails }),
    import_react120.default.createElement("div", { className: styles_css_default57["popover-divider"] }),
    import_react120.default.createElement(chart_series_details_default, { details: highlightDetails.totalDetails })
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/data-series.js
var import_react123 = __toESM(require_react());

// node_modules/@cloudscape-design/components/area-chart/elements/area-series.js
var import_react121 = __toESM(require_react());

// node_modules/d3-path/src/path.js
var pi = Math.PI;
var tau = 2 * pi;
var epsilon = 1e-6;
var tauEpsilon = tau - epsilon;
function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null;
  this._ = "";
}
function path() {
  return new Path();
}
Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x3, y4) {
    this._ += "M" + (this._x0 = this._x1 = +x3) + "," + (this._y0 = this._y1 = +y4);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x3, y4) {
    this._ += "L" + (this._x1 = +x3) + "," + (this._y1 = +y4);
  },
  quadraticCurveTo: function(x1, y1, x3, y4) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x3) + "," + (this._y1 = +y4);
  },
  bezierCurveTo: function(x1, y1, x22, y22, x3, y4) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x22 + "," + +y22 + "," + (this._x1 = +x3) + "," + (this._y1 = +y4);
  },
  arcTo: function(x1, y1, x22, y22, r) {
    x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r = +r;
    var x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
    if (r < 0) throw new Error("negative radius: " + r);
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else if (!(l01_2 > epsilon)) ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else {
      var x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }
      this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x3, y4, r, a0, a1, ccw) {
    x3 = +x3, y4 = +y4, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x3 + dx, y0 = y4 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
    if (r < 0) throw new Error("negative radius: " + r);
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._ += "L" + x0 + "," + y0;
    }
    if (!r) return;
    if (da < 0) da = da % tau + tau;
    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x3 - dx) + "," + (y4 - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } else if (da > epsilon) {
      this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x3 + r * Math.cos(a1)) + "," + (this._y1 = y4 + r * Math.sin(a1));
    }
  },
  rect: function(x3, y4, w2, h3) {
    this._ += "M" + (this._x0 = this._x1 = +x3) + "," + (this._y0 = this._y1 = +y4) + "h" + +w2 + "v" + +h3 + "h" + -w2 + "Z";
  },
  toString: function() {
    return this._;
  }
};
var path_default = path;

// node_modules/d3-shape/src/constant.js
function constant_default(x3) {
  return function constant2() {
    return x3;
  };
}

// node_modules/d3-shape/src/math.js
var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var max = Math.max;
var min = Math.min;
var sin = Math.sin;
var sqrt = Math.sqrt;
var epsilon2 = 1e-12;
var pi2 = Math.PI;
var halfPi = pi2 / 2;
var tau2 = 2 * pi2;
function acos(x3) {
  return x3 > 1 ? 0 : x3 < -1 ? pi2 : Math.acos(x3);
}
function asin(x3) {
  return x3 >= 1 ? halfPi : x3 <= -1 ? -halfPi : Math.asin(x3);
}

// node_modules/d3-shape/src/arc.js
function arcInnerRadius(d3) {
  return d3.innerRadius;
}
function arcOuterRadius(d3) {
  return d3.outerRadius;
}
function arcStartAngle(d3) {
  return d3.startAngle;
}
function arcEndAngle(d3) {
  return d3.endAngle;
}
function arcPadAngle(d3) {
  return d3 && d3.padAngle;
}
function intersect(x0, y0, x1, y1, x22, y22, x3, y32) {
  var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x22, y322 = y32 - y22, t2 = y322 * x10 - x32 * y10;
  if (t2 * t2 < epsilon2) return;
  t2 = (x32 * (y0 - y22) - y322 * (x0 - x22)) / t2;
  return [x0 + t2 * x10, y0 + t2 * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d22 = dx * dx + dy * dy, r = r1 - rc, D2 = x11 * y10 - x10 * y11, d3 = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d22 - D2 * D2)), cx0 = (D2 * dy - dx * d3) / d22, cy0 = (-D2 * dx - dy * d3) / d22, cx1 = (D2 * dy + dx * d3) / d22, cy1 = (-D2 * dx + dy * d3) / d22, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
  function arc() {
    var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = abs(a1 - a0), cw = a1 > a0;
    if (!context) context = buffer = path_default();
    if (r1 < r0) r = r1, r1 = r0, r0 = r;
    if (!(r1 > epsilon2)) context.moveTo(0, 0);
    else if (da > tau2 - epsilon2) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon2) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon2 && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)), rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t02, t12;
      if (rp > epsilon2) {
        var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon2) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon2) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
      if (rc > epsilon2) {
        var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
        if (da < pi2 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
          var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2), lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min(rc, (r0 - lc) / (kc - 1));
          rc1 = min(rc, (r1 - lc) / (kc + 1));
        }
      }
      if (!(da1 > epsilon2)) context.moveTo(x01, y01);
      else if (rc1 > epsilon2) {
        t02 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t12 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t02.cx + t02.x01, t02.cy + t02.y01);
        if (rc1 < rc) context.arc(t02.cx, t02.cy, rc1, atan2(t02.y01, t02.x01), atan2(t12.y01, t12.x01), !cw);
        else {
          context.arc(t02.cx, t02.cy, rc1, atan2(t02.y01, t02.x01), atan2(t02.y11, t02.x11), !cw);
          context.arc(0, 0, r1, atan2(t02.cy + t02.y11, t02.cx + t02.x11), atan2(t12.cy + t12.y11, t12.cx + t12.x11), !cw);
          context.arc(t12.cx, t12.cy, rc1, atan2(t12.y11, t12.x11), atan2(t12.y01, t12.x01), !cw);
        }
      } else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
      if (!(r0 > epsilon2) || !(da0 > epsilon2)) context.lineTo(x10, y10);
      else if (rc0 > epsilon2) {
        t02 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t12 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t02.cx + t02.x01, t02.cy + t02.y01);
        if (rc0 < rc) context.arc(t02.cx, t02.cy, rc0, atan2(t02.y01, t02.x01), atan2(t12.y01, t12.x01), !cw);
        else {
          context.arc(t02.cx, t02.cy, rc0, atan2(t02.y01, t02.x01), atan2(t02.y11, t02.x11), !cw);
          context.arc(0, 0, r0, atan2(t02.cy + t02.y11, t02.cx + t02.x11), atan2(t12.cy + t12.y11, t12.cx + t12.x11), cw);
          context.arc(t12.cx, t12.cy, rc0, atan2(t12.y11, t12.x11), atan2(t12.y01, t12.x01), !cw);
        }
      } else context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }
  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a4 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi2 / 2;
    return [cos(a4) * r, sin(a4) * r];
  };
  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant_default(+_), arc) : innerRadius;
  };
  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant_default(+_), arc) : outerRadius;
  };
  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant_default(+_), arc) : cornerRadius;
  };
  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), arc) : padRadius;
  };
  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default(+_), arc) : startAngle;
  };
  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default(+_), arc) : endAngle;
  };
  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default(+_), arc) : padAngle;
  };
  arc.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };
  return arc;
}

// node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
        break;
      case 1:
        this._point = 2;
      default:
        this._context.lineTo(x3, y4);
        break;
    }
  }
};
function linear_default(context) {
  return new Linear(context);
}

// node_modules/d3-shape/src/point.js
function x(p) {
  return p[0];
}
function y(p) {
  return p[1];
}

// node_modules/d3-shape/src/line.js
function line_default() {
  var x3 = x, y4 = y, defined = constant_default(true), context = null, curve = linear_default, output = null;
  function line(data) {
    var i2, n = data.length, d3, defined0 = false, buffer;
    if (context == null) output = curve(buffer = path_default());
    for (i2 = 0; i2 <= n; ++i2) {
      if (!(i2 < n && defined(d3 = data[i2], i2, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x3(d3, i2, data), +y4(d3, i2, data));
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  line.x = function(_) {
    return arguments.length ? (x3 = typeof _ === "function" ? _ : constant_default(+_), line) : x3;
  };
  line.y = function(_) {
    return arguments.length ? (y4 = typeof _ === "function" ? _ : constant_default(+_), line) : y4;
  };
  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default(!!_), line) : defined;
  };
  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };
  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };
  return line;
}

// node_modules/d3-shape/src/area.js
function area_default() {
  var x0 = x, x1 = null, y0 = constant_default(0), y1 = y, defined = constant_default(true), context = null, curve = linear_default, output = null;
  function area(data) {
    var i2, j, k3, n = data.length, d3, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
    if (context == null) output = curve(buffer = path_default());
    for (i2 = 0; i2 <= n; ++i2) {
      if (!(i2 < n && defined(d3 = data[i2], i2, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i2;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k3 = i2 - 1; k3 >= j; --k3) {
            output.point(x0z[k3], y0z[k3]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i2] = +x0(d3, i2, data), y0z[i2] = +y0(d3, i2, data);
        output.point(x1 ? +x1(d3, i2, data) : x0z[i2], y1 ? +y1(d3, i2, data) : y0z[i2]);
      }
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  function arealine() {
    return line_default().defined(defined).curve(curve).context(context);
  }
  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default(+_), x1 = null, area) : x0;
  };
  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default(+_), area) : x0;
  };
  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), area) : x1;
  };
  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default(+_), y1 = null, area) : y0;
  };
  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default(+_), area) : y0;
  };
  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), area) : y1;
  };
  area.lineX0 = area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };
  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };
  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };
  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default(!!_), area) : defined;
  };
  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };
  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };
  return area;
}

// node_modules/d3-shape/src/descending.js
function descending_default(a4, b2) {
  return b2 < a4 ? -1 : b2 > a4 ? 1 : b2 >= a4 ? 0 : NaN;
}

// node_modules/d3-shape/src/identity.js
function identity_default(d3) {
  return d3;
}

// node_modules/d3-shape/src/pie.js
function pie_default() {
  var value = identity_default, sortValues = descending_default, sort = null, startAngle = constant_default(0), endAngle = constant_default(tau2), padAngle = constant_default(0);
  function pie(data) {
    var i2, n = data.length, j, k3, sum2 = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau2, Math.max(-tau2, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
    for (i2 = 0; i2 < n; ++i2) {
      if ((v = arcs[index[i2] = i2] = +value(data[i2], i2, data)) > 0) {
        sum2 += v;
      }
    }
    if (sortValues != null) index.sort(function(i3, j2) {
      return sortValues(arcs[i3], arcs[j2]);
    });
    else if (sort != null) index.sort(function(i3, j2) {
      return sort(data[i3], data[j2]);
    });
    for (i2 = 0, k3 = sum2 ? (da - n * pa) / sum2 : 0; i2 < n; ++i2, a0 = a1) {
      j = index[i2], v = arcs[j], a1 = a0 + (v > 0 ? v * k3 : 0) + pa, arcs[j] = {
        data: data[j],
        index: i2,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }
    return arcs;
  }
  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant_default(+_), pie) : value;
  };
  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };
  pie.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };
  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default(+_), pie) : startAngle;
  };
  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default(+_), pie) : endAngle;
  };
  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default(+_), pie) : padAngle;
  };
  return pie;
}

// node_modules/d3-shape/src/curve/radial.js
var curveRadialLinear = curveRadial(linear_default);
function Radial(curve) {
  this._curve = curve;
}
Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a4, r) {
    this._curve.point(r * Math.sin(a4), r * -Math.cos(a4));
  }
};
function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }
  radial._curve = curve;
  return radial;
}

// node_modules/d3-shape/src/array.js
var slice = Array.prototype.slice;

// node_modules/d3-shape/src/symbol/diamond.js
var tan30 = Math.sqrt(1 / 3);
var tan30_2 = tan30 * 2;

// node_modules/d3-shape/src/symbol/star.js
var kr = Math.sin(pi2 / 10) / Math.sin(7 * pi2 / 10);
var kx = Math.sin(tau2 / 10) * kr;
var ky = -Math.cos(tau2 / 10) * kr;

// node_modules/d3-shape/src/symbol/triangle.js
var sqrt3 = Math.sqrt(3);

// node_modules/d3-shape/src/symbol/wye.js
var s = Math.sqrt(3) / 2;
var k = 1 / Math.sqrt(12);
var a = (k / 2 + 1) * 3;

// node_modules/d3-shape/src/noop.js
function noop_default() {
}

// node_modules/d3-shape/src/curve/basis.js
function point(that, x3, y4) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x3) / 6,
    (that._y0 + 4 * that._y1 + y4) / 6
  );
}
function Basis(context) {
  this._context = context;
}
Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3:
        point(this, this._x1, this._y1);
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
      default:
        point(this, x3, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y4;
  }
};

// node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
BasisClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x3, this._y2 = y4;
        break;
      case 1:
        this._point = 2;
        this._x3 = x3, this._y3 = y4;
        break;
      case 2:
        this._point = 3;
        this._x4 = x3, this._y4 = y4;
        this._context.moveTo((this._x0 + 4 * this._x1 + x3) / 6, (this._y0 + 4 * this._y1 + y4) / 6);
        break;
      default:
        point(this, x3, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y4;
  }
};

// node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x3) / 6, y0 = (this._y0 + 4 * this._y1 + y4) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;
      case 3:
        this._point = 4;
      default:
        point(this, x3, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y4;
  }
};

// node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x3 = this._x, y4 = this._y, j = x3.length - 1;
    if (j > 0) {
      var x0 = x3[0], y0 = y4[0], dx = x3[j] - x0, dy = y4[j] - y0, i2 = -1, t2;
      while (++i2 <= j) {
        t2 = i2 / j;
        this._basis.point(
          this._beta * x3[i2] + (1 - this._beta) * (x0 + t2 * dx),
          this._beta * y4[i2] + (1 - this._beta) * (y0 + t2 * dy)
        );
      }
    }
    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x3, y4) {
    this._x.push(+x3);
    this._y.push(+y4);
  }
};
var bundle_default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }
  bundle.beta = function(beta2) {
    return custom(+beta2);
  };
  return bundle;
}(0.85);

// node_modules/d3-shape/src/curve/cardinal.js
function point2(that, x3, y4) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x3),
    that._y2 + that._k * (that._y1 - y4),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        point2(this, this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
        break;
      case 1:
        this._point = 2;
        this._x1 = x3, this._y1 = y4;
        break;
      case 2:
        this._point = 3;
      default:
        point2(this, x3, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinal_default = function custom2(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom2(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x3, this._y3 = y4;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x3, this._y4 = y4);
        break;
      case 2:
        this._point = 3;
        this._x5 = x3, this._y5 = y4;
        break;
      default:
        point2(this, x3, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinalClosed_default = function custom3(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom3(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point2(this, x3, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinalOpen_default = function custom4(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom4(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/catmullRom.js
function point3(that, x3, y4) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon2) {
    var a4 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a4 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a4 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }
  if (that._l23_a > epsilon2) {
    var b2 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m3 = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b2 + that._x1 * that._l23_2a - x3 * that._l12_2a) / m3;
    y22 = (y22 * b2 + that._y1 * that._l23_2a - y4 * that._l12_2a) / m3;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        this.point(this._x2, this._y2);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x3, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
      default:
        point3(this, x3, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRom_default = function custom5(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom5(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x3, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x3, this._y3 = y4;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x3, this._y4 = y4);
        break;
      case 2:
        this._point = 3;
        this._x5 = x3, this._y5 = y4;
        break;
      default:
        point3(this, x3, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRomClosed_default = function custom6(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom6(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x3, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point3(this, x3, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRomOpen_default = function custom7(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom7(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
LinearClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    if (this._point) this._context.lineTo(x3, y4);
    else this._point = 1, this._context.moveTo(x3, y4);
  }
};

// node_modules/d3-shape/src/curve/monotone.js
function sign(x3) {
  return x3 < 0 ? -1 : 1;
}
function slope3(that, x22, y22) {
  var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
function slope2(that, t2) {
  var h3 = that._x1 - that._x0;
  return h3 ? (3 * (that._y1 - that._y0) / h3 - t2) / 2 : t2;
}
function point4(that, t02, t12) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
      case 3:
        point4(this, this._t0, slope2(this, this._t0));
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    var t12 = NaN;
    x3 = +x3, y4 = +y4;
    if (x3 === this._x1 && y4 === this._y1) return;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        point4(this, slope2(this, t12 = slope3(this, x3, y4)), t12);
        break;
      default:
        point4(this, this._t0, t12 = slope3(this, x3, y4));
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y4;
    this._t0 = t12;
  }
};
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x3, y4) {
  MonotoneX.prototype.point.call(this, y4, x3);
};
function ReflectContext(context) {
  this._context = context;
}
ReflectContext.prototype = {
  moveTo: function(x3, y4) {
    this._context.moveTo(y4, x3);
  },
  closePath: function() {
    this._context.closePath();
  },
  lineTo: function(x3, y4) {
    this._context.lineTo(y4, x3);
  },
  bezierCurveTo: function(x1, y1, x22, y22, x3, y4) {
    this._context.bezierCurveTo(y1, x1, y22, x22, y4, x3);
  }
};

// node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x3 = this._x, y4 = this._y, n = x3.length;
    if (n) {
      this._line ? this._context.lineTo(x3[0], y4[0]) : this._context.moveTo(x3[0], y4[0]);
      if (n === 2) {
        this._context.lineTo(x3[1], y4[1]);
      } else {
        var px = controlPoints(x3), py = controlPoints(y4);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x3[i1], y4[i1]);
        }
      }
    }
    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x3, y4) {
    this._x.push(+x3);
    this._y.push(+y4);
  }
};
function controlPoints(x3) {
  var i2, n = x3.length - 1, m3, a4 = new Array(n), b2 = new Array(n), r = new Array(n);
  a4[0] = 0, b2[0] = 2, r[0] = x3[0] + 2 * x3[1];
  for (i2 = 1; i2 < n - 1; ++i2) a4[i2] = 1, b2[i2] = 4, r[i2] = 4 * x3[i2] + 2 * x3[i2 + 1];
  a4[n - 1] = 2, b2[n - 1] = 7, r[n - 1] = 8 * x3[n - 1] + x3[n];
  for (i2 = 1; i2 < n; ++i2) m3 = a4[i2] / b2[i2 - 1], b2[i2] -= m3, r[i2] -= m3 * r[i2 - 1];
  a4[n - 1] = r[n - 1] / b2[n - 1];
  for (i2 = n - 2; i2 >= 0; --i2) a4[i2] = (r[i2] - a4[i2 + 1]) / b2[i2];
  b2[n - 1] = (x3[n] + a4[n - 1]) / 2;
  for (i2 = 0; i2 < n - 1; ++i2) b2[i2] = 2 * x3[i2 + 1] - a4[i2 + 1];
  return [a4, b2];
}

// node_modules/d3-shape/src/curve/step.js
function Step(context, t2) {
  this._context = context;
  this._t = t2;
}
Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
        break;
      case 1:
        this._point = 2;
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y4);
          this._context.lineTo(x3, y4);
        } else {
          var x1 = this._x * (1 - this._t) + x3 * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y4);
        }
        break;
      }
    }
    this._x = x3, this._y = y4;
  }
};

// node_modules/@cloudscape-design/components/area-chart/elements/area-series.js
var area_series_default = (0, import_react121.memo)(AreaSeries);
function AreaSeries({ data, color: color2, chartAreaClipPath }) {
  const areaGenerator = area_default().x((p) => p.scaled.x).y0((p) => p.scaled.y0).y1((p) => p.scaled.y1);
  const areaPath = areaGenerator(data) || "";
  const lineGenerator = line_default().x((p) => p.scaled.x).y((p) => p.scaled.y1);
  const linePath = lineGenerator(data) || "";
  return import_react121.default.createElement(
    import_react121.default.Fragment,
    null,
    import_react121.default.createElement("path", { "aria-hidden": true, fill: color2, stroke: color2, style: { opacity: 0.4 }, clipPath: `url(#${chartAreaClipPath})`, d: areaPath }),
    import_react121.default.createElement("path", { "aria-hidden": true, stroke: color2, clipPath: `url(#${chartAreaClipPath})`, d: linePath })
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/threshold-series.js
var import_react122 = __toESM(require_react());
var threshold_series_default = (0, import_react122.memo)(ThresholdSeries);
function ThresholdSeries({ data, xScale, color: color2, chartAreaClipPath }) {
  const range3 = xScale.d3Scale.range();
  const y4 = data[0].scaled.y0;
  const path2 = { x1: range3[0], x2: range3[1], y1: y4, y2: y4 };
  return import_react122.default.createElement("line", Object.assign({ "aria-hidden": true, stroke: color2, clipPath: `url(#${chartAreaClipPath})` }, path2));
}

// node_modules/@cloudscape-design/components/area-chart/elements/data-series.js
var data_series_default = (0, import_react123.memo)(DataSeries);
function DataSeries({ model }) {
  const chartAreaClipPath = useUniqueId("awsui-area-chart__chart-area-");
  const highlightedX = useSelector(model.interactions, (state) => state.highlightedX);
  const highlightedSeries = useSelector(model.interactions, (state) => state.highlightedSeries);
  const useHighlightDimmed = !highlightedX;
  const seriesData = [];
  for (let seriesIndex = model.series.length - 1; seriesIndex >= 0; seriesIndex--) {
    if (model.computed.plot.sx[seriesIndex]) {
      seriesData.push([model.series[seriesIndex], model.computed.plot.sx[seriesIndex] || []]);
    }
  }
  return import_react123.default.createElement(
    import_react123.default.Fragment,
    null,
    import_react123.default.createElement(
      "defs",
      { "aria-hidden": "true" },
      import_react123.default.createElement(
        "clipPath",
        { id: chartAreaClipPath },
        import_react123.default.createElement("rect", { x: 0, y: 0, width: model.width, height: model.height })
      )
    ),
    import_react123.default.createElement("g", { role: "group" }, seriesData.map(([series, data]) => {
      const isHighlighted = series === highlightedSeries;
      const isDimmed = !!highlightedSeries && !isHighlighted;
      return import_react123.default.createElement("g", { key: series.title, role: "group", "aria-label": series.title, className: clsx_m_default(styles_css_default57.series, styles_css_default57[`series--${series.type}`], {
        [styles_css_default57["series--highlighted"]]: isHighlighted,
        [styles_css_default57["series--dimmed"]]: useHighlightDimmed && isDimmed
      }) }, series.type === "area" ? import_react123.default.createElement(area_series_default, { data, color: model.getInternalSeries(series).color, chartAreaClipPath }) : import_react123.default.createElement(threshold_series_default, { data, xScale: model.computed.xScale, color: model.getInternalSeries(series).color, chartAreaClipPath }));
    }))
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/highlighted-point.js
var import_react125 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/highlighted-point.js
var import_react124 = __toESM(require_react());
var highlighted_point_default = (0, import_react124.memo)((0, import_react124.forwardRef)(HighlightedPoint));
function HighlightedPoint({ point: point5, role = "group", ariaLabel, ariaHasPopup, ariaExpanded }, ref) {
  if (!point5) {
    return null;
  }
  return import_react124.default.createElement(
    "g",
    { ref, role, "aria-label": ariaLabel, "aria-haspopup": ariaHasPopup, "aria-expanded": ariaExpanded },
    import_react124.default.createElement("circle", { key: point5.key, "aria-hidden": "true", className: styles_css_default49["vertical-marker-circle-active"], cx: point5.x, cy: point5.y, r: 4, stroke: point5.color, fill: point5.color })
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/highlighted-point.js
var highlighted_point_default2 = (0, import_react125.memo)((0, import_react125.forwardRef)(AreaHighlightedPoint));
function AreaHighlightedPoint({ model, ariaLabel }, ref) {
  const highlightedPoint = useSelector(model.interactions, (state) => state.highlightedPoint);
  const isPopoverPinned = useSelector(model.interactions, (state) => state.isPopoverPinned);
  const point5 = highlightedPoint ? {
    key: `${highlightedPoint.index.x}:${highlightedPoint.index.s}`,
    x: highlightedPoint.scaled.x,
    y: highlightedPoint.scaled.y1,
    color: model.getInternalSeries(model.series[highlightedPoint.index.s]).color
  } : null;
  return import_react125.default.createElement(highlighted_point_default, { ref, point: point5, role: "button", ariaLabel, ariaHasPopup: true, ariaExpanded: isPopoverPinned });
}

// node_modules/@cloudscape-design/components/area-chart/elements/use-highlight-details.js
function useHighlightDetails({ model, xTickFormatter, yTickFormatter, detailTotalFormatter, detailTotalLabel }) {
  const i18n = useInternalI18n("area-chart");
  const hX = useSelector(model.interactions, (state) => state.highlightedX);
  const hPoint = useSelector(model.interactions, (state) => state.highlightedPoint);
  const isPopoverPinned = useSelector(model.interactions, (state) => state.isPopoverPinned);
  if (!hX) {
    return null;
  }
  const [firstPoint] = hX;
  const highlightIndex = firstPoint.index.x;
  const seriesPoints = [...model.computed.plot.xs[highlightIndex]];
  const detailsTotal = seriesPoints.reduce((total, point5) => total + point5.value, 0);
  const formattedX = xTickFormatter ? xTickFormatter(firstPoint.x) : firstPoint.x.toString();
  const seriesTitle = hPoint ? getInternalSeries(hPoint).title : "";
  const formattedY = hPoint ? getInternalSeries(hPoint).formatValue(hPoint.value, hPoint.x) : "";
  const seriesDetails = seriesPoints.map((point5) => {
    const { title, formatValue: formatValue2, color: color2, markerType } = getInternalSeries(point5);
    const isDimmed = Boolean(hPoint) && point5 !== hPoint;
    return { key: title, value: formatValue2(point5.value, point5.x), color: color2, markerType, isDimmed };
  });
  const totalDetails = [
    {
      key: i18n("i18nStrings.detailTotalLabel", detailTotalLabel) || "",
      value: detailTotalFormatter ? detailTotalFormatter(detailsTotal) : yTickFormatter ? yTickFormatter(detailsTotal) : detailsTotal
    }
  ];
  const pointDetails = hPoint ? seriesDetails[hPoint.index.s] : null;
  const activeLabel = `${seriesTitle} ${formattedX} ${formattedY}, ${totalDetails[0].key} ${totalDetails[0].value}`;
  return {
    isPopoverPinned,
    highlightIndex,
    formattedX,
    seriesTitle,
    formattedY,
    activeLabel,
    seriesDetails,
    totalDetails,
    pointDetails
  };
  function getInternalSeries(point5) {
    return model.getInternalSeries(model.series[point5.index.s]);
  }
}

// node_modules/@cloudscape-design/components/area-chart/elements/vertical-marker.js
var import_react127 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/vertical-marker.js
var import_react126 = __toESM(require_react());
var vertical_marker_default = (0, import_react126.memo)((0, import_react126.forwardRef)(VerticalMarker));
function VerticalMarker({ height, showPoints = true, showLine = true, points }, ref) {
  const [firstPoint] = points || [];
  return import_react126.default.createElement(
    "g",
    null,
    import_react126.default.createElement("line", { ref, "aria-hidden": "true", className: styles_css_default49["vertical-marker"], style: { visibility: showLine && firstPoint ? "visible" : "hidden" }, x1: firstPoint === null || firstPoint === void 0 ? void 0 : firstPoint.x, x2: firstPoint === null || firstPoint === void 0 ? void 0 : firstPoint.x, y1: 0, y2: height }),
    showPoints && points && points.map((point5) => import_react126.default.createElement("circle", { key: point5.key, "aria-hidden": "true", className: styles_css_default49["vertical-marker-circle"], cx: point5.x, cy: point5.y, r: 4, stroke: point5.color }))
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/vertical-marker.js
var vertical_marker_default2 = (0, import_react127.memo)(AreaVerticalMarker);
function AreaVerticalMarker({ model }) {
  const highlightedX = useSelector(model.interactions, (state) => state.highlightedX);
  const verticalMarker = (highlightedX || []).map((point5) => ({
    key: `${point5.index.x}:${point5.index.s}`,
    x: point5.scaled.x,
    y: point5.scaled.y1,
    color: model.getInternalSeries(model.series[point5.index.s]).color
  }));
  return import_react127.default.createElement(vertical_marker_default, { height: model.height, points: verticalMarker, ref: model.refs.verticalMarker });
}

// node_modules/@cloudscape-design/components/area-chart/chart-container.js
var DEFAULT_CHART_WIDTH = 500;
var INLINE_START_LABELS_MARGIN = 16;
var BLOCK_END_LABELS_OFFSET = 12;
var chart_container_default = (0, import_react128.memo)(ChartContainer);
function ChartContainer({ model, autoWidth, xTitle, yTitle, detailPopoverSize, detailPopoverFooter, ariaLabel, ariaLabelledby, ariaDescription, i18nStrings: { xTickFormatter: deprecatedXTickFormatter, yTickFormatter: deprecatedYTickFormatter, detailTotalFormatter: deprecatedDetailTotalFormatter, detailTotalLabel, chartAriaRoleDescription, xAxisAriaRoleDescription, yAxisAriaRoleDescription, detailPopoverDismissAriaLabel } = {}, fitHeight, hasFilters, minHeight, xTickFormatter = deprecatedXTickFormatter, yTickFormatter = deprecatedYTickFormatter, detailTotalFormatter = deprecatedDetailTotalFormatter, isRTL }) {
  const [inlineStartLabelsWidth, setInlineStartLabelsWidth] = (0, import_react128.useState)(0);
  const [containerWidth, containerWidthRef] = useContainerWidth(DEFAULT_CHART_WIDTH);
  const maxInlineStartLabelsWidth = Math.round(containerWidth / 2);
  const blockEndLabelsProps = useBLockEndLabels({
    ticks: model.computed.xTicks,
    scale: model.computed.xScale,
    tickFormatter: xTickFormatter
  });
  const plotWidth = Math.max(0, containerWidth - inlineStartLabelsWidth - INLINE_START_LABELS_MARGIN);
  (0, import_react128.useEffect)(() => {
    autoWidth(plotWidth);
  }, [autoWidth, plotWidth]);
  const highlightDetails = useHighlightDetails({
    model,
    xTickFormatter,
    yTickFormatter,
    detailTotalFormatter,
    detailTotalLabel
  });
  const highlightedPointRef = (0, import_react128.useRef)(null);
  const mergedRef = useMergeRefs(containerWidthRef, model.refs.container);
  const isPointHighlighted = model.interactions.get().highlightedPoint !== null;
  const highlightedX = useSelector(model.interactions, (state) => state.highlightedX);
  const detailPopoverFooterContent = (0, import_react128.useMemo)(() => detailPopoverFooter && highlightedX ? detailPopoverFooter(highlightedX[0].x) : null, [detailPopoverFooter, highlightedX]);
  return import_react128.default.createElement(CartesianChartContainer, { ref: mergedRef, minHeight: minHeight + blockEndLabelsProps.height, fitHeight: !!fitHeight, hasFilters, leftAxisLabel: import_react128.default.createElement(axis_label_default, { axis: "y", position: "left", title: yTitle }), leftAxisLabelMeasure: import_react128.default.createElement(labels_measure_default, { scale: model.computed.yScale, ticks: model.computed.yTicks, tickFormatter: yTickFormatter, autoWidth: setInlineStartLabelsWidth, maxLabelsWidth: maxInlineStartLabelsWidth }), bottomAxisLabel: import_react128.default.createElement(axis_label_default, { axis: "x", position: "bottom", title: xTitle }), chartPlot: import_react128.default.createElement(
    chart_plot_default,
    { ref: model.refs.plot, width: "100%", height: fitHeight ? `calc(100% - ${blockEndLabelsProps.height}px)` : model.height, offsetBottom: blockEndLabelsProps.height, ariaLabel, ariaLabelledby, ariaDescription, ariaRoleDescription: chartAriaRoleDescription, activeElementKey: !(highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.isPopoverPinned) && (highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.activeLabel), activeElementRef: isPointHighlighted ? highlightedPointRef : model.refs.verticalMarker, activeElementFocusOffset: isPointHighlighted ? 3 : { x: 8, y: 0 }, isClickable: !(highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.isPopoverPinned), onMouseMove: model.handlers.onSVGMouseMove, onMouseOut: model.handlers.onSVGMouseOut, onClick: model.handlers.onSVGMouseDown, onKeyDown: model.handlers.onSVGKeyDown, onApplicationFocus: model.handlers.onApplicationFocus, onApplicationBlur: model.handlers.onApplicationBlur },
    import_react128.default.createElement("line", { ref: model.refs.plotMeasure, x1: "0", x2: "0", y1: "0", y2: "100%", stroke: "transparent", strokeWidth: 1, style: { pointerEvents: "none" } }),
    import_react128.default.createElement(inline_start_labels_default, { plotWidth: model.width, plotHeight: model.height, scale: model.computed.yScale, ticks: model.computed.yTicks, tickFormatter: yTickFormatter, title: yTitle, ariaRoleDescription: yAxisAriaRoleDescription, maxLabelsWidth: maxInlineStartLabelsWidth }),
    import_react128.default.createElement(data_series_default, { model }),
    import_react128.default.createElement(block_end_labels_default, Object.assign({}, blockEndLabelsProps, { width: model.width, height: model.height, scale: model.computed.xScale, title: xTitle, ariaRoleDescription: xAxisAriaRoleDescription, offsetLeft: inlineStartLabelsWidth + BLOCK_END_LABELS_OFFSET, offsetRight: BLOCK_END_LABELS_OFFSET, isRTL })),
    import_react128.default.createElement(emphasized_baseline_default, { width: model.width, height: model.height, scale: model.computed.yScale }),
    import_react128.default.createElement(vertical_marker_default2, { model }),
    import_react128.default.createElement(highlighted_point_default2, { ref: highlightedPointRef, model, ariaLabel: highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.activeLabel })
  ), popover: import_react128.default.createElement(AreaChartPopover, { model, highlightDetails, dismissAriaLabel: detailPopoverDismissAriaLabel, size: detailPopoverSize, footer: detailPopoverFooterContent, onBlur: model.handlers.onApplicationBlur }) });
}

// node_modules/@cloudscape-design/components/area-chart/elements/area-chart-filter.js
var import_react161 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-filter/index.js
var import_react160 = __toESM(require_react());

// node_modules/@cloudscape-design/components/multiselect/internal.js
var import_react159 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/dropdown-footer/index.js
var import_react130 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/dropdown-status/index.js
var import_react129 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/dropdown-status/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/dropdown-status/styles.scoped.css";
var styles_css_default58 = {
  "root": "awsui_root_vrgzu_11c7p_145",
  "recovery": "awsui_recovery_vrgzu_11c7p_180"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown-status/index.js
function DropdownStatus({ children }) {
  return import_react129.default.createElement("div", { className: styles_css_default58.root }, children);
}
var useDropdownStatus = ({ statusType, empty, loadingText, finishedText, filteringResultsText, errorText, recoveryText, isEmpty, isNoMatch, isFiltered, noMatch, onRecoveryClick, hasRecoveryCallback = false, errorIconAriaLabel }) => {
  const previousStatusType = usePrevious(statusType);
  const statusResult = { isSticky: true, content: null, hasRecoveryButton: false };
  if (statusType === "loading") {
    statusResult.content = import_react129.default.createElement(StatusIndicator, { type: "loading" }, loadingText);
  } else if (statusType === "error") {
    statusResult.hasRecoveryButton = !!recoveryText && hasRecoveryCallback;
    statusResult.content = import_react129.default.createElement(
      "span",
      null,
      import_react129.default.createElement(StatusIndicator, { type: "error", __display: "inline", __animate: previousStatusType !== "error", iconAriaLabel: errorIconAriaLabel }, errorText),
      " ",
      statusResult.hasRecoveryButton && import_react129.default.createElement(internal_default10, { onFollow: () => fireNonCancelableEvent(onRecoveryClick), variant: "recovery", className: styles_css_default58.recovery }, recoveryText)
    );
  } else if (isEmpty && empty) {
    statusResult.content = empty;
  } else if (isNoMatch && noMatch) {
    statusResult.content = noMatch;
  } else if (isFiltered && filteringResultsText) {
    statusResult.content = filteringResultsText;
  } else if (statusType === "finished" && finishedText) {
    statusResult.content = finishedText;
    statusResult.isSticky = false;
  }
  return statusResult;
};
var dropdown_status_default = DropdownStatus;

// node_modules/@cloudscape-design/components/internal/components/dropdown-footer/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/dropdown-footer/styles.scoped.css";
var styles_css_default59 = {
  "root": "awsui_root_1afi9_1n6s2_145",
  "hidden": "awsui_hidden_1afi9_1n6s2_176",
  "no-items": "awsui_no-items_1afi9_1n6s2_179"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown-footer/index.js
var DropdownFooter = ({ content, id, hasItems = true }) => import_react130.default.createElement("div", { className: clsx_m_default(styles_css_default59.root, { [styles_css_default59.hidden]: content === null, [styles_css_default59["no-items"]]: !hasItems }) }, content && import_react130.default.createElement(
  internal_default2,
  { id },
  import_react130.default.createElement(dropdown_status_default, null, content)
));
var dropdown_footer_default = DropdownFooter;

// node_modules/@cloudscape-design/components/select/parts/filter.js
var import_react133 = __toESM(require_react());

// node_modules/@cloudscape-design/components/input/internal.js
var import_react132 = __toESM(require_react());

// node_modules/@cloudscape-design/components/input/utils.js
var import_react131 = __toESM(require_react());
var useSearchProps = (type, disabled, readOnly, value, inputRef, onChange) => {
  const searchProps = {};
  const handleIconClick = (0, import_react131.useCallback)(() => {
    var _a;
    (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    onChange("");
  }, [inputRef, onChange]);
  if (type === "search" || type === "visualSearch") {
    searchProps.__leftIcon = "search";
    if (!disabled && !readOnly && value) {
      searchProps.__rightIcon = "close";
      searchProps.__onRightIconClick = handleIconClick;
    }
  }
  return searchProps;
};
var convertAutoComplete = (propertyValue = false) => {
  if (propertyValue === true) {
    return "on";
  }
  return propertyValue || "off";
};

// node_modules/@cloudscape-design/components/input/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/input/styles.scoped.css";
var styles_css_default60 = {
  "root": "awsui_root_2rhyz_x45v2_145",
  "input": "awsui_input_2rhyz_x45v2_149",
  "input-readonly": "awsui_input-readonly_2rhyz_x45v2_196",
  "input-invalid": "awsui_input-invalid_2rhyz_x45v2_263",
  "input-has-icon-left": "awsui_input-has-icon-left_2rhyz_x45v2_272",
  "input-warning": "awsui_input-warning_2rhyz_x45v2_275",
  "input-type-search": "awsui_input-type-search_2rhyz_x45v2_287",
  "input-has-icon-right": "awsui_input-has-icon-right_2rhyz_x45v2_300",
  "input-has-no-border-radius": "awsui_input-has-no-border-radius_2rhyz_x45v2_303",
  "input-container": "awsui_input-container_2rhyz_x45v2_310",
  "input-icon-left": "awsui_input-icon-left_2rhyz_x45v2_315",
  "input-icon-right": "awsui_input-icon-right_2rhyz_x45v2_322",
  "input-button-right": "awsui_input-button-right_2rhyz_x45v2_328"
};

// node_modules/@cloudscape-design/components/input/internal.js
function InternalInput(_a, ref) {
  var { type = "text", step: step2, inputMode, autoComplete = true, ariaLabel, clearAriaLabel: clearAriaLabelOverride, name, value, placeholder, autoFocus, disabled, readOnly, disableBrowserAutocorrect, spellcheck, __noBorderRadius, __leftIcon, __leftIconVariant = "subtle", __onLeftIconClick, ariaRequired, __rightIcon, __onRightIconClick, onKeyDown, onKeyUp, onChange, __onDelayedInput, __onBlurWithDetail, onBlur, onFocus, __nativeAttributes, __internalRootRef, __inheritFormFieldProps } = _a, rest = __rest(_a, ["type", "step", "inputMode", "autoComplete", "ariaLabel", "clearAriaLabel", "name", "value", "placeholder", "autoFocus", "disabled", "readOnly", "disableBrowserAutocorrect", "spellcheck", "__noBorderRadius", "__leftIcon", "__leftIconVariant", "__onLeftIconClick", "ariaRequired", "__rightIcon", "__onRightIconClick", "onKeyDown", "onKeyUp", "onChange", "__onDelayedInput", "__onBlurWithDetail", "onBlur", "onFocus", "__nativeAttributes", "__internalRootRef", "__inheritFormFieldProps"]);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("input");
  const fireDelayedInput = useDebounceCallback((value2) => fireNonCancelableEvent(__onDelayedInput, { value: value2 }));
  const handleChange = (value2) => {
    fireDelayedInput(value2);
    fireNonCancelableEvent(onChange, { value: value2 });
  };
  const inputRef = (0, import_react132.useRef)(null);
  const searchProps = useSearchProps(type, disabled, readOnly, value, inputRef, handleChange);
  __leftIcon = __leftIcon !== null && __leftIcon !== void 0 ? __leftIcon : searchProps.__leftIcon;
  __rightIcon = __rightIcon !== null && __rightIcon !== void 0 ? __rightIcon : searchProps.__rightIcon;
  __onRightIconClick = __onRightIconClick !== null && __onRightIconClick !== void 0 ? __onRightIconClick : searchProps.__onRightIconClick;
  const formFieldContext = useFormFieldContext(rest);
  const { ariaLabelledby, ariaDescribedby, controlId, invalid, warning } = __inheritFormFieldProps ? formFieldContext : rest;
  const attributes = Object.assign({
    "aria-label": ariaLabel,
    // aria-labelledby has precedence over aria-label in accessible name calculation.
    // When aria-label is provided for Input, it should override aria-labelledBy from form-field context.
    // If both aria-label and aria-labelledby come from Input props, aria-labelledby will be used in accessible name
    "aria-labelledby": ariaLabel && !rest.ariaLabelledby ? void 0 : ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    name,
    placeholder,
    autoFocus,
    id: controlId,
    className: clsx_m_default(styles_css_default60.input, type && styles_css_default60[`input-type-${type}`], __rightIcon && styles_css_default60["input-has-icon-right"], __leftIcon && styles_css_default60["input-has-icon-left"], __noBorderRadius && styles_css_default60["input-has-no-border-radius"], {
      [styles_css_default60["input-readonly"]]: readOnly,
      [styles_css_default60["input-invalid"]]: invalid,
      [styles_css_default60["input-warning"]]: warning && !invalid
    }),
    autoComplete: convertAutoComplete(autoComplete),
    disabled,
    readOnly,
    type,
    step: step2,
    inputMode,
    spellCheck: spellcheck,
    onKeyDown: onKeyDown && ((event) => fireKeyboardEvent(onKeyDown, event)),
    onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)),
    // We set a default value on the component in order to force it into the controlled mode.
    value: value !== null && value !== void 0 ? value : "",
    onChange: onChange && ((event) => handleChange(event.target.value)),
    onBlur: (e3) => {
      fireNonCancelableEvent(onBlur);
      fireNonCancelableEvent(__onBlurWithDetail, { relatedTarget: e3.relatedTarget });
    },
    onFocus: onFocus && (() => fireNonCancelableEvent(onFocus))
  }, __nativeAttributes);
  if (type === "number") {
    attributes.onWheel = (event) => event.currentTarget.blur();
  }
  if (disableBrowserAutocorrect) {
    attributes.autoCorrect = "off";
    attributes.autoCapitalize = "off";
  }
  if (ariaRequired) {
    attributes["aria-required"] = "true";
  }
  if (invalid) {
    attributes["aria-invalid"] = "true";
  }
  const mergedRef = useMergeRefs(ref, inputRef);
  if (attributes.type === "visualSearch") {
    attributes.type = "text";
  }
  return import_react132.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default60["input-container"]), ref: __internalRootRef, dir: type === "email" ? "ltr" : void 0 }),
    __leftIcon && import_react132.default.createElement(
      "span",
      { onClick: __onLeftIconClick, className: styles_css_default60["input-icon-left"] },
      import_react132.default.createElement(internal_default, { name: __leftIcon, variant: disabled || readOnly ? "disabled" : __leftIconVariant })
    ),
    import_react132.default.createElement("input", Object.assign({ ref: mergedRef }, attributes)),
    __rightIcon && import_react132.default.createElement(
      "span",
      Object.assign({ className: styles_css_default60["input-icon-right"] }, __rightIcon === "close" ? getAnalyticsMetadataAttribute({
        action: "clearInput"
      }) : {}),
      import_react132.default.createElement(
        internal_default3,
        {
          // Used for test utils
          className: styles_css_default60["input-button-right"],
          variant: "inline-icon-pointer-target",
          formAction: "none",
          iconName: __rightIcon,
          onClick: __onRightIconClick,
          ariaLabel: i18n("clearAriaLabel", clearAriaLabelOverride),
          disabled
        }
      )
    )
  );
}
var internal_default11 = import_react132.default.forwardRef(InternalInput);

// node_modules/@cloudscape-design/components/select/parts/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/select/parts/styles.scoped.css";
var styles_css_default61 = {
  "placeholder": "awsui_placeholder_dwuol_1j2uk_145",
  "item": "awsui_item_dwuol_1j2uk_150",
  "checkbox": "awsui_checkbox_dwuol_1j2uk_154",
  "filter": "awsui_filter_dwuol_1j2uk_163",
  "trigger": "awsui_trigger_dwuol_1j2uk_168",
  "layout-strut": "awsui_layout-strut_dwuol_1j2uk_174",
  "list-bottom": "awsui_list-bottom_dwuol_1j2uk_180",
  "selected-icon": "awsui_selected-icon_dwuol_1j2uk_184",
  "show-label-tag": "awsui_show-label-tag_dwuol_1j2uk_188",
  "inline-token-trigger": "awsui_inline-token-trigger_dwuol_1j2uk_192",
  "inline-token-list": "awsui_inline-token-list_dwuol_1j2uk_199",
  "inline-token": "awsui_inline-token_dwuol_1j2uk_192",
  "visual-refresh": "awsui_visual-refresh_dwuol_1j2uk_229",
  "inline-token-hidden-placeholder": "awsui_inline-token-hidden-placeholder_dwuol_1j2uk_236",
  "inline-token-counter": "awsui_inline-token-counter_dwuol_1j2uk_242",
  "inline-token-trigger--disabled": "awsui_inline-token-trigger--disabled_dwuol_1j2uk_246",
  "inline-label-trigger-wrapper": "awsui_inline-label-trigger-wrapper_dwuol_1j2uk_252",
  "inline-label-wrapper": "awsui_inline-label-wrapper_dwuol_1j2uk_256",
  "inline-label": "awsui_inline-label_dwuol_1j2uk_252",
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_dwuol_1j2uk_282"
};

// node_modules/@cloudscape-design/components/select/parts/filter.js
var Filter = import_react133.default.forwardRef((_a, ref) => {
  var { filteringType } = _a, filterProps = __rest(_a, ["filteringType"]);
  if (filteringType === "none") {
    return null;
  }
  return import_react133.default.createElement(internal_default11, Object.assign({ ref, type: "visualSearch", className: styles_css_default61.filter, autoComplete: false, disableBrowserAutocorrect: true, invalid: false, __noBorderRadius: true }, filterProps, { __nativeAttributes: Object.assign({ "aria-expanded": true, "aria-haspopup": true, role: "combobox", autoCorrect: "off", autoCapitalize: "off" }, filterProps.__nativeAttributes) }));
});
var filter_default = Filter;

// node_modules/@cloudscape-design/components/select/parts/plain-list.js
var import_react141 = __toESM(require_react());

// node_modules/@cloudscape-design/components/select/utils/render-options.js
var import_react140 = __toESM(require_react());

// node_modules/@cloudscape-design/components/select/parts/item.js
var import_react138 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/index.js
var import_react136 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/option-parts.js
var import_react135 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/highlight-match.js
var import_react134 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/option/styles.scoped.css";
var styles_css_default62 = {
  "option": "awsui_option_1p2cx_1w5f5_153",
  "disabled": "awsui_disabled_1p2cx_1w5f5_190",
  "parent": "awsui_parent_1p2cx_1w5f5_193",
  "highlighted": "awsui_highlighted_1p2cx_1w5f5_196",
  "content": "awsui_content_1p2cx_1w5f5_200",
  "label-content": "awsui_label-content_1p2cx_1w5f5_207",
  "label": "awsui_label_1p2cx_1w5f5_207",
  "tag": "awsui_tag_1p2cx_1w5f5_214",
  "label-tag": "awsui_label-tag_1p2cx_1w5f5_215",
  "label-prefix": "awsui_label-prefix_1p2cx_1w5f5_225",
  "tags": "awsui_tags_1p2cx_1w5f5_238",
  "description": "awsui_description_1p2cx_1w5f5_239",
  "selected": "awsui_selected_1p2cx_1w5f5_250",
  "icon": "awsui_icon_1p2cx_1w5f5_264",
  "icon-size-big": "awsui_icon-size-big_1p2cx_1w5f5_271",
  "filtering-match-highlight": "awsui_filtering-match-highlight_1p2cx_1w5f5_275",
  "trigger-variant": "awsui_trigger-variant_1p2cx_1w5f5_290"
};

// node_modules/@cloudscape-design/components/internal/components/option/highlight-match.js
var splitOnFiltering = (str, highlightText) => {
  if (highlightText.length > 1e4) {
    return { noMatches: [str], matches: null };
  }
  const filteringPattern = highlightText.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&");
  const regexp = new RegExp(filteringPattern, "gi");
  const noMatches = str.split(regexp);
  const matches = str.match(regexp);
  return { noMatches, matches };
};
function Highlight({ str }) {
  return str ? import_react134.default.createElement("mark", { className: styles_css_default62["filtering-match-highlight"] }, str) : null;
}
function HighlightMatch({ str, highlightText }) {
  if (!str || !highlightText) {
    return import_react134.default.createElement("span", null, str);
  }
  if (str === highlightText) {
    return import_react134.default.createElement(Highlight, { str });
  }
  const { noMatches, matches } = splitOnFiltering(str, highlightText);
  const highlighted = [];
  noMatches.forEach((noMatch, idx) => {
    highlighted.push(import_react134.default.createElement("span", { key: `noMatch-${idx}` }, noMatch));
    if (matches && idx < matches.length) {
      highlighted.push(import_react134.default.createElement(Highlight, { key: `match-${idx}`, str: matches[idx] }));
    }
  });
  return import_react134.default.createElement("span", null, highlighted);
}

// node_modules/@cloudscape-design/components/internal/components/option/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/option/analytics-metadata/styles.scoped.css";
var styles_css_default63 = {
  "label": "awsui_label_1q5vz_ocied_5"
};

// node_modules/@cloudscape-design/components/internal/components/option/option-parts.js
var Label = ({ label, prefix, highlightText, triggerVariant }) => import_react135.default.createElement(
  "span",
  { className: clsx_m_default(styles_css_default62.label, styles_css_default63.label, triggerVariant && styles_css_default62["trigger-variant"]) },
  prefix && import_react135.default.createElement(
    "span",
    { className: clsx_m_default(styles_css_default62["label-prefix"], triggerVariant && styles_css_default62["trigger-variant"]) },
    prefix,
    " "
  ),
  import_react135.default.createElement(HighlightMatch, { str: label, highlightText })
);
var LabelTag = ({ labelTag, highlightText, triggerVariant }) => labelTag ? import_react135.default.createElement(
  "span",
  { className: clsx_m_default(styles_css_default62["label-tag"], triggerVariant && styles_css_default62["trigger-variant"]) },
  import_react135.default.createElement(HighlightMatch, { str: labelTag, highlightText })
) : null;
var Description2 = ({ description, highlightedOption, highlightText, selectedOption, triggerVariant }) => description ? import_react135.default.createElement(
  "span",
  { className: clsx_m_default(styles_css_default62.description, {
    [styles_css_default62["trigger-variant"]]: triggerVariant,
    [styles_css_default62.highlighted]: highlightedOption,
    [styles_css_default62.selected]: selectedOption
  }) },
  import_react135.default.createElement(HighlightMatch, { str: description, highlightText })
) : null;
var Tags = ({ tags, highlightedOption, highlightText, selectedOption, triggerVariant }) => tags ? import_react135.default.createElement("span", { className: clsx_m_default(styles_css_default62.tags, {
  [styles_css_default62.highlighted]: highlightedOption,
  [styles_css_default62.selected]: selectedOption
}) }, tags.map((tag, idx) => import_react135.default.createElement(
  "span",
  { key: idx, className: clsx_m_default(styles_css_default62.tag, triggerVariant && styles_css_default62["trigger-variant"]) },
  import_react135.default.createElement(HighlightMatch, { str: tag, highlightText })
))) : null;
var FilteringTags = ({ filteringTags, highlightedOption, highlightText, selectedOption, triggerVariant }) => {
  if (!highlightText || !filteringTags) {
    return null;
  }
  const searchElement = highlightText.toLowerCase();
  return import_react135.default.createElement("span", { className: clsx_m_default(styles_css_default62.tags, {
    [styles_css_default62.highlighted]: highlightedOption,
    [styles_css_default62.selected]: selectedOption
  }) }, filteringTags.map((filteringTag, key2) => {
    const match2 = filteringTag.toLowerCase().indexOf(searchElement) !== -1;
    if (match2) {
      return import_react135.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default62.tag, triggerVariant && styles_css_default62["trigger-variant"]), key: key2, "aria-disabled": true },
        import_react135.default.createElement(HighlightMatch, { str: filteringTag, highlightText })
      );
    }
    return null;
  }));
};
var OptionIcon = (props2) => {
  if (!props2.name && !props2.url && !props2.svg) {
    return null;
  }
  return import_react135.default.createElement(
    "span",
    { className: clsx_m_default(styles_css_default62.icon, props2.size === "big" && [styles_css_default62[`icon-size-big`]]) },
    import_react135.default.createElement(internal_default, Object.assign({}, props2))
  );
};

// node_modules/@cloudscape-design/components/internal/components/option/index.js
function validateStringValue(value, propertyName) {
  if (typeof value !== "undefined" && typeof value !== "string") {
    warnOnce("DropdownOption", `This component only supports string values, but "option.${propertyName}" has ${typeof value} type. The component may work incorrectly.`);
  }
}
var Option = (_a) => {
  var _b, _c, _d, _e;
  var { option, highlightText, triggerVariant = false, isGroupOption = false, isGenericGroup = true, highlightedOption = false, selectedOption = false } = _a, restProps = __rest(_a, ["option", "highlightText", "triggerVariant", "isGroupOption", "isGenericGroup", "highlightedOption", "selectedOption"]);
  if (!option) {
    return null;
  }
  const { disabled } = option;
  const baseProps = getBaseProps(restProps);
  if (isDevelopment2) {
    validateStringValue(option.label, "label");
    validateStringValue(option.description, "description");
    validateStringValue(option.labelTag, "labelTag");
    (_b = option.tags) === null || _b === void 0 ? void 0 : _b.forEach((tag, index) => {
      validateStringValue(tag, `tags[${index}]`);
    });
    (_c = option.filteringTags) === null || _c === void 0 ? void 0 : _c.forEach((tag, index) => {
      validateStringValue(tag, `filteringTags[${index}]`);
    });
  }
  const className2 = clsx_m_default(styles_css_default62.option, disabled && styles_css_default62.disabled, isGroupOption && styles_css_default62.parent, highlightedOption && styles_css_default62.highlighted);
  const icon = option.__customIcon || import_react136.default.createElement(OptionIcon, { name: option.iconName, url: option.iconUrl, svg: option.iconSvg, alt: option.iconAlt, ariaLabel: option.iconAriaLabel, size: option.description || option.tags ? "big" : "normal" });
  const genericGroupProps = isGenericGroup ? {
    title: (_d = option.label) !== null && _d !== void 0 ? _d : option.value,
    "aria-disabled": disabled
  } : void 0;
  return import_react136.default.createElement(
    "span",
    Object.assign({ "data-value": option.value, className: className2, lang: option.lang }, genericGroupProps, baseProps),
    icon,
    import_react136.default.createElement(
      "span",
      { className: styles_css_default62.content },
      import_react136.default.createElement(
        "span",
        { className: styles_css_default62["label-content"] },
        import_react136.default.createElement(Label, { label: (_e = option.label) !== null && _e !== void 0 ? _e : option.value, prefix: option.__labelPrefix, highlightText, triggerVariant }),
        import_react136.default.createElement(LabelTag, { labelTag: option.labelTag, highlightText, triggerVariant })
      ),
      import_react136.default.createElement(Description2, { description: option.description, highlightedOption, selectedOption, highlightText, triggerVariant }),
      import_react136.default.createElement(Tags, { tags: option.tags, highlightedOption, selectedOption, highlightText, triggerVariant }),
      import_react136.default.createElement(FilteringTags, { filteringTags: option.filteringTags, highlightedOption, selectedOption, highlightText, triggerVariant })
    )
  );
};
var option_default = Option;

// node_modules/@cloudscape-design/components/internal/components/selectable-item/index.js
var import_react137 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/selectable-item/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/selectable-item/analytics-metadata/styles.scoped.css";
var styles_css_default64 = {
  "parent": "awsui_parent_2dmmi_qu62t_5",
  "option-content": "awsui_option-content_2dmmi_qu62t_6"
};

// node_modules/@cloudscape-design/components/internal/components/selectable-item/analytics-metadata/utils.js
var getAnalyticsSelectActionMetadata = (_a) => {
  var { isChild, value } = _a, restProps = __rest(_a, ["isChild", "value"]);
  const dataAttributes = restProps;
  const analyticsMetadata = {
    action: "select",
    detail: {
      label: {
        selector: [`.${styles_css_default63.label}`, `.${styles_css_default64["option-content"]}`]
      }
    }
  };
  let position = void 0;
  if (isChild && dataAttributes["data-group-index"] && dataAttributes["data-in-group-index"] || dataAttributes["data-child-index"]) {
    position = `${dataAttributes["data-group-index"]},${dataAttributes["data-in-group-index"] || dataAttributes["data-child-index"]}`;
  } else if (dataAttributes["data-test-index"]) {
    position = `${dataAttributes["data-test-index"]}`;
  }
  if (position) {
    analyticsMetadata.detail.position = position;
  }
  if (value) {
    analyticsMetadata.detail.value = value;
  }
  if (isChild) {
    analyticsMetadata.detail.groupLabel = {
      root: "body",
      selector: `.${styles_css_default64.parent}[data-group-index="${dataAttributes["data-group-index"]}"] .${styles_css_default64["option-content"]}`
    };
  }
  return analyticsMetadata;
};

// node_modules/@cloudscape-design/components/internal/components/selectable-item/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/selectable-item/styles.scoped.css";
var styles_css_default65 = {
  "selectable-item": "awsui_selectable-item_15o6u_lx7py_145",
  "pad-bottom": "awsui_pad-bottom_15o6u_lx7py_167",
  "virtual": "awsui_virtual_15o6u_lx7py_171",
  "has-background": "awsui_has-background_15o6u_lx7py_174",
  "highlighted": "awsui_highlighted_15o6u_lx7py_177",
  "selected": "awsui_selected_15o6u_lx7py_177",
  "disabled": "awsui_disabled_15o6u_lx7py_195",
  "is-keyboard": "awsui_is-keyboard_15o6u_lx7py_200",
  "visual-refresh": "awsui_visual-refresh_15o6u_lx7py_203",
  "next-item-selected": "awsui_next-item-selected_15o6u_lx7py_211",
  "parent": "awsui_parent_15o6u_lx7py_236",
  "interactiveGroups": "awsui_interactiveGroups_15o6u_lx7py_240",
  "child": "awsui_child_15o6u_lx7py_256",
  "sticky": "awsui_sticky_15o6u_lx7py_262",
  "with-scrollbar": "awsui_with-scrollbar_15o6u_lx7py_274",
  "after-header": "awsui_after-header_15o6u_lx7py_280",
  "measure-strut": "awsui_measure-strut_15o6u_lx7py_315",
  "measure-strut-first": "awsui_measure-strut-first_15o6u_lx7py_324",
  "screenreader-content": "awsui_screenreader-content_15o6u_lx7py_328",
  "option-content": "awsui_option-content_15o6u_lx7py_334",
  "select-all": "awsui_select-all_15o6u_lx7py_338"
};

// node_modules/@cloudscape-design/components/internal/components/selectable-item/index.js
var SelectableItem = (_a, ref) => {
  var { children: content, ariaSelected, ariaChecked, selected, highlighted, disabled, hasBackground, isParent, isChild, isSelectAll, virtualPosition, padBottom, isNextSelected, useInteractiveGroups, screenReaderContent, ariaPosinset, ariaSetsize, highlightType, value, sticky, afterHeader, withScrollbar } = _a, restProps = __rest(_a, ["children", "ariaSelected", "ariaChecked", "selected", "highlighted", "disabled", "hasBackground", "isParent", "isChild", "isSelectAll", "virtualPosition", "padBottom", "isNextSelected", "useInteractiveGroups", "screenReaderContent", "ariaPosinset", "ariaSetsize", "highlightType", "value", "sticky", "afterHeader", "withScrollbar"]);
  const isVisualRefresh = useVisualRefresh();
  const _b = getBaseProps(restProps), { className: className2 } = _b, rest = __rest(_b, ["className"]);
  const classNames = clsx_m_default(className2, styles_css_default65["selectable-item"], {
    [styles_css_default65.selected]: selected,
    [styles_css_default65.highlighted]: highlighted,
    [styles_css_default65["has-background"]]: hasBackground,
    [styles_css_default65.parent]: isParent,
    [styles_css_default64.parent]: isParent,
    [styles_css_default65.child]: isChild,
    [styles_css_default65["select-all"]]: isSelectAll,
    [styles_css_default65["is-keyboard"]]: highlightType === "keyboard",
    [styles_css_default65.disabled]: disabled,
    [styles_css_default65.virtual]: virtualPosition !== void 0 && !sticky,
    [styles_css_default65["pad-bottom"]]: padBottom,
    [styles_css_default65["next-item-selected"]]: isNextSelected,
    [styles_css_default65.interactiveGroups]: useInteractiveGroups,
    [styles_css_default65.sticky]: sticky,
    [styles_css_default65["after-header"]]: !!afterHeader,
    [styles_css_default65["with-scrollbar"]]: withScrollbar,
    [styles_css_default65["visual-refresh"]]: isVisualRefresh
  });
  const contentRef = (0, import_react137.useRef)(null);
  const screenReaderContentRef = (0, import_react137.useRef)(null);
  (0, import_react137.useLayoutEffect)(() => {
    if (highlighted && screenReaderContent) {
      if (contentRef.current) {
        contentRef.current.setAttribute("aria-hidden", "true");
      }
      if (screenReaderContentRef.current) {
        screenReaderContentRef.current.textContent = screenReaderContent;
      }
    }
  }, [highlighted, screenReaderContent, contentRef, screenReaderContentRef]);
  const style = virtualPosition !== void 0 ? {
    transform: `translateY(${virtualPosition}px)`
  } : void 0;
  const a11yProperties = {
    "aria-disabled": disabled
  };
  if (isParent && !useInteractiveGroups) {
    a11yProperties["aria-hidden"] = true;
  }
  if (ariaSelected !== void 0) {
    a11yProperties["aria-selected"] = ariaSelected;
  }
  if (ariaChecked !== void 0) {
    a11yProperties["aria-checked"] = ariaChecked;
  }
  if (ariaPosinset && ariaSetsize) {
    a11yProperties["aria-posinset"] = ariaPosinset;
    a11yProperties["aria-setsize"] = ariaSetsize;
  }
  if (restProps.ariaDescribedby) {
    a11yProperties["aria-describedby"] = restProps.ariaDescribedby;
  }
  return import_react137.default.createElement(
    "li",
    Object.assign({ role: "option", className: classNames, style }, a11yProperties, rest, isParent || disabled ? {} : getAnalyticsMetadataAttribute(getAnalyticsSelectActionMetadata(Object.assign({ isChild, value }, restProps)))),
    import_react137.default.createElement("div", { className: clsx_m_default(styles_css_default65["option-content"], styles_css_default64["option-content"]), ref: contentRef }, content),
    import_react137.default.createElement("div", { className: styles_css_default65["measure-strut"], ref }),
    import_react137.default.createElement("div", { className: styles_css_default65["screenreader-content"], ref: screenReaderContentRef })
  );
};
var selectable_item_default = import_react137.default.forwardRef(SelectableItem);

// node_modules/@cloudscape-design/components/select/parts/item.js
var Item2 = (_a, ref) => {
  var { option, highlighted, selected, filteringValue, hasCheckbox, virtualPosition, padBottom, isNextSelected, screenReaderContent, ariaPosinset, ariaSetsize, highlightType, withScrollbar, sticky } = _a, restProps = __rest(_a, ["option", "highlighted", "selected", "filteringValue", "hasCheckbox", "virtualPosition", "padBottom", "isNextSelected", "screenReaderContent", "ariaPosinset", "ariaSetsize", "highlightType", "withScrollbar", "sticky"]);
  const baseProps = getBaseProps(restProps);
  const isParent = option.type === "parent";
  const isChild = option.type === "child";
  const wrappedOption = option.option;
  const disabled = option.disabled || wrappedOption.disabled;
  const disabledReason = disabled && wrappedOption.disabledReason ? wrappedOption.disabledReason : "";
  const isDisabledWithReason = !!disabledReason;
  const internalRef = (0, import_react138.useRef)(null);
  const { descriptionEl, descriptionId } = useHiddenDescription(disabledReason);
  const [canShowTooltip, setCanShowTooltip] = (0, import_react138.useState)(true);
  (0, import_react138.useEffect)(() => setCanShowTooltip(true), [highlighted]);
  return import_react138.default.createElement(
    selectable_item_default,
    Object.assign({ ariaSelected: Boolean(selected), selected, isNextSelected, highlighted, disabled: option.disabled, isParent, isChild, ref: useMergeRefs(ref, internalRef), virtualPosition, padBottom, screenReaderContent, ariaPosinset, ariaSetsize, highlightType, ariaDescribedby: isDisabledWithReason ? descriptionId : "", value: option.option.value, withScrollbar, sticky }, baseProps),
    import_react138.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default61.item, !isParent && wrappedOption.labelTag && styles_css_default61["show-label-tag"]) },
      hasCheckbox && !isParent && import_react138.default.createElement(
        "div",
        { className: styles_css_default61.checkbox },
        import_react138.default.createElement(checkbox_icon_default, { checked: selected || false, disabled: option.disabled })
      ),
      import_react138.default.createElement(option_default, { option: Object.assign(Object.assign({}, wrappedOption), { disabled }), highlightedOption: highlighted, selectedOption: selected, highlightText: filteringValue, isGroupOption: isParent }),
      !hasCheckbox && !isParent && selected && import_react138.default.createElement(
        "div",
        { className: styles_css_default61["selected-icon"] },
        import_react138.default.createElement(internal_default, { name: "check" })
      ),
      isDisabledWithReason && import_react138.default.createElement(
        import_react138.default.Fragment,
        null,
        descriptionEl,
        highlighted && canShowTooltip && import_react138.default.createElement(Tooltip, { className: styles_css_default61["disabled-reason-tooltip"], trackRef: internalRef, value: disabledReason, position: "right", hideOnOverscroll: true, onDismiss: () => setCanShowTooltip(false) })
      )
    )
  );
};
var item_default = import_react138.default.memo(import_react138.default.forwardRef(Item2));

// node_modules/@cloudscape-design/components/select/parts/multiselect-item.js
var import_react139 = __toESM(require_react());
var MultiSelectItem = (_a, ref) => {
  var { option, highlighted, selected, filteringValue, hasCheckbox, virtualPosition, padBottom, isNextSelected, indeterminate, screenReaderContent, ariaPosinset, ariaSetsize, highlightType, withScrollbar, sticky } = _a, restProps = __rest(_a, ["option", "highlighted", "selected", "filteringValue", "hasCheckbox", "virtualPosition", "padBottom", "isNextSelected", "indeterminate", "screenReaderContent", "ariaPosinset", "ariaSetsize", "highlightType", "withScrollbar", "sticky"]);
  const baseProps = getBaseProps(restProps);
  const isParent = option.type === "parent";
  const isChild = option.type === "child";
  const isSelectAll = option.type === "select-all";
  const wrappedOption = option.option;
  const disabled = option.disabled || wrappedOption.disabled;
  const disabledReason = disabled && (option.disabledReason || wrappedOption.disabledReason) ? option.disabledReason || wrappedOption.disabledReason : "";
  const isDisabledWithReason = !!disabledReason;
  const internalRef = (0, import_react139.useRef)(null);
  const className2 = styles_css_default61.item;
  const { descriptionId, descriptionEl } = useHiddenDescription(disabledReason);
  const [canShowTooltip, setCanShowTooltip] = (0, import_react139.useState)(true);
  (0, import_react139.useEffect)(() => setCanShowTooltip(true), [highlighted]);
  return import_react139.default.createElement(
    selectable_item_default,
    Object.assign({ ariaChecked: isParent && indeterminate ? "mixed" : Boolean(selected), selected, isNextSelected, highlighted, disabled, isParent, isChild, isSelectAll, highlightType, ref: useMergeRefs(ref, internalRef), virtualPosition, padBottom, useInteractiveGroups: true, screenReaderContent, ariaPosinset, ariaSetsize, ariaDescribedby: isDisabledWithReason ? descriptionId : "", value: option.option.value, afterHeader: option.afterHeader, withScrollbar, sticky }, baseProps),
    import_react139.default.createElement(
      "div",
      { className: className2 },
      hasCheckbox && import_react139.default.createElement(
        "div",
        { className: styles_css_default61.checkbox },
        import_react139.default.createElement(checkbox_icon_default, { checked: selected, indeterminate: (isParent || isSelectAll) && indeterminate, disabled })
      ),
      import_react139.default.createElement(option_default, { option: Object.assign(Object.assign({}, wrappedOption), { disabled }), highlightedOption: highlighted, selectedOption: selected, highlightText: filteringValue, isGroupOption: isParent })
    ),
    isDisabledWithReason && import_react139.default.createElement(
      import_react139.default.Fragment,
      null,
      descriptionEl,
      highlighted && canShowTooltip && import_react139.default.createElement(Tooltip, { className: styles_css_default61["disabled-reason-tooltip"], trackRef: internalRef, value: disabledReason, position: "right", hideOnOverscroll: true, onDismiss: () => setCanShowTooltip(false) })
    )
  );
};
var multiselect_item_default = import_react139.default.memo(import_react139.default.forwardRef(MultiSelectItem));

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/test-indexes.js
var testIndexMap = /* @__PURE__ */ new WeakMap();
var getTestOptionIndexes = (item) => testIndexMap.get(item);
var generateTestIndexes = (filteredItems, getParentGroup) => {
  let throughIndex = 1;
  let groupIndex = 0;
  let inGroupIndex = 1;
  let currentGroup = null;
  filteredItems.forEach((item) => {
    const isGroup5 = item.type === "parent";
    const group = isGroup5 ? item : getParentGroup(item);
    if (group && group !== currentGroup) {
      currentGroup = group;
      groupIndex += 1;
      inGroupIndex = 1;
    }
    if (isGroup5) {
      testIndexMap.set(item, { groupIndex });
    } else if (group && item.type === "child") {
      testIndexMap.set(item, {
        throughIndex: throughIndex++,
        groupIndex,
        inGroupIndex: inGroupIndex++
      });
    } else if (item.type === "child" || !item.type) {
      testIndexMap.set(item, { throughIndex: throughIndex++ });
    }
  });
};

// node_modules/@cloudscape-design/components/select/utils/get-item-props.js
var getItemProps = ({ option, index, getOptionProps: getOptionProps2, filteringValue, checkboxes = false }) => {
  const optionProps = getOptionProps2(option, index);
  optionProps.filteringValue = filteringValue;
  const { inGroupIndex, groupIndex, throughIndex } = getTestOptionIndexes(option) || {};
  return Object.assign(Object.assign({}, optionProps), { hasCheckbox: checkboxes, ["data-group-index"]: groupIndex, ["data-child-index"]: inGroupIndex, ["data-test-index"]: throughIndex });
};

// node_modules/@cloudscape-design/components/select/utils/render-options.js
var renderOptions = ({ options, getOptionProps: getOptionProps2, filteringValue, highlightType, checkboxes = false, hasDropdownStatus, virtualItems, useInteractiveGroups, screenReaderContent, ariaSetsize, withScrollbar, firstOptionSticky, stickyOptionRef }) => {
  return options.map((option, index) => {
    const virtualItem = virtualItems && virtualItems[index];
    const globalIndex = virtualItem ? virtualItem.index : index;
    const props2 = getItemProps({
      option,
      index: globalIndex,
      getOptionProps: getOptionProps2,
      filteringValue: option.type === "select-all" ? "" : filteringValue,
      checkboxes
    });
    const isLastItem = index === options.length - 1;
    const padBottom = !hasDropdownStatus && isLastItem;
    const ListItem2 = useInteractiveGroups ? multiselect_item_default : item_default;
    const isSticky = firstOptionSticky && globalIndex === 0;
    return import_react140.default.createElement(ListItem2, Object.assign({ key: globalIndex }, props2, { virtualPosition: virtualItem && virtualItem.start, ref: isSticky && stickyOptionRef ? stickyOptionRef : virtualItem && virtualItem.measureRef, padBottom, screenReaderContent, ariaPosinset: globalIndex + 1, ariaSetsize, highlightType: highlightType.type, withScrollbar, sticky: isSticky }));
  });
};

// node_modules/@cloudscape-design/components/select/utils/scroll-to-index.js
function scroll_to_index_default({ index, menuEl }) {
  const item = menuEl.querySelector(`[data-mouse-target="${index}"]`);
  if (item) {
    if (menuEl.clientHeight !== void 0 && menuEl.clientHeight > 15) {
      scrollElementIntoView(item);
    }
  }
}

// node_modules/@cloudscape-design/components/select/parts/common.js
var fallbackItemHeight = 31;

// node_modules/@cloudscape-design/components/select/parts/plain-list.js
var PlainList = ({ menuProps, getOptionProps: getOptionProps2, filteredOptions, filteringValue, highlightType, checkboxes, hasDropdownStatus, listBottom, useInteractiveGroups, screenReaderContent, firstOptionSticky }, ref) => {
  const stickyOptionRef = (0, import_react141.useRef)(null);
  const [stickyOptionBlockSize, setStickyOptionBlockSize] = (0, import_react141.useState)(firstOptionSticky ? fallbackItemHeight : 0);
  const [width, menuMeasureRef] = useContainerQuery((rect) => {
    if (stickyOptionRef.current) {
      setStickyOptionBlockSize(stickyOptionRef.current.clientHeight);
    }
    return { inner: rect.contentBoxWidth, outer: rect.borderBoxWidth };
  });
  const menuRef = menuProps.ref;
  const mergedRef = useMergeRefs(menuMeasureRef, menuRef);
  (0, import_react141.useImperativeHandle)(ref, () => (index) => {
    const isSticky = firstOptionSticky && index === 0;
    if (highlightType.moveFocus && menuRef.current && !isSticky) {
      scroll_to_index_default({ index, menuEl: menuRef.current });
    }
  }, [firstOptionSticky, highlightType.moveFocus, menuRef]);
  const withScrollbar = !!width && width.inner < width.outer;
  return import_react141.default.createElement(
    options_list_default,
    Object.assign({}, menuProps, { ref: mergedRef, stickyItemBlockSize: stickyOptionBlockSize }),
    renderOptions({
      options: filteredOptions,
      getOptionProps: getOptionProps2,
      filteringValue,
      highlightType,
      checkboxes,
      hasDropdownStatus,
      useInteractiveGroups,
      screenReaderContent,
      firstOptionSticky,
      stickyOptionRef,
      withScrollbar
    }),
    listBottom ? import_react141.default.createElement("li", { role: "option", className: styles_css_default61["list-bottom"] }, listBottom) : null
  );
};
var plain_list_default = (0, import_react141.forwardRef)(PlainList);

// node_modules/@cloudscape-design/components/select/parts/trigger.js
var import_react143 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/button-trigger/index.js
var import_react142 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/button-trigger/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/button-trigger/analytics-metadata/styles.scoped.css";
var styles_css_default66 = {
  "button-trigger": "awsui_button-trigger_l32fn_xo3sj_5"
};

// node_modules/@cloudscape-design/components/internal/components/button-trigger/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/button-trigger/styles.scoped.css";
var styles_css_default67 = {
  "button-trigger": "awsui_button-trigger_18eso_1qoem_161",
  "arrow": "awsui_arrow_18eso_1qoem_161",
  "in-filtering-token-root": "awsui_in-filtering-token-root_18eso_1qoem_221",
  "in-filtering-token-nested": "awsui_in-filtering-token-nested_18eso_1qoem_221",
  "has-caret": "awsui_has-caret_18eso_1qoem_257",
  "placeholder": "awsui_placeholder_18eso_1qoem_260",
  "pressed": "awsui_pressed_18eso_1qoem_273",
  "disabled": "awsui_disabled_18eso_1qoem_276",
  "in-filtering-token": "awsui_in-filtering-token_18eso_1qoem_221",
  "readonly": "awsui_readonly_18eso_1qoem_292",
  "invalid": "awsui_invalid_18eso_1qoem_314",
  "warning": "awsui_warning_18eso_1qoem_323",
  "inline-tokens": "awsui_inline-tokens_18eso_1qoem_332"
};

// node_modules/@cloudscape-design/components/internal/components/button-trigger/index.js
var ButtonTrigger = (_a, ref) => {
  var { children, pressed, hideCaret = false, disabled = false, readOnly = false, invalid = false, warning = false, inlineTokens, inFilteringToken, ariaHasPopup, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, onKeyDown, onKeyUp, onMouseDown, onClick, onFocus, onBlur, autoFocus } = _a, restProps = __rest(_a, ["children", "pressed", "hideCaret", "disabled", "readOnly", "invalid", "warning", "inlineTokens", "inFilteringToken", "ariaHasPopup", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "ariaControls", "onKeyDown", "onKeyUp", "onMouseDown", "onClick", "onFocus", "onBlur", "autoFocus"]);
  const baseProps = getBaseProps(restProps);
  let attributes = Object.assign(Object.assign({}, baseProps), { type: "button", className: clsx_m_default(styles_css_default67["button-trigger"], styles_css_default66["button-trigger"], baseProps.className, pressed && styles_css_default67.pressed, disabled && styles_css_default67.disabled, invalid && styles_css_default67.invalid, warning && !invalid && styles_css_default67.warning, !hideCaret && styles_css_default67["has-caret"], readOnly && styles_css_default67.readonly, inFilteringToken && styles_css_default67["in-filtering-token"], inFilteringToken && styles_css_default67[`in-filtering-token-${inFilteringToken}`], inlineTokens && styles_css_default67["inline-tokens"]), disabled, "aria-expanded": pressed, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "aria-haspopup": ariaHasPopup !== null && ariaHasPopup !== void 0 ? ariaHasPopup : "listbox", "aria-controls": ariaControls, "aria-disabled": readOnly && !disabled ? "true" : void 0, autoFocus });
  if (!readOnly) {
    attributes = Object.assign(Object.assign({}, attributes), { onKeyDown: onKeyDown && ((event) => fireKeyboardEvent(onKeyDown, event)), onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)), onMouseDown: onMouseDown && ((event) => fireCancelableEvent(onMouseDown, {}, event)), onClick: onClick && ((event) => fireCancelableEvent(onClick, {}, event)), onFocus: onFocus && ((event) => fireCancelableEvent(onFocus, {}, event)), onBlur: onBlur && ((event) => fireCancelableEvent(onBlur, { relatedTarget: event.relatedTarget }, event)) });
  }
  if (invalid) {
    attributes["aria-invalid"] = invalid;
  }
  const analyticsMetadata = {
    action: !pressed ? "expand" : "collapse",
    detail: {
      label: { root: "self" }
    }
  };
  return import_react142.default.createElement(
    "button",
    Object.assign({ ref }, attributes, disabled || readOnly ? {} : getAnalyticsMetadataAttribute(analyticsMetadata)),
    children,
    !hideCaret && import_react142.default.createElement(
      "span",
      { className: styles_css_default67.arrow },
      import_react142.default.createElement(internal_default, { name: "caret-down-filled", variant: disabled || readOnly ? "disabled" : "normal" })
    )
  );
};
var button_trigger_default = import_react142.default.forwardRef(ButtonTrigger);

// node_modules/@cloudscape-design/components/select/parts/trigger.js
var Trigger = import_react143.default.forwardRef(({ ariaLabelledby, ariaDescribedby, controlId, invalid, inlineLabelText, warning, triggerProps, selectedOption, selectedOptions, triggerVariant, inFilteringToken, isOpen, placeholder, disabled, readOnly }, ref) => {
  const isVisualRefresh = useVisualRefresh();
  const generatedId = useUniqueId();
  const id = controlId !== null && controlId !== void 0 ? controlId : generatedId;
  const triggerContentId = useUniqueId("trigger-content-");
  let ariaLabelledbyIds = joinStrings(ariaLabelledby, triggerContentId);
  let triggerContent = null;
  if (triggerVariant === "tokens") {
    if (selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.length) {
      triggerContent = import_react143.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default61["inline-token-trigger"], disabled && styles_css_default61["inline-token-trigger--disabled"], isVisualRefresh && styles_css_default61["visual-refresh"]) },
        import_react143.default.createElement("span", { className: styles_css_default61["inline-token-list"] }, selectedOptions.map(({ label }, i2) => import_react143.default.createElement("span", { key: i2, className: styles_css_default61["inline-token"] }, label))),
        import_react143.default.createElement(
          "span",
          { className: styles_css_default61["inline-token-counter"], id: triggerContentId },
          import_react143.default.createElement("span", { className: styles_css_default61["inline-token-hidden-placeholder"] }, placeholder),
          import_react143.default.createElement(
            "span",
            null,
            "(",
            selectedOptions.length,
            ")"
          )
        )
      );
      ariaLabelledbyIds = ariaLabelledby;
    } else {
      triggerContent = import_react143.default.createElement("span", { "aria-disabled": "true", className: clsx_m_default(styles_css_default61.placeholder, styles_css_default61.trigger), id: triggerContentId }, placeholder);
    }
  } else if (!selectedOption) {
    triggerContent = import_react143.default.createElement("span", { "aria-disabled": "true", className: clsx_m_default(styles_css_default61.placeholder, styles_css_default61.trigger), id: triggerContentId }, placeholder);
  } else if (triggerVariant === "option") {
    triggerContent = import_react143.default.createElement(option_default, { id: triggerContentId, option: Object.assign(Object.assign({}, selectedOption), { disabled }), triggerVariant: true });
  } else {
    triggerContent = import_react143.default.createElement("span", { id: triggerContentId, className: styles_css_default61.trigger }, selectedOption.label || selectedOption.value);
  }
  const mergedRef = useMergeRefs(triggerProps.ref, ref);
  const triggerButton = import_react143.default.createElement(button_trigger_default, Object.assign({}, triggerProps, { id, ref: mergedRef, pressed: !!isOpen, disabled, readOnly, invalid, warning: warning && !invalid, inFilteringToken, inlineTokens: triggerVariant === "tokens", ariaDescribedby, ariaLabelledby: ariaLabelledbyIds }), triggerContent);
  return import_react143.default.createElement(import_react143.default.Fragment, null, inlineLabelText ? import_react143.default.createElement(
    "div",
    { className: styles_css_default61["inline-label-wrapper"] },
    import_react143.default.createElement("label", { htmlFor: controlId, className: styles_css_default61["inline-label"] }, inlineLabelText),
    import_react143.default.createElement("div", { className: styles_css_default61["inline-label-trigger-wrapper"] }, triggerButton)
  ) : import_react143.default.createElement(import_react143.default.Fragment, null, triggerButton));
});
var trigger_default = Trigger;

// node_modules/@cloudscape-design/components/select/parts/virtual-list.js
var import_react146 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-virtual/index.js
var import_react145 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/vendor/react-virtual.js
var import_react144 = __toESM(require_react());
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0) continue;
    target[key2] = source[key2];
  }
  return target;
}
var props = ["bottom", "height", "left", "right", "top", "width"];
var rectChanged = function rectChanged2(a4, b2) {
  if (a4 === void 0) {
    a4 = {};
  }
  if (b2 === void 0) {
    b2 = {};
  }
  return props.some(function(prop) {
    return a4[prop] !== b2[prop];
  });
};
var observedNodes = /* @__PURE__ */ new Map();
var rafId;
var run = function run2() {
  var changedStates = [];
  observedNodes.forEach(function(state, node) {
    var newRect = node.getBoundingClientRect();
    if (rectChanged(newRect, state.rect)) {
      state.rect = newRect;
      changedStates.push(state);
    }
  });
  changedStates.forEach(function(state) {
    state.callbacks.forEach(function(cb) {
      return cb(state.rect);
    });
  });
  rafId = window.requestAnimationFrame(run2);
};
function observeRect(node, cb) {
  return {
    observe: function observe() {
      var wasEmpty = observedNodes.size === 0;
      if (observedNodes.has(node)) {
        observedNodes.get(node).callbacks.push(cb);
      } else {
        observedNodes.set(node, {
          rect: void 0,
          hasRectChanged: false,
          callbacks: [cb]
        });
      }
      if (wasEmpty) run();
    },
    unobserve: function unobserve() {
      var state = observedNodes.get(node);
      if (state) {
        var index = state.callbacks.indexOf(cb);
        if (index >= 0) state.callbacks.splice(index, 1);
        if (!state.callbacks.length) observedNodes["delete"](node);
        if (!observedNodes.size) cancelAnimationFrame(rafId);
      }
    }
  };
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react144.default.useLayoutEffect : import_react144.default.useEffect;
function useRect(nodeRef, initialRect) {
  if (initialRect === void 0) {
    initialRect = {
      width: 0,
      height: 0
    };
  }
  var _React$useState = import_react144.default.useState(nodeRef.current), element = _React$useState[0], setElement = _React$useState[1];
  var _React$useReducer = import_react144.default.useReducer(rectReducer, initialRect), rect = _React$useReducer[0], dispatch = _React$useReducer[1];
  var initialRectSet = import_react144.default.useRef(false);
  useIsomorphicLayoutEffect(function() {
    if (nodeRef.current !== element) {
      setElement(nodeRef.current);
    }
  });
  useIsomorphicLayoutEffect(function() {
    if (element && !initialRectSet.current) {
      initialRectSet.current = true;
      var _rect = element.getBoundingClientRect();
      dispatch({
        rect: _rect
      });
    }
  }, [element]);
  import_react144.default.useEffect(function() {
    if (!element) {
      return;
    }
    var observer = observeRect(element, function(rect2) {
      dispatch({
        rect: rect2
      });
    });
    observer.observe();
    return function() {
      observer.unobserve();
    };
  }, [element]);
  return rect;
}
function rectReducer(state, action) {
  var rect = action.rect;
  if (state.height !== rect.height || state.width !== rect.width) {
    return rect;
  }
  return state;
}
var defaultEstimateSize = function defaultEstimateSize2() {
  return 50;
};
var defaultKeyExtractor = function defaultKeyExtractor2(index) {
  return index;
};
var defaultMeasureSize = function defaultMeasureSize2(el, horizontal) {
  var key2 = horizontal ? "offsetWidth" : "offsetHeight";
  return el[key2];
};
var defaultRangeExtractor = function defaultRangeExtractor2(range3) {
  var start = Math.max(range3.start - range3.overscan, 0);
  var end = Math.min(range3.end + range3.overscan, range3.size - 1);
  var arr = [];
  for (var i2 = start; i2 <= end; i2++) {
    arr.push(i2);
  }
  return arr;
};
function useVirtual(_ref) {
  var _measurements;
  var _ref$size = _ref.size, size = _ref$size === void 0 ? 0 : _ref$size, _ref$estimateSize = _ref.estimateSize, estimateSize = _ref$estimateSize === void 0 ? defaultEstimateSize : _ref$estimateSize, _ref$overscan = _ref.overscan, overscan = _ref$overscan === void 0 ? 1 : _ref$overscan, _ref$paddingStart = _ref.paddingStart, paddingStart = _ref$paddingStart === void 0 ? 0 : _ref$paddingStart, _ref$paddingEnd = _ref.paddingEnd, paddingEnd = _ref$paddingEnd === void 0 ? 0 : _ref$paddingEnd, parentRef = _ref.parentRef, horizontal = _ref.horizontal, scrollToFn = _ref.scrollToFn, useObserver = _ref.useObserver, initialRect = _ref.initialRect, onScrollElement = _ref.onScrollElement, scrollOffsetFn = _ref.scrollOffsetFn, _ref$keyExtractor = _ref.keyExtractor, keyExtractor = _ref$keyExtractor === void 0 ? defaultKeyExtractor : _ref$keyExtractor, _ref$measureSize = _ref.measureSize, measureSize = _ref$measureSize === void 0 ? defaultMeasureSize : _ref$measureSize, _ref$rangeExtractor = _ref.rangeExtractor, rangeExtractor = _ref$rangeExtractor === void 0 ? defaultRangeExtractor : _ref$rangeExtractor;
  var sizeKey = horizontal ? "width" : "height";
  var scrollKey = horizontal ? "scrollLeft" : "scrollTop";
  var latestRef = import_react144.default.useRef({
    scrollOffset: 0,
    measurements: []
  });
  var _React$useState = import_react144.default.useState(0), scrollOffset = _React$useState[0], setScrollOffset = _React$useState[1];
  latestRef.current.scrollOffset = scrollOffset;
  var useMeasureParent = useObserver || useRect;
  var _useMeasureParent = useMeasureParent(parentRef, initialRect), outerSize = _useMeasureParent[sizeKey];
  latestRef.current.outerSize = outerSize;
  var defaultScrollToFn = import_react144.default.useCallback(function(offset) {
    if (parentRef.current) {
      parentRef.current[scrollKey] = offset;
    }
  }, [parentRef, scrollKey]);
  var resolvedScrollToFn = scrollToFn || defaultScrollToFn;
  scrollToFn = import_react144.default.useCallback(function(offset) {
    resolvedScrollToFn(offset, defaultScrollToFn);
  }, [defaultScrollToFn, resolvedScrollToFn]);
  var _React$useState2 = import_react144.default.useState({}), measuredCache = _React$useState2[0], setMeasuredCache = _React$useState2[1];
  var measure = import_react144.default.useCallback(function() {
    return setMeasuredCache({});
  }, []);
  var pendingMeasuredCacheIndexesRef = import_react144.default.useRef([]);
  var measurements = import_react144.default.useMemo(function() {
    var min3 = pendingMeasuredCacheIndexesRef.current.length > 0 ? Math.min.apply(Math, pendingMeasuredCacheIndexesRef.current) : 0;
    pendingMeasuredCacheIndexesRef.current = [];
    var measurements2 = latestRef.current.measurements.slice(0, min3);
    for (var i2 = min3; i2 < size; i2++) {
      var key2 = keyExtractor(i2);
      var measuredSize = measuredCache[key2];
      var _start = measurements2[i2 - 1] ? measurements2[i2 - 1].end : paddingStart;
      var _size = typeof measuredSize === "number" ? measuredSize : estimateSize(i2);
      var _end = _start + _size;
      measurements2[i2] = {
        index: i2,
        start: _start,
        size: _size,
        end: _end,
        key: key2
      };
    }
    return measurements2;
  }, [estimateSize, measuredCache, paddingStart, size, keyExtractor]);
  var totalSize = (((_measurements = measurements[size - 1]) == null ? void 0 : _measurements.end) || paddingStart) + paddingEnd;
  latestRef.current.measurements = measurements;
  latestRef.current.totalSize = totalSize;
  var element = onScrollElement ? onScrollElement.current : parentRef.current;
  var scrollOffsetFnRef = import_react144.default.useRef(scrollOffsetFn);
  scrollOffsetFnRef.current = scrollOffsetFn;
  useIsomorphicLayoutEffect(function() {
    if (!element) {
      setScrollOffset(0);
      return;
    }
    var onScroll = function onScroll2(event) {
      var offset = scrollOffsetFnRef.current ? scrollOffsetFnRef.current(event) : element[scrollKey];
      setScrollOffset(offset);
    };
    onScroll();
    element.addEventListener("scroll", onScroll, {
      capture: false,
      passive: true
    });
    return function() {
      element.removeEventListener("scroll", onScroll);
    };
  }, [element, scrollKey]);
  var _calculateRange = calculateRange(latestRef.current), start = _calculateRange.start, end = _calculateRange.end;
  var indexes = import_react144.default.useMemo(function() {
    return rangeExtractor({
      start,
      end,
      overscan,
      size: measurements.length
    });
  }, [start, end, overscan, measurements.length, rangeExtractor]);
  var measureSizeRef = import_react144.default.useRef(measureSize);
  measureSizeRef.current = measureSize;
  var virtualItems = import_react144.default.useMemo(function() {
    var virtualItems2 = [];
    var _loop = function _loop2(k4, len2) {
      var i2 = indexes[k4];
      var measurement = measurements[i2];
      var item = _extends(_extends({}, measurement), {}, {
        measureRef: function measureRef(el) {
          if (el) {
            var measuredSize = measureSizeRef.current(el, horizontal);
            if (measuredSize !== item.size) {
              var _scrollOffset = latestRef.current.scrollOffset;
              if (item.start < _scrollOffset) {
                defaultScrollToFn(_scrollOffset + (measuredSize - item.size));
              }
              pendingMeasuredCacheIndexesRef.current.push(i2);
              setMeasuredCache(function(old) {
                var _extends2;
                return _extends(_extends({}, old), {}, (_extends2 = {}, _extends2[item.key] = measuredSize, _extends2));
              });
            }
          }
        }
      });
      virtualItems2.push(item);
    };
    for (var k3 = 0, len = indexes.length; k3 < len; k3++) {
      _loop(k3);
    }
    return virtualItems2;
  }, [indexes, defaultScrollToFn, horizontal, measurements]);
  var mountedRef = import_react144.default.useRef(false);
  useIsomorphicLayoutEffect(function() {
    if (mountedRef.current) {
      setMeasuredCache({});
    }
    mountedRef.current = true;
  }, [estimateSize]);
  var scrollToOffset = import_react144.default.useCallback(function(toOffset, _temp) {
    var _ref2 = _temp === void 0 ? {} : _temp, _ref2$align = _ref2.align, align = _ref2$align === void 0 ? "start" : _ref2$align;
    var _latestRef$current = latestRef.current, scrollOffset2 = _latestRef$current.scrollOffset, outerSize2 = _latestRef$current.outerSize;
    if (align === "auto") {
      if (toOffset <= scrollOffset2) {
        align = "start";
      } else if (toOffset >= scrollOffset2 + outerSize2) {
        align = "end";
      } else {
        align = "start";
      }
    }
    if (align === "start") {
      scrollToFn(toOffset);
    } else if (align === "end") {
      scrollToFn(toOffset - outerSize2);
    } else if (align === "center") {
      scrollToFn(toOffset - outerSize2 / 2);
    }
  }, [scrollToFn]);
  var tryScrollToIndex = import_react144.default.useCallback(function(index, _temp2) {
    var _ref3 = _temp2 === void 0 ? {} : _temp2, _ref3$align = _ref3.align, align = _ref3$align === void 0 ? "auto" : _ref3$align, rest = _objectWithoutPropertiesLoose(_ref3, ["align"]);
    var _latestRef$current2 = latestRef.current, measurements2 = _latestRef$current2.measurements, scrollOffset2 = _latestRef$current2.scrollOffset, outerSize2 = _latestRef$current2.outerSize;
    var measurement = measurements2[Math.max(0, Math.min(index, size - 1))];
    if (!measurement) {
      return;
    }
    if (align === "auto") {
      if (measurement.end >= scrollOffset2 + outerSize2) {
        align = "end";
      } else if (measurement.start <= scrollOffset2) {
        align = "start";
      } else {
        return;
      }
    }
    var toOffset = align === "center" ? measurement.start + measurement.size / 2 : align === "end" ? measurement.end : measurement.start;
    scrollToOffset(toOffset, _extends({
      align
    }, rest));
  }, [scrollToOffset, size]);
  var scrollToIndex = import_react144.default.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    tryScrollToIndex.apply(void 0, args);
    requestAnimationFrame(function() {
      tryScrollToIndex.apply(void 0, args);
    });
  }, [tryScrollToIndex]);
  return {
    virtualItems,
    totalSize,
    scrollToOffset,
    scrollToIndex,
    measure
  };
}
var findNearestBinarySearch = function findNearestBinarySearch2(low, high, getCurrentValue, value) {
  while (low <= high) {
    var middle = (low + high) / 2 | 0;
    var currentValue = getCurrentValue(middle);
    if (currentValue < value) {
      low = middle + 1;
    } else if (currentValue > value) {
      high = middle - 1;
    } else {
      return middle;
    }
  }
  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};
function calculateRange(_ref4) {
  var measurements = _ref4.measurements, outerSize = _ref4.outerSize, scrollOffset = _ref4.scrollOffset;
  var size = measurements.length - 1;
  var getOffset = function getOffset2(index) {
    return measurements[index].start;
  };
  var start = findNearestBinarySearch(0, size, getOffset, scrollOffset);
  var end = start;
  while (end < size && measurements[end].end < scrollOffset + outerSize) {
    end++;
  }
  return {
    start,
    end
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-virtual/sticky-range-extractor.js
function sticky_range_extractor_default(range3) {
  const defaultRange = defaultRangeExtractor(range3);
  return defaultRange[0] === 0 ? defaultRange : [0, ...defaultRange];
}

// node_modules/@cloudscape-design/components/internal/hooks/use-virtual/index.js
var MAX_ITEM_MOUNTS = 100;
function useVirtual2({ items, parentRef, estimateSize, firstItemSticky }) {
  const rowVirtualizer = useVirtual({
    size: items.length,
    parentRef,
    estimateSize,
    overscan: 5,
    rangeExtractor: firstItemSticky ? sticky_range_extractor_default : void 0
  });
  const measuresCache = (0, import_react145.useRef)(/* @__PURE__ */ new WeakMap());
  const indicesKey = rowVirtualizer.virtualItems.map((item) => `${item.index}`).join(":");
  (0, import_react145.useEffect)(() => {
    measuresCache.current = /* @__PURE__ */ new WeakMap();
  }, [indicesKey, items, estimateSize]);
  const virtualItems = (0, import_react145.useMemo)(() => rowVirtualizer.virtualItems.map((virtualItem) => Object.assign(Object.assign({}, virtualItem), { measureRef: (node) => {
    var _a;
    const mountedCount = (_a = measuresCache.current.get(items[virtualItem.index])) !== null && _a !== void 0 ? _a : 0;
    if (mountedCount < MAX_ITEM_MOUNTS) {
      virtualItem.measureRef(node);
      measuresCache.current.set(items[virtualItem.index], mountedCount + 1);
    }
  } })), [items, rowVirtualizer.virtualItems]);
  return {
    virtualItems,
    totalSize: rowVirtualizer.totalSize,
    scrollToIndex: rowVirtualizer.scrollToIndex
  };
}

// node_modules/@cloudscape-design/components/select/parts/virtual-list.js
var VirtualList = (props2, ref) => {
  return props2.menuProps.open ? import_react146.default.createElement(VirtualListOpen, Object.assign({}, props2, { ref })) : import_react146.default.createElement(VirtualListClosed, Object.assign({}, props2, { ref }));
};
var VirtualListOpen = (0, import_react146.forwardRef)(({ menuProps, getOptionProps: getOptionProps2, filteredOptions, filteringValue, highlightType, checkboxes, hasDropdownStatus, listBottom, useInteractiveGroups, screenReaderContent, firstOptionSticky }, ref) => {
  const [width, menuMeasureRef] = useContainerQuery((rect) => ({ inner: rect.contentBoxWidth, outer: rect.borderBoxWidth }), []);
  const menuRefObject = (0, import_react146.useRef)(null);
  const menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);
  const previousHighlightedIndex = (0, import_react146.useRef)();
  const { virtualItems, totalSize, scrollToIndex } = useVirtual2({
    items: filteredOptions,
    parentRef: menuRefObject,
    // estimateSize is a dependency of measurements memo. We update it to force full recalculation
    // when the height of any option could have changed:
    // 1: because the component got resized (width property got updated)
    // 2: because the option changed its content (filteringValue property controls the highlight and the visibility of hidden tags)
    // eslint-disable-next-line react-hooks/exhaustive-deps
    estimateSize: (0, import_react146.useCallback)(() => fallbackItemHeight, [width === null || width === void 0 ? void 0 : width.inner, filteringValue]),
    firstItemSticky: firstOptionSticky
  });
  (0, import_react146.useImperativeHandle)(ref, () => (index) => {
    if (highlightType.moveFocus) {
      const movingUp = previousHighlightedIndex.current !== void 0 && index < previousHighlightedIndex.current;
      if (firstOptionSticky && movingUp && index !== 0 && menuRefObject.current) {
        scroll_to_index_default({
          index,
          menuEl: menuRefObject === null || menuRefObject === void 0 ? void 0 : menuRefObject.current
        });
      } else {
        scrollToIndex(index);
      }
    }
    previousHighlightedIndex.current = index;
  }, [firstOptionSticky, highlightType.moveFocus, scrollToIndex]);
  const stickySize = firstOptionSticky ? virtualItems[0].size : 0;
  const withScrollbar = !!width && width.inner < width.outer;
  const finalOptions = renderOptions({
    options: virtualItems.map(({ index }) => filteredOptions[index]),
    getOptionProps: getOptionProps2,
    filteringValue,
    highlightType,
    checkboxes,
    hasDropdownStatus,
    virtualItems,
    useInteractiveGroups,
    screenReaderContent,
    firstOptionSticky,
    withScrollbar
  });
  return import_react146.default.createElement(
    options_list_default,
    Object.assign({}, menuProps, { stickyItemBlockSize: stickySize, ref: menuRef }),
    finalOptions,
    import_react146.default.createElement("div", { "aria-hidden": "true", key: "total-size", className: styles_css_default61["layout-strut"], style: { height: totalSize - stickySize } }),
    listBottom ? import_react146.default.createElement("li", { role: "option", className: styles_css_default61["list-bottom"] }, listBottom) : null
  );
});
var VirtualListClosed = (0, import_react146.forwardRef)(({ menuProps, listBottom }, ref) => {
  (0, import_react146.useImperativeHandle)(ref, () => () => {
  }, []);
  return import_react146.default.createElement(options_list_default, Object.assign({}, menuProps, { ref: menuProps.ref }), listBottom ? import_react146.default.createElement("li", { role: "option", className: styles_css_default61["list-bottom"] }, listBottom) : null);
});
var virtual_list_default = (0, import_react146.forwardRef)(VirtualList);

// node_modules/@cloudscape-design/components/token-group/internal.js
var import_react152 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/token-list/index.js
var import_react148 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/token-list/token-limit-toggle.js
var import_react147 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/token-list/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/token-list/styles.scoped.css";
var styles_css_default68 = {
  "root": "awsui_root_gfwv3_nqa8o_193",
  "horizontal": "awsui_horizontal_gfwv3_nqa8o_196",
  "vertical": "awsui_vertical_gfwv3_nqa8o_202",
  "list": "awsui_list_gfwv3_nqa8o_207",
  "grid": "awsui_grid_gfwv3_nqa8o_226",
  "list-item": "awsui_list-item_gfwv3_nqa8o_238",
  "toggle-container-inline": "awsui_toggle-container-inline_gfwv3_nqa8o_245",
  "toggle": "awsui_toggle_gfwv3_nqa8o_245",
  "description": "awsui_description_gfwv3_nqa8o_337",
  "separator": "awsui_separator_gfwv3_nqa8o_341"
};

// node_modules/@cloudscape-design/components/internal/components/token-list/token-limit-toggle.js
function TokenLimitToggle({ controlId, allHidden, expanded, numberOfHiddenOptions, onClick, i18nStrings = {}, limitShowFewerAriaLabel, limitShowMoreAriaLabel }) {
  const i18n = useInternalI18n("token-group");
  const numberOfHiddenOptionLabel = allHidden ? numberOfHiddenOptions : `+${numberOfHiddenOptions}`;
  const description = expanded ? i18n("i18nStrings.limitShowFewer", i18nStrings.limitShowFewer) : `${i18n("i18nStrings.limitShowMore", i18nStrings.limitShowMore) || ""} (${numberOfHiddenOptionLabel})`;
  const ariaLabel = expanded ? limitShowFewerAriaLabel : limitShowMoreAriaLabel;
  const handleClick = (0, import_react147.useCallback)(() => {
    fireNonCancelableEvent(onClick, null);
  }, [onClick]);
  const analyticsMetadata = {
    action: !expanded ? "showMore" : "showLess",
    detail: {
      label: { root: "self" }
    }
  };
  return import_react147.default.createElement(
    "button",
    Object.assign({ type: "button", className: styles_css_default68.toggle, onClick: handleClick, "aria-controls": controlId, "aria-expanded": expanded, "aria-label": ariaLabel }, getAnalyticsMetadataAttribute(analyticsMetadata)),
    import_react147.default.createElement(internal_default, { name: expanded ? "treeview-collapse" : "treeview-expand" }),
    import_react147.default.createElement("span", { className: styles_css_default68.description }, description)
  );
}

// node_modules/@cloudscape-design/components/internal/components/token-list/index.js
function TokenList({ items, alignment, renderItem, limit, after, i18nStrings, limitShowFewerAriaLabel, limitShowMoreAriaLabel, onExpandedClick = () => void 0 }) {
  const controlId = useUniqueId();
  const [expanded, setExpanded] = (0, import_react148.useState)(false);
  const hasItems = items.length > 0;
  const hasHiddenItems = hasItems && limit !== void 0 && items.length > limit;
  const visibleItems = hasHiddenItems && !expanded ? items.slice(0, limit) : items;
  const hasVisibleItems = visibleItems.length > 0;
  const toggle = hasHiddenItems ? import_react148.default.createElement(
    "div",
    { className: styles_css_default68[`toggle-container-${alignment}`] },
    import_react148.default.createElement(TokenLimitToggle, { controlId: hasVisibleItems ? controlId : void 0, allHidden: limit === 0, expanded, numberOfHiddenOptions: items.length - visibleItems.length, i18nStrings, limitShowFewerAriaLabel, limitShowMoreAriaLabel, onClick: () => {
      const isExpanded = !expanded;
      setExpanded(isExpanded);
      onExpandedClick(isExpanded);
    } })
  ) : null;
  if (alignment === "inline") {
    return import_react148.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default68.root, styles_css_default68.horizontal) },
      hasItems && import_react148.default.createElement("ul", { id: controlId, className: styles_css_default68.list }, visibleItems.map((item, itemIndex) => import_react148.default.createElement("li", { key: itemIndex, className: styles_css_default68["list-item"], "aria-setsize": items.length, "aria-posinset": itemIndex + 1 }, renderItem(item, itemIndex)))),
      toggle,
      after && import_react148.default.createElement("div", { className: styles_css_default68.separator }),
      after
    );
  }
  return import_react148.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default68.root, styles_css_default68.vertical) },
    hasVisibleItems && import_react148.default.createElement("ul", { id: controlId, className: clsx_m_default(styles_css_default68.list, {
      [styles_css_default68.vertical]: alignment === "vertical",
      [styles_css_default68.horizontal]: alignment === "horizontal",
      [styles_css_default68.grid]: alignment === "horizontal-grid"
    }) }, visibleItems.map((item, itemIndex) => import_react148.default.createElement("li", { key: itemIndex, className: styles_css_default68["list-item"], "aria-setsize": items.length, "aria-posinset": itemIndex + 1 }, renderItem(item, itemIndex)))),
    toggle,
    after
  );
}

// node_modules/@cloudscape-design/components/internal/hooks/check-controlled/index.js
function checkControlled(componentName3, propertyName, propertyValue, handlerName, handlerValue) {
  if (propertyValue !== void 0 && handlerValue === void 0 && isDevelopment2) {
    warnOnce(componentName3, `You provided \`${propertyName}\` prop without an \`${handlerName}\` handler. This will render a read-only component. If the component should be mutable, set an \`${handlerName}\` handler.`);
  }
}

// node_modules/@cloudscape-design/components/internal/hooks/use-list-focus-controller.js
var import_react149 = __toESM(require_react());
function useListFocusController({ nextFocusIndex, onFocusMoved, listItemSelector, fallbackSelector, showMoreSelector }) {
  const tokenListRef = (0, import_react149.useRef)(null);
  (0, import_react149.useEffect)(() => {
    if (nextFocusIndex === void 0 || nextFocusIndex === null || tokenListRef.current === null) {
      return;
    }
    const tokenElements = tokenListRef.current.querySelectorAll(listItemSelector);
    const fallbackElement = fallbackSelector ? selectElement(tokenListRef.current, fallbackSelector) : null;
    const toggleButton = showMoreSelector ? selectElement(tokenListRef.current, showMoreSelector) : null;
    let closestPrevIndex = Number.NEGATIVE_INFINITY;
    let closestNextIndex = Number.POSITIVE_INFINITY;
    for (let activeIndex = 0; activeIndex < tokenElements.length; activeIndex++) {
      if (activeIndex < nextFocusIndex) {
        closestPrevIndex = nextFocusIndex - activeIndex < nextFocusIndex - closestPrevIndex ? activeIndex : closestPrevIndex;
      } else {
        closestNextIndex = activeIndex - nextFocusIndex < closestNextIndex - nextFocusIndex ? activeIndex : closestNextIndex;
      }
    }
    const nextElement = tokenElements[closestNextIndex];
    const prevElement = tokenElements[closestPrevIndex];
    const focusTarget = getFirstEligible({ id: "next", element: nextElement }, { id: "prev", element: prevElement }, { id: "show-more", element: toggleButton }, { id: "fallback", element: fallbackElement });
    if (focusTarget) {
      onFocusMoved(focusTarget.element, focusTarget.id);
    }
  }, [nextFocusIndex, listItemSelector, fallbackSelector, showMoreSelector]);
  return tokenListRef;
}
function getFirstEligible(...elements) {
  for (const { id, element } of elements) {
    const focusable = element ? getFocusableElement(element) : null;
    if (focusable) {
      return { id, element: focusable };
    }
  }
  return null;
}
function getFocusableElement(element) {
  if (!(element instanceof HTMLElement)) {
    return null;
  }
  if (isFocusable(element)) {
    return element;
  }
  return getFirstFocusable(element);
}
function selectElement(container, selector) {
  if (container.matches(selector)) {
    return container;
  }
  return container.querySelector(selector);
}

// node_modules/@cloudscape-design/components/token-group/token.js
var import_react151 = __toESM(require_react());

// node_modules/@cloudscape-design/components/token-group/dismiss-button.js
var import_react150 = __toESM(require_react());

// node_modules/@cloudscape-design/components/token-group/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/token-group/styles.scoped.css";
var styles_css_default69 = {
  "root": "awsui_root_dm8gx_1a95u_161",
  "has-items": "awsui_has-items_dm8gx_1a95u_192",
  "no-padding": "awsui_no-padding_dm8gx_1a95u_192",
  "dismiss-button": "awsui_dismiss-button_dm8gx_1a95u_196",
  "token": "awsui_token_dm8gx_1a95u_238",
  "token-box": "awsui_token-box_dm8gx_1a95u_245",
  "token-box-readonly": "awsui_token-box-readonly_dm8gx_1a95u_265",
  "token-box-disabled": "awsui_token-box-disabled_dm8gx_1a95u_279"
};

// node_modules/@cloudscape-design/components/token-group/dismiss-button.js
var dismiss_button_default = (0, import_react150.forwardRef)(DismissButton);
function DismissButton({ disabled, dismissLabel, onDismiss, readOnly }, ref) {
  const analyticsMetadata = {
    action: "dismiss",
    detail: {
      label: { root: "self" }
    }
  };
  return import_react150.default.createElement(
    "button",
    Object.assign({ ref, type: "button", className: styles_css_default69["dismiss-button"], "aria-disabled": disabled || readOnly ? true : void 0, onClick: () => {
      if (disabled || readOnly || !onDismiss) {
        return;
      }
      onDismiss();
    }, "aria-label": dismissLabel }, disabled || readOnly ? {} : getAnalyticsMetadataAttribute(analyticsMetadata)),
    import_react150.default.createElement(internal_default, { name: "close" })
  );
}

// node_modules/@cloudscape-design/components/token-group/token.js
function Token(_a) {
  var { ariaLabel, disabled, readOnly, dismissLabel, onDismiss, children } = _a, restProps = __rest(_a, ["ariaLabel", "disabled", "readOnly", "dismissLabel", "onDismiss", "children"]);
  const baseProps = getBaseProps(restProps);
  return import_react151.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default69.token, baseProps.className), role: "group", "aria-label": ariaLabel, "aria-disabled": disabled }),
    import_react151.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default69["token-box"], disabled && styles_css_default69["token-box-disabled"], readOnly && styles_css_default69["token-box-readonly"]) },
      children,
      onDismiss && import_react151.default.createElement(dismiss_button_default, { disabled, dismissLabel, onDismiss, readOnly })
    )
  );
}

// node_modules/@cloudscape-design/components/token-group/internal.js
function InternalTokenGroup(_a) {
  var { alignment, items, onDismiss, limit, i18nStrings, disableOuterPadding, limitShowFewerAriaLabel, limitShowMoreAriaLabel, readOnly, isItemReadOnly, __internalRootRef } = _a, props2 = __rest(_a, ["alignment", "items", "onDismiss", "limit", "i18nStrings", "disableOuterPadding", "limitShowFewerAriaLabel", "limitShowMoreAriaLabel", "readOnly", "isItemReadOnly", "__internalRootRef"]);
  checkControlled("TokenGroup", "items", items, "onDismiss", onDismiss);
  const [nextFocusIndex, setNextFocusIndex] = (0, import_react152.useState)(null);
  const tokenListRef = useListFocusController({
    nextFocusIndex,
    onFocusMoved: (target) => {
      target.focus();
      setNextFocusIndex(null);
    },
    listItemSelector: `.${styles_css_default68["list-item"]}`,
    showMoreSelector: `.${styles_css_default68.toggle}`
  });
  const baseProps = getBaseProps(props2);
  const hasItems = items.length > 0;
  const mergedRef = useMergeRefs(__internalRootRef, tokenListRef);
  return import_react152.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default69.root, hasItems && styles_css_default69["has-items"], disableOuterPadding && styles_css_default69["no-padding"]), ref: mergedRef }),
    import_react152.default.createElement(TokenList, { alignment, items, limit, renderItem: (item, itemIndex) => import_react152.default.createElement(
      Token,
      Object.assign({ ariaLabel: item.label, dismissLabel: item.dismissLabel, onDismiss: () => {
        fireNonCancelableEvent(onDismiss, { itemIndex });
        setNextFocusIndex(itemIndex);
      }, disabled: item.disabled, readOnly: readOnly || (isItemReadOnly === null || isItemReadOnly === void 0 ? void 0 : isItemReadOnly(item)) }, item.disabled || readOnly ? {} : getAnalyticsMetadataAttribute({ detail: { position: `${itemIndex + 1}` } })),
      import_react152.default.createElement(option_default, { option: item, isGenericGroup: false })
    ), i18nStrings, limitShowFewerAriaLabel, limitShowMoreAriaLabel, onExpandedClick: (isExpanded) => {
      if (isExpanded && limit) {
        setNextFocusIndex(limit);
      } else {
        setNextFocusIndex(null);
      }
    } })
  );
}

// node_modules/@cloudscape-design/components/multiselect/use-multiselect.js
var import_react158 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/utils/filter-options.js
var searchableFields = ["value", "label", "description", "labelTag"];
var matchesString = (value, searchText, strictMatching) => {
  if (!value) {
    return false;
  }
  const index = value.toLowerCase().indexOf(searchText);
  return strictMatching ? index === 0 : index > -1;
};
var matchesSingleOption = (dropdownOption, text, strictMatching) => {
  const searchText = text.toLowerCase();
  const option = dropdownOption.option;
  const searchStrFields = (attr) => matchesString(option[attr], searchText, strictMatching);
  const searchTagsFields = (attr) => {
    var _a;
    return (_a = option[attr]) === null || _a === void 0 ? void 0 : _a.some((value) => matchesString(value, searchText, strictMatching));
  };
  const searchableTagFields = ["tags"];
  if (!strictMatching) {
    searchableTagFields.push("filteringTags");
  }
  return searchableFields.some(searchStrFields) || searchableTagFields.some(searchTagsFields);
};
var filterOptions = (options, searchText, strictMatching = false) => {
  if (searchText === "") {
    return options;
  }
  let currentGroup = null;
  let parentMatched = false;
  return options.reduce((acc, option) => {
    if (option.type === "parent") {
      parentMatched = false;
      currentGroup = option;
      if (matchesSingleOption(option, searchText, strictMatching)) {
        parentMatched = true;
        acc.push(currentGroup);
      }
      return acc;
    }
    if (option.type !== "child") {
      currentGroup = null;
      parentMatched = false;
    }
    if (parentMatched) {
      acc.push(option);
    } else if (matchesSingleOption(option, searchText, strictMatching)) {
      if (currentGroup) {
        acc.push(currentGroup);
        currentGroup = null;
      }
      acc.push(option);
    }
    return acc;
  }, []);
};
var isInteractive = (option) => !!option && !option.disabled && option.type !== "parent";
var isGroupInteractive = (option) => !!option && !option.disabled;
var isGroup = (option) => !!option && "options" in option && !!option.options;

// node_modules/@cloudscape-design/components/internal/components/option/utils/flatten-options.js
var flattenOptions = (options) => {
  const parentMap = /* @__PURE__ */ new Map();
  const flatOptions = options.reduce((acc, option) => {
    if (isGroup(option)) {
      const { options: options2 } = option, rest = __rest(option, ["options"]);
      const parentDropdownOption = { type: "parent", option };
      const allOptionsDisabled = options2.every((option2) => option2.disabled);
      if (option.disabled || allOptionsDisabled) {
        parentDropdownOption.disabled = true;
      }
      acc.push(parentDropdownOption);
      options2.forEach((child) => {
        const childDropdownOption = { type: "child", option: child };
        if (rest.disabled || child.disabled) {
          childDropdownOption.disabled = true;
        }
        acc.push(childDropdownOption);
        parentMap.set(childDropdownOption, parentDropdownOption);
      });
    } else {
      const dropdownOption = { option };
      if (option.disabled) {
        dropdownOption.disabled = true;
      }
      acc.push(dropdownOption);
    }
    return acc;
  }, []);
  return {
    flatOptions,
    parentMap
  };
};

// node_modules/@cloudscape-design/components/internal/components/option/utils/prepare-options.js
function prepareOptions(options, filteringType, filteringText) {
  const { flatOptions, parentMap } = flattenOptions(options);
  const filteredOptions = filteringType !== "auto" ? flatOptions : filterOptions(flatOptions, filteringText);
  generateTestIndexes(filteredOptions, parentMap.get.bind(parentMap));
  return {
    flatOptions,
    filteredOptions,
    parentMap,
    totalCount: flatOptions.length,
    matchesCount: filteredOptions.length
  };
}

// node_modules/@cloudscape-design/components/select/utils/check-option-value-field.js
function checkOptionValueField(componentName3, propertyName, propertyValue) {
  if (isDevelopment2) {
    if (!propertyValue) {
      return;
    }
    const valuePropertyMissing = !propertyValue.every((element) => {
      return "options" in element || "value" in element;
    });
    if (valuePropertyMissing) {
      warnOnce(componentName3, `You provided an \`${propertyName}\` prop where at least one non-group array element is missing the \`value\` field. This field is required for all options without sub-items.`);
    }
  }
}

// node_modules/@cloudscape-design/components/select/utils/connect-options.js
var connectOptionsByValue = (options, selectedOptions) => {
  return (selectedOptions || []).map((selectedOption) => {
    for (const dropdownOption of options) {
      if (dropdownOption.type !== "parent" && dropdownOption.option.value === selectedOption.value) {
        return dropdownOption;
      }
    }
    return { option: selectedOption };
  });
};
var findOptionIndex = (options, option) => {
  for (let index = 0; index < options.length; index++) {
    const __option = options[index];
    if (__option === option || __option.value === option.value) {
      return index;
    }
  }
  return -1;
};

// node_modules/@cloudscape-design/components/select/utils/use-announcement.js
var import_react153 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/option-announcer.js
function getMatchingFilteringTags(filteringTags, highlightText) {
  if (!highlightText || !filteringTags) {
    return [];
  }
  return filteringTags.filter((filteringTag) => matchesString(filteringTag, highlightText, false));
}
function defaultOptionDescription({ option, parentGroup, highlightText }) {
  return [
    parentGroup && parentGroup.label,
    option.__labelPrefix,
    option.label || option.value,
    option.description,
    option.labelTag
  ].concat(option.tags).concat(getMatchingFilteringTags(option.filteringTags, highlightText)).filter((el) => !!el).join(" ");
}
var option_announcer_default = defaultOptionDescription;

// node_modules/@cloudscape-design/components/select/utils/use-announcement.js
function useAnnouncement({ highlightText, announceSelected, highlightedOption, getParent, selectedAriaLabel, renderHighlightedAriaLive }) {
  const prevAnnouncedGroup = (0, import_react153.useRef)(void 0);
  (0, import_react153.useEffect)(() => {
    if (highlightedOption) {
      const frameId = requestAnimationFrame(() => {
        prevAnnouncedGroup.current = getParent(highlightedOption);
      });
      return () => cancelAnimationFrame(frameId);
    }
  });
  if (!highlightedOption) {
    return "";
  }
  const option = highlightedOption.option;
  const parent = getParent(highlightedOption);
  const group = parent && parent !== prevAnnouncedGroup.current ? parent : void 0;
  if (renderHighlightedAriaLive) {
    return renderHighlightedAriaLive(option, group);
  }
  const selectedAnnouncement = announceSelected && selectedAriaLabel ? selectedAriaLabel : "";
  const defaultDescription = option_announcer_default({ option, parentGroup: group, highlightText });
  return [selectedAnnouncement, defaultDescription].filter(Boolean).join(" ");
}

// node_modules/@cloudscape-design/components/select/utils/use-load-items.js
var import_react154 = __toESM(require_react());
var useLoadItems = ({ onLoadItems, options, statusType }) => {
  const prevFilteringText = (0, import_react154.useRef)(void 0);
  const fireLoadItems = (filteringText) => {
    if (prevFilteringText.current === filteringText) {
      return;
    }
    prevFilteringText.current = filteringText;
    fireNonCancelableEvent(onLoadItems, { filteringText, firstPage: true, samePage: false });
  };
  const handleLoadMore = () => {
    const firstPage = options.length === 0;
    if (statusType === "pending") {
      fireNonCancelableEvent(onLoadItems, {
        firstPage,
        samePage: false,
        filteringText: prevFilteringText.current || ""
      });
    }
  };
  const handleRecoveryClick = () => fireNonCancelableEvent(onLoadItems, {
    firstPage: false,
    samePage: true,
    filteringText: prevFilteringText.current || ""
  });
  return {
    fireLoadItems,
    handleLoadMore,
    handleRecoveryClick
  };
};

// node_modules/@cloudscape-design/components/select/utils/use-native-search.js
var import_react155 = __toESM(require_react());
var isRepeatedChar = (str) => str.split("").every((c2) => c2 === str[0]);
function findMatchingOption(options, searchText, currentHighlight, useInteractiveGroups) {
  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;
  const filter = (searchText2) => filterOptions(options, searchText2, true).filter((option) => interactivityCheck(option));
  const matchingOptions = filter(searchText);
  if (matchingOptions.length === 1) {
    return matchingOptions[0];
  }
  if (currentHighlight && searchText.length > 1 && isRepeatedChar(searchText)) {
    const matchingOptions2 = filter(searchText[0]);
    if (matchingOptions2.length > 0) {
      let active = isGroup(currentHighlight) ? matchingOptions2.map(({ option }) => option).indexOf(currentHighlight) : matchingOptions2.map(({ option }) => option.value).indexOf(currentHighlight.value);
      active += 1;
      active = active % matchingOptions2.length;
      return matchingOptions2[active];
    }
  }
  if (matchingOptions.length > 0) {
    return matchingOptions[0];
  }
  return null;
}
function useNativeSearch({ isEnabled, options, highlightOption, highlightedOption, useInteractiveGroups }) {
  const value = (0, import_react155.useRef)("");
  const delayedResetValue = useDebounceCallback(() => value.current = "", 500);
  return (event) => {
    if (!isEnabled) {
      return;
    }
    const { key: key2 } = event;
    if (!key2 || key2.length !== 1) {
      return;
    }
    delayedResetValue();
    const newValue = value.current + key2;
    value.current = newValue;
    const nextHighlight = findMatchingOption(options, newValue, highlightedOption, useInteractiveGroups);
    if (nextHighlight) {
      highlightOption(nextHighlight);
    }
  };
}

// node_modules/@cloudscape-design/components/select/utils/use-select.js
var import_react157 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-highlight-option.js
var import_react156 = __toESM(require_react());
var HighlightType = class {
  constructor(type, moveFocus = type === "keyboard") {
    this.type = type;
    this.moveFocus = moveFocus;
  }
};
function useHighlightedOption({ options, isHighlightable: isHighlightable2 }) {
  const [highlightedIndex, setHighlightedIndexState] = (0, import_react156.useState)(-1);
  const [highlightType, setHighlightType] = (0, import_react156.useState)(new HighlightType("keyboard"));
  const setHighlightedIndex = (0, import_react156.useCallback)((index, newHighlightType) => {
    setHighlightedIndexState(index);
    setHighlightType((oldHighlight) => oldHighlight.type !== newHighlightType.type ? newHighlightType : oldHighlight);
  }, []);
  const highlightedOption = options[highlightedIndex] && isHighlightable2(options[highlightedIndex]) ? options[highlightedIndex] : void 0;
  const moveHighlightFrom = (direction, startIndex = highlightedIndex, highlightType2) => {
    const fromBottomEnd = startIndex === -1 && direction === -1;
    let newIndex = fromBottomEnd ? options.length : startIndex;
    do {
      newIndex += direction;
    } while (options[newIndex] && !isHighlightable2(options[newIndex]));
    if (options[newIndex]) {
      setHighlightedIndex(newIndex, highlightType2);
    }
  };
  const moveHighlight2 = (direction, highlightType2) => moveHighlightFrom(direction, highlightedIndex, highlightType2);
  const highlightOption = (0, import_react156.useCallback)((option, highlightType2) => {
    const index = options.indexOf(option);
    setHighlightedIndex(index, highlightType2);
  }, [options, setHighlightedIndex]);
  return [
    { highlightType, highlightedIndex, highlightedOption },
    {
      setHighlightedIndexWithMouse: (index, moveFocus = false) => setHighlightedIndex(index, new HighlightType("mouse", moveFocus)),
      highlightFirstOptionWithMouse: () => moveHighlightFrom(1, -1, new HighlightType("mouse", true)),
      moveHighlightWithKeyboard: (direction) => moveHighlight2(direction, new HighlightType("keyboard")),
      highlightOptionWithKeyboard: (option) => highlightOption(option, new HighlightType("keyboard")),
      resetHighlightWithKeyboard: () => setHighlightedIndex(-1, new HighlightType("keyboard")),
      goHomeWithKeyboard: () => moveHighlightFrom(1, -1, new HighlightType("keyboard")),
      goEndWithKeyboard: () => moveHighlightFrom(-1, options.length, new HighlightType("keyboard"))
    }
  ];
}

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-ids.js
var getOptionId = (menuId, index) => {
  if (index < 0) {
    return void 0;
  }
  return `${menuId}-option-${index}`;
};

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-keyboard.js
var HOME = 36;
var END = 35;
var useMenuKeyboard = ({ goUp, goDown, selectOption, goHome, goEnd, closeDropdown, preventNativeSpace = false }) => {
  return (event) => {
    switch (event.detail.keyCode) {
      case KeyCode.up:
        event.preventDefault();
        goUp();
        break;
      case KeyCode.down:
        event.preventDefault();
        goDown();
        break;
      case HOME:
        goHome();
        break;
      case END:
        goEnd();
        break;
      case KeyCode.escape:
        event.stopPropagation();
        closeDropdown();
        break;
      case KeyCode.enter:
        event.preventDefault();
        selectOption();
        break;
      case KeyCode.space:
        if (preventNativeSpace) {
          event.preventDefault();
          selectOption();
        }
    }
  };
};
var useTriggerKeyboard = ({ openDropdown, goHome }) => {
  return (event) => {
    switch (event.detail.keyCode) {
      case KeyCode.up:
      case KeyCode.down:
        event.preventDefault();
        goHome();
        openDropdown();
        break;
      case KeyCode.space:
      case KeyCode.enter:
        event.preventDefault();
        openDropdown();
        break;
    }
  };
};

// node_modules/@cloudscape-design/components/select/utils/use-select.js
function useSelect({ selectedOptions, updateSelectedOption, options, filteringType, onBlur, onFocus, externalRef, keepOpen, embedded, fireLoadItems, setFilteringValue, useInteractiveGroups = false, statusType, isAllSelected, isSomeSelected, toggleAll }) {
  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;
  const isHighlightable2 = (option) => !!option && (useInteractiveGroups || option.type !== "parent");
  const filterRef = (0, import_react157.useRef)(null);
  const triggerRef = (0, import_react157.useRef)(null);
  const menuRef = (0, import_react157.useRef)(null);
  const hasFilter = filteringType !== "none" && !embedded;
  const activeRef = hasFilter ? filterRef : menuRef;
  const __selectedOptions = connectOptionsByValue(options, selectedOptions);
  const __selectedValuesSet = selectedOptions.reduce((selectedValuesSet, item) => {
    if (item.value) {
      selectedValuesSet.add(item.value);
    }
    return selectedValuesSet;
  }, /* @__PURE__ */ new Set());
  const [{ highlightType, highlightedOption, highlightedIndex }, { moveHighlightWithKeyboard, resetHighlightWithKeyboard, setHighlightedIndexWithMouse, highlightOptionWithKeyboard, highlightFirstOptionWithMouse, goHomeWithKeyboard, goEndWithKeyboard }] = useHighlightedOption({ options, isHighlightable: isHighlightable2 });
  const { isOpen, openDropdown, closeDropdown, toggleDropdown, openedWithKeyboard } = useOpenState({
    defaultOpen: embedded,
    onOpen: () => fireLoadItems(""),
    onClose: () => {
      resetHighlightWithKeyboard();
      setFilteringValue === null || setFilteringValue === void 0 ? void 0 : setFilteringValue("");
    }
  });
  const handleFocus = () => {
    fireNonCancelableEvent(onFocus, {});
  };
  const handleBlur = () => {
    fireNonCancelableEvent(onBlur, {});
    closeDropdown();
  };
  const hasSelectedOption = __selectedOptions.length > 0;
  const menuId = useUniqueId("option-list");
  const dialogId = useUniqueId("dialog");
  const highlightedOptionId = getOptionId(menuId, highlightedIndex);
  const closeDropdownIfNecessary = () => {
    var _a;
    if (!keepOpen) {
      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      closeDropdown();
    }
  };
  const selectOption = (option) => {
    const optionToSelect = option || highlightedOption;
    if (!optionToSelect || !interactivityCheck(optionToSelect)) {
      return;
    }
    if (optionToSelect.type === "select-all" && toggleAll) {
      toggleAll();
    } else {
      updateSelectedOption(optionToSelect.option);
    }
    closeDropdownIfNecessary();
  };
  const activeKeyDownHandler = useMenuKeyboard({
    goUp: () => {
      if (!useInteractiveGroups && (highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.type) === "child" && highlightedIndex === 1 || highlightedIndex === 0) {
        goEndWithKeyboard();
        return;
      }
      moveHighlightWithKeyboard(-1);
    },
    goDown: () => {
      if (highlightedIndex === options.length - 1) {
        goHomeWithKeyboard();
        return;
      }
      moveHighlightWithKeyboard(1);
    },
    selectOption,
    goHome: goHomeWithKeyboard,
    goEnd: goEndWithKeyboard,
    closeDropdown: () => {
      var _a;
      if (!embedded) {
        (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        closeDropdown();
      }
    },
    preventNativeSpace: !hasFilter || !!highlightedOption
  });
  const triggerKeyDownHandler = useTriggerKeyboard({
    openDropdown: () => openDropdown(true),
    goHome: goHomeWithKeyboard
  });
  const getDropdownProps = () => ({
    onFocus: handleFocus,
    onBlur: handleBlur,
    dropdownContentId: dialogId,
    dropdownContentRole: hasFilter ? "dialog" : void 0
  });
  const getTriggerProps = (disabled = false, autoFocus = false) => {
    const triggerProps = {
      ref: triggerRef,
      onFocus: () => closeDropdown(),
      autoFocus,
      ariaHasPopup: hasFilter ? "dialog" : "listbox",
      ariaControls: isOpen ? hasFilter ? dialogId : menuId : void 0
    };
    if (!disabled) {
      triggerProps.onMouseDown = (event) => {
        var _a;
        event.preventDefault();
        if (isOpen) {
          (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
        toggleDropdown();
      };
      triggerProps.onKeyDown = triggerKeyDownHandler;
    }
    return triggerProps;
  };
  const getFilterProps = () => {
    if (!hasFilter || !setFilteringValue) {
      return {};
    }
    return {
      ref: filterRef,
      onKeyDown: activeKeyDownHandler,
      onChange: (event) => {
        setFilteringValue(event.detail.value);
        resetHighlightWithKeyboard();
      },
      __onDelayedInput: (event) => {
        fireLoadItems(event.detail.value);
      },
      __nativeAttributes: {
        "aria-activedescendant": highlightedOptionId,
        ["aria-owns"]: menuId,
        ["aria-controls"]: menuId
      }
    };
  };
  const getMenuProps = () => {
    const menuProps = {
      id: menuId,
      ref: menuRef,
      open: isOpen,
      onMouseUp: (itemIndex) => {
        if (itemIndex > -1) {
          selectOption(options[itemIndex]);
        }
      },
      onMouseMove: (itemIndex) => {
        if (itemIndex > -1) {
          setHighlightedIndexWithMouse(itemIndex);
        }
      },
      statusType
    };
    if (!hasFilter) {
      menuProps.onKeyDown = activeKeyDownHandler;
      menuProps.nativeAttributes = {
        "aria-activedescendant": highlightedOptionId
      };
    }
    if (embedded) {
      menuProps.onFocus = () => {
        if (!highlightedOption) {
          goHomeWithKeyboard();
        }
      };
      menuProps.onBlur = () => {
        resetHighlightWithKeyboard();
      };
    }
    return menuProps;
  };
  const getGroupState = (option) => {
    const totalSelected = option.options.filter((item) => !!item.value && __selectedValuesSet.has(item.value)).length;
    const hasSelected = totalSelected > 0;
    const allSelected = totalSelected === option.options.length;
    return {
      selected: hasSelected && allSelected && useInteractiveGroups,
      indeterminate: hasSelected && !allSelected
    };
  };
  const getOptionProps2 = (option, index) => {
    var _a;
    const isSelectAll = option.type === "select-all";
    const highlighted = option === highlightedOption;
    const groupState = isGroup(option.option) ? getGroupState(option.option) : void 0;
    const selected = isSelectAll ? isAllSelected : __selectedOptions.indexOf(option) > -1 || !!(groupState === null || groupState === void 0 ? void 0 : groupState.selected);
    const nextOption = (_a = options[index + 1]) === null || _a === void 0 ? void 0 : _a.option;
    const isNextSelected = !!nextOption && isGroup(nextOption) ? getGroupState(nextOption).selected : __selectedOptions.indexOf(options[index + 1]) > -1;
    const optionProps = {
      key: index,
      option,
      highlighted,
      selected,
      isNextSelected,
      indeterminate: !!(groupState === null || groupState === void 0 ? void 0 : groupState.indeterminate) || isSelectAll && !isAllSelected && isSomeSelected,
      ["data-mouse-target"]: isHighlightable2(option) ? index : -1,
      id: getOptionId(menuId, index)
    };
    return optionProps;
  };
  const prevOpen = usePrevious(isOpen);
  (0, import_react157.useEffect)(() => {
    if (isOpen && !prevOpen && options.length > 0 && !hasFilter) {
      if (openedWithKeyboard) {
        if (__selectedOptions[0]) {
          highlightOptionWithKeyboard(__selectedOptions[0]);
        } else {
          goHomeWithKeyboard();
        }
      } else {
        if (!__selectedOptions[0] || !options.includes(__selectedOptions[0])) {
          highlightFirstOptionWithMouse();
        } else {
          const highlightedIndex2 = options.indexOf(__selectedOptions[0]);
          setHighlightedIndexWithMouse(highlightedIndex2, true);
        }
      }
    }
  }, [
    isOpen,
    __selectedOptions,
    hasSelectedOption,
    setHighlightedIndexWithMouse,
    highlightOptionWithKeyboard,
    highlightFirstOptionWithMouse,
    goHomeWithKeyboard,
    openedWithKeyboard,
    options,
    prevOpen,
    hasFilter
  ]);
  (0, import_react157.useEffect)(() => {
    var _a;
    if (isOpen && !embedded) {
      (_a = activeRef.current) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });
    }
  }, [isOpen, activeRef, embedded]);
  useForwardFocus(externalRef, triggerRef);
  const highlightedGroupSelected = !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;
  const announceSelected = !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);
  return {
    isOpen,
    highlightedOption,
    highlightedIndex,
    highlightType,
    getTriggerProps,
    getDropdownProps,
    getMenuProps,
    getFilterProps,
    getOptionProps: getOptionProps2,
    highlightOption: highlightOptionWithKeyboard,
    selectOption,
    announceSelected,
    dialogId
  };
}

// node_modules/@cloudscape-design/components/multiselect/use-multiselect.js
function useMultiselect(_a) {
  var { options, filteringType, filteringResultsText, disabled, statusType, empty, loadingText, finishedText, errorText, noMatch, renderHighlightedAriaLive, selectedOptions, deselectAriaLabel, keepOpen, onBlur, onFocus, onLoadItems, onChange, controlId, ariaLabelId, footerId, filteringValue, setFilteringValue, externalRef, embedded, enableSelectAll, i18nStrings } = _a, restProps = __rest(_a, ["options", "filteringType", "filteringResultsText", "disabled", "statusType", "empty", "loadingText", "finishedText", "errorText", "noMatch", "renderHighlightedAriaLive", "selectedOptions", "deselectAriaLabel", "keepOpen", "onBlur", "onFocus", "onLoadItems", "onChange", "controlId", "ariaLabelId", "footerId", "filteringValue", "setFilteringValue", "externalRef", "embedded", "enableSelectAll", "i18nStrings"]);
  checkOptionValueField("Multiselect", "options", options);
  const i18n = useInternalI18n("multiselect");
  const i18nCommon = useInternalI18n("select");
  const recoveryText = i18nCommon("recoveryText", restProps.recoveryText);
  const errorIconAriaLabel = i18nCommon("errorIconAriaLabel", restProps.errorIconAriaLabel);
  const selectedAriaLabel = i18nCommon("selectedAriaLabel", restProps.selectedAriaLabel);
  if (restProps.recoveryText && !onLoadItems) {
    warnOnce("Multiselect", "`onLoadItems` must be provided for `recoveryText` to be displayed.");
  }
  const { handleLoadMore, handleRecoveryClick, fireLoadItems } = useLoadItems({
    onLoadItems,
    options,
    statusType
  });
  const useInteractiveGroups = true;
  const { flatOptions, filteredOptions, parentMap, totalCount, matchesCount } = prepareOptions(options, filteringType, filteringValue);
  const selectAllOption = {
    type: "select-all",
    afterHeader: filteringType !== "none",
    option: { label: i18n("i18nStrings.selectAllText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectAllText) }
  };
  const visibleOptions = enableSelectAll && filteredOptions.length ? [selectAllOption, ...filteredOptions] : filteredOptions;
  const allNonParentOptions = flatOptions.filter((item) => item.type !== "parent").map((option) => option.option);
  const filteredNonParentOptions = filteredOptions.filter((item) => item.type !== "parent").map((item) => item.option);
  const selectedValues = (0, import_react158.useMemo)(() => new Set(selectedOptions.map((option) => option.value)), [selectedOptions]);
  const isSomeSelected = selectedOptions.length > 0;
  const isAllVisibleSelectableSelected = isSomeSelected && filteredNonParentOptions.every((option) => option.disabled || selectedValues.has(option.value));
  const isAllSelected = allNonParentOptions.every((option) => selectedValues.has(option.value));
  const toggleAll = () => {
    const filteredNonParentOptionValues = new Set(filteredNonParentOptions.map((option) => option.value));
    fireNonCancelableEvent(onChange, {
      selectedOptions: isAllVisibleSelectableSelected ? selectedOptions.filter((option) => !filteredNonParentOptionValues.has(option.value)) : allNonParentOptions.filter(({ disabled: disabled2, value }) => selectedValues.has(value) || !disabled2 && filteredNonParentOptionValues.has(value))
    });
  };
  const updateSelectedOption = (0, import_react158.useCallback)((option) => {
    const isAllChildrenSelected = (optionsArray) => optionsArray.every((item) => findOptionIndex(selectedOptions, item) > -1 || item.disabled);
    const intersection = (visibleOptions2, options2) => visibleOptions2.filter((item) => findOptionIndex(options2, item) > -1 && !item.disabled);
    const union = (visibleOptions2, options2) => visibleOptions2.filter((item) => findOptionIndex(options2, item) === -1).concat(options2);
    const select = (options2, selectedOptions2) => {
      return union(selectedOptions2, options2);
    };
    const unselect = (options2, selectedOptions2) => {
      return selectedOptions2.filter((option2) => findOptionIndex(options2, option2) === -1);
    };
    let newSelectedOptions = [...selectedOptions];
    if (isGroup(option)) {
      const visibleOptions2 = intersection([...option.options], filteredNonParentOptions);
      newSelectedOptions = isAllChildrenSelected(visibleOptions2) ? unselect(visibleOptions2, newSelectedOptions) : select(visibleOptions2, newSelectedOptions);
    } else {
      newSelectedOptions = isAllChildrenSelected([option]) ? unselect([option], newSelectedOptions) : select([option], newSelectedOptions);
    }
    fireNonCancelableEvent(onChange, {
      selectedOptions: newSelectedOptions
    });
  }, [selectedOptions, onChange, filteredNonParentOptions]);
  const scrollToIndex = (0, import_react158.useRef)(null);
  const { isOpen, highlightType, highlightedOption, highlightedIndex, getTriggerProps, getDropdownProps, getFilterProps, getMenuProps, getOptionProps: getOptionProps2, highlightOption, announceSelected } = useSelect({
    selectedOptions,
    updateSelectedOption,
    options: visibleOptions,
    filteringType,
    onFocus,
    onBlur,
    externalRef,
    keepOpen,
    fireLoadItems,
    setFilteringValue,
    useInteractiveGroups,
    statusType,
    embedded,
    isAllSelected,
    isSomeSelected,
    toggleAll
  });
  const wrapperOnKeyDown = useNativeSearch({
    isEnabled: filteringType === "none" && isOpen,
    options: visibleOptions,
    highlightOption,
    highlightedOption: highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option,
    useInteractiveGroups
  });
  const isEmpty = !options || options.length === 0;
  const isNoMatch = filteredOptions && filteredOptions.length === 0;
  const isFiltered = filteringType !== "none" && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;
  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(matchesCount, totalCount) : void 0;
  const dropdownStatus = useDropdownStatus({
    statusType,
    empty,
    loadingText,
    finishedText,
    errorText,
    recoveryText,
    isEmpty,
    isNoMatch,
    noMatch,
    isFiltered,
    filteringResultsText: filteredText,
    onRecoveryClick: handleRecoveryClick,
    errorIconAriaLabel,
    hasRecoveryCallback: !!onLoadItems
  });
  const announcement = useAnnouncement({
    announceSelected,
    highlightedOption,
    getParent: (option) => {
      var _a2;
      return (_a2 = parentMap.get(option)) === null || _a2 === void 0 ? void 0 : _a2.option;
    },
    selectedAriaLabel,
    renderHighlightedAriaLive
  });
  const tokens = selectedOptions.map((option) => ({
    label: option.label,
    disabled: disabled || option.disabled,
    labelTag: option.labelTag,
    description: option.description,
    iconAlt: option.iconAlt,
    iconName: option.iconName,
    iconUrl: option.iconUrl,
    iconSvg: option.iconSvg,
    tags: option.tags,
    dismissLabel: i18n("deselectAriaLabel", deselectAriaLabel === null || deselectAriaLabel === void 0 ? void 0 : deselectAriaLabel(option), (format3) => {
      var _a2;
      return format3({ option__label: (_a2 = option.label) !== null && _a2 !== void 0 ? _a2 : "" });
    })
  }));
  (0, import_react158.useEffect)(() => {
    var _a2;
    (_a2 = scrollToIndex.current) === null || _a2 === void 0 ? void 0 : _a2.call(scrollToIndex, highlightedIndex);
  }, [highlightedIndex]);
  const dropdownOnMouseDown = (event) => {
    const target = event.target;
    if (target !== document.activeElement) {
      event.preventDefault();
    }
  };
  const tokenOnDismiss = ({ detail }) => {
    const optionToDeselect = selectedOptions[detail.itemIndex];
    updateSelectedOption(optionToDeselect);
    const targetRef = getTriggerProps().ref;
    if (targetRef.current) {
      targetRef.current.focus();
    }
  };
  return {
    isOpen,
    tokens,
    announcement,
    dropdownStatus,
    filteringValue,
    filteredOptions: visibleOptions,
    highlightType,
    scrollToIndex,
    getFilterProps,
    getTriggerProps,
    getMenuProps: () => Object.assign(Object.assign({}, getMenuProps()), { onLoadMore: handleLoadMore, ariaLabelledby: joinStrings(ariaLabelId, controlId), ariaDescribedby: dropdownStatus.content ? footerId : void 0, embedded }),
    getOptionProps: getOptionProps2,
    getTokenProps: () => ({ onDismiss: tokenOnDismiss }),
    getDropdownProps: () => Object.assign(Object.assign({}, getDropdownProps()), { onMouseDown: dropdownOnMouseDown }),
    getWrapperProps: () => ({ onKeyDown: wrapperOnKeyDown }),
    highlightedIndex
  };
}

// node_modules/@cloudscape-design/components/multiselect/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/multiselect/styles.scoped.css";
var styles_css_default70 = {
  "root": "awsui_root_f8g6q_anlz5_145",
  "embedded": "awsui_embedded_f8g6q_anlz5_177",
  "tokens": "awsui_tokens_f8g6q_anlz5_210"
};

// node_modules/@cloudscape-design/components/multiselect/internal.js
var InternalMultiselect = import_react159.default.forwardRef((_a, externalRef) => {
  var _b;
  var { options, filteringType, filteringPlaceholder, filteringAriaLabel, filteringClearAriaLabel, ariaRequired, placeholder, disabled, readOnly, ariaLabel, selectedOptions, deselectAriaLabel, tokenLimit, i18nStrings, virtualScroll, inlineTokens = false, hideTokens, expandToViewport, tokenLimitShowFewerAriaLabel, tokenLimitShowMoreAriaLabel, __internalRootRef = null, autoFocus, enableSelectAll } = _a, restProps = __rest(_a, ["options", "filteringType", "filteringPlaceholder", "filteringAriaLabel", "filteringClearAriaLabel", "ariaRequired", "placeholder", "disabled", "readOnly", "ariaLabel", "selectedOptions", "deselectAriaLabel", "tokenLimit", "i18nStrings", "virtualScroll", "inlineTokens", "hideTokens", "expandToViewport", "tokenLimitShowFewerAriaLabel", "tokenLimitShowMoreAriaLabel", "__internalRootRef", "autoFocus", "enableSelectAll"]);
  const baseProps = getBaseProps(restProps);
  const formFieldContext = useFormFieldContext(restProps);
  const i18n = useInternalI18n("multiselect");
  const selfControlId = useUniqueId("trigger");
  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;
  const ariaLabelId = useUniqueId("multiselect-ariaLabel-");
  const footerId = useUniqueId("multiselect-footer-");
  const [filteringValue, setFilteringValue] = (0, import_react159.useState)("");
  const multiselectProps = useMultiselect(Object.assign({
    options,
    selectedOptions,
    filteringType,
    disabled,
    deselectAriaLabel,
    controlId,
    ariaLabelId,
    footerId,
    filteringValue,
    setFilteringValue,
    externalRef,
    enableSelectAll,
    i18nStrings
  }, restProps));
  const filter = import_react159.default.createElement(filter_default, Object.assign({ clearAriaLabel: filteringClearAriaLabel, filteringType, placeholder: filteringPlaceholder, ariaLabel: filteringAriaLabel, ariaRequired, value: filteringValue }, multiselectProps.getFilterProps()));
  const trigger = import_react159.default.createElement(trigger_default, Object.assign({ placeholder, disabled, readOnly, triggerProps: multiselectProps.getTriggerProps(disabled, autoFocus), selectedOption: null, selectedOptions, triggerVariant: inlineTokens ? "tokens" : "placeholder", isOpen: multiselectProps.isOpen }, formFieldContext, { controlId, ariaLabelledby: joinStrings(formFieldContext.ariaLabelledby, ariaLabelId) }));
  const tokens = selectedOptions.map((option) => ({
    label: option.label,
    disabled,
    labelTag: option.labelTag,
    description: option.description,
    iconAlt: option.iconAlt,
    iconName: option.iconName,
    iconUrl: option.iconUrl,
    iconSvg: option.iconSvg,
    tags: option.tags,
    dismissLabel: i18n("deselectAriaLabel", deselectAriaLabel === null || deselectAriaLabel === void 0 ? void 0 : deselectAriaLabel(option), (format3) => {
      var _a2;
      return format3({ option__label: (_a2 = option.label) !== null && _a2 !== void 0 ? _a2 : "" });
    }),
    _readOnly: !!option.disabled
  }));
  const ListComponent = virtualScroll ? virtual_list_default : plain_list_default;
  const showTokens = !hideTokens && !inlineTokens && tokens.length > 0;
  const tokenGroupI18nStrings = {
    limitShowFewer: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowFewer,
    limitShowMore: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowMore
  };
  const dropdownStatus = multiselectProps.dropdownStatus;
  const dropdownProps = multiselectProps.getDropdownProps();
  const hasFilteredOptions = multiselectProps.filteredOptions.length > 0;
  return import_react159.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(styles_css_default70.root, baseProps.className) }, multiselectProps.getWrapperProps()),
    import_react159.default.createElement(
      dropdown_default,
      Object.assign({}, dropdownProps, { ariaLabelledby: dropdownProps.dropdownContentRole ? joinStrings(ariaLabelId, controlId) : void 0, ariaDescribedby: dropdownProps.dropdownContentRole ? dropdownStatus.content ? footerId : void 0 : void 0, open: multiselectProps.isOpen, trigger, header: filter, footer: dropdownStatus.isSticky ? import_react159.default.createElement(dropdown_footer_default, { content: multiselectProps.isOpen ? dropdownStatus.content : null, id: footerId }) : null, expandToViewport, stretchBeyondTriggerWidth: true }),
      import_react159.default.createElement(ListComponent, { listBottom: !dropdownStatus.isSticky ? import_react159.default.createElement(dropdown_footer_default, { content: multiselectProps.isOpen ? dropdownStatus.content : null, id: footerId }) : null, menuProps: multiselectProps.getMenuProps(), getOptionProps: multiselectProps.getOptionProps, filteredOptions: multiselectProps.filteredOptions, filteringValue, ref: multiselectProps.scrollToIndex, hasDropdownStatus: dropdownStatus.content !== null, checkboxes: true, useInteractiveGroups: true, screenReaderContent: multiselectProps.announcement, highlightType: multiselectProps.highlightType, firstOptionSticky: hasFilteredOptions && enableSelectAll })
    ),
    showTokens && import_react159.default.createElement(InternalTokenGroup, Object.assign({}, multiselectProps.getTokenProps(), { className: styles_css_default70.tokens, alignment: "horizontal", limit: tokenLimit, items: tokens, i18nStrings: tokenGroupI18nStrings, limitShowMoreAriaLabel: tokenLimitShowMoreAriaLabel, limitShowFewerAriaLabel: tokenLimitShowFewerAriaLabel, disableOuterPadding: true, readOnly, isItemReadOnly: (item) => item._readOnly })),
    import_react159.default.createElement(ScreenreaderOnly, { id: ariaLabelId }, ariaLabel)
  );
});
var internal_default12 = InternalMultiselect;

// node_modules/@cloudscape-design/components/internal/components/chart-filter/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/chart-filter/styles.scoped.css";
var styles_css_default71 = {
  "root": "awsui_root_1px7g_143y5_145",
  "chart-filter": "awsui_chart-filter_1px7g_143y5_177",
  "custom-icon-wrapper": "awsui_custom-icon-wrapper_1px7g_143y5_181"
};

// node_modules/@cloudscape-design/components/internal/components/chart-filter/index.js
var chart_filter_default = (0, import_react160.memo)(ChartFilter);
function ChartFilter(_a) {
  var { series, i18nStrings, selectedSeries, onChange } = _a, restProps = __rest(_a, ["series", "i18nStrings", "selectedSeries", "onChange"]);
  const baseProps = getBaseProps(restProps);
  const className2 = clsx_m_default(baseProps.className, styles_css_default71.root);
  const i18n = useInternalI18n("[charts]");
  const defaultOptions3 = series.map((d3, i2) => ({
    label: d3.label,
    value: "" + i2,
    datum: d3.datum,
    __customIcon: import_react160.default.createElement("span", { className: styles_css_default71["custom-icon-wrapper"] }, d3.marker)
  }));
  const selectedOptions = defaultOptions3.filter((option) => (selectedSeries === null || selectedSeries === void 0 ? void 0 : selectedSeries.indexOf(option.datum)) !== -1);
  const updateSelection = (0, import_react160.useCallback)(({ detail: { selectedOptions: selectedOptions2 } }) => {
    const selectedSeries2 = defaultOptions3.filter((option) => selectedOptions2.indexOf(option) !== -1).map((option) => option.datum);
    onChange(selectedSeries2);
  }, [onChange, defaultOptions3]);
  return import_react160.default.createElement(
    InternalFormField,
    Object.assign({}, baseProps, { label: i18n("i18nStrings.filterLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filterLabel), className: className2 }),
    import_react160.default.createElement(internal_default12, { placeholder: i18n("i18nStrings.filterPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filterPlaceholder), options: defaultOptions3, selectedOptions, onChange: updateSelection, className: styles_css_default71["chart-filter"], selectedAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filterSelectedAriaLabel, filteringType: "none", statusType: "finished", keepOpen: true, hideTokens: true })
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/area-chart-filter.js
var area_chart_filter_default = (0, import_react161.memo)(AreaChartFilter);
function AreaChartFilter({ model, filterLabel, filterPlaceholder, filterSelectedAriaLabel }) {
  const filterItems = model.allSeries.map((s4) => {
    const { title, color: color2, markerType } = model.getInternalSeries(s4);
    return {
      label: title,
      marker: import_react161.default.createElement(chart_series_marker_default, { type: markerType, color: color2 }),
      datum: s4
    };
  });
  return import_react161.default.createElement(chart_filter_default, { series: filterItems, onChange: model.handlers.onFilterSeries, selectedSeries: model.series, i18nStrings: {
    filterLabel,
    filterPlaceholder,
    filterSelectedAriaLabel
  } });
}

// node_modules/@cloudscape-design/components/area-chart/elements/area-chart-legend.js
var import_react163 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-legend/index.js
var import_react162 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-legend/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/chart-legend/styles.scoped.css";
var styles_css_default72 = {
  "marker": "awsui_marker_1kjc7_9chwz_153",
  "root": "awsui_root_1kjc7_9chwz_167",
  "title": "awsui_title_1kjc7_9chwz_202",
  "list": "awsui_list_1kjc7_9chwz_206",
  "marker--dimmed": "awsui_marker--dimmed_1kjc7_9chwz_252",
  "marker--highlighted": "awsui_marker--highlighted_1kjc7_9chwz_255"
};

// node_modules/@cloudscape-design/components/internal/components/chart-legend/index.js
var chart_legend_default = (0, import_react162.memo)(ChartLegend);
function ChartLegend({ series, onHighlightChange, highlightedSeries, legendTitle, ariaLabel, plotContainerRef }) {
  const i18n = useInternalI18n("[charts]");
  const containerRef = (0, import_react162.useRef)(null);
  const segmentsRef = (0, import_react162.useRef)([]);
  const highlightedSeriesIndex = findSeriesIndex(series, highlightedSeries);
  const highlightInlineStart = () => {
    var _a;
    const currentIndex = highlightedSeriesIndex !== null && highlightedSeriesIndex !== void 0 ? highlightedSeriesIndex : 0;
    const nextIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : series.length - 1;
    (_a = segmentsRef.current[nextIndex]) === null || _a === void 0 ? void 0 : _a.focus();
  };
  const highlightInlineEnd = () => {
    var _a;
    const currentIndex = highlightedSeriesIndex !== null && highlightedSeriesIndex !== void 0 ? highlightedSeriesIndex : 0;
    const nextIndex = currentIndex + 1 < series.length ? currentIndex + 1 : 0;
    (_a = segmentsRef.current[nextIndex]) === null || _a === void 0 ? void 0 : _a.focus();
  };
  const handleKeyPress = (event) => {
    if (event.keyCode === KeyCode.right || event.keyCode === KeyCode.left) {
      event.preventDefault();
      handleKey(event, {
        onInlineStart: () => highlightInlineStart(),
        onInlineEnd: () => highlightInlineEnd()
      });
    }
  };
  const handleSelection = (index) => {
    if (series[index].datum !== highlightedSeries) {
      onHighlightChange(series[index].datum);
    }
  };
  const handleBlur = (event) => {
    var _a;
    if (event.relatedTarget === null || containerRef.current && !containerRef.current.contains(event.relatedTarget) && !((_a = plotContainerRef === null || plotContainerRef === void 0 ? void 0 : plotContainerRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {
      onHighlightChange(null);
    }
  };
  const handleMouseOver = (s4) => {
    if (s4 !== highlightedSeries) {
      onHighlightChange(s4);
    }
  };
  const handleMouseLeave = () => {
    onHighlightChange(null);
  };
  return import_react162.default.createElement(
    import_react162.default.Fragment,
    null,
    import_react162.default.createElement(
      "div",
      { ref: containerRef, role: "toolbar", "aria-label": legendTitle || i18n("i18nStrings.legendAriaLabel", ariaLabel), className: styles_css_default72.root, onKeyDown: handleKeyPress, onBlur: handleBlur },
      legendTitle && import_react162.default.createElement(InternalBox, { fontWeight: "bold", className: styles_css_default72.title }, legendTitle),
      import_react162.default.createElement("div", { className: styles_css_default72.list }, series.map((s4, index) => {
        const someHighlighted = highlightedSeries !== null;
        const isHighlighted = highlightedSeries === s4.datum;
        const isDimmed = someHighlighted && !isHighlighted;
        return import_react162.default.createElement(
          "div",
          { role: "button", key: index, "aria-pressed": isHighlighted, className: clsx_m_default(styles_css_default72.marker, {
            [styles_css_default72["marker--dimmed"]]: isDimmed,
            [styles_css_default72["marker--highlighted"]]: isHighlighted
          }), ref: (elem) => {
            if (elem) {
              segmentsRef.current[index] = elem;
            } else {
              delete segmentsRef.current[index];
            }
          }, tabIndex: index === highlightedSeriesIndex || highlightedSeriesIndex === void 0 && index === 0 ? 0 : -1, onFocus: () => handleSelection(index), onClick: () => handleSelection(index), onMouseOver: () => handleMouseOver(s4.datum), onMouseLeave: handleMouseLeave },
          s4.marker,
          " ",
          s4.label
        );
      }))
    )
  );
}
function findSeriesIndex(series, targetSeries) {
  for (let index = 0; index < series.length; index++) {
    if (series[index].datum === targetSeries) {
      return index;
    }
  }
  return void 0;
}

// node_modules/@cloudscape-design/components/area-chart/elements/area-chart-legend.js
var area_chart_legend_default = (0, import_react163.memo)(AreaChartLegend);
function AreaChartLegend({ model, legendTitle, ariaLabel, plotContainerRef }) {
  const legendItems = (0, import_react163.useMemo)(() => model.series.map((s4) => {
    const { title, color: color2, markerType } = model.getInternalSeries(s4);
    return { label: title, marker: import_react163.default.createElement(chart_series_marker_default, { color: color2, type: markerType }), datum: s4 };
  }), [model]);
  const legendSeries = useSelector(model.interactions, (state) => state.legendSeries);
  return import_react163.default.createElement(chart_legend_default, { series: legendItems, highlightedSeries: legendSeries, onHighlightChange: model.handlers.onLegendHighlight, legendTitle, ariaLabel, plotContainerRef });
}

// node_modules/@cloudscape-design/components/area-chart/model/use-chart-model.js
var import_react165 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/container-queries/use-height-measure.js
var import_react164 = __toESM(require_react());
function useHeightMeasure(getMeasure, skip = false, deps = []) {
  const [measuredHeight, setHeight] = (0, import_react164.useState)(0);
  const stableGetMeasure = (0, import_react164.useCallback)(getMeasure, [...deps, skip]);
  useResizeObserver(stableGetMeasure, (entry) => !skip && setHeight(entry.borderBoxHeight));
  return !skip ? measuredHeight : void 0;
}

// node_modules/@cloudscape-design/components/internal/utils/circle-index.js
function circleIndex(index, [from, to]) {
  if (index < from) {
    return to;
  }
  if (index > to) {
    return from;
  }
  return index;
}

// node_modules/@cloudscape-design/components/internal/utils/throttle.js
function throttle(func, delay, { trailing = true } = {}) {
  let pending = null;
  let lastInvokeTime = null;
  let timerId = null;
  function pendingFunc() {
    if (pending === null || lastInvokeTime === null) {
      return;
    }
    const invokeTime = Date.now();
    const shouldInvoke = invokeTime - lastInvokeTime >= delay;
    if (shouldInvoke) {
      func.apply(pending.this, pending.args);
      lastInvokeTime = invokeTime;
      pending = null;
      timerId = null;
    } else if (trailing) {
      startTimer();
    }
  }
  function startTimer() {
    if (timerId) {
      cancelAnimationFrame(timerId);
    }
    timerId = requestAnimationFrame(pendingFunc);
  }
  function throttled(...args) {
    if (lastInvokeTime === null) {
      lastInvokeTime = Date.now();
      func.apply(this, args);
    } else {
      pending = { this: this, args };
      startTimer();
    }
  }
  throttled.cancel = () => {
    if (timerId) {
      cancelAnimationFrame(timerId);
    }
    pending = null;
    lastInvokeTime = null;
    timerId = null;
  };
  return throttled;
}

// node_modules/@cloudscape-design/components/internal/vendor/d3-scale.js
function ascending(a4, b2) {
  return a4 == null || b2 == null ? NaN : a4 < b2 ? -1 : a4 > b2 ? 1 : a4 >= b2 ? 0 : NaN;
}
function descending(a4, b2) {
  return a4 == null || b2 == null ? NaN : b2 < a4 ? -1 : b2 > a4 ? 1 : b2 >= a4 ? 0 : NaN;
}
function bisector(f) {
  let compare1, compare2, delta;
  if (f.length !== 2) {
    compare1 = ascending;
    compare2 = (d3, x3) => ascending(f(d3), x3);
    delta = (d3, x3) => f(d3) - x3;
  } else {
    compare1 = f === ascending || f === descending ? f : zero$1;
    compare2 = f;
    delta = f;
  }
  function left(a4, x3, lo = 0, hi = a4.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a4[mid], x3) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a4, x3, lo = 0, hi = a4.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a4[mid], x3) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a4, x3, lo = 0, hi = a4.length) {
    const i2 = left(a4, x3, lo, hi - 1);
    return i2 > lo && delta(a4[i2 - 1], x3) > -delta(a4[i2], x3) ? i2 - 1 : i2;
  }
  return { left, center, right };
}
function zero$1() {
  return 0;
}
function number$2(x3) {
  return x3 === null ? NaN : +x3;
}
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
bisector(number$2).center;
var bisect = bisectRight;
var InternMap = class extends Map {
  constructor(entries, key2 = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key2 } });
    if (entries != null) for (const [key3, value] of entries) this.set(key3, value);
  }
  get(key2) {
    return super.get(intern_get(this, key2));
  }
  has(key2) {
    return super.has(intern_get(this, key2));
  }
  set(key2, value) {
    return super.set(intern_set(this, key2), value);
  }
  delete(key2) {
    return super.delete(intern_delete(this, key2));
  }
};
function intern_get({ _intern, _key }, value) {
  const key2 = _key(value);
  return _intern.has(key2) ? _intern.get(key2) : value;
}
function intern_set({ _intern, _key }, value) {
  const key2 = _key(value);
  if (_intern.has(key2)) return _intern.get(key2);
  _intern.set(key2, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key2 = _key(value);
  if (_intern.has(key2)) {
    value = _intern.get(key2);
    _intern.delete(key2);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickSpec(start, stop, count) {
  const step2 = (stop - start) / Math.max(0, count), power = Math.floor(Math.log10(step2)), error = step2 / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start) ++i1;
    if (i2 / inc > stop) --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start) ++i1;
    if (i2 * inc > stop) --i2;
  }
  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);
  return [i1, i2, inc];
}
function ticks(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  if (!(count > 0)) return [];
  if (start === stop) return [start];
  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);
  if (!(i2 >= i1)) return [];
  const n = i2 - i1 + 1, ticks2 = new Array(n);
  if (reverse) {
    if (inc < 0) for (let i3 = 0; i3 < n; ++i3) ticks2[i3] = (i2 - i3) / -inc;
    else for (let i3 = 0; i3 < n; ++i3) ticks2[i3] = (i2 - i3) * inc;
  } else {
    if (inc < 0) for (let i3 = 0; i3 < n; ++i3) ticks2[i3] = (i1 + i3) / -inc;
    else for (let i3 = 0; i3 < n; ++i3) ticks2[i3] = (i1 + i3) * inc;
  }
  return ticks2;
}
function tickIncrement(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  return tickSpec(start, stop, count)[2];
}
function tickStep(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);
  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}
function range(start, stop, step2) {
  start = +start, stop = +stop, step2 = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step2;
  var i2 = -1, n = Math.max(0, Math.ceil((stop - start) / step2)) | 0, range3 = new Array(n);
  while (++i2 < n) {
    range3[i2] = start + i2 * step2;
  }
  return range3;
}
function initRange(domain, range3) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range3).domain(domain);
      break;
  }
  return this;
}
var implicit = Symbol("implicit");
function ordinal() {
  var index = new InternMap(), domain = [], range3 = [], unknown = implicit;
  function scale(d3) {
    let i2 = index.get(d3);
    if (i2 === void 0) {
      if (unknown !== implicit) return unknown;
      index.set(d3, i2 = domain.push(d3) - 1);
    }
    return range3[i2 % range3.length];
  }
  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = new InternMap();
    for (const value of _) {
      if (index.has(value)) continue;
      index.set(value, domain.push(value) - 1);
    }
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range3 = Array.from(_), scale) : range3.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range3).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}
function band() {
  var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step2, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n = domain().length, reverse = r1 < r0, start = reverse ? r1 : r0, stop = reverse ? r0 : r1;
    step2 = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step2 = Math.floor(step2);
    start += (stop - start - step2 * (n - paddingInner)) * align;
    bandwidth = step2 * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = range(n).map(function(i2) {
      return start + step2 * i2;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.range = function(_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale.rangeRound = function(_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth;
  };
  scale.step = function() {
    return step2;
  };
  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };
  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };
  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };
  scale.copy = function() {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key2 in definition) prototype[key2] = definition[key2];
  return prototype;
}
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format3) {
  var m3, l;
  format3 = (format3 + "").trim().toLowerCase();
  return (m3 = reHex.exec(format3)) ? (l = m3[1].length, m3 = parseInt(m3[1], 16), l === 6 ? rgbn(m3) : l === 3 ? new Rgb(m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, (m3 & 15) << 4 | m3 & 15, 1) : l === 8 ? rgba(m3 >> 24 & 255, m3 >> 16 & 255, m3 >> 8 & 255, (m3 & 255) / 255) : l === 4 ? rgba(m3 >> 12 & 15 | m3 >> 8 & 240, m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, ((m3 & 15) << 4 | m3 & 15) / 255) : null) : (m3 = reRgbInteger.exec(format3)) ? new Rgb(m3[1], m3[2], m3[3], 1) : (m3 = reRgbPercent.exec(format3)) ? new Rgb(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, 1) : (m3 = reRgbaInteger.exec(format3)) ? rgba(m3[1], m3[2], m3[3], m3[4]) : (m3 = reRgbaPercent.exec(format3)) ? rgba(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, m3[4]) : (m3 = reHslPercent.exec(format3)) ? hsla(m3[1], m3[2] / 100, m3[3] / 100, 1) : (m3 = reHslaPercent.exec(format3)) ? hsla(m3[1], m3[2] / 100, m3[3] / 100, m3[4]) : named.hasOwnProperty(format3) ? rgbn(named[format3]) : format3 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b2, a4) {
  if (a4 <= 0) r = g = b2 = NaN;
  return new Rgb(r, g, b2, a4);
}
function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb$1(r, g, b2, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b2, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b2, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b2;
  this.opacity = +opacity;
}
define(Rgb, rgb$1, extend(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a4 = clampa(this.opacity);
  return `${a4 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a4 === 1 ? ")" : `, ${a4})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h3, s4, l, a4) {
  if (a4 <= 0) h3 = s4 = l = NaN;
  else if (l <= 0 || l >= 1) h3 = s4 = NaN;
  else if (s4 <= 0) h3 = NaN;
  return new Hsl(h3, s4, l, a4);
}
function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b2 = o.b / 255, min3 = Math.min(r, g, b2), max3 = Math.max(r, g, b2), h3 = NaN, s4 = max3 - min3, l = (max3 + min3) / 2;
  if (s4) {
    if (r === max3) h3 = (g - b2) / s4 + (g < b2) * 6;
    else if (g === max3) h3 = (b2 - r) / s4 + 2;
    else h3 = (r - g) / s4 + 4;
    s4 /= l < 0.5 ? max3 + min3 : 2 - max3 - min3;
    h3 *= 60;
  } else {
    s4 = l > 0 && l < 1 ? 0 : h3;
  }
  return new Hsl(h3, s4, l, o.opacity);
}
function hsl(h3, s4, l, opacity) {
  return arguments.length === 1 ? hslConvert(h3) : new Hsl(h3, s4, l, opacity == null ? 1 : opacity);
}
function Hsl(h3, s4, l, opacity) {
  this.h = +h3;
  this.s = +s4;
  this.l = +l;
  this.opacity = +opacity;
}
define(Hsl, hsl, extend(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Hsl(this.h, this.s, this.l * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Hsl(this.h, this.s, this.l * k3, this.opacity);
  },
  rgb() {
    var h3 = this.h % 360 + (this.h < 0) * 360, s4 = isNaN(h3) || isNaN(this.s) ? 0 : this.s, l = this.l, m22 = l + (l < 0.5 ? l : 1 - l) * s4, m1 = 2 * l - m22;
    return new Rgb(
      hsl2rgb(h3 >= 240 ? h3 - 240 : h3 + 120, m1, m22),
      hsl2rgb(h3, m1, m22),
      hsl2rgb(h3 < 120 ? h3 + 240 : h3 - 120, m1, m22),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a4 = clampa(this.opacity);
    return `${a4 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a4 === 1 ? ")" : `, ${a4})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h3, m1, m22) {
  return (h3 < 60 ? m1 + (m22 - m1) * h3 / 60 : h3 < 180 ? m22 : h3 < 240 ? m1 + (m22 - m1) * (240 - h3) / 60 : m1) * 255;
}
var constant = (x3) => () => x3;
function linear$1(a4, d3) {
  return function(t2) {
    return a4 + t2 * d3;
  };
}
function exponential(a4, b2, y4) {
  return a4 = Math.pow(a4, y4), b2 = Math.pow(b2, y4) - a4, y4 = 1 / y4, function(t2) {
    return Math.pow(a4 + t2 * b2, y4);
  };
}
function gamma(y4) {
  return (y4 = +y4) === 1 ? nogamma : function(a4, b2) {
    return b2 - a4 ? exponential(a4, b2, y4) : constant(isNaN(a4) ? b2 : a4);
  };
}
function nogamma(a4, b2) {
  var d3 = b2 - a4;
  return d3 ? linear$1(a4, d3) : constant(isNaN(a4) ? b2 : a4);
}
var rgb = function rgbGamma(y4) {
  var color2 = gamma(y4);
  function rgb2(start, end) {
    var r = color2((start = rgb$1(start)).r, (end = rgb$1(end)).r), g = color2(start.g, end.g), b2 = color2(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
    return function(t2) {
      start.r = r(t2);
      start.g = g(t2);
      start.b = b2(t2);
      start.opacity = opacity(t2);
      return start + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function numberArray(a4, b2) {
  if (!b2) b2 = [];
  var n = a4 ? Math.min(b2.length, a4.length) : 0, c2 = b2.slice(), i2;
  return function(t2) {
    for (i2 = 0; i2 < n; ++i2) c2[i2] = a4[i2] * (1 - t2) + b2[i2] * t2;
    return c2;
  };
}
function isNumberArray(x3) {
  return ArrayBuffer.isView(x3) && !(x3 instanceof DataView);
}
function genericArray(a4, b2) {
  var nb = b2 ? b2.length : 0, na = a4 ? Math.min(nb, a4.length) : 0, x3 = new Array(na), c2 = new Array(nb), i2;
  for (i2 = 0; i2 < na; ++i2) x3[i2] = interpolate(a4[i2], b2[i2]);
  for (; i2 < nb; ++i2) c2[i2] = b2[i2];
  return function(t2) {
    for (i2 = 0; i2 < na; ++i2) c2[i2] = x3[i2](t2);
    return c2;
  };
}
function date$1(a4, b2) {
  var d3 = /* @__PURE__ */ new Date();
  return a4 = +a4, b2 = +b2, function(t2) {
    return d3.setTime(a4 * (1 - t2) + b2 * t2), d3;
  };
}
function interpolateNumber(a4, b2) {
  return a4 = +a4, b2 = +b2, function(t2) {
    return a4 * (1 - t2) + b2 * t2;
  };
}
function object(a4, b2) {
  var i2 = {}, c2 = {}, k3;
  if (a4 === null || typeof a4 !== "object") a4 = {};
  if (b2 === null || typeof b2 !== "object") b2 = {};
  for (k3 in b2) {
    if (k3 in a4) {
      i2[k3] = interpolate(a4[k3], b2[k3]);
    } else {
      c2[k3] = b2[k3];
    }
  }
  return function(t2) {
    for (k3 in i2) c2[k3] = i2[k3](t2);
    return c2;
  };
}
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero(b2) {
  return function() {
    return b2;
  };
}
function one(b2) {
  return function(t2) {
    return b2(t2) + "";
  };
}
function string(a4, b2) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i2 = -1, s4 = [], q2 = [];
  a4 = a4 + "", b2 = b2 + "";
  while ((am = reA.exec(a4)) && (bm = reB.exec(b2))) {
    if ((bs = bm.index) > bi) {
      bs = b2.slice(bi, bs);
      if (s4[i2]) s4[i2] += bs;
      else s4[++i2] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s4[i2]) s4[i2] += bm;
      else s4[++i2] = bm;
    } else {
      s4[++i2] = null;
      q2.push({ i: i2, x: interpolateNumber(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b2.length) {
    bs = b2.slice(bi);
    if (s4[i2]) s4[i2] += bs;
    else s4[++i2] = bs;
  }
  return s4.length < 2 ? q2[0] ? one(q2[0].x) : zero(b2) : (b2 = q2.length, function(t2) {
    for (var i3 = 0, o; i3 < b2; ++i3) s4[(o = q2[i3]).i] = o.x(t2);
    return s4.join("");
  });
}
function interpolate(a4, b2) {
  var t2 = typeof b2, c2;
  return b2 == null || t2 === "boolean" ? constant(b2) : (t2 === "number" ? interpolateNumber : t2 === "string" ? (c2 = color(b2)) ? (b2 = c2, rgb) : string : b2 instanceof color ? rgb : b2 instanceof Date ? date$1 : isNumberArray(b2) ? numberArray : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object : interpolateNumber)(a4, b2);
}
function interpolateRound(a4, b2) {
  return a4 = +a4, b2 = +b2, function(t2) {
    return Math.round(a4 * (1 - t2) + b2 * t2);
  };
}
function constants(x3) {
  return function() {
    return x3;
  };
}
function number$1(x3) {
  return +x3;
}
var unit = [0, 1];
function identity$1(x3) {
  return x3;
}
function normalize(a4, b2) {
  return (b2 -= a4 = +a4) ? function(x3) {
    return (x3 - a4) / b2;
  } : constants(isNaN(b2) ? NaN : 0.5);
}
function clamper(a4, b2) {
  var t2;
  if (a4 > b2) t2 = a4, a4 = b2, b2 = t2;
  return function(x3) {
    return Math.max(a4, Math.min(b2, x3));
  };
}
function bimap(domain, range3, interpolate2) {
  var d0 = domain[0], d1 = domain[1], r0 = range3[0], r1 = range3[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate2(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate2(r0, r1);
  return function(x3) {
    return r0(d0(x3));
  };
}
function polymap(domain, range3, interpolate2) {
  var j = Math.min(domain.length, range3.length) - 1, d3 = new Array(j), r = new Array(j), i2 = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range3 = range3.slice().reverse();
  }
  while (++i2 < j) {
    d3[i2] = normalize(domain[i2], domain[i2 + 1]);
    r[i2] = interpolate2(range3[i2], range3[i2 + 1]);
  }
  return function(x3) {
    var i3 = bisect(domain, x3, 1, j) - 1;
    return r[i3](d3[i3](x3));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range3 = unit, interpolate$1 = interpolate, transform, untransform, unknown, clamp3 = identity$1, piecewise, output, input;
  function rescale() {
    var n = Math.min(domain.length, range3.length);
    if (clamp3 !== identity$1) clamp3 = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x3) {
    return x3 == null || isNaN(x3 = +x3) ? unknown : (output || (output = piecewise(domain.map(transform), range3, interpolate$1)))(transform(clamp3(x3)));
  }
  scale.invert = function(y4) {
    return clamp3(untransform((input || (input = piecewise(range3, domain.map(transform), interpolateNumber)))(y4)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range3 = Array.from(_), rescale()) : range3.slice();
  };
  scale.rangeRound = function(_) {
    return range3 = Array.from(_), interpolate$1 = interpolateRound, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp3 = _ ? true : identity$1, rescale()) : clamp3 !== identity$1;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t2, u2) {
    transform = t2, untransform = u2;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity$1, identity$1);
}
function formatDecimal(x3) {
  return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
}
function formatDecimalParts(x3, p) {
  if ((i2 = (x3 = p ? x3.toExponential(p - 1) : x3.toExponential()).indexOf("e")) < 0) return null;
  var i2, coefficient = x3.slice(0, i2);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x3.slice(i2 + 1)
  ];
}
function exponent(x3) {
  return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
}
function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i2 = value.length, t2 = [], j = 0, g = grouping[0], length = 0;
    while (i2 > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t2.push(value.substring(i2 -= g, i2 + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t2.reverse().join(thousands);
  };
}
function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i2) {
      return numerals[+i2];
    });
  };
}
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match2 = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match2;
  return new FormatSpecifier({
    fill: match2[1],
    align: match2[2],
    sign: match2[3],
    symbol: match2[4],
    zero: match2[5],
    width: match2[6],
    comma: match2[7],
    precision: match2[8] && match2[8].slice(1),
    trim: match2[9],
    type: match2[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
function formatTrim(s4) {
  out: for (var n = s4.length, i2 = 1, i0 = -1, i1; i2 < n; ++i2) {
    switch (s4[i2]) {
      case ".":
        i0 = i1 = i2;
        break;
      case "0":
        if (i0 === 0) i0 = i2;
        i1 = i2;
        break;
      default:
        if (!+s4[i2]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }
  return i0 > 0 ? s4.slice(0, i0) + s4.slice(i1 + 1) : s4;
}
var prefixExponent;
function formatPrefixAuto(x3, p) {
  var d3 = formatDecimalParts(x3, p);
  if (!d3) return x3 + "";
  var coefficient = d3[0], exponent2 = d3[1], i2 = exponent2 - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) + 1, n = coefficient.length;
  return i2 === n ? coefficient : i2 > n ? coefficient + new Array(i2 - n + 1).join("0") : i2 > 0 ? coefficient.slice(0, i2) + "." + coefficient.slice(i2) : "0." + new Array(1 - i2).join("0") + formatDecimalParts(x3, Math.max(0, p + i2 - 1))[0];
}
function formatRounded(x3, p) {
  var d3 = formatDecimalParts(x3, p);
  if (!d3) return x3 + "";
  var coefficient = d3[0], exponent2 = d3[1];
  return exponent2 < 0 ? "0." + new Array(-exponent2).join("0") + coefficient : coefficient.length > exponent2 + 1 ? coefficient.slice(0, exponent2 + 1) + "." + coefficient.slice(exponent2 + 1) : coefficient + new Array(exponent2 - coefficient.length + 2).join("0");
}
var formatTypes = {
  "%": (x3, p) => (x3 * 100).toFixed(p),
  "b": (x3) => Math.round(x3).toString(2),
  "c": (x3) => x3 + "",
  "d": formatDecimal,
  "e": (x3, p) => x3.toExponential(p),
  "f": (x3, p) => x3.toFixed(p),
  "g": (x3, p) => x3.toPrecision(p),
  "o": (x3) => Math.round(x3).toString(8),
  "p": (x3, p) => formatRounded(x3 * 100, p),
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": (x3) => Math.round(x3).toString(16).toUpperCase(),
  "x": (x3) => Math.round(x3).toString(16)
};
function identity(x3) {
  return x3;
}
var map = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function formatLocale$1(locale3) {
  var group = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity : formatGroup(map.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity : formatNumerals(map.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "−" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n") comma = true, type = "g";
    else if (!formatTypes[type]) precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero2 || fill === "0" && align === "=") zero2 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i2, n, c2;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim) value = formatTrim(value);
        if (valueNegative && +value === 0 && sign2 !== "+") valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i2 = -1, n = value.length;
          while (++i2 < n) {
            if (c2 = value.charCodeAt(i2), 48 > c2 || c2 > 57) {
              valueSuffix = (c2 === 46 ? decimal + value.slice(i2 + 1) : value.slice(i2)) + valueSuffix;
              value = value.slice(0, i2);
              break;
            }
          }
        }
      }
      if (comma && !zero2) value = group(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3, k3 = Math.pow(10, -e3), prefix = prefixes[8 + e3 / 3];
    return function(value2) {
      return f(k3 * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}
var locale$1;
var format;
var formatPrefix;
defaultLocale$1({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale$1(definition) {
  locale$1 = formatLocale$1(definition);
  format = locale$1.format;
  formatPrefix = locale$1.formatPrefix;
  return locale$1;
}
function precisionFixed(step2) {
  return Math.max(0, -exponent(Math.abs(step2)));
}
function precisionPrefix(step2, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step2)));
}
function precisionRound(step2, max3) {
  step2 = Math.abs(step2), max3 = Math.abs(max3) - step2;
  return Math.max(0, exponent(max3) - exponent(step2)) + 1;
}
function tickFormat(start, stop, count, specifier) {
  var step2 = tickStep(start, stop, count), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step2, value))) specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound(step2, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed(step2))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count) {
    var d3 = domain();
    return ticks(d3[0], d3[d3.length - 1], count == null ? 10 : count);
  };
  scale.tickFormat = function(count, specifier) {
    var d3 = domain();
    return tickFormat(d3[0], d3[d3.length - 1], count == null ? 10 : count, specifier);
  };
  scale.nice = function(count) {
    if (count == null) count = 10;
    var d3 = domain();
    var i0 = 0;
    var i1 = d3.length - 1;
    var start = d3[i0];
    var stop = d3[i1];
    var prestep;
    var step2;
    var maxIter = 10;
    if (stop < start) {
      step2 = start, start = stop, stop = step2;
      step2 = i0, i0 = i1, i1 = step2;
    }
    while (maxIter-- > 0) {
      step2 = tickIncrement(start, stop, count);
      if (step2 === prestep) {
        d3[i0] = start;
        d3[i1] = stop;
        return domain(d3);
      } else if (step2 > 0) {
        start = Math.floor(start / step2) * step2;
        stop = Math.ceil(stop / step2) * step2;
      } else if (step2 < 0) {
        start = Math.ceil(start * step2) / step2;
        stop = Math.floor(stop * step2) / step2;
      } else {
        break;
      }
      prestep = step2;
    }
    return scale;
  };
  return scale;
}
function linear() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}
function nice(domain, interval) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t2;
  if (x1 < x0) {
    t2 = i0, i0 = i1, i1 = t2;
    t2 = x0, x0 = x1, x1 = t2;
  }
  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
function transformLog(x3) {
  return Math.log(x3);
}
function transformExp(x3) {
  return Math.exp(x3);
}
function transformLogn(x3) {
  return -Math.log(-x3);
}
function transformExpn(x3) {
  return -Math.exp(-x3);
}
function pow10(x3) {
  return isFinite(x3) ? +("1e" + x3) : x3 < 0 ? 0 : x3;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : (x3) => Math.pow(base, x3);
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x3) => Math.log(x3) / base);
}
function reflect(f) {
  return (x3, k3) => -f(-x3, k3);
}
function loggish(transform) {
  const scale = transform(transformLog, transformExp);
  const domain = scale.domain;
  let base = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }
  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.ticks = (count) => {
    const d3 = domain();
    let u2 = d3[0];
    let v = d3[d3.length - 1];
    const r = v < u2;
    if (r) [u2, v] = [v, u2];
    let i2 = logs(u2);
    let j = logs(v);
    let k3;
    let t2;
    const n = count == null ? 10 : +count;
    let z2 = [];
    if (!(base % 1) && j - i2 < n) {
      i2 = Math.floor(i2), j = Math.ceil(j);
      if (u2 > 0) for (; i2 <= j; ++i2) {
        for (k3 = 1; k3 < base; ++k3) {
          t2 = i2 < 0 ? k3 / pows(-i2) : k3 * pows(i2);
          if (t2 < u2) continue;
          if (t2 > v) break;
          z2.push(t2);
        }
      }
      else for (; i2 <= j; ++i2) {
        for (k3 = base - 1; k3 >= 1; --k3) {
          t2 = i2 > 0 ? k3 / pows(-i2) : k3 * pows(i2);
          if (t2 < u2) continue;
          if (t2 > v) break;
          z2.push(t2);
        }
      }
      if (z2.length * 2 < n) z2 = ticks(u2, v, n);
    } else {
      z2 = ticks(i2, j, Math.min(j - i2, n)).map(pows);
    }
    return r ? z2.reverse() : z2;
  };
  scale.tickFormat = (count, specifier) => {
    if (count == null) count = 10;
    if (specifier == null) specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
      specifier = format(specifier);
    }
    if (count === Infinity) return specifier;
    const k3 = Math.max(1, base * count / scale.ticks().length);
    return (d3) => {
      let i2 = d3 / pows(Math.round(logs(d3)));
      if (i2 * base < base - 0.5) i2 *= base;
      return i2 <= k3 ? specifier(d3) : "";
    };
  };
  scale.nice = () => {
    return domain(nice(domain(), {
      floor: (x3) => pows(Math.floor(logs(x3))),
      ceil: (x3) => pows(Math.ceil(logs(x3)))
    }));
  };
  return scale;
}
function log() {
  const scale = loggish(transformer()).domain([1, 10]);
  scale.copy = () => copy(scale, log()).base(scale.base());
  initRange.apply(scale, arguments);
  return scale;
}
var t0 = /* @__PURE__ */ new Date();
var t1 = /* @__PURE__ */ new Date();
function timeInterval(floori, offseti, count, field) {
  function interval(date2) {
    return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
  }
  interval.floor = (date2) => {
    return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
  };
  interval.ceil = (date2) => {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval.round = (date2) => {
    const d0 = interval(date2), d1 = interval.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval.offset = (date2, step2) => {
    return offseti(date2 = /* @__PURE__ */ new Date(+date2), step2 == null ? 1 : Math.floor(step2)), date2;
  };
  interval.range = (start, stop, step2) => {
    const range3 = [];
    start = interval.ceil(start);
    step2 = step2 == null ? 1 : Math.floor(step2);
    if (!(start < stop) || !(step2 > 0)) return range3;
    let previous;
    do
      range3.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step2), floori(start);
    while (previous < start && start < stop);
    return range3;
  };
  interval.filter = (test) => {
    return timeInterval((date2) => {
      if (date2 >= date2) while (floori(date2), !test(date2)) date2.setTime(date2 - 1);
    }, (date2, step2) => {
      if (date2 >= date2) {
        if (step2 < 0) while (++step2 <= 0) {
          while (offseti(date2, -1), !test(date2)) {
          }
        }
        else while (--step2 >= 0) {
          while (offseti(date2, 1), !test(date2)) {
          }
        }
      }
    });
  };
  if (count) {
    interval.count = (start, end) => {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };
    interval.every = (step2) => {
      step2 = Math.floor(step2);
      return !isFinite(step2) || !(step2 > 0) ? null : !(step2 > 1) ? interval : interval.filter(field ? (d3) => field(d3) % step2 === 0 : (d3) => interval.count(0, d3) % step2 === 0);
    };
  }
  return interval;
}
var millisecond = timeInterval(() => {
}, (date2, step2) => {
  date2.setTime(+date2 + step2);
}, (start, end) => {
  return end - start;
});
millisecond.every = (k3) => {
  k3 = Math.floor(k3);
  if (!isFinite(k3) || !(k3 > 0)) return null;
  if (!(k3 > 1)) return millisecond;
  return timeInterval((date2) => {
    date2.setTime(Math.floor(date2 / k3) * k3);
  }, (date2, step2) => {
    date2.setTime(+date2 + step2 * k3);
  }, (start, end) => {
    return (end - start) / k3;
  });
};
millisecond.range;
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;
var second = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds());
}, (date2, step2) => {
  date2.setTime(+date2 + step2 * durationSecond);
}, (start, end) => {
  return (end - start) / durationSecond;
}, (date2) => {
  return date2.getUTCSeconds();
});
second.range;
var timeMinute = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
}, (date2, step2) => {
  date2.setTime(+date2 + step2 * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date2) => {
  return date2.getMinutes();
});
timeMinute.range;
var utcMinute = timeInterval((date2) => {
  date2.setUTCSeconds(0, 0);
}, (date2, step2) => {
  date2.setTime(+date2 + step2 * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date2) => {
  return date2.getUTCMinutes();
});
utcMinute.range;
var timeHour = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
}, (date2, step2) => {
  date2.setTime(+date2 + step2 * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date2) => {
  return date2.getHours();
});
timeHour.range;
var utcHour = timeInterval((date2) => {
  date2.setUTCMinutes(0, 0, 0);
}, (date2, step2) => {
  date2.setTime(+date2 + step2 * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date2) => {
  return date2.getUTCHours();
});
utcHour.range;
var timeDay = timeInterval(
  (date2) => date2.setHours(0, 0, 0, 0),
  (date2, step2) => date2.setDate(date2.getDate() + step2),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
  (date2) => date2.getDate() - 1
);
timeDay.range;
var utcDay = timeInterval((date2) => {
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step2) => {
  date2.setUTCDate(date2.getUTCDate() + step2);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date2) => {
  return date2.getUTCDate() - 1;
});
utcDay.range;
var unixDay = timeInterval((date2) => {
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step2) => {
  date2.setUTCDate(date2.getUTCDate() + step2);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date2) => {
  return Math.floor(date2 / durationDay);
});
unixDay.range;
function timeWeekday(i2) {
  return timeInterval((date2) => {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i2) % 7);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step2) => {
    date2.setDate(date2.getDate() + step2 * 7);
  }, (start, end) => {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var timeSunday = timeWeekday(0);
var timeMonday = timeWeekday(1);
var timeTuesday = timeWeekday(2);
var timeWednesday = timeWeekday(3);
var timeThursday = timeWeekday(4);
var timeFriday = timeWeekday(5);
var timeSaturday = timeWeekday(6);
timeSunday.range;
timeMonday.range;
timeTuesday.range;
timeWednesday.range;
timeThursday.range;
timeFriday.range;
timeSaturday.range;
function utcWeekday(i2) {
  return timeInterval((date2) => {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i2) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step2) => {
    date2.setUTCDate(date2.getUTCDate() + step2 * 7);
  }, (start, end) => {
    return (end - start) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
utcSunday.range;
utcMonday.range;
utcTuesday.range;
utcWednesday.range;
utcThursday.range;
utcFriday.range;
utcSaturday.range;
var timeMonth = timeInterval((date2) => {
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
}, (date2, step2) => {
  date2.setMonth(date2.getMonth() + step2);
}, (start, end) => {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, (date2) => {
  return date2.getMonth();
});
timeMonth.range;
var utcMonth = timeInterval((date2) => {
  date2.setUTCDate(1);
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step2) => {
  date2.setUTCMonth(date2.getUTCMonth() + step2);
}, (start, end) => {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, (date2) => {
  return date2.getUTCMonth();
});
utcMonth.range;
var timeYear = timeInterval((date2) => {
  date2.setMonth(0, 1);
  date2.setHours(0, 0, 0, 0);
}, (date2, step2) => {
  date2.setFullYear(date2.getFullYear() + step2);
}, (start, end) => {
  return end.getFullYear() - start.getFullYear();
}, (date2) => {
  return date2.getFullYear();
});
timeYear.every = (k3) => {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : timeInterval((date2) => {
    date2.setFullYear(Math.floor(date2.getFullYear() / k3) * k3);
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step2) => {
    date2.setFullYear(date2.getFullYear() + step2 * k3);
  });
};
timeYear.range;
var utcYear = timeInterval((date2) => {
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step2) => {
  date2.setUTCFullYear(date2.getUTCFullYear() + step2);
}, (start, end) => {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, (date2) => {
  return date2.getUTCFullYear();
});
utcYear.every = (k3) => {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : timeInterval((date2) => {
    date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k3) * k3);
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step2) => {
    date2.setUTCFullYear(date2.getUTCFullYear() + step2 * k3);
  });
};
utcYear.range;
function ticker(year, month, week, day, hour, minute) {
  const tickIntervals = [
    [second, 1, durationSecond],
    [second, 5, 5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute, 1, durationMinute],
    [minute, 5, 5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [hour, 1, durationHour],
    [hour, 3, 3 * durationHour],
    [hour, 6, 6 * durationHour],
    [hour, 12, 12 * durationHour],
    [day, 1, durationDay],
    [day, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month, 1, durationMonth],
    [month, 3, 3 * durationMonth],
    [year, 1, durationYear]
  ];
  function ticks2(start, stop, count) {
    const reverse = stop < start;
    if (reverse) [start, stop] = [stop, start];
    const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
    const ticks3 = interval ? interval.range(start, +stop + 1) : [];
    return reverse ? ticks3.reverse() : ticks3;
  }
  function tickInterval(start, stop, count) {
    const target = Math.abs(stop - start) / count;
    const i2 = bisector(([, , step3]) => step3).right(tickIntervals, target);
    if (i2 === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));
    if (i2 === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));
    const [t2, step2] = tickIntervals[target / tickIntervals[i2 - 1][2] < tickIntervals[i2][2] / target ? i2 - 1 : i2];
    return t2.every(step2);
  }
  return [ticks2, tickInterval];
}
var [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);
function localDate(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date2 = new Date(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
    date2.setFullYear(d3.y);
    return date2;
  }
  return new Date(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
}
function utcDate(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date2 = new Date(Date.UTC(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
    date2.setUTCFullYear(d3.y);
    return date2;
  }
  return new Date(Date.UTC(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
}
function newDate(y4, m3, d3) {
  return { y: y4, m: m3, d: d3, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale3) {
  var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string2 = [], i2 = -1, j = 0, n = specifier.length, c2, pad2, format3;
      if (!(date2 instanceof Date)) date2 = /* @__PURE__ */ new Date(+date2);
      while (++i2 < n) {
        if (specifier.charCodeAt(i2) === 37) {
          string2.push(specifier.slice(j, i2));
          if ((pad2 = pads[c2 = specifier.charAt(++i2)]) != null) c2 = specifier.charAt(++i2);
          else pad2 = c2 === "e" ? " " : "0";
          if (format3 = formats2[c2]) c2 = format3(date2, pad2);
          string2.push(c2);
          j = i2 + 1;
        }
      }
      string2.push(specifier.slice(j, i2));
      return string2.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string2) {
      var d3 = newDate(1900, void 0, 1), i2 = parseSpecifier(d3, specifier, string2 += "", 0), week, day;
      if (i2 != string2.length) return null;
      if ("Q" in d3) return new Date(d3.Q);
      if ("s" in d3) return new Date(d3.s * 1e3 + ("L" in d3 ? d3.L : 0));
      if (Z && !("Z" in d3)) d3.Z = 0;
      if ("p" in d3) d3.H = d3.H % 12 + d3.p * 12;
      if (d3.m === void 0) d3.m = "q" in d3 ? d3.q : 0;
      if ("V" in d3) {
        if (d3.V < 1 || d3.V > 53) return null;
        if (!("w" in d3)) d3.w = 1;
        if ("Z" in d3) {
          week = utcDate(newDate(d3.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d3.V - 1) * 7);
          d3.y = week.getUTCFullYear();
          d3.m = week.getUTCMonth();
          d3.d = week.getUTCDate() + (d3.w + 6) % 7;
        } else {
          week = localDate(newDate(d3.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
          week = timeDay.offset(week, (d3.V - 1) * 7);
          d3.y = week.getFullYear();
          d3.m = week.getMonth();
          d3.d = week.getDate() + (d3.w + 6) % 7;
        }
      } else if ("W" in d3 || "U" in d3) {
        if (!("w" in d3)) d3.w = "u" in d3 ? d3.u % 7 : "W" in d3 ? 1 : 0;
        day = "Z" in d3 ? utcDate(newDate(d3.y, 0, 1)).getUTCDay() : localDate(newDate(d3.y, 0, 1)).getDay();
        d3.m = 0;
        d3.d = "W" in d3 ? (d3.w + 6) % 7 + d3.W * 7 - (day + 5) % 7 : d3.w + d3.U * 7 - (day + 6) % 7;
      }
      if ("Z" in d3) {
        d3.H += d3.Z / 100 | 0;
        d3.M += d3.Z % 100;
        return utcDate(d3);
      }
      return localDate(d3);
    };
  }
  function parseSpecifier(d3, specifier, string2, j) {
    var i2 = 0, n = specifier.length, m3 = string2.length, c2, parse2;
    while (i2 < n) {
      if (j >= m3) return -1;
      c2 = specifier.charCodeAt(i2++);
      if (c2 === 37) {
        c2 = specifier.charAt(i2++);
        parse2 = parses[c2 in pads ? specifier.charAt(i2++) : c2];
        if (!parse2 || (j = parse2(d3, string2, j)) < 0) return -1;
      } else if (c2 != string2.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d3, string2, i2) {
    var n = periodRe.exec(string2.slice(i2));
    return n ? (d3.p = periodLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseShortWeekday(d3, string2, i2) {
    var n = shortWeekdayRe.exec(string2.slice(i2));
    return n ? (d3.w = shortWeekdayLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseWeekday(d3, string2, i2) {
    var n = weekdayRe.exec(string2.slice(i2));
    return n ? (d3.w = weekdayLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseShortMonth(d3, string2, i2) {
    var n = shortMonthRe.exec(string2.slice(i2));
    return n ? (d3.m = shortMonthLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseMonth(d3, string2, i2) {
    var n = monthRe.exec(string2.slice(i2));
    return n ? (d3.m = monthLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseLocaleDateTime(d3, string2, i2) {
    return parseSpecifier(d3, locale_dateTime, string2, i2);
  }
  function parseLocaleDate(d3, string2, i2) {
    return parseSpecifier(d3, locale_date, string2, i2);
  }
  function parseLocaleTime(d3, string2, i2) {
    return parseSpecifier(d3, locale_time, string2, i2);
  }
  function formatShortWeekday(d3) {
    return locale_shortWeekdays[d3.getDay()];
  }
  function formatWeekday(d3) {
    return locale_weekdays[d3.getDay()];
  }
  function formatShortMonth(d3) {
    return locale_shortMonths[d3.getMonth()];
  }
  function formatMonth(d3) {
    return locale_months[d3.getMonth()];
  }
  function formatPeriod(d3) {
    return locale_periods[+(d3.getHours() >= 12)];
  }
  function formatQuarter(d3) {
    return 1 + ~~(d3.getMonth() / 3);
  }
  function formatUTCShortWeekday(d3) {
    return locale_shortWeekdays[d3.getUTCDay()];
  }
  function formatUTCWeekday(d3) {
    return locale_weekdays[d3.getUTCDay()];
  }
  function formatUTCShortMonth(d3) {
    return locale_shortMonths[d3.getUTCMonth()];
  }
  function formatUTCMonth(d3) {
    return locale_months[d3.getUTCMonth()];
  }
  function formatUTCPeriod(d3) {
    return locale_periods[+(d3.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d3) {
    return 1 + ~~(d3.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() {
        return specifier;
      };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() {
        return specifier;
      };
      return p;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string2 = (sign2 ? -value : value) + "", length = string2.length;
  return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string2 : string2);
}
function requote(s4) {
  return s4.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i2) => [name.toLowerCase(), i2]));
}
function parseWeekdayNumberSunday(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 1));
  return n ? (d3.w = +n[0], i2 + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 1));
  return n ? (d3.u = +n[0], i2 + n[0].length) : -1;
}
function parseWeekNumberSunday(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.U = +n[0], i2 + n[0].length) : -1;
}
function parseWeekNumberISO(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.V = +n[0], i2 + n[0].length) : -1;
}
function parseWeekNumberMonday(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.W = +n[0], i2 + n[0].length) : -1;
}
function parseFullYear(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 4));
  return n ? (d3.y = +n[0], i2 + n[0].length) : -1;
}
function parseYear(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i2 + n[0].length) : -1;
}
function parseZone(d3, string2, i2) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string2.slice(i2, i2 + 6));
  return n ? (d3.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i2 + n[0].length) : -1;
}
function parseQuarter(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 1));
  return n ? (d3.q = n[0] * 3 - 3, i2 + n[0].length) : -1;
}
function parseMonthNumber(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.m = n[0] - 1, i2 + n[0].length) : -1;
}
function parseDayOfMonth(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.d = +n[0], i2 + n[0].length) : -1;
}
function parseDayOfYear(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 3));
  return n ? (d3.m = 0, d3.d = +n[0], i2 + n[0].length) : -1;
}
function parseHour24(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.H = +n[0], i2 + n[0].length) : -1;
}
function parseMinutes(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.M = +n[0], i2 + n[0].length) : -1;
}
function parseSeconds(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.S = +n[0], i2 + n[0].length) : -1;
}
function parseMilliseconds(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 3));
  return n ? (d3.L = +n[0], i2 + n[0].length) : -1;
}
function parseMicroseconds(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 6));
  return n ? (d3.L = Math.floor(n[0] / 1e3), i2 + n[0].length) : -1;
}
function parseLiteralPercent(d3, string2, i2) {
  var n = percentRe.exec(string2.slice(i2, i2 + 1));
  return n ? i2 + n[0].length : -1;
}
function parseUnixTimestamp(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2));
  return n ? (d3.Q = +n[0], i2 + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2));
  return n ? (d3.s = +n[0], i2 + n[0].length) : -1;
}
function formatDayOfMonth(d3, p) {
  return pad(d3.getDate(), p, 2);
}
function formatHour24(d3, p) {
  return pad(d3.getHours(), p, 2);
}
function formatHour12(d3, p) {
  return pad(d3.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d3, p) {
  return pad(1 + timeDay.count(timeYear(d3), d3), p, 3);
}
function formatMilliseconds(d3, p) {
  return pad(d3.getMilliseconds(), p, 3);
}
function formatMicroseconds(d3, p) {
  return formatMilliseconds(d3, p) + "000";
}
function formatMonthNumber(d3, p) {
  return pad(d3.getMonth() + 1, p, 2);
}
function formatMinutes(d3, p) {
  return pad(d3.getMinutes(), p, 2);
}
function formatSeconds(d3, p) {
  return pad(d3.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d3) {
  var day = d3.getDay();
  return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d3, p) {
  return pad(timeSunday.count(timeYear(d3) - 1, d3), p, 2);
}
function dISO(d3) {
  var day = d3.getDay();
  return day >= 4 || day === 0 ? timeThursday(d3) : timeThursday.ceil(d3);
}
function formatWeekNumberISO(d3, p) {
  d3 = dISO(d3);
  return pad(timeThursday.count(timeYear(d3), d3) + (timeYear(d3).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d3) {
  return d3.getDay();
}
function formatWeekNumberMonday(d3, p) {
  return pad(timeMonday.count(timeYear(d3) - 1, d3), p, 2);
}
function formatYear(d3, p) {
  return pad(d3.getFullYear() % 100, p, 2);
}
function formatYearISO(d3, p) {
  d3 = dISO(d3);
  return pad(d3.getFullYear() % 100, p, 2);
}
function formatFullYear(d3, p) {
  return pad(d3.getFullYear() % 1e4, p, 4);
}
function formatFullYearISO(d3, p) {
  var day = d3.getDay();
  d3 = day >= 4 || day === 0 ? timeThursday(d3) : timeThursday.ceil(d3);
  return pad(d3.getFullYear() % 1e4, p, 4);
}
function formatZone(d3) {
  var z2 = d3.getTimezoneOffset();
  return (z2 > 0 ? "-" : (z2 *= -1, "+")) + pad(z2 / 60 | 0, "0", 2) + pad(z2 % 60, "0", 2);
}
function formatUTCDayOfMonth(d3, p) {
  return pad(d3.getUTCDate(), p, 2);
}
function formatUTCHour24(d3, p) {
  return pad(d3.getUTCHours(), p, 2);
}
function formatUTCHour12(d3, p) {
  return pad(d3.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d3, p) {
  return pad(1 + utcDay.count(utcYear(d3), d3), p, 3);
}
function formatUTCMilliseconds(d3, p) {
  return pad(d3.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d3, p) {
  return formatUTCMilliseconds(d3, p) + "000";
}
function formatUTCMonthNumber(d3, p) {
  return pad(d3.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d3, p) {
  return pad(d3.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d3, p) {
  return pad(d3.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d3) {
  var dow = d3.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d3, p) {
  return pad(utcSunday.count(utcYear(d3) - 1, d3), p, 2);
}
function UTCdISO(d3) {
  var day = d3.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d3) : utcThursday.ceil(d3);
}
function formatUTCWeekNumberISO(d3, p) {
  d3 = UTCdISO(d3);
  return pad(utcThursday.count(utcYear(d3), d3) + (utcYear(d3).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d3) {
  return d3.getUTCDay();
}
function formatUTCWeekNumberMonday(d3, p) {
  return pad(utcMonday.count(utcYear(d3) - 1, d3), p, 2);
}
function formatUTCYear(d3, p) {
  return pad(d3.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d3, p) {
  d3 = UTCdISO(d3);
  return pad(d3.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d3, p) {
  return pad(d3.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCFullYearISO(d3, p) {
  var day = d3.getUTCDay();
  d3 = day >= 4 || day === 0 ? utcThursday(d3) : utcThursday.ceil(d3);
  return pad(d3.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d3) {
  return +d3;
}
function formatUnixTimestampSeconds(d3) {
  return Math.floor(+d3 / 1e3);
}
var locale;
var timeFormat;
defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale(definition) {
  locale = formatLocale(definition);
  timeFormat = locale.format;
  locale.parse;
  locale.utcFormat;
  locale.utcParse;
  return locale;
}
function date(t2) {
  return new Date(t2);
}
function number(t2) {
  return t2 instanceof Date ? +t2 : +/* @__PURE__ */ new Date(+t2);
}
function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format3) {
  var scale = continuous(), invert = scale.invert, domain = scale.domain;
  var formatMillisecond = format3(".%L"), formatSecond = format3(":%S"), formatMinute = format3("%I:%M"), formatHour = format3("%I %p"), formatDay = format3("%a %d"), formatWeek = format3("%b %d"), formatMonth = format3("%B"), formatYear2 = format3("%Y");
  function tickFormat2(date2) {
    return (second2(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear2)(date2);
  }
  scale.invert = function(y4) {
    return new Date(invert(y4));
  };
  scale.domain = function(_) {
    return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
  };
  scale.ticks = function(interval) {
    var d3 = domain();
    return ticks2(d3[0], d3[d3.length - 1], interval == null ? 10 : interval);
  };
  scale.tickFormat = function(count, specifier) {
    return specifier == null ? tickFormat2 : format3(specifier);
  };
  scale.nice = function(interval) {
    var d3 = domain();
    if (!interval || typeof interval.range !== "function") interval = tickInterval(d3[0], d3[d3.length - 1], interval == null ? 10 : interval);
    return interval ? domain(nice(d3, interval)) : scale;
  };
  scale.copy = function() {
    return copy(scale, calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format3));
  };
  return scale;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/scales.js
function isNumericDomain(domain) {
  return domain.length > 0 && typeof domain[0] === "number";
}
function isDateDomain(domain) {
  return domain.length > 0 && domain[0] instanceof Date;
}
function createNumericScale(type, domain) {
  let scale;
  switch (type) {
    case "log":
      scale = log();
      break;
    default:
      scale = linear();
  }
  if (isNumericDomain(domain)) {
    scale.domain(domain);
  }
  return scale;
}
function createTimeScale(domain) {
  const scale = time();
  if (isDateDomain(domain)) {
    scale.domain(domain);
  }
  return scale;
}
function createBandScale(domain) {
  const scale = band().padding(0.1);
  scale.domain(domain);
  return scale;
}
function createScale(type, domain, range3) {
  switch (type) {
    case "linear":
    case "log":
      return { type: "numeric", scale: createNumericScale(type, domain).range(range3) };
    case "time":
      return { type: "time", scale: createTimeScale(domain).range(range3) };
    case "categorical":
      return { type: "categorical", scale: createBandScale(domain).range(range3) };
  }
}
var ChartScale = class _ChartScale {
  constructor(scaleType, domain, range3, noCategoricalOuterPadding = false) {
    this.scaleType = scaleType;
    this.domain = domain;
    this.range = range3;
    this.scale = createScale(this.scaleType, this.domain, this.range);
    this.d3Scale = this.scale.scale;
    if (this.isCategorical()) {
      if (noCategoricalOuterPadding) {
        this.d3Scale.paddingInner(0.7);
        this.d3Scale.paddingOuter(0);
      } else {
        this.d3Scale.paddingInner(0.2);
        this.d3Scale.paddingOuter(0.05);
      }
    }
  }
  cloneScale(newScaleType, newDomain, newRange) {
    return new _ChartScale(newScaleType || this.scaleType, newDomain || this.domain, newRange || this.range);
  }
  isNumeric() {
    return this.scale.type === "numeric";
  }
  isTime() {
    return this.scale.type === "time";
  }
  isCategorical() {
    return this.scale.type === "categorical";
  }
};
var NumericChartScale = class {
  constructor(scaleType, domain, range3, adjustDomain) {
    this.scaleType = scaleType;
    const scale = createNumericScale(scaleType, domain).range(range3);
    if (adjustDomain !== null) {
      scale.nice(adjustDomain);
    }
    this.scale = { type: "numeric", scale };
    this.d3Scale = this.scale.scale;
  }
  isCategorical() {
    return false;
  }
};

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number2 = Number(dirtyNumber);
  if (isNaN(number2)) {
    return number2;
  }
  return number2 < 0 ? Math.ceil(number2) : Math.floor(number2);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}

// node_modules/date-fns/esm/addDays/index.js
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date2;
  }
  date2.setDate(date2.getDate() + amount);
  return date2;
}

// node_modules/date-fns/esm/addMonths/index.js
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date2;
  }
  var dayOfMonth = date2.getDate();
  var endOfDesiredMonth = new Date(date2.getTime());
  endOfDesiredMonth.setMonth(date2.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date2.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date2;
  }
}

// node_modules/date-fns/esm/add/index.js
function add(dirtyDate, duration) {
  requiredArgs(2, arguments);
  if (!duration || _typeof(duration) !== "object") return /* @__PURE__ */ new Date(NaN);
  var years = duration.years ? toInteger(duration.years) : 0;
  var months = duration.months ? toInteger(duration.months) : 0;
  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;
  var days = duration.days ? toInteger(duration.days) : 0;
  var hours = duration.hours ? toInteger(duration.hours) : 0;
  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;
  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;
  var date2 = toDate(dirtyDate);
  var dateWithMonths = months || years ? addMonths(date2, months + years * 12) : date2;
  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;
  var minutesToAdd = minutes + hours * 60;
  var secondsToAdd = seconds + minutesToAdd * 60;
  var msToAdd = secondsToAdd * 1e3;
  var finalDate = new Date(dateWithDays.getTime() + msToAdd);
  return finalDate;
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date2) {
  var utcDate2 = new Date(Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate(), date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds()));
  utcDate2.setUTCFullYear(date2.getFullYear());
  return date2.getTime() - utcDate2.getTime();
}

// node_modules/date-fns/esm/startOfDay/index.js
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  date2.setHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/differenceInCalendarDays/index.js
var MILLISECONDS_IN_DAY = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}

// node_modules/date-fns/esm/addMinutes/index.js
var MILLISECONDS_IN_MINUTE = 6e4;
function addMinutes(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
}

// node_modules/date-fns/esm/addYears/index.js
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}

// node_modules/date-fns/esm/max/index.js
function max2(dirtyDatesArray) {
  requiredArgs(1, arguments);
  var datesArray;
  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
    datesArray = dirtyDatesArray;
  } else if (_typeof(dirtyDatesArray) === "object" && dirtyDatesArray !== null) {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  } else {
    return /* @__PURE__ */ new Date(NaN);
  }
  var result;
  datesArray.forEach(function(dirtyDate) {
    var currentDate = toDate(dirtyDate);
    if (result === void 0 || result < currentDate || isNaN(Number(currentDate))) {
      result = currentDate;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}

// node_modules/date-fns/esm/min/index.js
function min2(dirtyDatesArray) {
  requiredArgs(1, arguments);
  var datesArray;
  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
    datesArray = dirtyDatesArray;
  } else if (_typeof(dirtyDatesArray) === "object" && dirtyDatesArray !== null) {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  } else {
    return /* @__PURE__ */ new Date(NaN);
  }
  var result;
  datesArray.forEach(function(dirtyDate) {
    var currentDate = toDate(dirtyDate);
    if (result === void 0 || result > currentDate || isNaN(currentDate.getDate())) {
      result = currentDate;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}

// node_modules/date-fns/esm/compareAsc/index.js
function compareAsc(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}

// node_modules/date-fns/esm/constants/index.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
var minTime = -maxTime;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;

// node_modules/date-fns/esm/isSameDay/index.js
function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

// node_modules/date-fns/esm/isDate/index.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date2 = toDate(dirtyDate);
  return !isNaN(Number(date2));
}

// node_modules/date-fns/esm/differenceInCalendarYears/index.js
function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() - dateRight.getFullYear();
}

// node_modules/date-fns/esm/differenceInDays/index.js
function compareLocalAsc(dateLeft, dateRight) {
  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}
function differenceInDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareLocalAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));
  dateLeft.setDate(dateLeft.getDate() - sign2 * difference);
  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign2);
  var result = sign2 * (difference - isLastDayNotFull);
  return result === 0 ? 0 : result;
}

// node_modules/date-fns/esm/endOfDay/index.js
function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  date2.setHours(23, 59, 59, 999);
  return date2;
}

// node_modules/date-fns/esm/endOfMonth/index.js
function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var month = date2.getMonth();
  date2.setFullYear(date2.getFullYear(), month + 1, 0);
  date2.setHours(23, 59, 59, 999);
  return date2;
}

// node_modules/date-fns/esm/isLastDayOfMonth/index.js
function isLastDayOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  return endOfDay(date2).getTime() === endOfMonth(date2).getTime();
}

// node_modules/date-fns/esm/differenceInYears/index.js
function differenceInYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight));
  dateLeft.setFullYear(1584);
  dateRight.setFullYear(1584);
  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign2;
  var result = sign2 * (difference - Number(isLastYearNotFull));
  return result === 0 ? 0 : result;
}

// node_modules/date-fns/esm/startOfMonth/index.js
function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/startOfYear/index.js
function startOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate);
  var date2 = /* @__PURE__ */ new Date(0);
  date2.setFullYear(cleanDate.getFullYear(), 0, 1);
  date2.setHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY2 = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var timestamp = date2.getTime();
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date2.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY2) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date2 = toDate(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCISOWeek(fourthOfJanuary);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date2).getTime() - startOfUTCISOWeekYear(date2).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions3 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date2 = toDate(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getUTCFullYear();
  var defaultOptions3 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions3 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCWeek(firstWeek, options);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var diff = startOfUTCWeek(date2, options).getTime() - startOfUTCWeekYear(date2, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number2, targetLength) {
  var sign2 = number2 < 0 ? "-" : "";
  var output = Math.abs(number2).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign2 + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  // Year
  y: function y2(date2, token) {
    var signedYear = date2.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date2, token) {
    var month = date2.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date2, token) {
    return addLeadingZeros(date2.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a2(date2, token) {
    var dayPeriodEnumValue = date2.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date2, token) {
    return addLeadingZeros(date2.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date2, token) {
    return addLeadingZeros(date2.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date2, token) {
    return addLeadingZeros(date2.getUTCMinutes(), token.length);
  },
  // Second
  s: function s2(date2, token) {
    return addLeadingZeros(date2.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date2, token) {
    var numberOfDigits = token.length;
    var milliseconds2 = date2.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds2 * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  // Era
  G: function G(date2, token, localize2) {
    var era = date2.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y3(date2, token, localize2) {
    if (token === "yo") {
      var signedYear = date2.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date2, token);
  },
  // Local week-numbering year
  Y: function Y(date2, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date2, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date2, token) {
    var isoWeekYear = getUTCISOWeekYear(date2);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date2, token) {
    var year = date2.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date2, token, localize2) {
    var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date2, token, localize2) {
    var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date2, token, localize2) {
    var month = date2.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date2, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date2, token, localize2) {
    var month = date2.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date2, token, localize2, options) {
    var week = getUTCWeek(date2, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date2, token, localize2) {
    var isoWeek = getUTCISOWeek(date2);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date2, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date2.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date2, token);
  },
  // Day of year
  D: function D(date2, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date2);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date2, token, localize2) {
    var dayOfWeek = date2.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e(date2, token, localize2, options) {
    var dayOfWeek = date2.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date2, token, localize2, options) {
    var dayOfWeek = date2.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date2, token, localize2) {
    var dayOfWeek = date2.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a3(date2, token, localize2) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date2, token, localize2) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date2, token, localize2) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h2(date2, token, localize2) {
    if (token === "ho") {
      var hours = date2.getUTCHours() % 12;
      if (hours === 0) hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date2, token);
  },
  // Hour [0-23]
  H: function H2(date2, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date2.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date2, token);
  },
  // Hour [0-11]
  K: function K(date2, token, localize2) {
    var hours = date2.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k2(date2, token, localize2) {
    var hours = date2.getUTCHours();
    if (hours === 0) hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date2, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date2.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date2, token);
  },
  // Second
  s: function s3(date2, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date2.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date2, token);
  },
  // Fraction of second
  S: function S2(date2, token) {
    return lightFormatters_default.S(date2, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x2(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign2 + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign2 + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign2 = offset > 0 ? "-" : "+";
    return sign2 + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign2 + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format3, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format3, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format3, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format3, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format3, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format3 = args.formats[width] || args.formats[args.defaultWidth];
    return format3;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number2 = Number(dirtyNumber);
  var rem100 = number2 % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number2 + "st";
      case 2:
        return number2 + "nd";
      case 3:
        return number2 + "rd";
    }
  }
  return number2 + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string2.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key2 = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key2) : key2;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string2.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object2, predicate) {
  for (var key2 in object2) {
    if (object2.hasOwnProperty(key2) && predicate(object2[key2])) {
      return key2;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key2 = 0; key2 < array.length; key2++) {
    if (predicate(array[key2])) {
      return key2;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string2.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string2.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string2.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale2 = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale2;

// node_modules/date-fns/esm/_lib/defaultLocale/index.js
var defaultLocale_default = en_US_default;

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format2(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions3 = getDefaultOptions();
  var locale3 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions3.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions3.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions3.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions3.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale3.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale3.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate2 = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale3,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale3.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate2, substring, locale3.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/date-fns/esm/formatDistanceStrict/index.js
var MILLISECONDS_IN_MINUTE2 = 1e3 * 60;
var MINUTES_IN_DAY = 60 * 24;
var MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;
var MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;

// node_modules/date-fns/esm/getDaysInMonth/index.js
function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getFullYear();
  var monthIndex = date2.getMonth();
  var lastDayOfMonth2 = /* @__PURE__ */ new Date(0);
  lastDayOfMonth2.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth2.setHours(0, 0, 0, 0);
  return lastDayOfMonth2.getDate();
}

// node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js
var MILLISECONDS_IN_DAY3 = 24 * 60 * 60 * 1e3;

// node_modules/date-fns/esm/isAfter/index.js
function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date2.getTime() > dateToCompare.getTime();
}

// node_modules/date-fns/esm/isBefore/index.js
function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date2.getTime() < dateToCompare.getTime();
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(t2, e3) {
  if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
  t2.prototype = Object.create(e3 && e3.prototype, {
    constructor: {
      value: t2,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t2, "prototype", {
    writable: false
  }), e3 && _setPrototypeOf(t2, e3);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(t2) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t3) {
    return t3.__proto__ || Object.getPrototypeOf(t3);
  }, _getPrototypeOf(t2);
}

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  try {
    var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t3) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
    return !!t2;
  })();
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(t2, e3) {
  if (e3 && ("object" == _typeof(e3) || "function" == typeof e3)) return e3;
  if (void 0 !== e3) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t2);
}

// node_modules/@babel/runtime/helpers/esm/createSuper.js
function _createSuper(t2) {
  var r = _isNativeReflectConstruct();
  return function() {
    var e3, o = _getPrototypeOf(t2);
    if (r) {
      var s4 = _getPrototypeOf(this).constructor;
      e3 = Reflect.construct(o, arguments, s4);
    } else e3 = o.apply(this, arguments);
    return _possibleConstructorReturn(this, e3);
  };
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(a4, n) {
  if (!(a4 instanceof n)) throw new TypeError("Cannot call a class as a function");
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(e3, r) {
  for (var t2 = 0; t2 < r.length; t2++) {
    var o = r[t2];
    o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e3, toPropertyKey(o.key), o);
  }
}
function _createClass(e3, r, t2) {
  return r && _defineProperties(e3.prototype, r), t2 && _defineProperties(e3, t2), Object.defineProperty(e3, "prototype", {
    writable: false
  }), e3;
}

// node_modules/date-fns/esm/parse/_lib/Setter.js
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate3(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate3(utcDate2, options) {
      return this.validateValue(utcDate2, this.value, options);
    }
  }, {
    key: "set",
    value: function set2(utcDate2, flags, options) {
      return this.setValue(utcDate2, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set2(date2, flags) {
      if (flags.timestampIsSet) {
        return date2;
      }
      var convertedDate = /* @__PURE__ */ new Date(0);
      convertedDate.setFullYear(date2.getUTCFullYear(), date2.getUTCMonth(), date2.getUTCDate());
      convertedDate.setHours(date2.getUTCHours(), date2.getUTCMinutes(), date2.getUTCSeconds(), date2.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);

// node_modules/date-fns/esm/parse/_lib/Parser.js
var Parser = function() {
  function Parser2() {
    _classCallCheck(this, Parser2);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser2, [{
    key: "run",
    value: function run3(dateString, token, match2, options) {
      var result = this.parse(dateString, token, match2, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate3(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
}();

// node_modules/date-fns/esm/parse/_lib/parsers/EraParser.js
var EraParser = function(_Parser) {
  _inherits(EraParser2, _Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value) {
      flags.era = value;
      date2.setUTCFullYear(value, 0, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return EraParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/constants.js
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

// node_modules/date-fns/esm/parse/_lib/utils.js
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign2 = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign2 * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

// node_modules/date-fns/esm/parse/_lib/parsers/YearParser.js
var YearParser = function(_Parser) {
  _inherits(YearParser2, _Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value) {
      var currentYear = date2.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date2.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date2.setUTCHours(0, 0, 0, 0);
        return date2;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date2.setUTCFullYear(year, 0, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return YearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekYearParser.js
var LocalWeekYearParser = function(_Parser) {
  _inherits(LocalWeekYearParser2, _Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value, options) {
      var currentYear = getUTCWeekYear(date2, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date2.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date2.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date2, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date2.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date2.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date2, options);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekYearParser.js
var ISOWeekYearParser = function(_Parser) {
  _inherits(ISOWeekYearParser2, _Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      var firstWeekOfYear = /* @__PURE__ */ new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ExtendedYearParser.js
var ExtendedYearParser = function(_Parser) {
  _inherits(ExtendedYearParser2, _Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCFullYear(value, 0, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/QuarterParser.js
var QuarterParser = function(_Parser) {
  _inherits(QuarterParser2, _Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth((value - 1) * 3, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return QuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneQuarterParser.js
var StandAloneQuarterParser = function(_Parser) {
  _inherits(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth((value - 1) * 3, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MonthParser.js
var MonthParser = function(_Parser) {
  _inherits(MonthParser2, _Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth(value, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return MonthParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneMonthParser.js
var StandAloneMonthParser = function(_Parser) {
  _inherits(StandAloneMonthParser2, _Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth(value, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date2, options) - week;
  date2.setUTCDate(date2.getUTCDate() - diff * 7);
  return date2;
}

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekParser.js
var LocalWeekParser = function(_Parser) {
  _inherits(LocalWeekParser2, _Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date2, value, options), options);
    }
  }]);
  return LocalWeekParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date2) - isoWeek;
  date2.setUTCDate(date2.getUTCDate() - diff * 7);
  return date2;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekParser.js
var ISOWeekParser = function(_Parser) {
  _inherits(ISOWeekParser2, _Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date2, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DateParser.js
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = function(_Parser) {
  _inherits(DateParser2, _Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(date2, value) {
      var year = date2.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      var month = date2.getUTCMonth();
      if (isLeapYear2) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCDate(value);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return DateParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayOfYearParser.js
var DayOfYearParser = function(_Parser) {
  _inherits(DayOfYearParser2, _Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(date2, value) {
      var year = date2.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      if (isLeapYear2) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth(0, value);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return DayOfYearParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions3 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date2 = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date2.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date2.setUTCDate(date2.getUTCDate() + diff);
  return date2;
}

// node_modules/date-fns/esm/parse/_lib/parsers/DayParser.js
var DayParser = function(_Parser) {
  _inherits(DayParser2, _Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value, options) {
      date2 = setUTCDay(date2, value, options);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return DayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalDayParser.js
var LocalDayParser = function(_Parser) {
  _inherits(LocalDayParser2, _Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value, options) {
      date2 = setUTCDay(date2, value, options);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return LocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneLocalDayParser.js
var StandAloneLocalDayParser = function(_Parser) {
  _inherits(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value, options) {
      date2 = setUTCDay(date2, value, options);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date2 = toDate(dirtyDate);
  var currentDay = date2.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date2.setUTCDate(date2.getUTCDate() + diff);
  return date2;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISODayParser.js
var ISODayParser = function(_Parser) {
  _inherits(ISODayParser2, _Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2 = setUTCISODay(date2, value);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return ISODayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMParser.js
var AMPMParser = function(_Parser) {
  _inherits(AMPMParser2, _Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date2;
    }
  }]);
  return AMPMParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMMidnightParser.js
var AMPMMidnightParser = function(_Parser) {
  _inherits(AMPMMidnightParser2, _Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date2;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayPeriodParser.js
var DayPeriodParser = function(_Parser) {
  _inherits(DayPeriodParser2, _Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date2;
    }
  }]);
  return DayPeriodParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1to12Parser.js
var Hour1to12Parser = function(_Parser) {
  _inherits(Hour1to12Parser2, _Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      var isPM = date2.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date2.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date2.setUTCHours(0, 0, 0, 0);
      } else {
        date2.setUTCHours(value, 0, 0, 0);
      }
      return date2;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0to23Parser.js
var Hour0to23Parser = function(_Parser) {
  _inherits(Hour0to23Parser2, _Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCHours(value, 0, 0, 0);
      return date2;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0To11Parser.js
var Hour0To11Parser = function(_Parser) {
  _inherits(Hour0To11Parser2, _Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      var isPM = date2.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date2.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date2.setUTCHours(value, 0, 0, 0);
      }
      return date2;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1To24Parser.js
var Hour1To24Parser = function(_Parser) {
  _inherits(Hour1To24Parser2, _Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date2.setUTCHours(hours, 0, 0, 0);
      return date2;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MinuteParser.js
var MinuteParser = function(_Parser) {
  _inherits(MinuteParser2, _Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMinutes(value, 0, 0);
      return date2;
    }
  }]);
  return MinuteParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/SecondParser.js
var SecondParser = function(_Parser) {
  _inherits(SecondParser2, _Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCSeconds(value, 0);
      return date2;
    }
  }]);
  return SecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/FractionOfSecondParser.js
var FractionOfSecondParser = function(_Parser) {
  _inherits(FractionOfSecondParser2, _Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMilliseconds(value);
      return date2;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneWithZParser.js
var ISOTimezoneWithZParser = function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value) {
      if (flags.timestampIsSet) {
        return date2;
      }
      return new Date(date2.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneParser.js
var ISOTimezoneParser = function(_Parser) {
  _inherits(ISOTimezoneParser2, _Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value) {
      if (flags.timestampIsSet) {
        return date2;
      }
      return new Date(date2.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampSecondsParser.js
var TimestampSecondsParser = function(_Parser) {
  _inherits(TimestampSecondsParser2, _Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampMillisecondsParser.js
var TimestampMillisecondsParser = function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/index.js
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};

// node_modules/date-fns/esm/isSameMonth/index.js
function isSameMonth(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}

// node_modules/date-fns/esm/isSameYear/index.js
function isSameYear(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear();
}

// node_modules/date-fns/esm/isThisMonth/index.js
function isThisMonth(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameMonth(Date.now(), dirtyDate);
}

// node_modules/date-fns/esm/isToday/index.js
function isToday(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameDay(dirtyDate, Date.now());
}

// node_modules/date-fns/esm/parseISO/index.js
function parseISO(argument, options) {
  var _options$additionalDi;
  requiredArgs(1, arguments);
  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  }
  if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var dateStrings = splitDateString(argument);
  var date2;
  if (dateStrings.date) {
    var parseYearResult = parseYear2(dateStrings.date, additionalDigits);
    date2 = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date2 || isNaN(date2.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var timestamp = date2.getTime();
  var time2 = 0;
  var offset;
  if (dateStrings.time) {
    time2 = parseTime(dateStrings.time);
    if (isNaN(time2)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);
    if (isNaN(offset)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time2);
    var result = /* @__PURE__ */ new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }
  return new Date(timestamp + time2 + offset);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }
  if (timeString) {
    var token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear2(dateString, additionalDigits) {
  var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
  var captures = dateString.match(regex);
  if (!captures) return {
    year: NaN,
    restDateString: ""
  };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null) return /* @__PURE__ */ new Date(NaN);
  var captures = dateString.match(dateRegex);
  if (!captures) return /* @__PURE__ */ new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date2 = /* @__PURE__ */ new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    date2.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date2;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures) return NaN;
  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z") return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures) return 0;
  var sign2 = captures[1] === "+" ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign2 * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date2 = /* @__PURE__ */ new Date(0);
  date2.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date2.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date2.setUTCDate(date2.getUTCDate() + diff);
  return date2;
}
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex2(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date2) {
  return month >= 0 && month <= 11 && date2 >= 1 && date2 <= (daysInMonths[month] || (isLeapYearIndex2(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex2(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}

// node_modules/date-fns/esm/subMonths/index.js
function subMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/ticks.js
function getXTickCount(width) {
  return Math.ceil(width / X_TICK_COUNT_RATIO);
}
function getYTickCount(height) {
  return Math.ceil(height / Y_TICK_COUNT_RATIO);
}
function createXTicks(scale, values) {
  if (scale.isNumeric()) {
    return scale.d3Scale.ticks(values);
  } else if (scale.isTime()) {
    const rawTicks = scale.d3Scale.ticks(values);
    const domain = scale.d3Scale.domain();
    return uniform(rawTicks, domain[domain.length - 1]);
  } else {
    return scale.d3Scale.domain();
  }
}
function createYTicks(scale, values) {
  const ticks2 = scale.d3Scale.ticks(values);
  if (scale.scaleType === "log" && ticks2.length > 10) {
    return scale.d3Scale.ticks(3);
  }
  return ticks2;
}
function uniform(ticks2, max3) {
  if (ticks2.length < 3 || !isMixedDayInterval(ticks2)) {
    return ticks2;
  }
  return createTwoDayInterval(ticks2[0], max3);
}
function isMixedDayInterval(ticks2) {
  let oneDayInterval = false;
  let twoDayInterval = false;
  for (let i2 = 1; i2 < ticks2.length; i2++) {
    oneDayInterval = oneDayInterval || isDayInterval(ticks2[i2 - 1], ticks2[i2], 1);
    twoDayInterval = twoDayInterval || isDayInterval(ticks2[i2 - 1], ticks2[i2], 2);
  }
  return oneDayInterval && twoDayInterval;
}
function isDayInterval(a4, b2, difference = 1) {
  return Math.abs(differenceInDays(a4, b2)) === difference;
}
function createTwoDayInterval(start, max3) {
  const result = [];
  let curr = start;
  while (curr < max3) {
    result.push(curr);
    curr = add(curr, { days: 2 });
  }
  return result;
}

// node_modules/@cloudscape-design/components/area-chart/model/utils.js
var EPSILON = 1e-13;
function computeDomainX(series) {
  const xValues = getXValues(series);
  if (xValues.length === 0) {
    return [];
  }
  if (typeof xValues[0] === "string") {
    return uniq(xValues);
  }
  return xValues.reduce(([min3, max3], x3) => [x3 < min3 ? x3 : min3, max3 < x3 ? x3 : max3], [xValues[0], xValues[0]]);
}
function computeDomainY(series, scaleType) {
  let min3 = Number.POSITIVE_INFINITY;
  let max3 = Number.NEGATIVE_INFINITY;
  series.forEach((s4) => {
    if (s4.type === "threshold") {
      min3 = Math.min(min3, s4.y);
      max3 = Math.max(max3, s4.y);
    }
  });
  getXValues(series).forEach((_, xIndex) => {
    var _a;
    let stackY = scaleType === "linear" ? 0 : EPSILON;
    for (const s4 of series) {
      if (s4.type === "area") {
        stackY = stackY + (((_a = s4.data[xIndex]) === null || _a === void 0 ? void 0 : _a.y) || 0);
        min3 = Math.min(min3, stackY);
        max3 = Math.max(max3, stackY);
      }
    }
  });
  if (min3 === Number.POSITIVE_INFINITY) {
    return [];
  }
  if (scaleType === "log" && min3 === 0 && max3 > 1) {
    return [1, max3];
  }
  return [min3, max3];
}
function computePlotPoints(series, xScale, yScale) {
  const xValues = getXValues(series);
  const xy = [];
  const xs = [];
  const sx = [];
  getVisibleData(xValues, xScale).forEach(({ x: x3, scaledX }, xIndex) => {
    let stackY = yScale.scaleType === "linear" ? 0 : EPSILON;
    const points = [];
    series.forEach((s4, sIndex) => {
      var _a;
      if (s4.type === "threshold") {
        const scaledY = yScale.d3Scale(s4.y) || 0;
        points.push({
          x: x3,
          y0: s4.y,
          y1: s4.y,
          scaled: { x: scaledX, y0: scaledY, y1: scaledY },
          index: { x: xIndex, s: sIndex, y: 0 },
          value: 0
        });
      } else {
        const value = ((_a = s4.data[xIndex]) === null || _a === void 0 ? void 0 : _a.y) || 0;
        const y0 = stackY;
        const y1 = stackY + value;
        points.push({
          x: x3,
          y0,
          y1,
          scaled: { x: scaledX, y0: yScale.d3Scale(y0) || 0, y1: yScale.d3Scale(y1) || 0 },
          index: { x: xIndex, s: sIndex, y: 0 },
          value
        });
        stackY = y1;
      }
    });
    points.sort((p1, p2) => p1.y1 - p2.y1).forEach((point5, index) => {
      point5.index.y = index;
      insertIntoMatrix(xy, point5.index.x, point5.index.y, point5);
      insertIntoMatrix(xs, point5.index.x, point5.index.s, point5);
      insertIntoMatrix(sx, point5.index.s, point5.index.x, point5);
    });
  });
  return { xy, xs, sx };
}
function findClosest(sortedArray, target, getter) {
  if (sortedArray.length === 0) {
    throw new Error("Invariant violation: array is empty.");
  }
  const isAscending = getter(sortedArray[0]) < getter(sortedArray[sortedArray.length - 1]);
  const compare = (x3) => isAscending ? getter(x3) < target : getter(x3) > target;
  const delta = (x3) => Math.abs(getter(x3) - target);
  let lo = 0;
  let hi = sortedArray.length - 1;
  while (hi - lo > 1) {
    const mid = Math.floor((lo + hi) / 2);
    if (compare(sortedArray[mid])) {
      lo = mid;
    } else {
      hi = mid;
    }
  }
  return delta(sortedArray[lo]) < delta(sortedArray[hi]) ? sortedArray[lo] : sortedArray[hi];
}
function isSeriesValid(series) {
  var _a;
  const sampleXValues = getXValues(series);
  for (const s4 of series) {
    if (s4.type === "area") {
      for (let i2 = 0; i2 < Math.max(s4.data.length, sampleXValues.length); i2++) {
        if (((_a = s4.data[i2]) === null || _a === void 0 ? void 0 : _a.x) !== sampleXValues[i2]) {
          return false;
        }
      }
    }
  }
  return true;
}
function getXValues(series) {
  for (const s4 of series) {
    if (s4.type === "area") {
      return s4.data.map(({ x: x3 }) => x3);
    }
  }
  return [];
}
function getVisibleData(data, xScale) {
  const scaledOffsetX = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;
  const visibleData = [];
  for (const x3 of data) {
    const scaledX = xScale.d3Scale(x3);
    if (scaledX !== void 0) {
      visibleData.push({ x: x3, scaledX: scaledX + scaledOffsetX });
    }
  }
  return visibleData;
}
function insertIntoMatrix(matrix, row, col, value) {
  if (!matrix[row]) {
    matrix[row] = [];
  }
  matrix[row][col] = value;
}
function uniq(arr) {
  const set2 = /* @__PURE__ */ new Set();
  const uniqArray = [];
  for (const value of arr) {
    if (!set2.has(value)) {
      set2.add(value);
      uniqArray.push(value);
    }
  }
  return uniqArray;
}

// node_modules/@cloudscape-design/components/area-chart/model/compute-chart-props.js
function computeChartProps({ isRtl, series, xDomain: externalXDomain, yDomain: externalYDomain, xScaleType, yScaleType, height, width }) {
  const xDomain = externalXDomain ? [...externalXDomain] : computeDomainX(series);
  const xTickCount = getXTickCount(width);
  const xScale = new ChartScale(xScaleType, xDomain, !isRtl ? [0, width] : [width, 0]);
  const xTicks = xScale.domain.length > 0 ? createXTicks(xScale, xTickCount) : [];
  const yDomain = externalYDomain || computeDomainY(series, yScaleType);
  const yTickCount = getYTickCount(height);
  const yScale = new NumericChartScale(yScaleType, yDomain, [height, 0], externalYDomain ? null : yTickCount);
  const yTicks = createYTicks(yScale, yTickCount);
  const plot = computePlotPoints(series, xScale, yScale);
  return { xDomain, yDomain, xScale, yScale, xTicks, yTicks, plot };
}

// node_modules/@cloudscape-design/components/internal/styles/colors.js
var categoryPalette = [
  colorChartsPaletteCategorical1,
  colorChartsPaletteCategorical2,
  colorChartsPaletteCategorical3,
  colorChartsPaletteCategorical4,
  colorChartsPaletteCategorical5,
  colorChartsPaletteCategorical6,
  colorChartsPaletteCategorical7,
  colorChartsPaletteCategorical8,
  colorChartsPaletteCategorical9,
  colorChartsPaletteCategorical10,
  colorChartsPaletteCategorical11,
  colorChartsPaletteCategorical12,
  colorChartsPaletteCategorical13,
  colorChartsPaletteCategorical14,
  colorChartsPaletteCategorical15,
  colorChartsPaletteCategorical16,
  colorChartsPaletteCategorical17,
  colorChartsPaletteCategorical18,
  colorChartsPaletteCategorical19,
  colorChartsPaletteCategorical20,
  colorChartsPaletteCategorical21,
  colorChartsPaletteCategorical22,
  colorChartsPaletteCategorical23,
  colorChartsPaletteCategorical24,
  colorChartsPaletteCategorical25,
  colorChartsPaletteCategorical26,
  colorChartsPaletteCategorical27,
  colorChartsPaletteCategorical28,
  colorChartsPaletteCategorical29,
  colorChartsPaletteCategorical30,
  colorChartsPaletteCategorical31,
  colorChartsPaletteCategorical32,
  colorChartsPaletteCategorical33,
  colorChartsPaletteCategorical34,
  colorChartsPaletteCategorical35,
  colorChartsPaletteCategorical36,
  colorChartsPaletteCategorical37,
  colorChartsPaletteCategorical38,
  colorChartsPaletteCategorical39,
  colorChartsPaletteCategorical40,
  colorChartsPaletteCategorical41,
  colorChartsPaletteCategorical42,
  colorChartsPaletteCategorical43,
  colorChartsPaletteCategorical44,
  colorChartsPaletteCategorical45,
  colorChartsPaletteCategorical46,
  colorChartsPaletteCategorical47,
  colorChartsPaletteCategorical48,
  colorChartsPaletteCategorical49,
  colorChartsPaletteCategorical50
];

// node_modules/@cloudscape-design/components/internal/utils/create-category-color-scale.js
function createCategoryColorScale(items, isThreshold = () => false, getOwnColor = () => null) {
  const colors = [];
  let categoryIndex = 0;
  for (const it of items) {
    const ownColor = getOwnColor(it);
    const defaultColor = isThreshold(it) ? colorChartsThresholdNeutral : categoryPalette[categoryIndex % categoryPalette.length];
    colors.push(parseCssVariable(ownColor || defaultColor));
    if (!isThreshold(it) && !ownColor) {
      categoryIndex++;
    }
  }
  return colors;
}

// node_modules/@cloudscape-design/components/area-chart/model/create-series-decorator.js
function createSeriesDecorator(externalSeries) {
  const colorScale = createCategoryColorScale(externalSeries, (s4) => s4.type === "threshold", (s4) => s4.color || null);
  const decorateSeries = (s4, index) => {
    const title = s4.title;
    const color2 = colorScale[index];
    const markerType = s4.type === "area" ? "hollow-rectangle" : "dashed";
    const formatValue2 = s4.type === "threshold" ? () => s4.valueFormatter ? s4.valueFormatter(s4.y) : s4.y : (y4, x3) => s4.valueFormatter ? s4.valueFormatter(y4, x3) : y4;
    return { series: s4, title, color: color2, markerType, formatValue: formatValue2 };
  };
  const mapping = externalSeries.reduce((map2, series, index) => {
    map2.set(series, decorateSeries(series, index));
    return map2;
  }, /* @__PURE__ */ new Map());
  const seriesDecorator = (series) => mapping.get(series) || decorateSeries(series, externalSeries.length);
  return seriesDecorator;
}

// node_modules/@cloudscape-design/components/area-chart/model/interactions-store.js
var initialState = Object.freeze({
  highlightedX: null,
  highlightedPoint: null,
  highlightedSeries: null,
  legendSeries: null,
  isPopoverPinned: false
});
var InteractionsStore = class extends AsyncStore {
  constructor(series, plot) {
    super(initialState);
    this.series = series;
    this.plot = plot;
  }
  highlightPoint(point5) {
    this.set((state) => Object.assign(Object.assign({}, state), { highlightedX: this.plot.xy[point5.index.x], highlightedPoint: point5, highlightedSeries: this.series[point5.index.s], legendSeries: this.series[point5.index.s] }));
  }
  highlightX(points) {
    this.set((state) => Object.assign(Object.assign({}, state), { highlightedX: points, highlightedPoint: null, highlightedSeries: null, legendSeries: null }));
  }
  highlightFirstPoint() {
    this.set((state) => {
      const series = state.legendSeries || state.highlightedSeries;
      const firstSeriesPoint = series && this._getFirstSeriesPoint(series);
      const point5 = state.highlightedPoint || firstSeriesPoint || this.plot.sx[0][0];
      return Object.assign(Object.assign({}, state), { highlightedX: this.plot.xy[point5.index.x], highlightedPoint: point5, highlightedSeries: this.series[point5.index.s], legendSeries: this.series[point5.index.s] });
    });
  }
  highlightSeries(s4) {
    this.set((state) => Object.assign(Object.assign({}, state), { highlightedSeries: s4, legendSeries: s4 }));
  }
  clearHighlight() {
    this.set((state) => Object.assign(Object.assign({}, state), { highlightedX: null, highlightedPoint: null, highlightedSeries: null }));
  }
  clearHighlightedLegend() {
    this.set((state) => Object.assign(Object.assign({}, state), { legendSeries: null }));
  }
  clearState() {
    this.set(() => initialState);
  }
  pinPopover() {
    this.set((state) => Object.assign(Object.assign({}, state), { isPopoverPinned: true }));
  }
  unpinPopover() {
    this.set((state) => Object.assign(Object.assign({}, state), { isPopoverPinned: false }));
  }
  togglePopoverPin() {
    this.set((state) => Object.assign(Object.assign({}, state), { isPopoverPinned: !state.isPopoverPinned }));
  }
  _getFirstSeriesPoint(s4) {
    const seriesIndex = this.series.indexOf(s4);
    const [firstSeriesPoint] = this.plot.sx[seriesIndex] || [];
    return firstSeriesPoint || null;
  }
};

// node_modules/@cloudscape-design/components/area-chart/model/use-chart-model.js
var MAX_HOVER_MARGIN = 6;
var SVG_HOVER_THROTTLE = 25;
var POPOVER_DEADZONE = 12;
function useChartModel({ isRtl, fitHeight, externalSeries: allSeries, visibleSeries: series, setVisibleSeries, highlightedSeries, setHighlightedSeries, xDomain, yDomain, xScaleType, yScaleType, height: explicitHeight, width, popoverRef, statusType }) {
  var _a;
  const plotRef = (0, import_react165.useRef)(null);
  const containerRef = (0, import_react165.useRef)(null);
  const verticalMarkerRef = (0, import_react165.useRef)(null);
  const plotMeasureRef = (0, import_react165.useRef)(null);
  const hasVisibleSeries = series.length > 0;
  const height = (_a = useHeightMeasure(() => plotMeasureRef.current, !fitHeight, [hasVisibleSeries, statusType])) !== null && _a !== void 0 ? _a : explicitHeight;
  const stableSetVisibleSeries = useStableCallback(setVisibleSeries);
  const model = (0, import_react165.useMemo)(() => {
    const computed = computeChartProps({
      isRtl,
      series,
      xDomain,
      yDomain,
      xScaleType,
      yScaleType,
      height,
      width
    });
    const interactions = new InteractionsStore(series, computed.plot);
    const containsMultipleSeries = interactions.series.length > 1;
    const getInternalSeries = createSeriesDecorator(allSeries);
    const isMouseOverPopover = (clientX, clientY) => {
      var _a2;
      if ((_a2 = popoverRef.current) === null || _a2 === void 0 ? void 0 : _a2.firstChild) {
        const popoverPosition = popoverRef.current.firstChild.getBoundingClientRect();
        if (clientX > popoverPosition.x - POPOVER_DEADZONE && clientX < popoverPosition.x + popoverPosition.width + POPOVER_DEADZONE && clientY > popoverPosition.y - POPOVER_DEADZONE && clientY < popoverPosition.y + popoverPosition.height + POPOVER_DEADZONE) {
          return true;
        }
      }
      return false;
    };
    const onSVGMouseMoveThrottled = throttle((clientX, clientY) => {
      if (interactions.get().isPopoverPinned || !plotRef.current || interactions.plot.xy.length === 0 || isMouseOverPopover(clientX, clientY)) {
        return;
      }
      const svgRect = plotRef.current.svg.getBoundingClientRect();
      const offsetX = clientX - svgRect.left;
      const offsetY = clientY - svgRect.top;
      const closestX = findClosest(interactions.plot.xy, offsetX, (xPoints) => xPoints[0].scaled.x);
      const closestPoint = findClosest(closestX, offsetY, (point5) => point5.scaled.y1);
      if (Math.abs(offsetX - closestPoint.scaled.x) < MAX_HOVER_MARGIN && Math.abs(offsetY - closestPoint.scaled.y1) < MAX_HOVER_MARGIN) {
        interactions.highlightPoint(closestPoint);
      } else {
        interactions.highlightX(closestX);
      }
    }, SVG_HOVER_THROTTLE);
    const onSVGMouseMove = ({ clientX, clientY }) => onSVGMouseMoveThrottled(clientX, clientY);
    const onSVGMouseOut = (event) => {
      onSVGMouseMoveThrottled.cancel();
      if (interactions.get().isPopoverPinned || isMouseOverPopover(event.clientX, event.clientY)) {
        return;
      }
      if (!nodeContains(plotRef.current.svg, event.relatedTarget)) {
        interactions.clearHighlightedLegend();
        interactions.clearHighlight();
      }
    };
    const onSVGMouseDown = (event) => {
      interactions.togglePopoverPin();
      event.preventDefault();
    };
    const moveWithinXAxis = (direction) => {
      if (interactions.get().highlightedPoint) {
        return moveWithinSeries(direction);
      } else if (containsMultipleSeries) {
        const { highlightedX } = interactions.get();
        if (highlightedX) {
          const currentXIndex = highlightedX[0].index.x;
          const nextXIndex = circleIndex(currentXIndex + direction, [0, interactions.plot.xy.length - 1]);
          interactions.highlightX(interactions.plot.xy[nextXIndex]);
        }
      }
    };
    const moveWithinSeries = (direction) => {
      const point5 = interactions.get().highlightedPoint;
      if (!point5) {
        return;
      }
      const sIndex = point5.index.s;
      const xIndex = circleIndex(point5.index.x + direction, [0, interactions.plot.xs.length - 1]);
      interactions.highlightPoint(interactions.plot.xs[xIndex][sIndex]);
    };
    const moveBetweenSeries = (direction) => {
      const point5 = interactions.get().highlightedPoint;
      if (!point5) {
        const { highlightedX } = interactions.get();
        if (highlightedX) {
          const xIndex2 = highlightedX[0].index.x;
          const points = interactions.plot.xy[xIndex2];
          const yIndex = direction === 1 ? 0 : points.length - 1;
          interactions.highlightPoint(points[yIndex]);
        }
        return;
      }
      const xIndex = point5.index.x;
      const currentYIndex = point5.index.y;
      if (containsMultipleSeries && (currentYIndex === 0 && direction === -1 || currentYIndex === interactions.plot.xy[xIndex].length - 1 && direction === 1)) {
        interactions.highlightX(interactions.plot.xy[xIndex]);
      } else {
        const nextYIndex = circleIndex(currentYIndex + direction, [0, interactions.plot.xy[xIndex].length - 1]);
        interactions.highlightPoint(interactions.plot.xy[xIndex][nextYIndex]);
      }
    };
    const onSVGKeyDown = (event) => {
      const keyCode = event.keyCode;
      if (keyCode !== KeyCode.up && keyCode !== KeyCode.right && keyCode !== KeyCode.down && keyCode !== KeyCode.left && keyCode !== KeyCode.space && keyCode !== KeyCode.enter) {
        return;
      }
      event.preventDefault();
      if (interactions.get().isPopoverPinned) {
        return;
      }
      handleKey(event, {
        onBlockEnd: () => moveBetweenSeries(-1),
        onBlockStart: () => moveBetweenSeries(1),
        onInlineStart: () => moveWithinXAxis(-1),
        onInlineEnd: () => moveWithinXAxis(1),
        onActivate: () => interactions.pinPopover()
      });
    };
    const highlightFirstX = () => {
      interactions.highlightX(interactions.plot.xy[0]);
    };
    const onApplicationFocus = (_event, trigger) => {
      if (trigger === "keyboard") {
        const { highlightedX, highlightedPoint, highlightedSeries: highlightedSeries2, legendSeries } = interactions.get();
        if (containsMultipleSeries && !highlightedX && !highlightedPoint && !highlightedSeries2 && !legendSeries) {
          highlightFirstX();
        } else if (!highlightedX) {
          interactions.highlightFirstPoint();
        }
      }
    };
    const onApplicationBlur = (event) => {
      if (!nodeBelongs(containerRef.current, event.relatedTarget) && !interactions.get().isPopoverPinned) {
        interactions.clearHighlight();
      }
    };
    const onFilterSeries = (series2) => {
      stableSetVisibleSeries(series2);
    };
    const onLegendHighlight = (series2) => {
      interactions.highlightSeries(series2);
    };
    const onPopoverDismiss = (outsideClick) => {
      interactions.unpinPopover();
      if (!outsideClick) {
        setTimeout(() => {
          if (interactions.get().highlightedPoint || interactions.get().highlightedX) {
            plotRef.current.focusApplication();
          } else {
            interactions.clearHighlight();
            plotRef.current.focusPlot();
          }
        }, 0);
      }
    };
    const onContainerBlur = () => {
      interactions.clearState();
    };
    const onDocumentKeyDown = (event) => {
      if (event.key === "Escape") {
        interactions.clearHighlight();
        interactions.clearHighlightedLegend();
      }
    };
    const onPopoverLeave = (event) => {
      if (nodeContains(plotRef.current.svg, event.relatedTarget) || interactions.get().isPopoverPinned) {
        return;
      }
      interactions.clearHighlight();
      interactions.clearHighlightedLegend();
    };
    return {
      width,
      height,
      series,
      allSeries,
      getInternalSeries,
      computed,
      interactions,
      handlers: {
        onSVGMouseMove,
        onSVGMouseOut,
        onSVGMouseDown,
        onSVGKeyDown,
        onApplicationFocus,
        onApplicationBlur,
        onFilterSeries,
        onLegendHighlight,
        onPopoverDismiss,
        onContainerBlur,
        onDocumentKeyDown,
        onPopoverLeave
      },
      refs: {
        plot: plotRef,
        plotMeasure: plotMeasureRef,
        container: containerRef,
        verticalMarker: verticalMarkerRef,
        popoverRef
      }
    };
  }, [
    allSeries,
    series,
    xDomain,
    yDomain,
    xScaleType,
    yScaleType,
    height,
    width,
    stableSetVisibleSeries,
    popoverRef,
    isRtl
  ]);
  useReaction(model.interactions, (state) => state.highlightedSeries, setHighlightedSeries);
  (0, import_react165.useEffect)(() => {
    if (highlightedSeries !== model.interactions.get().highlightedSeries) {
      model.interactions.highlightSeries(highlightedSeries);
    }
  }, [model, highlightedSeries]);
  return model;
}

// node_modules/@cloudscape-design/components/area-chart/model/use-filter-props.js
var import_react166 = __toESM(require_react());
function useFilterProps(series, controlledVisibleSeries, controlledOnVisibleChange) {
  const [visibleSeries = [], setVisibleSeriesState] = useControllable(controlledVisibleSeries, controlledOnVisibleChange, series, {
    componentName: "AreaChart",
    controlledProp: "visibleSeries",
    changeHandler: "onFilterChange"
  });
  const setVisibleSeries = (0, import_react166.useCallback)((selectedSeries) => {
    setVisibleSeriesState(selectedSeries);
    fireNonCancelableEvent(controlledOnVisibleChange, { visibleSeries: selectedSeries });
  }, [controlledOnVisibleChange, setVisibleSeriesState]);
  (0, import_react166.useEffect)(() => {
    const newVisibleSeries = visibleSeries.filter((s4) => series.indexOf(s4) !== -1);
    if (newVisibleSeries.length !== visibleSeries.length) {
      setVisibleSeries(newVisibleSeries);
    }
  }, [series, visibleSeries, setVisibleSeries]);
  return [visibleSeries, setVisibleSeries];
}

// node_modules/@cloudscape-design/components/area-chart/model/use-highlight-props.js
var import_react167 = __toESM(require_react());
function useHighlightProps(series, controlledHighlightedSeries, controlledOnHighlightChange) {
  const [highlightedSeries = null, setHighlightedSeries] = useControllable(controlledHighlightedSeries, controlledOnHighlightChange, null, {
    componentName: "AreaChart",
    controlledProp: "highlightedSeries",
    changeHandler: "onHighlightChange"
  });
  const notifyHighlightedSeries = (0, import_react167.useCallback)((s4) => {
    fireNonCancelableEvent(controlledOnHighlightChange, { highlightedSeries: s4 });
  }, [controlledOnHighlightChange]);
  (0, import_react167.useEffect)(() => {
    if (controlledHighlightedSeries) {
      const highlightedSeriesIndex = series.indexOf(controlledHighlightedSeries);
      if (highlightedSeriesIndex === -1) {
        setHighlightedSeries(null);
        notifyHighlightedSeries(null);
      }
    }
  }, [series, controlledHighlightedSeries, setHighlightedSeries, notifyHighlightedSeries]);
  return [highlightedSeries, notifyHighlightedSeries];
}

// node_modules/@cloudscape-design/components/area-chart/internal.js
function InternalAreaChart(_a) {
  var { fitHeight, height, xScaleType, yScaleType, xDomain, yDomain, xTickFormatter, yTickFormatter, detailTotalFormatter, highlightedSeries: controlledHighlightedSeries, visibleSeries: controlledVisibleSeries, series: externalSeries, onFilterChange: controlledOnVisibleChange, onHighlightChange: controlledOnHighlightChange, i18nStrings, ariaLabel, ariaLabelledby, ariaDescription, xTitle, yTitle, hideFilter, additionalFilters, hideLegend, legendTitle, statusType, detailPopoverSize, detailPopoverFooter, empty, noMatch, errorText, loadingText, recoveryText, onRecoveryClick, __internalRootRef = null } = _a, props2 = __rest(_a, ["fitHeight", "height", "xScaleType", "yScaleType", "xDomain", "yDomain", "xTickFormatter", "yTickFormatter", "detailTotalFormatter", "highlightedSeries", "visibleSeries", "series", "onFilterChange", "onHighlightChange", "i18nStrings", "ariaLabel", "ariaLabelledby", "ariaDescription", "xTitle", "yTitle", "hideFilter", "additionalFilters", "hideLegend", "legendTitle", "statusType", "detailPopoverSize", "detailPopoverFooter", "empty", "noMatch", "errorText", "loadingText", "recoveryText", "onRecoveryClick", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  const containerRef = (0, import_react168.useRef)(null);
  const popoverRef = (0, import_react168.useRef)(null);
  if (isDevelopment2) {
    (0, import_react168.useEffect)(() => {
      if (!isSeriesValid(externalSeries)) {
        warnOnce("AreaChart", "The `series` property violates the component's constraints: all `area` series must have `data` arrays of the same length and with the same x-values.");
      }
    }, [externalSeries]);
  }
  const [width, setWidth] = (0, import_react168.useState)(0);
  const [visibleSeries, setVisibleSeries] = useFilterProps(externalSeries, controlledVisibleSeries, controlledOnVisibleChange);
  const [highlightedSeries, setHighlightedSeries] = useHighlightProps(externalSeries, controlledHighlightedSeries, controlledOnHighlightChange);
  const isRtl = containerRef.current ? getIsRtl(containerRef.current) : false;
  const model = useChartModel({
    isRtl,
    fitHeight,
    externalSeries,
    visibleSeries,
    setVisibleSeries,
    highlightedSeries,
    setHighlightedSeries,
    xDomain,
    yDomain,
    xScaleType,
    yScaleType,
    height,
    width,
    popoverRef,
    statusType
  });
  const { isEmpty, isNoMatch, showChart } = getChartStatus({
    externalData: externalSeries,
    visibleData: visibleSeries,
    statusType
  });
  const showFilters = statusType === "finished" && (!isEmpty || isNoMatch) && (additionalFilters || !hideFilter);
  const showLegend = !hideLegend && !isEmpty && statusType === "finished";
  const reserveLegendSpace = !showChart && !hideLegend;
  const reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);
  (0, import_react168.useEffect)(() => {
    const onKeyDown = model.handlers.onDocumentKeyDown;
    document.addEventListener("keydown", onKeyDown);
    return () => document.removeEventListener("keydown", onKeyDown);
  }, [model.handlers.onDocumentKeyDown]);
  const onBlur = (event) => {
    if (event.relatedTarget && !nodeBelongs(containerRef.current, event.relatedTarget)) {
      model.handlers.onContainerBlur();
    }
  };
  const mergedRef = useMergeRefs(containerRef, __internalRootRef);
  return import_react168.default.createElement(ChartWrapper, Object.assign({ ref: mergedRef }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default57.root), fitHeight: !!fitHeight, contentMinHeight: height, defaultFilter: showFilters && !hideFilter ? import_react168.default.createElement(area_chart_filter_default, { model, filterLabel: i18nStrings.filterLabel, filterPlaceholder: i18nStrings.filterPlaceholder, filterSelectedAriaLabel: i18nStrings.filterSelectedAriaLabel }) : null, additionalFilters: showFilters ? additionalFilters : null, reserveFilterSpace: !!reserveFilterSpace, reserveLegendSpace: !!reserveLegendSpace, chartStatus: import_react168.default.createElement(ChartStatusContainer, { isEmpty, isNoMatch, showChart, statusType, empty, noMatch, loadingText, errorText, recoveryText, onRecoveryClick }), chart: showChart ? import_react168.default.createElement(chart_container_default, { model, autoWidth: setWidth, detailPopoverSize, detailPopoverFooter, xTitle, yTitle, xTickFormatter, yTickFormatter, detailTotalFormatter, ariaLabel, ariaLabelledby, ariaDescription, i18nStrings, fitHeight, hasFilters: !!showFilters, minHeight: height, isRTL: isRtl }) : null, legend: showLegend ? import_react168.default.createElement(area_chart_legend_default, { plotContainerRef: containerRef, model, legendTitle, ariaLabel: i18nStrings.legendAriaLabel }) : null, onBlur }));
}

// node_modules/@cloudscape-design/components/area-chart/index.js
function AreaChart(_a) {
  var { height = 500, xScaleType = "linear", yScaleType = "linear", statusType = "finished", detailPopoverSize = "medium", i18nStrings = {} } = _a, props2 = __rest(_a, ["height", "xScaleType", "yScaleType", "statusType", "detailPopoverSize", "i18nStrings"]);
  const baseComponentProps = useBaseComponent("AreaChart", {
    props: {
      detailPopoverSize,
      hideLegend: props2.hideLegend,
      hideFilter: props2.hideFilter,
      fitHeight: props2.fitHeight,
      xScaleType,
      yScaleType
    }
  });
  return import_react169.default.createElement(InternalAreaChart, Object.assign({ height, xScaleType, yScaleType, statusType, detailPopoverSize, i18nStrings }, props2, baseComponentProps));
}
applyDisplayName(AreaChart, "AreaChart");
var area_chart_default = AreaChart;

// node_modules/@cloudscape-design/components/attribute-editor/index.js
var import_react173 = __toESM(require_react());

// node_modules/@cloudscape-design/components/attribute-editor/internal.js
var import_react172 = __toESM(require_react());

// node_modules/@cloudscape-design/components/attribute-editor/additional-info.js
var import_react170 = __toESM(require_react());

// node_modules/@cloudscape-design/components/attribute-editor/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/attribute-editor/styles.scoped.css";
var styles_css_default73 = {
  "empty-appear": "awsui_empty-appear_n4qlp_iv7e8_153",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_n4qlp_iv7e8_1",
  "root": "awsui_root_n4qlp_iv7e8_175",
  "empty": "awsui_empty_n4qlp_iv7e8_153",
  "row": "awsui_row_n4qlp_iv7e8_218",
  "divider": "awsui_divider_n4qlp_iv7e8_222",
  "row-control": "awsui_row-control_n4qlp_iv7e8_227",
  "field": "awsui_field_n4qlp_iv7e8_231",
  "additional-info": "awsui_additional-info_n4qlp_iv7e8_235",
  "add-row": "awsui_add-row_n4qlp_iv7e8_281",
  "add-button": "awsui_add-button_n4qlp_iv7e8_285",
  "remove-button-container": "awsui_remove-button-container_n4qlp_iv7e8_289",
  "remove-button-field-padding": "awsui_remove-button-field-padding_n4qlp_iv7e8_293",
  "remove-button-own-row": "awsui_remove-button-own-row_n4qlp_iv7e8_297",
  "remove-button": "awsui_remove-button_n4qlp_iv7e8_289"
};

// node_modules/@cloudscape-design/components/attribute-editor/additional-info.js
var AdditionalInfo = ({ children, id }) => import_react170.default.createElement(
  internal_default2,
  { "data-testid": "info-live-region" },
  import_react170.default.createElement("div", { id, className: styles_css_default73["additional-info"] }, children)
);

// node_modules/@cloudscape-design/components/attribute-editor/grid-defaults.js
var gridDefaults = {
  1: [
    {
      breakpoint: "xxs",
      rows: [[3]]
    },
    {
      rows: [[1]],
      removeButton: {
        ownRow: true
      }
    }
  ],
  2: [
    {
      breakpoint: "xs",
      rows: [[3, 3]],
      removeButton: {
        width: 2
      }
    },
    {
      breakpoint: "xxs",
      rows: [[1, 1]],
      removeButton: {
        ownRow: true
      }
    },
    {
      rows: [[1], [1]]
    }
  ],
  3: [
    {
      breakpoint: "xs",
      rows: [[3, 3, 3]],
      removeButton: {
        width: 3
      }
    },
    {
      breakpoint: "xxs",
      rows: [[1, 1], [1]],
      removeButton: {
        ownRow: true
      }
    },
    {
      rows: [[1], [1], [1]]
    }
  ],
  4: [
    {
      breakpoint: "xs",
      rows: [[3, 3, 3, 3]],
      removeButton: {
        width: 4
      }
    },
    {
      breakpoint: "xxs",
      rows: [
        [1, 1],
        [1, 1]
      ]
    },
    {
      rows: [[1], [1], [1], [1]]
    }
  ],
  5: [
    {
      breakpoint: "s",
      rows: [[3, 3, 3, 3, 3]],
      removeButton: {
        width: 5
      }
    },
    {
      breakpoint: "xs",
      rows: [
        [1, 1, 1],
        [1, 1]
      ]
    },
    {
      breakpoint: "xxs",
      rows: [[1, 1], [1, 1], [1]]
    },
    {
      rows: [[1], [1], [1], [1], [1]]
    }
  ],
  6: [
    {
      breakpoint: "s",
      rows: [[3, 3, 3, 3, 3, 3]],
      removeButton: {
        width: 6
      }
    },
    {
      breakpoint: "xs",
      rows: [
        [1, 1, 1],
        [1, 1, 1]
      ]
    },
    {
      breakpoint: "xxs",
      rows: [
        [1, 1],
        [1, 1],
        [1, 1]
      ]
    },
    {
      rows: [[1], [1], [1], [1], [1], [1]]
    }
  ]
};

// node_modules/@cloudscape-design/components/attribute-editor/row.js
var import_react171 = __toESM(require_react());

// node_modules/@cloudscape-design/components/attribute-editor/utils.js
function getItemGridColumns(layout, itemIndex) {
  let i2 = 0;
  for (const row of layout.rows) {
    let gridColumnStart = 1;
    for (const columnWidth of row) {
      if (i2 === itemIndex) {
        return { gridColumnStart, gridColumnEnd: gridColumnStart + columnWidth };
      } else {
        gridColumnStart += columnWidth;
      }
      i2++;
    }
  }
  return { gridColumnStart: 1, gridColumnEnd: 1 };
}
function getRemoveButtonGridColumns(layout, previousGridColumnEnd) {
  var _a, _b;
  const maxColumns = layout.rows.reduce((max3, columns) => Math.max(max3, columns.reduce((sum2, col) => sum2 + col, 0)), 0);
  if (isRemoveButtonOnSameLine(layout)) {
    const removeButtonWidth = typeof ((_a = layout.removeButton) === null || _a === void 0 ? void 0 : _a.width) === "number" ? (_b = layout.removeButton) === null || _b === void 0 ? void 0 : _b.width : 1;
    return {
      gridColumnStart: previousGridColumnEnd,
      gridColumnEnd: previousGridColumnEnd + removeButtonWidth
    };
  }
  return { gridColumnStart: 1, gridColumnEnd: maxColumns + 1 };
}
function isRemoveButtonOnSameLine(layout) {
  var _a;
  return layout.rows.length === 1 && !((_a = layout.removeButton) === null || _a === void 0 ? void 0 : _a.ownRow);
}
function getGridTemplateColumns(layout) {
  var _a, _b, _c;
  const totalColumnUnits = layout.rows.reduce((maxCols, row) => Math.max(maxCols, row.reduce((cols, col) => cols + col, 0)), 0);
  const removeButtonColumn = isRemoveButtonOnSameLine(layout) ? ((_a = layout.removeButton) === null || _a === void 0 ? void 0 : _a.width) === "auto" ? "max-content" : `${(_c = (_b = layout.removeButton) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 1}fr` : "";
  return `repeat(${totalColumnUnits}, 1fr) ${removeButtonColumn}`;
}

// node_modules/@cloudscape-design/components/attribute-editor/row.js
function render(item, itemIndex, slot) {
  if (isSlotFunction(slot)) {
    return slot(item, itemIndex);
  }
  return slot;
  function isSlotFunction(slot2) {
    return typeof slot2 === "function";
  }
}
var Row = import_react171.default.memo(({ breakpoint, item, definition, layout, i18nStrings = {}, index, removable, removeButtonText, removeButtonRefs, customRowActions, onRemoveButtonClick, removeButtonAriaLabel }) => {
  var _a;
  const i18n = useInternalI18n("attribute-editor");
  const handleRemoveClick = (0, import_react171.useCallback)(() => {
    fireNonCancelableEvent(onRemoveButtonClick, { itemIndex: index });
  }, [onRemoveButtonClick, index]);
  const firstControlId = useUniqueId("first-control-id-");
  const buttonRef = (ref) => {
    removeButtonRefs[index] = ref !== null && ref !== void 0 ? ref : void 0;
  };
  let gridColumnStart = 1;
  let gridColumnEnd = 1;
  const removeButtonOnSameLine = isRemoveButtonOnSameLine(layout);
  const customActions = customRowActions === null || customRowActions === void 0 ? void 0 : customRowActions({
    item,
    itemIndex: index,
    ref: buttonRef,
    breakpoint,
    ownRow: !removeButtonOnSameLine
  });
  return import_react171.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default73.row, layout.rows.length === 1 && styles_css_default73["single-row"]), role: "group", "aria-labelledby": `${firstControlId}-label ${firstControlId}` },
    definition.map(({ info, label, constraintText, errorText, warningText, control }, defIndex) => {
      ({ gridColumnStart, gridColumnEnd } = getItemGridColumns(layout, defIndex));
      return import_react171.default.createElement(InternalFormField, { key: defIndex, className: styles_css_default73.field, __style: { gridColumnStart, gridColumnEnd }, label, info, constraintText: render(item, index, constraintText), errorText: render(item, index, errorText), warningText: render(item, index, warningText), stretch: true, i18nStrings: {
        errorIconAriaLabel: i18nStrings.errorIconAriaLabel,
        warningIconAriaLabel: i18nStrings.warningIconAriaLabel
      }, __hideLabel: index !== 0 && removeButtonOnSameLine, controlId: defIndex === 0 ? firstControlId : void 0 }, render(item, index, control));
    }),
    import_react171.default.createElement("div", { className: clsx_m_default(styles_css_default73["remove-button-container"], {
      [styles_css_default73["remove-button-field-padding"]]: removeButtonOnSameLine && index === 0,
      [styles_css_default73["remove-button-own-row"]]: !removeButtonOnSameLine
    }), style: Object.assign({}, getRemoveButtonGridColumns(layout, gridColumnEnd)) }, removable && (customActions !== void 0 ? customActions : import_react171.default.createElement(InternalButton, { className: styles_css_default73["remove-button"], formAction: "none", ref: buttonRef, ariaLabel: (_a = removeButtonAriaLabel !== null && removeButtonAriaLabel !== void 0 ? removeButtonAriaLabel : i18nStrings.removeButtonAriaLabel) === null || _a === void 0 ? void 0 : _a(item), onClick: handleRemoveClick }, i18n("removeButtonText", removeButtonText)))),
    !removeButtonOnSameLine && import_react171.default.createElement("div", { className: styles_css_default73.divider })
  );
});

// node_modules/@cloudscape-design/components/attribute-editor/internal.js
var InternalAttributeEditor = import_react172.default.forwardRef((_a, ref) => {
  var { additionalInfo, disableAddButton, definition = [{}], gridLayout, items, isItemRemovable: isItemRemovable2 = () => true, empty, addButtonText, addButtonVariant, removeButtonText, removeButtonAriaLabel, customRowActions, i18nStrings, onAddButtonClick, onRemoveButtonClick, __internalRootRef = null } = _a, props2 = __rest(_a, ["additionalInfo", "disableAddButton", "definition", "gridLayout", "items", "isItemRemovable", "empty", "addButtonText", "addButtonVariant", "removeButtonText", "removeButtonAriaLabel", "customRowActions", "i18nStrings", "onAddButtonClick", "onRemoveButtonClick", "__internalRootRef"]);
  const removeButtonRefs = (0, import_react172.useRef)([]);
  const addButtonRef = (0, import_react172.useRef)(null);
  const wasNonEmpty = (0, import_react172.useRef)(false);
  const [removalAnnouncement, setRemovalAnnouncement] = (0, import_react172.useState)("");
  const baseProps = getBaseProps(props2);
  const isEmpty = items && items.length === 0;
  wasNonEmpty.current = wasNonEmpty.current || !isEmpty;
  (0, import_react172.useImperativeHandle)(ref, () => ({
    focusRemoveButton(rowIndex) {
      var _a2;
      (_a2 = removeButtonRefs.current[rowIndex]) === null || _a2 === void 0 ? void 0 : _a2.focus();
    },
    focusAddButton() {
      var _a2;
      (_a2 = addButtonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }));
  const additionalInfoId = useUniqueId("attribute-editor-info");
  const infoAriaDescribedBy = additionalInfo ? additionalInfoId : void 0;
  const prevItemsLength = usePrevious(items.length);
  import_react172.default.useEffect(() => {
    if (prevItemsLength && prevItemsLength > items.length && (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.itemRemovedAriaLive)) {
      setRemovalAnnouncement(i18nStrings.itemRemovedAriaLive);
    } else {
      setRemovalAnnouncement("");
    }
  }, [items, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.itemRemovedAriaLive]);
  if (!gridLayout) {
    gridLayout = gridDefaults[definition.length];
    if (!gridLayout) {
      console.warn("AttributeEditor", "`gridLayout` is required for more than 6 attributes. Cannot render.");
      gridLayout = [];
    }
  }
  const gridLayoutBreakpoints = gridLayout.reduce((acc, layout) => Object.assign(Object.assign({}, acc), { [layout.breakpoint || "default"]: layout }), {});
  const [breakpoint, breakpointRef] = useContainerBreakpoints(Object.keys(gridLayoutBreakpoints));
  const mergedRef = useMergeRefs(breakpointRef, __internalRootRef);
  const gridLayoutForBreakpoint = matchBreakpointMapping(gridLayoutBreakpoints, breakpoint || "default");
  if (!gridLayoutForBreakpoint) {
    console.warn("AttributeEditor", `No \`gridLayout\` entry found for breakpoint ${breakpoint}. Cannot render.`);
    return import_react172.default.createElement("div", null);
  }
  const totalColumnsInLayout = gridLayoutForBreakpoint.rows.reduce((total, columns) => total + columns.length, 0);
  if (totalColumnsInLayout !== definition.length) {
    console.warn("AttributeEditor", `Incorrect number of columns in layout (${totalColumnsInLayout}) for definition (${definition.length}). Cannot render.`);
    return import_react172.default.createElement("div", null);
  }
  return import_react172.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(baseProps.className, styles_css_default73.root), style: { gridTemplateColumns: getGridTemplateColumns(gridLayoutForBreakpoint) } }),
    isEmpty && import_react172.default.createElement("div", { className: clsx_m_default(styles_css_default73.empty, wasNonEmpty.current && styles_css_default73["empty-appear"]) }, empty),
    items.map((item, index) => import_react172.default.createElement(Row, { key: index, index, breakpoint, layout: gridLayoutForBreakpoint, item, definition, i18nStrings, removable: isItemRemovable2(item), removeButtonText, removeButtonRefs: removeButtonRefs.current, customRowActions, onRemoveButtonClick, removeButtonAriaLabel })),
    import_react172.default.createElement(
      "div",
      { className: styles_css_default73["add-row"] },
      import_react172.default.createElement(InternalButton, {
        className: styles_css_default73["add-button"],
        disabled: disableAddButton,
        // Using aria-disabled="true" and tabindex="-1" instead of "disabled"
        // because focus can be dynamically moved to this button by calling
        // `focusAddButton()` on the ref.
        __nativeAttributes: disableAddButton ? { tabIndex: -1 } : {},
        __focusable: true,
        onClick: onAddButtonClick,
        formAction: "none",
        ref: addButtonRef,
        ariaDescribedby: infoAriaDescribedBy,
        variant: addButtonVariant,
        iconName: addButtonVariant === "inline-link" ? "add-plus" : void 0
      }, addButtonText),
      import_react172.default.createElement(internal_default2, { "data-testid": "removal-announcement", tagName: "span", hidden: true, delay: 5, key: items.length }, removalAnnouncement),
      !!additionalInfo && import_react172.default.createElement(AdditionalInfo, { id: infoAriaDescribedBy }, additionalInfo)
    )
  );
});
var internal_default13 = InternalAttributeEditor;

// node_modules/@cloudscape-design/components/attribute-editor/index.js
var AttributeEditor = import_react173.default.forwardRef((_a, ref) => {
  var _b, _c;
  var { items = [], addButtonVariant = "normal", isItemRemovable: isItemRemovable2 = () => true } = _a, props2 = __rest(_a, ["items", "addButtonVariant", "isItemRemovable"]);
  const baseComponentProps = useBaseComponent("AttributeEditor", {
    props: {
      addButtonVariant
    },
    metadata: {
      definitionItems: (_c = (_b = props2.definition) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : null,
      hasGridLayout: !!props2.gridLayout,
      hasCustomRowActions: !!props2.customRowActions
    }
  });
  return import_react173.default.createElement(internal_default13, Object.assign({ items, isItemRemovable: isItemRemovable2, addButtonVariant }, props2, baseComponentProps, { ref }));
});
applyDisplayName(AttributeEditor, "AttributeEditor");
var attribute_editor_default = AttributeEditor;

// node_modules/@cloudscape-design/components/autosuggest/index.js
var import_react182 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/internal.js
var import_react181 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/autosuggest-input/index.js
var import_react174 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/autosuggest-input/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/autosuggest-input/styles.scoped.css";
var styles_css_default74 = {
  "dropdown-footer": "awsui_dropdown-footer_vm8qf_jxdvh_5",
  "dropdown-content": "awsui_dropdown-content_vm8qf_jxdvh_10"
};

// node_modules/@cloudscape-design/components/internal/components/autosuggest-input/index.js
var AutosuggestInput = import_react174.default.forwardRef((_a, ref) => {
  var { value, onChange, onBlur, onFocus, onKeyUp, onKeyDown, name, placeholder, disabled, readOnly, autoFocus, ariaLabel, ariaRequired, disableBrowserAutocorrect = false, expandToViewport, ariaControls, ariaActivedescendant, clearAriaLabel, dropdownExpanded = true, dropdownContentKey, dropdownContentFocusable = false, dropdownContent = null, dropdownFooter = null, dropdownWidth, loopFocus, onCloseDropdown, onDelayedInput, onPressArrowDown, onPressArrowUp, onPressEnter, __internalRootRef } = _a, restProps = __rest(_a, ["value", "onChange", "onBlur", "onFocus", "onKeyUp", "onKeyDown", "name", "placeholder", "disabled", "readOnly", "autoFocus", "ariaLabel", "ariaRequired", "disableBrowserAutocorrect", "expandToViewport", "ariaControls", "ariaActivedescendant", "clearAriaLabel", "dropdownExpanded", "dropdownContentKey", "dropdownContentFocusable", "dropdownContent", "dropdownFooter", "dropdownWidth", "loopFocus", "onCloseDropdown", "onDelayedInput", "onPressArrowDown", "onPressArrowUp", "onPressEnter", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  const formFieldContext = useFormFieldContext(restProps);
  const inputRef = (0, import_react174.useRef)(null);
  const dropdownContentRef = (0, import_react174.useRef)(null);
  const dropdownFooterRef = (0, import_react174.useRef)(null);
  const preventOpenOnFocusRef = (0, import_react174.useRef)(false);
  const preventCloseOnBlurRef = (0, import_react174.useRef)(false);
  const [open, setOpen] = (0, import_react174.useState)(false);
  const openDropdown = () => !readOnly && setOpen(true);
  const closeDropdown = () => {
    setOpen(false);
    fireNonCancelableEvent(onCloseDropdown, null);
  };
  (0, import_react174.useImperativeHandle)(ref, () => ({
    focus(options) {
      var _a2;
      if (options === null || options === void 0 ? void 0 : options.preventDropdown) {
        preventOpenOnFocusRef.current = true;
      }
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    },
    select() {
      var _a2;
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.select();
    },
    open: openDropdown,
    close: closeDropdown
  }));
  const handleBlur = () => {
    if (!preventCloseOnBlurRef.current) {
      closeDropdown();
      fireNonCancelableEvent(onBlur, null);
    }
  };
  const handleFocus = () => {
    if (!preventOpenOnFocusRef.current) {
      openDropdown();
      fireNonCancelableEvent(onFocus, null);
    }
    preventOpenOnFocusRef.current = false;
  };
  const fireKeydown = (event) => fireCancelableEvent(onKeyDown, event.detail, event);
  const handleKeyDown = (event) => {
    switch (event.detail.keyCode) {
      case KeyCode.down: {
        onPressArrowDown === null || onPressArrowDown === void 0 ? void 0 : onPressArrowDown();
        openDropdown();
        event.preventDefault();
        break;
      }
      case KeyCode.up: {
        onPressArrowUp === null || onPressArrowUp === void 0 ? void 0 : onPressArrowUp();
        openDropdown();
        event.preventDefault();
        break;
      }
      case KeyCode.enter: {
        if (open) {
          if (!(onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter())) {
            closeDropdown();
          }
          event.preventDefault();
        }
        fireKeydown(event);
        break;
      }
      case KeyCode.escape: {
        if (open) {
          event.stopPropagation();
          closeDropdown();
        } else if (value) {
          event.stopPropagation();
          fireNonCancelableEvent(onChange, { value: "" });
        }
        event.preventDefault();
        fireKeydown(event);
        break;
      }
      default: {
        fireKeydown(event);
      }
    }
  };
  const handleChange = (value2) => {
    openDropdown();
    fireNonCancelableEvent(onChange, { value: value2 });
  };
  const handleDelayedInput = (value2) => {
    fireNonCancelableEvent(onDelayedInput, { value: value2 });
  };
  const handleDropdownMouseDown = (event) => {
    if (!dropdownContentFocusable) {
      event.preventDefault();
    } else {
      preventCloseOnBlurRef.current = true;
      requestAnimationFrame(() => {
        preventCloseOnBlurRef.current = false;
      });
    }
  };
  const expanded = open && dropdownExpanded;
  const nativeAttributes = {
    name,
    placeholder,
    autoFocus,
    onClick: openDropdown,
    role: "combobox",
    "aria-autocomplete": "list",
    "aria-expanded": expanded,
    "aria-controls": open ? ariaControls : void 0,
    // 'aria-owns' needed for safari+vo to announce activedescendant content
    "aria-owns": open ? ariaControls : void 0,
    "aria-label": ariaLabel,
    "aria-activedescendant": ariaActivedescendant
  };
  (0, import_react174.useEffect)(() => {
    if (!open) {
      return;
    }
    const clickListener = (event) => {
      if (!nodeBelongs(inputRef.current, event.target) && !nodeBelongs(dropdownContentRef.current, event.target) && !nodeBelongs(dropdownFooterRef.current, event.target)) {
        closeDropdown();
      }
    };
    window.addEventListener("mousedown", clickListener);
    return () => {
      window.removeEventListener("mousedown", clickListener);
    };
  }, [open]);
  return import_react174.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default74.root), ref: __internalRootRef }),
    import_react174.default.createElement(dropdown_default, { minWidth: dropdownWidth, stretchWidth: !dropdownWidth, stretchBeyondTriggerWidth: true, contentKey: dropdownContentKey, onFocus: handleFocus, onBlur: handleBlur, trigger: import_react174.default.createElement(internal_default11, Object.assign({ type: "visualSearch", value, onChange: (event) => handleChange(event.detail.value), __onDelayedInput: (event) => handleDelayedInput(event.detail.value), onKeyDown: handleKeyDown, onKeyUp, disabled, disableBrowserAutocorrect, readOnly, ariaRequired, clearAriaLabel, ref: inputRef, autoComplete: false, __nativeAttributes: nativeAttributes }, formFieldContext)), onMouseDown: handleDropdownMouseDown, open: open && (!!dropdownContent || !!dropdownFooter), footer: dropdownFooterRef && import_react174.default.createElement("div", { ref: dropdownFooterRef, className: styles_css_default74["dropdown-footer"] }, open && dropdownFooter ? dropdownFooter : null), expandToViewport, loopFocus }, open && dropdownContent ? import_react174.default.createElement("div", { ref: dropdownContentRef, className: styles_css_default74["dropdown-content"] }, dropdownContent) : null)
  );
});
var autosuggest_input_default = AutosuggestInput;

// node_modules/@cloudscape-design/components/autosuggest/load-more-controller.js
var import_react175 = __toESM(require_react());
var useAutosuggestLoadMore = ({ options = [], statusType, onLoadItems }) => {
  const lastFilteringText = (0, import_react175.useRef)(null);
  const fireLoadMore = ({ firstPage, samePage, filteringText }) => {
    var _a;
    if (filteringText === void 0 || lastFilteringText.current !== filteringText) {
      if (filteringText !== void 0) {
        lastFilteringText.current = filteringText;
      }
      onLoadItems({ filteringText: (_a = lastFilteringText.current) !== null && _a !== void 0 ? _a : "", firstPage, samePage });
    }
  };
  const fireLoadMoreOnScroll = () => {
    if (options.length > 0 && statusType === "pending") {
      fireLoadMore({ firstPage: false, samePage: false });
    }
  };
  const fireLoadMoreOnRecoveryClick = () => fireLoadMore({ firstPage: false, samePage: true });
  const fireLoadMoreOnInputFocus = () => {
    var _a;
    return fireLoadMore({ firstPage: true, samePage: false, filteringText: (_a = lastFilteringText.current) !== null && _a !== void 0 ? _a : "" });
  };
  const fireLoadMoreOnInputChange = (filteringText) => fireLoadMore({ firstPage: true, samePage: false, filteringText });
  return { fireLoadMoreOnScroll, fireLoadMoreOnRecoveryClick, fireLoadMoreOnInputFocus, fireLoadMoreOnInputChange };
};

// node_modules/@cloudscape-design/components/autosuggest/options-controller.js
var import_react176 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/utils/utils.js
var isGroup2 = (option) => "type" in option && option.type === "parent";
var popLastGroup = (options) => {
  if (options.length) {
    const lastOption = options[options.length - 1];
    if (isGroup2(lastOption)) {
      options.pop();
    }
  }
};
var filterOptions2 = (options, text) => {
  const filteredOptions = options.reduce((filteredIn, option) => {
    if (isGroup2(option)) {
      popLastGroup(filteredIn);
      filteredIn.push(option);
    } else if (matchSingleOption(option, text)) {
      filteredIn.push(option);
    }
    return filteredIn;
  }, []);
  popLastGroup(filteredOptions);
  return filteredOptions;
};
var matchSingleOption = (option, text) => {
  const searchableFields2 = ["value", "label", "description", "labelTag"];
  const searchableTagFields = ["tags", "filteringTags"];
  const searchText = text.toLowerCase();
  const searchStrFieldsFn = (attr) => matchString(option[attr], searchText);
  const searchTagsFieldsFn = (attr) => {
    var _a;
    return (_a = option[attr]) === null || _a === void 0 ? void 0 : _a.some((value) => matchString(value, searchText));
  };
  return searchableFields2.some(searchStrFieldsFn) || searchableTagFields.some(searchTagsFieldsFn);
};
var matchString = (value, searchText) => {
  return value && value.toLowerCase().indexOf(searchText) !== -1;
};

// node_modules/@cloudscape-design/components/autosuggest/options-controller.js
var isHighlightable = (option) => {
  return !!option && option.type !== "parent";
};
var isInteractive2 = (option) => !!option && !option.disabled && option.type !== "parent";
var useAutosuggestItems = ({ options, filterValue, filterText, filteringType, enteredTextLabel, hideEnteredTextLabel, onSelectItem }) => {
  const i18n = useInternalI18n("autosuggest");
  const [showAll, setShowAll] = (0, import_react176.useState)(false);
  const { items, getItemGroup, getItemParent } = (0, import_react176.useMemo)(() => createItems(options), [options]);
  const enteredItemLabel = i18n("enteredTextLabel", enteredTextLabel === null || enteredTextLabel === void 0 ? void 0 : enteredTextLabel(filterValue), (format3) => format3({ value: filterValue }));
  if (!enteredItemLabel) {
    warnOnce("Autosuggest", "A value for enteredTextLabel must be provided.");
  }
  const filteredItems = (0, import_react176.useMemo)(() => {
    const filteredItems2 = filteringType === "auto" && !showAll ? filterOptions2(items, filterText) : [...items];
    if (filterValue && !hideEnteredTextLabel) {
      filteredItems2.unshift({
        value: filterValue,
        type: "use-entered",
        label: enteredItemLabel,
        option: { value: filterValue }
      });
    }
    generateTestIndexes(filteredItems2, getItemParent);
    return filteredItems2;
  }, [filteringType, showAll, items, filterText, filterValue, hideEnteredTextLabel, getItemParent, enteredItemLabel]);
  const [highlightedOptionState, highlightedOptionHandlers] = useHighlightedOption({
    options: filteredItems,
    isHighlightable
  });
  const selectHighlightedOptionWithKeyboard = () => {
    var _a;
    if (highlightedOptionState.highlightedOption && !isInteractive2(highlightedOptionState.highlightedOption)) {
      return false;
    }
    onSelectItem((_a = highlightedOptionState.highlightedOption) !== null && _a !== void 0 ? _a : {
      // put use-entered item as a fallback
      value: filterValue,
      type: "use-entered",
      option: { value: filterValue }
    });
    return true;
  };
  const highlightVisibleOptionWithMouse = (index) => {
    if (filteredItems[index] && isHighlightable(filteredItems[index])) {
      highlightedOptionHandlers.setHighlightedIndexWithMouse(index);
    }
  };
  const selectVisibleOptionWithMouse = (index) => {
    if (filteredItems[index] && isInteractive2(filteredItems[index])) {
      onSelectItem(filteredItems[index]);
    }
  };
  return [
    Object.assign(Object.assign({}, highlightedOptionState), { items: filteredItems, showAll, getItemGroup }),
    Object.assign(Object.assign({}, highlightedOptionHandlers), {
      setShowAll,
      selectHighlightedOptionWithKeyboard,
      highlightVisibleOptionWithMouse,
      selectVisibleOptionWithMouse
    })
  ];
};
function createItems(options) {
  const items = [];
  const itemToGroup = /* @__PURE__ */ new WeakMap();
  const getItemParent = (item) => itemToGroup.get(item);
  const getItemGroup = (item) => {
    var _a;
    return (_a = getItemParent(item)) === null || _a === void 0 ? void 0 : _a.option;
  };
  for (const option of options) {
    if (isGroup3(option)) {
      for (const item of flattenGroup(option)) {
        items.push(item);
      }
    } else {
      items.push(Object.assign(Object.assign({}, option), { option }));
    }
  }
  function flattenGroup(group) {
    const { options: options2 } = group, rest = __rest(group, ["options"]);
    let hasOnlyDisabledChildren = true;
    const groupItem = Object.assign(Object.assign({}, rest), { type: "parent", option: group });
    const items2 = [groupItem];
    for (const option of options2) {
      if (!option.disabled) {
        hasOnlyDisabledChildren = false;
      }
      const childOption = Object.assign(Object.assign({}, option), { type: "child", disabled: option.disabled || rest.disabled, option });
      items2.push(childOption);
      itemToGroup.set(childOption, groupItem);
    }
    items2[0].disabled = items2[0].disabled || hasOnlyDisabledChildren;
    return items2;
  }
  return { items, getItemGroup, getItemParent };
}
function isGroup3(optionOrGroup) {
  return "options" in optionOrGroup;
}

// node_modules/@cloudscape-design/components/autosuggest/options-list.js
var import_react180 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/plain-list.js
var import_react178 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/autosuggest-option.js
var import_react177 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/autosuggest/styles.scoped.css";
var styles_css_default75 = {
  "root": "awsui_root_12hwc_oboi4_5",
  "layout-strut": "awsui_layout-strut_12hwc_oboi4_9",
  "list-bottom": "awsui_list-bottom_12hwc_oboi4_15"
};

// node_modules/@cloudscape-design/components/autosuggest/autosuggest-option.js
var AutosuggestOption = (_a, ref) => {
  var { nativeAttributes = {}, highlightText, option, highlighted, highlightType, current, virtualPosition, padBottom, screenReaderContent, ariaSetsize, ariaPosinset } = _a, rest = __rest(_a, ["nativeAttributes", "highlightText", "option", "highlighted", "highlightType", "current", "virtualPosition", "padBottom", "screenReaderContent", "ariaSetsize", "ariaPosinset"]);
  const baseProps = getBaseProps(rest);
  const useEntered = "type" in option && option.type === "use-entered";
  const isParent = "type" in option && option.type === "parent";
  const isChild = "type" in option && option.type === "child";
  const { throughIndex, inGroupIndex, groupIndex } = getTestOptionIndexes(option) || {};
  let optionContent;
  if (useEntered) {
    optionContent = option.label;
    screenReaderContent = void 0;
  } else if (isParent) {
    optionContent = option.label;
  } else {
    const a11yProperties = {};
    if (nativeAttributes["aria-label"]) {
      a11yProperties["aria-label"] = nativeAttributes["aria-label"];
    }
    optionContent = import_react177.default.createElement(
      "div",
      Object.assign({}, a11yProperties),
      import_react177.default.createElement(option_default, { option, highlightedOption: highlighted, highlightText })
    );
  }
  return import_react177.default.createElement(selectable_item_default, Object.assign({}, baseProps, { className: styles_css_default75.option, ariaSelected: current, highlighted, disabled: option.disabled, hasBackground: useEntered, isParent, isChild, virtualPosition, "data-test-index": throughIndex, "data-in-group-index": inGroupIndex, "data-group-index": groupIndex, ref, padBottom, screenReaderContent, ariaSetsize, ariaPosinset, highlightType: highlightType.type, value: option.value }), optionContent);
};
var autosuggest_option_default = import_react177.default.memo(import_react177.default.forwardRef(AutosuggestOption));

// node_modules/@cloudscape-design/components/autosuggest/plain-list.js
var getOptionProps = (index, item, filteredItems, highlightedA11yProps, highlightedOption, hasDropdownStatus) => {
  const nativeAttributes = item === highlightedOption ? highlightedA11yProps : {};
  const baseOptionProps = getBaseProps(nativeAttributes);
  const isLastItem = index === filteredItems.length - 1;
  const isNotEnteredTextItem = filteredItems.length > 1;
  const padBottom = !hasDropdownStatus && isNotEnteredTextItem && isLastItem;
  return Object.assign({ nativeAttributes, padBottom }, baseOptionProps);
};
var PlainList2 = ({ autosuggestItemsState, handleLoadMore, menuProps, highlightedA11yProps, hasDropdownStatus, highlightText, listBottom, screenReaderContent }) => {
  const listRef = (0, import_react178.useRef)(null);
  (0, import_react178.useEffect)(() => {
    var _a;
    const item = (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`[data-mouse-target="${autosuggestItemsState.highlightedIndex}"]`);
    if (autosuggestItemsState.highlightType.moveFocus && item) {
      scrollElementIntoView(item);
    }
  }, [autosuggestItemsState.highlightType, autosuggestItemsState.highlightedIndex]);
  return import_react178.default.createElement(
    options_list_default,
    Object.assign({}, menuProps, { onLoadMore: handleLoadMore, open: true, ref: listRef }),
    autosuggestItemsState.items.map((item, index) => {
      const optionProps = getOptionProps(index, item, autosuggestItemsState.items, highlightedA11yProps, autosuggestItemsState.highlightedOption, hasDropdownStatus);
      return import_react178.default.createElement(autosuggest_option_default, Object.assign({ highlightText, option: item, highlighted: item === autosuggestItemsState.highlightedOption, current: item.value === highlightText, key: index, "data-mouse-target": index, screenReaderContent, highlightType: autosuggestItemsState.highlightType }, optionProps));
    }),
    listBottom ? import_react178.default.createElement("li", { role: "option", className: styles_css_default75["list-bottom"] }, listBottom) : null
  );
};
var plain_list_default2 = PlainList2;

// node_modules/@cloudscape-design/components/autosuggest/virtual-list.js
var import_react179 = __toESM(require_react());
var VirtualList2 = ({ autosuggestItemsState, handleLoadMore, menuProps, highlightedA11yProps, hasDropdownStatus, highlightText, listBottom, screenReaderContent }) => {
  const scrollRef = (0, import_react179.useRef)(null);
  const [width, strutRef] = useContainerQuery((rect) => rect.contentBoxWidth, []);
  (0, import_react179.useImperativeHandle)(strutRef, () => scrollRef.current);
  const rowVirtualizer = useVirtual2({
    items: autosuggestItemsState.items,
    parentRef: scrollRef,
    // estimateSize is a dependency of measurements memo. We update it to force full recalculation
    // when the height of any option could have changed:
    // 1: because the component got resized (width property got updated)
    // 2: because the option changed its content (highlightText property controls the highlight and the visibility of hidden tags)
    // eslint-disable-next-line react-hooks/exhaustive-deps
    estimateSize: (0, import_react179.useCallback)(() => 31, [width, highlightText])
  });
  (0, import_react179.useEffect)(() => {
    if (autosuggestItemsState.highlightType.moveFocus) {
      rowVirtualizer.scrollToIndex(autosuggestItemsState.highlightedIndex);
    }
  }, [autosuggestItemsState.highlightType, autosuggestItemsState.highlightedIndex, rowVirtualizer]);
  return import_react179.default.createElement(
    options_list_default,
    Object.assign({}, menuProps, { onLoadMore: handleLoadMore, ref: scrollRef, open: true }),
    import_react179.default.createElement("div", { "aria-hidden": "true", key: "total-size", className: styles_css_default75["layout-strut"], style: { height: rowVirtualizer.totalSize + (autosuggestItemsState.items.length === 1 ? 1 : 0) } }),
    rowVirtualizer.virtualItems.map((virtualRow) => {
      const { index, start, measureRef } = virtualRow;
      const item = autosuggestItemsState.items[index];
      const optionProps = getOptionProps(index, item, autosuggestItemsState.items, highlightedA11yProps, autosuggestItemsState.highlightedOption, hasDropdownStatus);
      return import_react179.default.createElement(autosuggest_option_default, Object.assign({ key: index, ref: measureRef, highlightText, option: item, highlighted: item === autosuggestItemsState.highlightedOption, current: item.value === highlightText, "data-mouse-target": index, virtualPosition: start + (index === 0 ? 1 : 0), screenReaderContent, ariaSetsize: autosuggestItemsState.items.length, ariaPosinset: index + 1, highlightType: autosuggestItemsState.highlightType }, optionProps));
    }),
    listBottom ? import_react179.default.createElement("li", { role: "option", className: styles_css_default75["list-bottom"] }, listBottom) : null
  );
};
var virtual_list_default2 = VirtualList2;

// node_modules/@cloudscape-design/components/autosuggest/options-list.js
var createMouseEventHandler = (handler) => (itemIndex) => {
  if (itemIndex > -1) {
    handler(itemIndex);
  }
};
function AutosuggestOptionsList({ statusType, autosuggestItemsState, autosuggestItemsHandlers, highlightedOptionId, highlightText, listId, controlId, handleLoadMore, hasDropdownStatus, virtualScroll, selectedAriaLabel, renderHighlightedAriaLive, listBottom, ariaDescribedby }) {
  var _a;
  const handleMouseUp = createMouseEventHandler(autosuggestItemsHandlers.selectVisibleOptionWithMouse);
  const handleMouseMove = createMouseEventHandler(autosuggestItemsHandlers.highlightVisibleOptionWithMouse);
  const ListComponent = virtualScroll ? virtual_list_default2 : plain_list_default2;
  const announcement = useAnnouncement({
    highlightText,
    announceSelected: ((_a = autosuggestItemsState.highlightedOption) === null || _a === void 0 ? void 0 : _a.value) === highlightText,
    highlightedOption: autosuggestItemsState.highlightedOption,
    getParent: (option) => autosuggestItemsState.getItemGroup(option),
    selectedAriaLabel,
    renderHighlightedAriaLive
  });
  return import_react180.default.createElement(ListComponent, { listBottom, handleLoadMore, autosuggestItemsState, highlightText, highlightedA11yProps: highlightedOptionId ? { id: highlightedOptionId } : {}, hasDropdownStatus, menuProps: {
    id: listId,
    ariaLabelledby: controlId,
    onMouseUp: handleMouseUp,
    onMouseMove: handleMouseMove,
    ariaDescribedby,
    statusType
  }, screenReaderContent: announcement });
}

// node_modules/@cloudscape-design/components/autosuggest/internal.js
var InternalAutosuggest = import_react181.default.forwardRef((props2, ref) => {
  var _a, _b;
  const { value, onChange, onBlur, onFocus, onKeyUp, onLoadItems, options, filteringType = "auto", statusType = "finished", placeholder, clearAriaLabel, name, disabled, disableBrowserAutocorrect = false, autoFocus, readOnly, ariaLabel, ariaRequired, enteredTextLabel, filteringResultsText, onKeyDown, virtualScroll, expandToViewport, onSelect, renderHighlightedAriaLive, __internalRootRef } = props2, restProps = __rest(props2, ["value", "onChange", "onBlur", "onFocus", "onKeyUp", "onLoadItems", "options", "filteringType", "statusType", "placeholder", "clearAriaLabel", "name", "disabled", "disableBrowserAutocorrect", "autoFocus", "readOnly", "ariaLabel", "ariaRequired", "enteredTextLabel", "filteringResultsText", "onKeyDown", "virtualScroll", "expandToViewport", "onSelect", "renderHighlightedAriaLive", "__internalRootRef"]);
  checkControlled("Autosuggest", "value", value, "onChange", onChange);
  checkOptionValueField("Autosuggest", "options", options);
  const autosuggestInputRef = (0, import_react181.useRef)(null);
  (0, import_react181.useImperativeHandle)(ref, () => ({
    focus: () => {
      var _a2;
      return (_a2 = autosuggestInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    },
    select: () => {
      var _a2;
      return (_a2 = autosuggestInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.select();
    }
  }), []);
  const i18n = useInternalI18n("autosuggest");
  const errorIconAriaLabel = i18n("errorIconAriaLabel", restProps.errorIconAriaLabel);
  const selectedAriaLabel = i18n("selectedAriaLabel", restProps.selectedAriaLabel);
  const recoveryText = i18n("recoveryText", restProps.recoveryText);
  if (restProps.recoveryText && !onLoadItems) {
    warnOnce("Autosuggest", "`onLoadItems` must be provided for `recoveryText` to be displayed.");
  }
  const [autosuggestItemsState, autosuggestItemsHandlers] = useAutosuggestItems({
    options: options || [],
    filterValue: value,
    filterText: value,
    filteringType,
    enteredTextLabel,
    hideEnteredTextLabel: false,
    onSelectItem: (option) => {
      var _a2;
      const value2 = option.value || "";
      fireNonCancelableEvent(onChange, { value: value2 });
      fireNonCancelableEvent(onSelect, {
        value: value2,
        selectedOption: option.type !== "use-entered" ? option.option : void 0
      });
      (_a2 = autosuggestInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.close();
    }
  });
  const autosuggestLoadMoreHandlers = useAutosuggestLoadMore({
    options,
    statusType,
    onLoadItems: (detail) => fireNonCancelableEvent(onLoadItems, detail)
  });
  const handleChange = (event) => {
    autosuggestItemsHandlers.setShowAll(false);
    autosuggestItemsHandlers.resetHighlightWithKeyboard();
    fireNonCancelableEvent(onChange, event.detail);
  };
  const handleDelayedInput = (event) => {
    autosuggestLoadMoreHandlers.fireLoadMoreOnInputChange(event.detail.value);
  };
  const handleBlur = () => {
    fireNonCancelableEvent(onBlur, null);
  };
  const handleFocus = () => {
    autosuggestItemsHandlers.setShowAll(true);
    autosuggestLoadMoreHandlers.fireLoadMoreOnInputFocus();
    fireNonCancelableEvent(onFocus, null);
  };
  const handleKeyUp = (event) => {
    fireCancelableEvent(onKeyUp, event.detail, event);
  };
  const handleKeyDown = (event) => {
    fireCancelableEvent(onKeyDown, event.detail, event);
  };
  const handlePressArrowDown = () => {
    if (autosuggestItemsState.items.length - 1 === autosuggestItemsState.highlightedIndex) {
      autosuggestItemsHandlers.goHomeWithKeyboard();
      return;
    }
    autosuggestItemsHandlers.moveHighlightWithKeyboard(1);
  };
  const handlePressArrowUp = () => {
    var _a2;
    if (((_a2 = autosuggestItemsState.highlightedOption) === null || _a2 === void 0 ? void 0 : _a2.type) === "child" && autosuggestItemsState.highlightedIndex === 1 || autosuggestItemsState.highlightedIndex === 0) {
      autosuggestItemsHandlers.goEndWithKeyboard();
      return;
    }
    autosuggestItemsHandlers.moveHighlightWithKeyboard(-1);
  };
  const handlePressEnter = () => {
    return autosuggestItemsHandlers.selectHighlightedOptionWithKeyboard();
  };
  const handleCloseDropdown = () => {
    autosuggestItemsHandlers.resetHighlightWithKeyboard();
  };
  const handleRecoveryClick = () => {
    var _a2;
    autosuggestLoadMoreHandlers.fireLoadMoreOnRecoveryClick();
    (_a2 = autosuggestInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  };
  const formFieldContext = useFormFieldContext(restProps);
  const selfControlId = useUniqueId("input");
  const footerControlId = useUniqueId("footer");
  const controlId = (_a = formFieldContext.controlId) !== null && _a !== void 0 ? _a : selfControlId;
  const listId = useUniqueId("list");
  const highlightedOptionIdSource = useUniqueId();
  const highlightedOptionId = autosuggestItemsState.highlightedOption ? highlightedOptionIdSource : void 0;
  const isEmpty = !value && !autosuggestItemsState.items.length;
  const isFiltered = !!value && value.length !== 0;
  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(autosuggestItemsState.items.length, (_b = options === null || options === void 0 ? void 0 : options.length) !== null && _b !== void 0 ? _b : 0) : void 0;
  const dropdownStatus = useDropdownStatus(Object.assign(Object.assign({}, props2), {
    isEmpty,
    isFiltered,
    recoveryText,
    errorIconAriaLabel,
    onRecoveryClick: handleRecoveryClick,
    filteringResultsText: filteredText,
    hasRecoveryCallback: !!onLoadItems
  }));
  const shouldRenderDropdownContent = !isEmpty || !!dropdownStatus.content;
  return import_react181.default.createElement(autosuggest_input_default, Object.assign({}, restProps, { className: clsx_m_default(styles_css_default75.root, restProps.className), ref: autosuggestInputRef, __internalRootRef, value, onChange: handleChange, onBlur: handleBlur, onFocus: handleFocus, onKeyUp: handleKeyUp, onKeyDown: handleKeyDown, name, controlId, placeholder, disabled, readOnly, autoFocus, ariaLabel, ariaRequired, clearAriaLabel, disableBrowserAutocorrect, expandToViewport, ariaControls: listId, ariaActivedescendant: highlightedOptionId, dropdownExpanded: shouldRenderDropdownContent, dropdownContent: shouldRenderDropdownContent && import_react181.default.createElement(AutosuggestOptionsList, { statusType, autosuggestItemsState, autosuggestItemsHandlers, highlightedOptionId, highlightText: value, listId, controlId, handleLoadMore: autosuggestLoadMoreHandlers.fireLoadMoreOnScroll, hasDropdownStatus: dropdownStatus.content !== null, virtualScroll, selectedAriaLabel, renderHighlightedAriaLive, listBottom: !dropdownStatus.isSticky ? import_react181.default.createElement(dropdown_footer_default, { content: dropdownStatus.content, id: footerControlId }) : null, ariaDescribedby: dropdownStatus.content ? footerControlId : void 0 }), dropdownFooter: dropdownStatus.isSticky && dropdownStatus.content ? import_react181.default.createElement(dropdown_footer_default, { id: footerControlId, content: dropdownStatus.content, hasItems: autosuggestItemsState.items.length >= 1 }) : null, loopFocus: dropdownStatus.hasRecoveryButton, onCloseDropdown: handleCloseDropdown, onDelayedInput: handleDelayedInput, onPressArrowDown: handlePressArrowDown, onPressArrowUp: handlePressArrowUp, onPressEnter: handlePressEnter }));
});
var internal_default14 = InternalAutosuggest;

// node_modules/@cloudscape-design/components/autosuggest/index.js
var Autosuggest = import_react182.default.forwardRef((_a, ref) => {
  var { filteringType = "auto", statusType = "finished", disableBrowserAutocorrect = false } = _a, props2 = __rest(_a, ["filteringType", "statusType", "disableBrowserAutocorrect"]);
  const baseComponentProps = useBaseComponent("Autosuggest", {
    props: {
      autoFocus: props2.autoFocus,
      disableBrowserAutocorrect,
      expandToViewport: props2.expandToViewport,
      filteringType,
      readOnly: props2.readOnly,
      virtualScroll: props2.virtualScroll
    }
  });
  const componentAnalyticsMetadata2 = {
    name: "awsui.Autosuggest",
    label: "input",
    properties: {
      disabled: `${!!props2.disabled}`
    }
  };
  const externalProps = getExternalProps(props2);
  return import_react182.default.createElement(internal_default14, Object.assign({ filteringType, statusType, disableBrowserAutocorrect }, externalProps, baseComponentProps, { ref }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })));
});
applyDisplayName(Autosuggest, "Autosuggest");
var autosuggest_default = Autosuggest;

// node_modules/@cloudscape-design/components/badge/index.js
var import_react183 = __toESM(require_react());

// node_modules/@cloudscape-design/components/badge/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/badge/styles.scoped.css";
var styles_css_default76 = {
  "badge": "awsui_badge_1yjyg_lvwpe_145",
  "badge-color-grey": "awsui_badge-color-grey_1yjyg_lvwpe_188",
  "badge-color-green": "awsui_badge-color-green_1yjyg_lvwpe_191",
  "badge-color-blue": "awsui_badge-color-blue_1yjyg_lvwpe_194",
  "badge-color-red": "awsui_badge-color-red_1yjyg_lvwpe_197",
  "badge-color-severity-critical": "awsui_badge-color-severity-critical_1yjyg_lvwpe_200",
  "badge-color-severity-high": "awsui_badge-color-severity-high_1yjyg_lvwpe_204",
  "badge-color-severity-medium": "awsui_badge-color-severity-medium_1yjyg_lvwpe_208",
  "badge-color-severity-low": "awsui_badge-color-severity-low_1yjyg_lvwpe_212",
  "badge-color-severity-neutral": "awsui_badge-color-severity-neutral_1yjyg_lvwpe_216"
};

// node_modules/@cloudscape-design/components/badge/index.js
function Badge(_a) {
  var { color: color2 = "grey", children } = _a, rest = __rest(_a, ["color", "children"]);
  const { __internalRootRef } = useBaseComponent("Badge", { props: { color: color2 } });
  const baseProps = getBaseProps(rest);
  const className2 = clsx_m_default(baseProps.className, styles_css_default76.badge, styles_css_default76[`badge-color-${color2}`]);
  return import_react183.default.createElement("span", Object.assign({}, baseProps, { className: className2 }, { ref: __internalRootRef }), children);
}
applyDisplayName(Badge, "Badge");

// node_modules/@cloudscape-design/components/bar-chart/index.js
var import_react195 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/internal.js
var import_react194 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-container.js
var import_react192 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/vertical-grid-lines.js
var import_react184 = __toESM(require_react());
var vertical_grid_lines_default = (0, import_react184.memo)(VerticalGridLines);
function VerticalGridLines({ ticks: ticks2, scale, height }) {
  return import_react184.default.createElement("g", { "aria-hidden": "true" }, ticks2.map((tick) => {
    var _a;
    const x3 = (_a = scale.d3Scale(tick)) !== null && _a !== void 0 ? _a : NaN;
    return isFinite(x3) && import_react184.default.createElement("line", { key: tick, className: styles_css_default49.grid, x1: x3, y1: 0, x2: x3, y2: height });
  }));
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/bar-groups.js
var import_react185 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/mixed-line-bar-chart/styles.scoped.css";
var styles_css_default77 = {
  "series": "awsui_series_1yz9c_v68e6_189",
  "series--bar": "awsui_series--bar_1yz9c_v68e6_190",
  "series__rect": "awsui_series__rect_1yz9c_v68e6_190",
  "exiting": "awsui_exiting_1yz9c_v68e6_207",
  "awsui-motion-fade-out-0": "awsui_awsui-motion-fade-out-0_1yz9c_v68e6_1",
  "root": "awsui_root_1yz9c_v68e6_229",
  "series--highlighted": "awsui_series--highlighted_1yz9c_v68e6_242",
  "series__bar--highlighted": "awsui_series__bar--highlighted_1yz9c_v68e6_243",
  "series--dimmed": "awsui_series--dimmed_1yz9c_v68e6_247",
  "series--threshold": "awsui_series--threshold_1yz9c_v68e6_251",
  "bar-group": "awsui_bar-group_1yz9c_v68e6_256"
};

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/bar-groups.js
var OUTLINE_PADDING = 2;
function BarGroups({ ariaLabel, isRefresh, isPopoverPinned, barGroups, highlightedGroupIndex, highlightedGroupRef }) {
  return import_react185.default.createElement("g", { role: "group", "aria-hidden": "true" }, barGroups.map((group, index) => import_react185.default.createElement("rect", { key: index, x: Math.max(0, group.position.x - OUTLINE_PADDING), y: Math.max(0, group.position.y - OUTLINE_PADDING), width: group.position.width + 2 * OUTLINE_PADDING, height: group.position.height + 2 * OUTLINE_PADDING, ref: index === highlightedGroupIndex ? highlightedGroupRef : void 0, rx: isRefresh ? 4 : 2, role: "button", "aria-label": ariaLabel, "aria-haspopup": true, "aria-expanded": isPopoverPinned, fill: "none", className: styles_css_default77["bar-group"] })));
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-popover.js
var import_react186 = __toESM(require_react());
var chart_popover_default2 = import_react186.default.forwardRef(MixedChartPopover);
function MixedChartPopover({ containerRef, trackRef, isOpen, isPinned, highlightDetails, footer, onDismiss, size = "medium", dismissAriaLabel, onMouseEnter, onMouseLeave, onBlur, setPopoverText }, popoverRef) {
  const [expandedSeries, setExpandedSeries] = (0, import_react186.useState)({});
  return import_react186.default.createElement(Transition, { in: isOpen }, (state, ref) => import_react186.default.createElement("div", { ref, className: clsx_m_default(state === "exiting" && styles_css_default77.exiting) }, (isOpen || state !== "exited") && highlightDetails && import_react186.default.createElement(
    chart_popover_default,
    { ref: popoverRef, title: highlightDetails.position, trackRef, trackKey: highlightDetails.position, dismissButton: isPinned, dismissAriaLabel, onDismiss, container: containerRef.current, size, onMouseEnter, onMouseLeave, onBlur, footer },
    import_react186.default.createElement(chart_series_details_default, { key: highlightDetails.position, details: highlightDetails.details, setPopoverText, expandedSeries: expandedSeries[highlightDetails.position], setExpandedState: (id, isExpanded) => setExpandedSeries((oldState) => {
      const expandedSeriesInCurrentCoordinate = new Set(oldState[highlightDetails.position]);
      if (isExpanded) {
        expandedSeriesInCurrentCoordinate.add(id);
      } else {
        expandedSeriesInCurrentCoordinate.delete(id);
      }
      return Object.assign(Object.assign({}, oldState), { [highlightDetails.position]: expandedSeriesInCurrentCoordinate });
    }) })
  )));
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/data-series.js
var import_react189 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/bar-series.js
var import_react187 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/create-one-side-rounded-rect-path.js
function createOneSideRoundedRectPath({ x: x3, y: y4, width, height }, radius, side) {
  const coordinates = [
    { x: x3, y: y4 },
    { x: x3 + width, y: y4 },
    { x: x3 + width, y: y4 + height },
    { x: x3, y: y4 + height }
  ];
  const startIndex = { left: 2, right: 0, top: 3, bottom: 1 }[side];
  let path2 = "";
  for (let i2 = startIndex; i2 < startIndex + coordinates.length + 1; i2++) {
    const start = coordinates[i2 % coordinates.length];
    const end = coordinates[(i2 + 1) % coordinates.length];
    const c2 = radius && i2 < startIndex + 3 ? Math.min(radius / Math.hypot(end.x - start.x, end.y - start.y), 0.5) : 0;
    if (i2 === startIndex) {
      path2 += `M${start.x * (1 - c2) + end.x * c2},${start.y * (1 - c2) + end.y * c2}`;
    }
    if (i2 > startIndex) {
      path2 += `Q${start.x},${start.y} ${start.x * (1 - c2) + end.x * c2},${start.y * (1 - c2) + end.y * c2}`;
    }
    if (i2 < startIndex + coordinates.length) {
      path2 += `L${start.x * c2 + end.x * (1 - c2)},${start.y * c2 + end.y * (1 - c2)}`;
    }
  }
  return path2 + "Z";
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/utils.js
var chartLegendMap = {
  line: "line",
  bar: "rectangle",
  threshold: "dashed"
};
var nextValidDomainIndex = (nextGroupIndex, barGroups, direction = 1) => {
  let index = nextGroupIndex;
  if (index < 0 || index >= barGroups.length) {
    index = 0;
  }
  do {
    if (barGroups[index].isValid && barGroups[index].hasData) {
      return index;
    }
    index += direction;
    if (index >= barGroups.length) {
      index = 0;
    } else if (index < 0) {
      index = barGroups.length - 1;
    }
  } while (index !== nextGroupIndex);
  return 0;
};
function findNavigableSeries(series) {
  const navigableSeries = [];
  let navigableBarSeriesIndex = -1;
  series.forEach((internalSeries) => {
    if (internalSeries.series.type === "bar") {
      if (navigableBarSeriesIndex === -1) {
        navigableBarSeriesIndex = navigableSeries.length;
        navigableSeries.push(internalSeries.series);
      }
    } else {
      navigableSeries.push(internalSeries.series);
    }
  });
  return { navigableSeries, navigableBarSeriesIndex };
}
var matchesX = (x1, x22) => {
  if (x1 instanceof Date && x22 instanceof Date) {
    return x1.getTime() === x22.getTime();
  }
  return x1 === x22;
};
function calculateStackedBarValues(dataBySeries) {
  var _a, _b, _c, _d;
  const negativeValues = /* @__PURE__ */ new Map();
  const positiveValues = /* @__PURE__ */ new Map();
  const values = /* @__PURE__ */ new Map();
  for (let seriesIndex = 0; seriesIndex < dataBySeries.length; seriesIndex++) {
    for (const datum of dataBySeries[seriesIndex]) {
      const key2 = getKeyValue(datum.x);
      if (datum.y < 0) {
        negativeValues.set(key2, ((_a = negativeValues.get(key2)) !== null && _a !== void 0 ? _a : 0) + datum.y);
      } else {
        positiveValues.set(key2, ((_b = positiveValues.get(key2)) !== null && _b !== void 0 ? _b : 0) + datum.y);
      }
      const seriesValue = (_c = datum.y < 0 ? negativeValues.get(key2) : positiveValues.get(key2)) !== null && _c !== void 0 ? _c : 0;
      const valuesByIndex = (_d = values.get(key2)) !== null && _d !== void 0 ? _d : /* @__PURE__ */ new Map();
      valuesByIndex.set(seriesIndex, seriesValue);
      values.set(key2, valuesByIndex);
    }
  }
  return values;
}
var getKeyValue = (key2) => key2 instanceof Date ? key2.getTime() : key2;
function isYThreshold(series) {
  return series.type === "threshold" && "y" in series;
}
function isXThreshold(series) {
  return series.type === "threshold" && "x" in series;
}
function isDataSeries(series) {
  return series.type === "line" || series.type === "bar";
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/bar-series.js
function BarSeries({ axis, series, color: color2, xScale, yScale, highlighted, dimmed, highlightedGroupIndex, totalSeriesCount, seriesIndex, plotSize, chartAreaClipPath, stackedBarValues, isRtl }) {
  const isRefresh = useVisualRefresh();
  const isStacked = !!stackedBarValues;
  const isVertical = axis === "x";
  const xCoordinates = (() => {
    var _a;
    if (series.type !== "bar" || !xScale.isCategorical()) {
      return [];
    }
    const yContinuosScale = yScale.d3Scale;
    const xPoints = series.data.map(({ x: x3 }) => xScale.d3Scale(x3) || NaN);
    const zeroY = (_a = yScale.d3Scale(0)) !== null && _a !== void 0 ? _a : NaN;
    const baseY = isFinite(zeroY) ? Math.min(plotSize, zeroY) : plotSize;
    let barWidth = xScale.d3Scale.bandwidth();
    const PADDING = 4;
    const MINWIDTH = 4;
    if (!isStacked && totalSeriesCount > 1) {
      barWidth = (barWidth - (totalSeriesCount - 1) * PADDING) / totalSeriesCount;
      barWidth = Math.max(barWidth, MINWIDTH);
    }
    return xPoints.map((x3, i2) => {
      var _a2, _b, _c, _d;
      const d3 = series.data[i2];
      const key2 = getKeyValue(d3.x);
      let barX = x3;
      let yValue = d3.y;
      let isRoundedStart = !isStacked;
      let isRoundedEnd = !isStacked;
      if (isStacked) {
        const allXValues = (_a2 = stackedBarValues.get(key2)) !== null && _a2 !== void 0 ? _a2 : /* @__PURE__ */ new Map();
        yValue = (_b = allXValues.get(seriesIndex)) !== null && _b !== void 0 ? _b : 0;
        const allXValuesSorted = Array.from(allXValues.values()).sort((a4, b2) => a4 - b2);
        isRoundedStart = yValue === allXValuesSorted[0];
        isRoundedEnd = yValue === allXValuesSorted[allXValuesSorted.length - 1];
      } else if (totalSeriesCount > 1) {
        barX += seriesIndex * (barWidth + PADDING);
      }
      yValue = yValue < 0 ? yValue - d3.y : yValue;
      return {
        x: barX,
        y: (_c = yContinuosScale(yValue)) !== null && _c !== void 0 ? _c : NaN,
        width: barWidth,
        height: Math.abs(((_d = yContinuosScale(d3.y)) !== null && _d !== void 0 ? _d : NaN) - baseY),
        isRoundedStart,
        isRoundedEnd
      };
    });
  })();
  const highlightedXValue = highlightedGroupIndex !== null ? xScale.domain[highlightedGroupIndex] : null;
  return import_react187.default.createElement("g", { "aria-label": series.title, clipPath: `url(#${chartAreaClipPath})`, className: clsx_m_default(styles_css_default77.series, styles_css_default77["series--bar"], {
    [styles_css_default77["series--highlighted"]]: highlighted,
    [styles_css_default77["series--dimmed"]]: dimmed
  }) }, xCoordinates.map(({ x: x3, y: y4, width, height, isRoundedStart, isRoundedEnd }, i2) => {
    if (!isFinite(x3) || !isFinite(height)) {
      return;
    }
    const baseHeightOffset = isStacked ? 3 : 0;
    const isSmallBar = height < 4;
    const heightOffset = isSmallBar ? 0 : baseHeightOffset;
    const widthOffset = 2;
    const rx = isRefresh ? isSmallBar ? 2 : 4 : 0;
    const placement = isVertical ? {
      x: x3 + widthOffset / 2,
      y: y4 + heightOffset / 2,
      width: width - widthOffset,
      height: height - heightOffset
    } : {
      x: y4 - (!isRtl ? height : 0) + heightOffset / 2,
      y: x3 + widthOffset / 2,
      width: height - heightOffset,
      height: width - widthOffset
    };
    const className2 = clsx_m_default(styles_css_default77.series__rect, {
      [styles_css_default77["series--dimmed"]]: highlightedXValue !== null && !matchesX(highlightedXValue, series.data[i2].x)
    });
    const styleProps = { fill: color2, className: className2 };
    let side = "none";
    if (isRoundedStart && isRoundedEnd) {
      side = "all";
    } else if (!isRoundedStart && !isRoundedEnd) {
      side = "none";
    } else if (isVertical) {
      side = isRoundedStart ? "bottom" : "top";
    } else if (!isRtl) {
      side = isRoundedStart ? "left" : "right";
    } else {
      side = isRoundedStart ? "right" : "left";
    }
    if (side === "all") {
      return import_react187.default.createElement("rect", Object.assign({ key: i2 }, placement, styleProps, { rx }));
    }
    if (side === "none") {
      return import_react187.default.createElement("rect", Object.assign({ key: i2 }, placement, styleProps, { rx: 0 }));
    }
    return import_react187.default.createElement("path", Object.assign({ key: i2, d: createOneSideRoundedRectPath(placement, rx, side) }, styleProps));
  }));
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/line-series.js
var import_react188 = __toESM(require_react());
function LineSeries({ axis, series, color: color2, xScale, yScale, chartAreaClipPath }) {
  var _a;
  const commonProps = { "aria-hidden": true, stroke: color2, clipPath: `url(#${chartAreaClipPath})` };
  if (series.type === "line") {
    const lineGenerator = line_default().x((d3) => {
      let x3 = xScale.d3Scale(d3.x) || 0;
      if (xScale.isCategorical()) {
        const offset = Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2;
        x3 += offset;
      }
      return x3;
    }).y((d3) => yScale.d3Scale(d3.y) || 0);
    const visibleData = series.data.filter(({ x: x3 }) => xScale.d3Scale(x3) !== void 0);
    return import_react188.default.createElement("path", Object.assign({}, commonProps, { d: lineGenerator(visibleData) || "" }));
  } else if (isYThreshold(series)) {
    const [x1, x22] = xScale.d3Scale.range();
    const y4 = yScale.d3Scale(series.y);
    const coordinates = axis === "x" ? { x1, x2: x22, y1: y4, y2: y4 } : { x1: y4, x2: y4, y1: x1, y2: x22 };
    return import_react188.default.createElement("line", Object.assign({}, commonProps, coordinates));
  } else if (isXThreshold(series)) {
    const [y1, y22] = yScale.d3Scale.range();
    const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;
    const x3 = ((_a = xScale.d3Scale(series.x)) !== null && _a !== void 0 ? _a : NaN) + xOffset;
    const coordinates = axis === "x" ? { x1: x3, x2: x3, y1, y2: y22 } : { x1: y1, x2: y22, y1: x3, y2: x3 };
    return import_react188.default.createElement("line", Object.assign({}, commonProps, coordinates));
  } else {
    return null;
  }
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/data-series.js
var STROKE_WIDTH = 2;
function DataSeries2({ axis, plotHeight, plotWidth, highlightedGroupIndex, highlightedSeries, stackedBars, isGroupNavigation, visibleSeries, xScale, yScale, isRtl }) {
  const chartAreaClipPath = useUniqueId("awsui-mixed-line-bar-chart__chart-area-");
  const lineAreaClipPath = useUniqueId("awsui-line-chart__chart-area-");
  const stackedBarValues = (0, import_react189.useMemo)(() => {
    if (!stackedBars) {
      return void 0;
    }
    const barData = [];
    visibleSeries.forEach(({ series }) => {
      if (series.type === "bar") {
        barData.push(series.data);
      } else {
        barData.push([]);
      }
    });
    return calculateStackedBarValues(barData);
  }, [visibleSeries, stackedBars]);
  return import_react189.default.createElement(
    import_react189.default.Fragment,
    null,
    import_react189.default.createElement(
      "defs",
      { "aria-hidden": "true" },
      import_react189.default.createElement(
        "clipPath",
        { id: chartAreaClipPath },
        import_react189.default.createElement("rect", { x: 0, y: 0, width: plotWidth, height: plotHeight })
      ),
      import_react189.default.createElement(
        "clipPath",
        { id: lineAreaClipPath },
        import_react189.default.createElement("rect", { x: 0, y: -STROKE_WIDTH / 2, width: plotWidth, height: plotHeight + STROKE_WIDTH })
      )
    ),
    import_react189.default.createElement("g", { "aria-hidden": isGroupNavigation ? true : void 0, role: "group" }, visibleSeries.map(({ series, color: color2 }, index) => {
      const isHighlighted = series === highlightedSeries;
      const isDimmed = !!highlightedSeries && !isHighlighted;
      switch (series.type) {
        case "line":
        case "threshold": {
          return import_react189.default.createElement(
            "g",
            { key: index, role: "group", "aria-label": series.title, className: clsx_m_default(styles_css_default77.series, styles_css_default77[`series--${series.type}`], {
              [styles_css_default77["series--highlighted"]]: isHighlighted,
              [styles_css_default77["series--dimmed"]]: isDimmed
            }) },
            import_react189.default.createElement(LineSeries, { axis, series, color: color2, xScale, yScale, chartAreaClipPath: lineAreaClipPath })
          );
        }
        case "bar":
          return import_react189.default.createElement(BarSeries, { key: index, axis, series, color: color2, totalSeriesCount: visibleSeries.filter((s4) => s4.series.type === "bar").length, seriesIndex: index, xScale, yScale, plotSize: axis === "y" ? plotWidth : plotHeight, highlighted: isHighlighted, dimmed: isDimmed, chartAreaClipPath, stackedBarValues, highlightedGroupIndex, isRtl });
      }
    }))
  );
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/domain.js
function computeDomainX2(series, xScaleType) {
  if (xScaleType === "categorical") {
    return series.reduce((acc, s4) => {
      if (isDataSeries(s4.series)) {
        s4.series.data.forEach(({ x: x3 }) => {
          if (acc.indexOf(x3) === -1) {
            acc.push(x3);
          }
        });
      }
      if (isXThreshold(s4.series)) {
        if (acc.indexOf(s4.series.x) === -1) {
          acc.push(s4.series.x);
        }
      }
      return acc;
    }, []);
  }
  return series.reduce((acc, curr) => {
    if (isYThreshold(curr.series)) {
      return acc;
    }
    if (isXThreshold(curr.series)) {
      const [min3, max3] = acc;
      const newMin = min3 === void 0 || min3 === null || curr.series.x < min3 ? curr.series.x : min3;
      const newMax = max3 === void 0 || max3 === null || max3 < curr.series.x ? curr.series.x : max3;
      return [newMin, newMax];
    }
    if (isDataSeries(curr.series)) {
      return curr.series.data.reduce(([min3, max3], { x: x3 }) => {
        const newMin = min3 === void 0 || min3 === null || x3 < min3 ? x3 : min3;
        const newMax = max3 === void 0 || max3 === null || max3 < x3 ? x3 : max3;
        return [newMin, newMax];
      }, acc);
    }
    return acc;
  }, []);
}
function find(arr, func) {
  for (let i2 = 0; i2 < arr.length; i2++) {
    const found = func(arr[i2]);
    if (found) {
      return arr[i2];
    }
  }
  return null;
}
function computeDomainY2(series, scaleType, stackedBars) {
  let _series = series;
  if (stackedBars) {
    const { positiveData, negativeData } = series.reduce((acc, curr) => {
      if (curr.series.type === "bar") {
        curr.series.data.forEach(({ x: x3, y: y4 }) => {
          const data = y4 < 0 ? acc.negativeData : acc.positiveData;
          const stackedDatum = find(data, (el) => matchesX(el.x, x3));
          if (stackedDatum) {
            stackedDatum.y += y4;
          } else {
            data.push({ x: x3, y: y4 });
          }
          return acc;
        });
      }
      return acc;
    }, {
      positiveData: [],
      negativeData: []
    });
    const stackedSeries = [
      {
        color: "",
        index: NaN,
        series: {
          type: "bar",
          title: "positive",
          data: positiveData
        }
      },
      {
        color: "",
        index: NaN,
        series: {
          type: "bar",
          title: "negative",
          data: negativeData
        }
      }
    ];
    _series = [...stackedSeries, ..._series.filter((s4) => s4.series.type !== "bar")];
  }
  const domain = _series.reduce((acc, curr) => {
    if (isYThreshold(curr.series)) {
      const [min3, max3] = acc;
      const newMin = min3 === void 0 || curr.series.y < min3 ? curr.series.y : min3;
      const newMax = max3 === void 0 || max3 < curr.series.y ? curr.series.y : max3;
      return [newMin, newMax];
    }
    if (isXThreshold(curr.series)) {
      return acc;
    }
    if (isDataSeries(curr.series)) {
      return curr.series.data.reduce(([min3, max3], { y: y4 }) => {
        const newMin = min3 === void 0 || y4 < min3 ? y4 : min3;
        const newMax = max3 === void 0 || max3 < y4 ? y4 : max3;
        return [newMin, newMax];
      }, acc);
    }
    return acc;
  }, [0, 0]);
  if (scaleType === "log" && domain[0] === 0 && domain[1] > 1) {
    return [1, domain[1]];
  }
  return domain;
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/format-highlighted.js
function formatHighlighted({ position, series, xTickFormatter, detailPopoverSeriesContent }) {
  const formattedPosition = xTickFormatter ? xTickFormatter(position) : position.toString();
  const details = [];
  series.forEach((s4) => {
    const detail = getSeriesDetail({ internalSeries: s4, targetX: position, detailPopoverSeriesContent });
    if (detail) {
      details.push(detail);
    }
  });
  return { position: formattedPosition, details };
}
function getSeriesDetail({ internalSeries, targetX, detailPopoverSeriesContent }) {
  var _a;
  const { series, color: color2 } = internalSeries;
  if (isXThreshold(series)) {
    return series.x === targetX ? {
      key: series.title,
      value: "",
      color: color2,
      markerType: "dashed"
    } : null;
  }
  if (isYThreshold(series)) {
    return {
      key: series.title,
      value: series.valueFormatter ? series.valueFormatter(series.y) : series.y,
      color: color2,
      markerType: "dashed"
    };
  }
  if (isDataSeries(series)) {
    for (const datum of series.data) {
      if (matchesX(targetX, datum.x)) {
        const customContent = detailPopoverSeriesContent ? detailPopoverSeriesContent({ series, x: targetX, y: datum.y }) : void 0;
        const hasSubItems = !!((_a = customContent === null || customContent === void 0 ? void 0 : customContent.subItems) === null || _a === void 0 ? void 0 : _a.length);
        const isExpandable = (customContent === null || customContent === void 0 ? void 0 : customContent.expandable) && hasSubItems;
        const isKeyString = typeof (customContent === null || customContent === void 0 ? void 0 : customContent.key) === "string";
        const key2 = (customContent === null || customContent === void 0 ? void 0 : customContent.key) && (!isExpandable || isKeyString) ? customContent.key : series.title;
        if ((customContent === null || customContent === void 0 ? void 0 : customContent.expandable) && !hasSubItems) {
          warnOnce("MixedLineBarChart", "`expandable` was set to `true` for a series without sub-items. This property will be ignored.");
        }
        if (isExpandable && !isKeyString) {
          warnOnce("MixedLineBarChart", "A ReactNode was used for the key of an expandable series. The series title will be used instead because nested interactive elements can cause accessiblity issues.");
        }
        if (!isKeyString && !isExpandable && (customContent === null || customContent === void 0 ? void 0 : customContent.value) && typeof customContent.value !== "string") {
          warnOnce("MixedLineBarChart", "Use a ReactNode for the key or the value of a series, but not for both. It is not recommended to use links for key and value at the same time.");
        }
        return {
          key: key2,
          value: (customContent === null || customContent === void 0 ? void 0 : customContent.value) || (series.valueFormatter ? series.valueFormatter(datum.y, targetX) : datum.y),
          color: color2,
          markerType: series.type === "line" ? "line" : "rectangle",
          subItems: customContent === null || customContent === void 0 ? void 0 : customContent.subItems,
          expandableId: isExpandable ? series.title : void 0
        };
      }
    }
  }
  return null;
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/hooks/use-mouse-hover.js
var MAX_HOVER_MARGIN2 = 6;
var POPOVER_DEADZONE2 = 12;
function useMouseHover({ plotRef, popoverRef, scaledSeries, barGroups, highlightPoint, highlightGroup, clearHighlightedSeries, isGroupNavigation, isHandlersDisabled, highlightX }) {
  const isMouseOverPopover = (event) => {
    var _a;
    if ((_a = popoverRef.current) === null || _a === void 0 ? void 0 : _a.firstChild) {
      const popoverPosition = popoverRef.current.firstChild.getBoundingClientRect();
      if (event.clientX > popoverPosition.x - POPOVER_DEADZONE2 && event.clientX < popoverPosition.x + popoverPosition.width + POPOVER_DEADZONE2 && event.clientY > popoverPosition.y - POPOVER_DEADZONE2 && event.clientY < popoverPosition.y + popoverPosition.height + POPOVER_DEADZONE2) {
        return true;
      }
    }
    return false;
  };
  const onSeriesMouseMove = (event) => {
    var _a, _b;
    const svgRect = event.target.getBoundingClientRect();
    const offsetX = event.clientX - svgRect.left;
    const closestX = scaledSeries.map((v) => v.x).reduce((prev, curr) => Math.abs(curr - offsetX) < Math.abs(prev - offsetX) ? curr : prev, -Infinity);
    if (isFinite(closestX)) {
      const offsetY = event.clientY - svgRect.top;
      const closestY = scaledSeries.filter((v) => v.x === closestX || isYThreshold(v.series)).map((v) => v.y).reduce((prev, curr) => Math.abs(curr - offsetY) < Math.abs(prev - offsetY) ? curr : prev, -Infinity);
      if (isFinite(closestY) && Math.abs(offsetX - closestX) < MAX_HOVER_MARGIN2 && Math.abs(offsetY - closestY) < MAX_HOVER_MARGIN2) {
        const [{ color: color2, datum, series }] = scaledSeries.filter((s4) => (s4.x === closestX || isYThreshold(s4.series)) && s4.y === closestY);
        highlightPoint({ x: closestX, y: closestY, color: color2, datum, series });
      } else {
        let datumX = null;
        for (const point5 of scaledSeries) {
          if (point5.x === closestX) {
            datumX = (_b = (_a = point5.datum) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : null;
            break;
          }
        }
        highlightX({ scaledX: closestX, label: datumX });
      }
    }
  };
  const onGroupMouseMove = (event) => {
    const svgRect = event.target.getBoundingClientRect();
    const offsetX = event.clientX - svgRect.left;
    const offsetY = event.clientY - svgRect.top;
    for (let groupIndex = 0; groupIndex < barGroups.length; groupIndex++) {
      const { position: { x: x3, y: y4, width, height } } = barGroups[groupIndex];
      if (x3 <= offsetX && offsetX <= x3 + width && y4 <= offsetY && offsetY <= y4 + height) {
        highlightGroup(groupIndex);
        return;
      }
    }
    clearHighlightedSeries();
  };
  const onSVGMouseMove = (event) => {
    if (event.target === plotRef.current.svg && !isHandlersDisabled && !isMouseOverPopover(event)) {
      if (isGroupNavigation) {
        onGroupMouseMove(event);
      } else if (scaledSeries.length > 0) {
        onSeriesMouseMove(event);
      }
    }
  };
  const onSVGMouseOut = (event) => {
    if (isHandlersDisabled || isMouseOverPopover(event)) {
      return;
    }
    if (!nodeContains(plotRef.current.svg, event.relatedTarget) || event.relatedTarget && event.relatedTarget.classList.contains(styles_css_default77.series)) {
      highlightX(null);
      clearHighlightedSeries();
    }
  };
  const onPopoverLeave = (event) => {
    if (!isHandlersDisabled && nodeContains(plotRef.current.svg, event.relatedTarget)) {
      highlightX(null);
      clearHighlightedSeries();
    }
  };
  return { onSVGMouseMove, onSVGMouseOut, onPopoverLeave };
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/hooks/use-navigation.js
var import_react190 = __toESM(require_react());
function useNavigation({ series, visibleSeries, scaledSeries, barGroups, xScale, yScale, highlightedPoint, highlightedGroupIndex, highlightedSeries, isHandlersDisabled, pinPopover, highlightSeries, highlightGroup, highlightPoint, highlightX, verticalMarkerX, isRtl, horizontalBars }) {
  const [targetX, setTargetX] = (0, import_react190.useState)(null);
  const [xIndex, setXIndex] = (0, import_react190.useState)(0);
  const isGroupNavigation = (0, import_react190.useMemo)(() => visibleSeries.some(({ series: series2 }) => series2.type === "bar"), [visibleSeries]);
  const { navigableSeries } = (0, import_react190.useMemo)(() => findNavigableSeries(visibleSeries), [visibleSeries]);
  const containsMultipleSeries = navigableSeries.length > 1;
  const onBarGroupFocus = () => {
    const groupIndex = highlightedGroupIndex !== null && highlightedGroupIndex !== void 0 ? highlightedGroupIndex : 0;
    setTargetX(xScale.domain[groupIndex]);
    highlightGroup(groupIndex);
  };
  const onLineFocus = () => {
    var _a;
    if (verticalMarkerX === null) {
      const index = !isRtl ? 0 : allUniqueX.length - 1;
      if (containsMultipleSeries) {
        moveToLineGroupIndex(index);
      } else {
        moveBetweenSeries(0, (_a = allUniqueX[index].datum) === null || _a === void 0 ? void 0 : _a.x);
      }
    }
  };
  const onFocus = () => {
    if (isGroupNavigation) {
      onBarGroupFocus();
    } else {
      onLineFocus();
    }
  };
  const allUniqueX = (0, import_react190.useMemo)(() => {
    const result = [];
    for (let i2 = 0; i2 < scaledSeries.length; i2 += 1) {
      const point5 = scaledSeries[i2];
      if (point5 !== void 0 && (!result.length || result[result.length - 1].scaledX !== point5.x)) {
        result.push({ scaledX: point5.x, datum: point5.datum });
      }
    }
    return result;
  }, [scaledSeries]);
  const moveBetweenSeries = (0, import_react190.useCallback)((direction, startFrom) => {
    var _a, _b, _c, _d, _e;
    if (isGroupNavigation) {
      return;
    }
    const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;
    const MAX_SERIES_INDEX = navigableSeries.length - 1;
    let previousSeriesIndex = -1;
    if (highlightedSeries) {
      previousSeriesIndex = navigableSeries.indexOf(highlightedSeries);
    }
    const firstPossibleIndex = containsMultipleSeries ? -1 : 0;
    let nextSeriesIndex = 0;
    if (previousSeriesIndex !== null) {
      nextSeriesIndex = previousSeriesIndex + direction;
      if (nextSeriesIndex > MAX_SERIES_INDEX) {
        nextSeriesIndex = firstPossibleIndex;
      } else if (nextSeriesIndex < firstPossibleIndex) {
        nextSeriesIndex = MAX_SERIES_INDEX;
      }
    }
    if (nextSeriesIndex === -1) {
      highlightSeries(null);
      highlightPoint(null);
      return;
    }
    const nextSeries = navigableSeries[nextSeriesIndex];
    const nextInternalSeries = series.filter(({ series: series2 }) => series2 === nextSeries)[0];
    const actualTargetX = (_a = targetX !== null && targetX !== void 0 ? targetX : startFrom) !== null && _a !== void 0 ? _a : null;
    let targetXPoint = ((_b = xScale.d3Scale(actualTargetX)) !== null && _b !== void 0 ? _b : NaN) + xOffset;
    if (!isFinite(targetXPoint)) {
      targetXPoint = 0;
    }
    if (nextSeries.type === "line") {
      const nextScaledSeries = scaledSeries.filter((it) => it.series === nextSeries);
      const closestNextSeriesPoint = nextScaledSeries.reduce((prev, curr) => Math.abs(curr.x - targetXPoint) < Math.abs(prev.x - targetXPoint) ? curr : prev, { x: -Infinity, y: -Infinity });
      highlightPoint(Object.assign(Object.assign({}, closestNextSeriesPoint), { color: nextInternalSeries.color, series: nextSeries }));
    } else if (isYThreshold(nextSeries)) {
      const scaledTargetIndex = scaledSeries.map((it) => {
        var _a2;
        return ((_a2 = it.datum) === null || _a2 === void 0 ? void 0 : _a2.x) || null;
      }).indexOf(actualTargetX);
      highlightPoint({
        x: targetXPoint,
        y: (_c = yScale.d3Scale(nextSeries.y)) !== null && _c !== void 0 ? _c : NaN,
        color: nextInternalSeries.color,
        series: nextSeries,
        datum: (_d = scaledSeries[scaledTargetIndex]) === null || _d === void 0 ? void 0 : _d.datum
      });
    } else if (isXThreshold(nextSeries)) {
      highlightPoint({
        x: (_e = xScale.d3Scale(nextSeries.x)) !== null && _e !== void 0 ? _e : NaN,
        y: yScale.d3Scale.range()[0],
        color: nextInternalSeries.color,
        series: nextSeries,
        datum: { x: nextSeries.x, y: NaN }
      });
    }
  }, [
    isGroupNavigation,
    xScale,
    navigableSeries,
    highlightedSeries,
    containsMultipleSeries,
    highlightSeries,
    highlightPoint,
    series,
    targetX,
    scaledSeries,
    yScale
  ]);
  const moveWithinSeries = (0, import_react190.useCallback)((direction) => {
    var _a;
    const series2 = highlightedSeries || visibleSeries[0].series;
    if (series2.type === "line" || isYThreshold(series2)) {
      const targetScaledSeries = scaledSeries.filter((it) => it.series === series2);
      const previousPoint = highlightedPoint || targetScaledSeries[0];
      const indexOfPreviousPoint = targetScaledSeries.map((it) => it.x).indexOf(previousPoint.x);
      const nextPointIndex = circleIndex(indexOfPreviousPoint + direction, [0, targetScaledSeries.length - 1]);
      const nextPoint = targetScaledSeries[nextPointIndex];
      setTargetX(((_a = nextPoint.datum) === null || _a === void 0 ? void 0 : _a.x) || null);
      setXIndex(nextPointIndex);
      highlightPoint(nextPoint);
    } else if (series2.type === "bar") {
      const xDomain = xScale.domain;
      const MAX_GROUP_INDEX = xDomain.length - 1;
      let nextGroupIndex = 0;
      if (highlightedGroupIndex !== null) {
        if (isRtl && !horizontalBars) {
          direction = -direction;
        }
        nextGroupIndex = highlightedGroupIndex + direction;
        if (nextGroupIndex > MAX_GROUP_INDEX) {
          nextGroupIndex = 0;
        } else if (nextGroupIndex < 0) {
          nextGroupIndex = MAX_GROUP_INDEX;
        }
      }
      const nextDomainIndex = nextValidDomainIndex(nextGroupIndex, barGroups, direction);
      setTargetX(xDomain[nextDomainIndex]);
      highlightGroup(nextDomainIndex);
    }
  }, [
    highlightedSeries,
    visibleSeries,
    scaledSeries,
    highlightedPoint,
    highlightPoint,
    xScale.domain,
    highlightedGroupIndex,
    barGroups,
    highlightGroup,
    isRtl,
    horizontalBars
  ]);
  const moveToLineGroupIndex = (0, import_react190.useCallback)((index) => {
    var _a, _b, _c, _d;
    const point5 = allUniqueX[index];
    setXIndex(index);
    setTargetX(((_a = point5.datum) === null || _a === void 0 ? void 0 : _a.x) || null);
    highlightX({ scaledX: (_b = point5 === null || point5 === void 0 ? void 0 : point5.scaledX) !== null && _b !== void 0 ? _b : null, label: (_d = (_c = point5.datum) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : null });
  }, [allUniqueX, highlightX]);
  const moveWithinXAxis = (0, import_react190.useCallback)((direction) => {
    if (highlightedSeries || isGroupNavigation) {
      moveWithinSeries(direction);
    } else {
      const nextPointGroupIndex = circleIndex(xIndex + direction, [0, allUniqueX.length - 1]);
      moveToLineGroupIndex(nextPointGroupIndex);
    }
  }, [highlightedSeries, isGroupNavigation, moveWithinSeries, xIndex, allUniqueX.length, moveToLineGroupIndex]);
  const onKeyDown = (0, import_react190.useCallback)((event) => {
    const keyCode = event.keyCode;
    if (keyCode !== KeyCode.up && keyCode !== KeyCode.right && keyCode !== KeyCode.down && keyCode !== KeyCode.left && keyCode !== KeyCode.space && keyCode !== KeyCode.enter) {
      return;
    }
    event.preventDefault();
    if (isHandlersDisabled) {
      return;
    }
    if (keyCode === KeyCode.down || keyCode === KeyCode.up) {
      moveBetweenSeries(keyCode === KeyCode.down ? 1 : -1);
    } else if (keyCode === KeyCode.left || keyCode === KeyCode.right) {
      moveWithinXAxis(keyCode === KeyCode.right ? 1 : -1);
    } else if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {
      pinPopover();
    }
  }, [isHandlersDisabled, moveBetweenSeries, moveWithinXAxis, pinPopover]);
  return { isGroupNavigation, onFocus, onKeyDown, xIndex };
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/hooks/use-popover.js
var import_react191 = __toESM(require_react());
function usePopover() {
  const [state, setState] = (0, import_react191.useState)("closed");
  const isPopoverOpen = state !== "closed";
  const isPopoverPinned = state === "pinned";
  const showPopover = (0, import_react191.useCallback)(() => setState("open"), []);
  const pinPopover = (0, import_react191.useCallback)(() => setState("pinned"), []);
  const dismissPopover = (0, import_react191.useCallback)(() => setState("closed"), []);
  return { isPopoverOpen, isPopoverPinned, showPopover, pinPopover, dismissPopover };
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/make-scaled-bar-groups.js
function makeScaledBarGroups(series, xScale, plotWidth, plotHeight, axis) {
  if (!xScale.isCategorical()) {
    return [];
  }
  return xScale.domain.map((x3) => {
    const scaledX = xScale.d3Scale(x3);
    const isValid2 = typeof scaledX !== "undefined" && isFinite(scaledX);
    return {
      x: x3,
      isValid: isValid2,
      hasData: series.some(({ series: series2 }) => {
        if (isYThreshold(series2)) {
          return true;
        }
        if (isXThreshold(series2)) {
          return false;
        }
        if (isDataSeries(series2)) {
          return series2.data.some((datum) => matchesX(datum.x, x3));
        }
        return false;
      }),
      position: axis === "x" ? {
        x: 0,
        y: isValid2 ? scaledX || 0 : 0,
        width: plotWidth,
        height: xScale.d3Scale.bandwidth()
      } : {
        x: isValid2 ? scaledX || 0 : 0,
        y: 0,
        width: xScale.d3Scale.bandwidth(),
        height: plotHeight
      }
    };
  });
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/make-scaled-series.js
function makeScaledSeries(allSeries, xScale, yScale) {
  const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;
  const scaleX = (x3) => (xScale.d3Scale(x3) || 0) + xOffset;
  const scaleY = (y4) => yScale.d3Scale(y4) || 0;
  const allX = getAllX(allSeries);
  function mergeLineSeriesPointsWithXThresholds(scaledPoints, xThresholdSeries, xThresholdSeriesColor) {
    var _a, _b;
    const x3 = scaleX(xThresholdSeries.x);
    let bisectIndex = -1;
    for (let i2 = 0; i2 < scaledPoints.length - 1; i2++) {
      if (scaledPoints[i2].x < x3 && x3 < scaledPoints[i2 + 1].x) {
        bisectIndex = i2;
        break;
      }
    }
    if (bisectIndex !== -1) {
      const prevY = ((_a = scaledPoints[bisectIndex].datum) === null || _a === void 0 ? void 0 : _a.y) || 0;
      const nextY = ((_b = scaledPoints[bisectIndex + 1].datum) === null || _b === void 0 ? void 0 : _b.y) || 0;
      const averageY = (prevY + nextY) / 2;
      scaledPoints.push({
        x: x3,
        y: scaleY(averageY),
        datum: { x: xThresholdSeries.x, y: NaN },
        series: scaledPoints[bisectIndex].series,
        color: xThresholdSeriesColor
      });
    }
  }
  const scaledSeriesX = allSeries.map(({ series, color: color2 }) => {
    const scaledPoints = [];
    if (series.type === "line") {
      for (const datum of series.data) {
        scaledPoints.push({ x: scaleX(datum.x), y: scaleY(datum.y), datum, series, color: color2 });
      }
      scaledPoints.sort((s1, s22) => s1.x - s22.x);
      for (const otherSeries of allSeries) {
        if (isXThreshold(otherSeries.series)) {
          mergeLineSeriesPointsWithXThresholds(scaledPoints, otherSeries.series, otherSeries.color);
        }
      }
    } else if (isYThreshold(series)) {
      for (const x3 of allX) {
        scaledPoints.push({ x: scaleX(x3), y: scaleY(series.y), datum: { x: x3, y: series.y }, series, color: color2 });
      }
      if (allX.length === 0) {
        scaledPoints.push({ x: NaN, y: scaleY(series.y), series, color: color2 });
      }
    } else if (isXThreshold(series)) {
      scaledPoints.push({ x: scaleX(series.x), y: NaN, datum: { x: series.x, y: NaN }, series, color: color2 });
    }
    return scaledPoints;
  });
  return flatten(scaledSeriesX).sort((s1, s22) => s1.x - s22.x);
}
function getAllX(series) {
  const addDataXSet = /* @__PURE__ */ new Set();
  for (const { series: s4 } of series) {
    switch (s4.type) {
      case "bar":
      case "line":
        for (const d3 of s4.data) {
          addDataXSet.add(d3.x);
        }
        break;
      case "threshold":
        if (isXThreshold(s4)) {
          addDataXSet.add(s4.x);
        }
        break;
    }
  }
  const allDataX = [];
  addDataXSet.forEach((x3) => allDataX.push(x3));
  return allDataX;
}
function flatten(arrays) {
  const merged = [];
  for (const array of arrays) {
    for (const item of array) {
      merged.push(item);
    }
  }
  return merged;
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-container.js
var INLINE_START_LABELS_MARGIN2 = 16;
var BLOCK_END_LABELS_OFFSET2 = 12;
var fallbackContainerWidth = 500;
function ChartContainer2(_a) {
  var _b, _c;
  var { fitHeight, hasFilters, height: explicitPlotHeight, series, visibleSeries, highlightedSeries, onHighlightChange, highlightedPoint, setHighlightedPoint, highlightedGroupIndex, setHighlightedGroupIndex, detailPopoverFooter, detailPopoverSize = "medium", stackedBars = false, horizontalBars = false, xScaleType, yScaleType, xTickFormatter, yTickFormatter, emphasizeBaselineAxis, xTitle, yTitle, ariaLabel, ariaLabelledby, ariaDescription, i18nStrings = {}, detailPopoverSeriesContent } = _a, props2 = __rest(_a, ["fitHeight", "hasFilters", "height", "series", "visibleSeries", "highlightedSeries", "onHighlightChange", "highlightedPoint", "setHighlightedPoint", "highlightedGroupIndex", "setHighlightedGroupIndex", "detailPopoverFooter", "detailPopoverSize", "stackedBars", "horizontalBars", "xScaleType", "yScaleType", "xTickFormatter", "yTickFormatter", "emphasizeBaselineAxis", "xTitle", "yTitle", "ariaLabel", "ariaLabelledby", "ariaDescription", "i18nStrings", "detailPopoverSeriesContent"]);
  const plotRef = (0, import_react192.useRef)(null);
  const verticalMarkerRef = (0, import_react192.useRef)(null);
  const [inlineStartLabelsWidth, setInlineStartLabelsWidth] = (0, import_react192.useState)(0);
  const [verticalMarkerX, setVerticalMarkerX] = (0, import_react192.useState)(null);
  const [detailsPopoverText, setDetailsPopoverText] = (0, import_react192.useState)("");
  const [containerWidth, containerMeasureRef] = useContainerWidth(fallbackContainerWidth);
  const maxInlineStartLabelsWidth = Math.round(containerWidth / 2);
  const plotWidth = containerWidth ? (
    // Calculate the minimum between inlineStartLabelsWidth and maxInlineStartLabelsWidth for extra safety because inlineStarteLabelsWidth could be out of date
    Math.max(0, containerWidth - Math.min(inlineStartLabelsWidth, maxInlineStartLabelsWidth) - INLINE_START_LABELS_MARGIN2)
  ) : fallbackContainerWidth;
  const containerRefObject = (0, import_react192.useRef)(null);
  const containerRef = useMergeRefs(containerMeasureRef, containerRefObject);
  const popoverRef = (0, import_react192.useRef)(null);
  const isRtl = getIsRtl(containerRefObject.current);
  const xDomain = props2.xDomain || computeDomainX2(series, xScaleType);
  const yDomain = props2.yDomain || computeDomainY2(series, yScaleType, stackedBars);
  const linesOnly = series.every(({ series: series2 }) => series2.type === "line" || series2.type === "threshold");
  function getXAxisProps(size, range3) {
    const tickCount = getXTickCount(size);
    const scale = new ChartScale(xScaleType, xDomain, range3, linesOnly);
    const ticks2 = createXTicks(scale, tickCount);
    return {
      axis: "x",
      tickCount,
      scale,
      ticks: ticks2,
      tickFormatter: xTickFormatter,
      title: xTitle,
      ariaRoleDescription: i18nStrings.xAxisAriaRoleDescription
    };
  }
  function getYAxisProps(size, range3) {
    const tickCount = getYTickCount(size);
    const scale = new NumericChartScale(yScaleType, yDomain, range3, props2.yDomain ? null : tickCount);
    const ticks2 = createYTicks(scale, tickCount);
    return {
      axis: "y",
      tickCount,
      scale,
      ticks: ticks2,
      tickFormatter: yTickFormatter,
      title: yTitle,
      ariaRoleDescription: i18nStrings.yAxisAriaRoleDescription
    };
  }
  const bottomAxisProps = !horizontalBars ? getXAxisProps(plotWidth, !isRtl ? [0, plotWidth] : [plotWidth, 0]) : getYAxisProps(plotWidth, !isRtl ? [0, plotWidth] : [plotWidth, 0]);
  const blockEndLabelsProps = useBLockEndLabels(Object.assign({}, bottomAxisProps));
  const plotMeasureRef = (0, import_react192.useRef)(null);
  const measuredHeight = useHeightMeasure(() => plotMeasureRef.current, !fitHeight);
  const plotHeight = fitHeight ? measuredHeight !== null && measuredHeight !== void 0 ? measuredHeight : 0 : explicitPlotHeight;
  const leftAxisProps = !horizontalBars ? getYAxisProps(plotHeight, [plotHeight, 0]) : getXAxisProps(plotHeight, [0, plotHeight]);
  const xAxisProps = bottomAxisProps.axis === "x" ? bottomAxisProps : leftAxisProps.axis === "x" ? leftAxisProps : null;
  const yAxisProps = bottomAxisProps.axis === "y" ? bottomAxisProps : leftAxisProps.axis === "y" ? leftAxisProps : null;
  if (!xAxisProps || !yAxisProps) {
    throw new Error("Invariant violation: invalid axis props.");
  }
  const highlightedPointRef = (0, import_react192.useRef)(null);
  const highlightedGroupRef = (0, import_react192.useRef)(null);
  const x3 = !horizontalBars ? "x" : "y";
  const y4 = !horizontalBars ? "y" : "x";
  const scaledSeries = makeScaledSeries(visibleSeries, xAxisProps.scale, yAxisProps.scale);
  const barGroups = makeScaledBarGroups(visibleSeries, xAxisProps.scale, plotWidth, plotHeight, y4);
  const { isPopoverOpen, isPopoverPinned, showPopover, pinPopover, dismissPopover } = usePopover();
  const [isHandlersDisabled, setHandlersDisabled] = (0, import_react192.useState)(false);
  (0, import_react192.useEffect)(() => {
    if (isPopoverPinned) {
      setHandlersDisabled(true);
    } else {
      const timeoutId = setTimeout(() => setHandlersDisabled(false), 25);
      return () => clearTimeout(timeoutId);
    }
  }, [isPopoverPinned]);
  const highlightSeries = (0, import_react192.useCallback)((series2) => {
    if (series2 !== highlightedSeries) {
      onHighlightChange(series2);
    }
  }, [highlightedSeries, onHighlightChange]);
  const highlightPoint = (0, import_react192.useCallback)((point6) => {
    var _a2, _b2;
    setHighlightedGroupIndex(null);
    setHighlightedPoint(point6);
    if (point6) {
      highlightSeries(point6.series);
      setVerticalMarkerX({
        scaledX: point6.x,
        label: (_b2 = (_a2 = point6.datum) === null || _a2 === void 0 ? void 0 : _a2.x) !== null && _b2 !== void 0 ? _b2 : null
      });
    }
  }, [setHighlightedGroupIndex, setHighlightedPoint, highlightSeries]);
  const clearAllHighlights = (0, import_react192.useCallback)(() => {
    setHighlightedPoint(null);
    highlightSeries(null);
    setHighlightedGroupIndex(null);
  }, [highlightSeries, setHighlightedGroupIndex, setHighlightedPoint]);
  const highlightX = (0, import_react192.useCallback)((marker) => {
    if (marker) {
      clearAllHighlights();
    }
    setVerticalMarkerX(marker);
  }, [clearAllHighlights]);
  const highlightGroup = (0, import_react192.useCallback)((groupIndex) => {
    highlightSeries(null);
    setHighlightedPoint(null);
    setHighlightedGroupIndex(groupIndex);
  }, [highlightSeries, setHighlightedPoint, setHighlightedGroupIndex]);
  const clearHighlightedSeries = (0, import_react192.useCallback)(() => {
    clearAllHighlights();
    dismissPopover();
  }, [dismissPopover, clearAllHighlights]);
  const _d = useNavigation({
    series,
    visibleSeries,
    scaledSeries,
    barGroups,
    xScale: xAxisProps.scale,
    yScale: yAxisProps.scale,
    highlightedPoint,
    highlightedGroupIndex,
    highlightedSeries,
    isHandlersDisabled,
    pinPopover,
    highlightSeries,
    highlightGroup,
    highlightPoint,
    highlightX,
    clearHighlightedSeries,
    verticalMarkerX,
    isRtl: !!isRtl,
    horizontalBars
  }), { isGroupNavigation } = _d, handlers = __rest(_d, ["isGroupNavigation"]);
  const { onSVGMouseMove, onSVGMouseOut, onPopoverLeave } = useMouseHover({
    scaledSeries,
    barGroups,
    plotRef,
    popoverRef,
    highlightPoint,
    highlightGroup,
    clearHighlightedSeries,
    isGroupNavigation,
    isHandlersDisabled,
    highlightX
  });
  const highlightedX = (0, import_react192.useMemo)(() => {
    var _a2, _b2, _c2;
    if (highlightedGroupIndex !== null) {
      return (_a2 = barGroups[highlightedGroupIndex]) === null || _a2 === void 0 ? void 0 : _a2.x;
    }
    if (verticalMarkerX !== null) {
      return verticalMarkerX.label;
    }
    return (_c2 = (_b2 = highlightedPoint === null || highlightedPoint === void 0 ? void 0 : highlightedPoint.datum) === null || _b2 === void 0 ? void 0 : _b2.x) !== null && _c2 !== void 0 ? _c2 : null;
  }, [highlightedPoint, verticalMarkerX, highlightedGroupIndex, barGroups]);
  (0, import_react192.useEffect)(() => {
    const onKeyDown = (event) => {
      if (event.key === "Escape") {
        dismissPopover();
      }
    };
    document.addEventListener("keydown", onKeyDown);
    return () => document.removeEventListener("keydown", onKeyDown);
  }, [dismissPopover]);
  (0, import_react192.useLayoutEffect)(() => {
    if (highlightedX !== null || highlightedPoint !== null) {
      showPopover();
    }
  }, [highlightedX, highlightedPoint, showPopover]);
  const onPopoverDismiss = (outsideClick) => {
    dismissPopover();
    if (!outsideClick) {
      setTimeout(() => {
        var _a2, _b2;
        const isSomeElementHighlighted = !!(highlightedPoint || highlightedGroupIndex !== null || verticalMarkerX);
        if (isSomeElementHighlighted) {
          (_a2 = plotRef.current) === null || _a2 === void 0 ? void 0 : _a2.focusApplication();
        } else {
          (_b2 = plotRef.current) === null || _b2 === void 0 ? void 0 : _b2.focusPlot();
        }
      }, 0);
    } else {
      clearAllHighlights();
      setVerticalMarkerX(null);
    }
  };
  const onSVGClick = (e3) => {
    if (isPopoverOpen) {
      if (isPopoverPinned) {
        dismissPopover();
      } else {
        pinPopover();
        e3.preventDefault();
      }
    } else {
      showPopover();
    }
  };
  const onApplicationFocus = (event, trigger) => {
    if (trigger === "keyboard") {
      handlers.onFocus();
    } else {
    }
  };
  const onApplicationBlur = (event) => {
    const blurTarget = event.relatedTarget || event.target;
    if (blurTarget === null || !(blurTarget instanceof Element) || !nodeBelongs(containerRefObject.current, blurTarget)) {
      clearHighlightedSeries();
      setVerticalMarkerX(null);
      if (isPopoverOpen && !isPopoverPinned) {
        dismissPopover();
      }
    }
  };
  const onSVGKeyDown = handlers.onKeyDown;
  const xOffset = xAxisProps.scale.isCategorical() ? Math.max(0, xAxisProps.scale.d3Scale.bandwidth() - 1) / 2 : 0;
  let verticalLineX = null;
  if (verticalMarkerX !== null) {
    verticalLineX = verticalMarkerX.scaledX;
  } else if (isGroupNavigation && highlightedGroupIndex !== null) {
    const x4 = (_c = xAxisProps.scale.d3Scale((_b = barGroups[highlightedGroupIndex]) === null || _b === void 0 ? void 0 : _b.x)) !== null && _c !== void 0 ? _c : null;
    if (x4 !== null) {
      verticalLineX = xOffset + x4;
    }
  }
  const point5 = (0, import_react192.useMemo)(() => highlightedPoint ? {
    key: `${highlightedPoint.x}-${highlightedPoint.y}`,
    x: highlightedPoint.x,
    y: highlightedPoint.y,
    color: highlightedPoint.color
  } : null, [highlightedPoint]);
  const verticalMarkers = (0, import_react192.useMemo)(() => verticalLineX !== null ? scaledSeries.filter(({ x: x4, y: y5 }) => (x4 === verticalLineX || isNaN(x4)) && !isNaN(y5)).map(({ x: x4, y: y5, color: color2 }, index) => ({
    key: `${index}-${x4}-${y5}`,
    x: !horizontalBars ? verticalLineX || 0 : y5,
    y: !horizontalBars ? y5 : verticalLineX || 0,
    color: color2
  })) : [], [scaledSeries, verticalLineX, horizontalBars]);
  const highlightedElementRef = isGroupNavigation ? highlightedGroupRef : highlightedPoint ? highlightedPointRef : verticalMarkerRef;
  const highlightDetails = (0, import_react192.useMemo)(() => {
    if (highlightedX === null) {
      return null;
    }
    if (highlightedPoint) {
      const seriesToShow = visibleSeries.filter((series2) => series2.series === (highlightedPoint === null || highlightedPoint === void 0 ? void 0 : highlightedPoint.series) || isXThreshold(series2.series));
      return formatHighlighted({
        position: highlightedX,
        series: seriesToShow,
        xTickFormatter,
        detailPopoverSeriesContent
      });
    }
    return formatHighlighted({
      position: highlightedX,
      series: visibleSeries,
      xTickFormatter,
      detailPopoverSeriesContent
    });
  }, [highlightedX, highlightedPoint, visibleSeries, xTickFormatter, detailPopoverSeriesContent]);
  const detailPopoverFooterContent = (0, import_react192.useMemo)(() => detailPopoverFooter && highlightedX ? detailPopoverFooter(highlightedX) : null, [detailPopoverFooter, highlightedX]);
  const activeAriaLabel = highlightDetails && detailsPopoverText ? `${highlightDetails.position}, ${detailsPopoverText}` : "";
  const activeLiveRegion = activeAriaLabel && !highlightedPoint && highlightedGroupIndex === null ? activeAriaLabel : "";
  const isLineXKeyboardFocused = !highlightedPoint && verticalMarkerX;
  const isRefresh = useVisualRefresh();
  return import_react192.default.createElement(CartesianChartContainer, { ref: containerRef, minHeight: explicitPlotHeight + blockEndLabelsProps.height, fitHeight: !!fitHeight, hasFilters, leftAxisLabel: import_react192.default.createElement(axis_label_default, { axis: y4, position: "left", title: leftAxisProps.title }), leftAxisLabelMeasure: import_react192.default.createElement(labels_measure_default, { ticks: leftAxisProps.ticks, scale: leftAxisProps.scale, tickFormatter: leftAxisProps.tickFormatter, autoWidth: setInlineStartLabelsWidth, maxLabelsWidth: maxInlineStartLabelsWidth }), bottomAxisLabel: import_react192.default.createElement(axis_label_default, { axis: x3, position: "bottom", title: bottomAxisProps.title }), chartPlot: import_react192.default.createElement(
    chart_plot_default,
    { ref: plotRef, width: "100%", height: fitHeight ? `calc(100% - ${blockEndLabelsProps.height}px)` : plotHeight, offsetBottom: blockEndLabelsProps.height, isClickable: isPopoverOpen && !isPopoverPinned, ariaLabel, ariaLabelledby, ariaDescription, ariaRoleDescription: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.chartAriaRoleDescription, ariaLiveRegion: activeLiveRegion, activeElementRef: highlightedElementRef, activeElementKey: activeAriaLabel, activeElementFocusOffset: isGroupNavigation ? 0 : isLineXKeyboardFocused ? { x: 8, y: 0 } : 3, onMouseMove: onSVGMouseMove, onMouseOut: onSVGMouseOut, onClick: onSVGClick, onApplicationFocus, onApplicationBlur, onKeyDown: onSVGKeyDown },
    import_react192.default.createElement("line", { ref: plotMeasureRef, x1: "0", x2: "0", y1: "0", y2: "100%", stroke: "transparent", strokeWidth: 1, style: { pointerEvents: "none" } }),
    import_react192.default.createElement(inline_start_labels_default, { axis: y4, ticks: leftAxisProps.ticks, scale: leftAxisProps.scale, tickFormatter: leftAxisProps.tickFormatter, title: leftAxisProps.title, ariaRoleDescription: leftAxisProps.ariaRoleDescription, maxLabelsWidth: maxInlineStartLabelsWidth, plotWidth, plotHeight }),
    horizontalBars && import_react192.default.createElement(vertical_grid_lines_default, { scale: yAxisProps.scale, ticks: yAxisProps.ticks, height: plotHeight }),
    emphasizeBaselineAxis && linesOnly && import_react192.default.createElement(emphasized_baseline_default, { axis: x3, scale: yAxisProps.scale, width: plotWidth, height: plotHeight }),
    import_react192.default.createElement(DataSeries2, { axis: x3, plotWidth, plotHeight, highlightedSeries: highlightedSeries !== null && highlightedSeries !== void 0 ? highlightedSeries : null, highlightedGroupIndex, stackedBars, isGroupNavigation, visibleSeries, xScale: xAxisProps.scale, yScale: yAxisProps.scale, isRtl: !!isRtl }),
    emphasizeBaselineAxis && !linesOnly && import_react192.default.createElement(emphasized_baseline_default, { axis: x3, scale: yAxisProps.scale, width: plotWidth, height: plotHeight }),
    import_react192.default.createElement(vertical_marker_default, { key: verticalLineX || "", height: plotHeight, showPoints: highlightedPoint === null, showLine: !isGroupNavigation, points: verticalMarkers, ref: verticalMarkerRef }),
    highlightedPoint && import_react192.default.createElement(highlighted_point_default, { ref: highlightedPointRef, point: point5, role: "button", ariaLabel: activeAriaLabel, ariaHasPopup: true, ariaExpanded: isPopoverPinned }),
    isGroupNavigation && xAxisProps.scale.isCategorical() && import_react192.default.createElement(BarGroups, { ariaLabel: activeAriaLabel, isRefresh, isPopoverPinned, barGroups, highlightedGroupIndex, highlightedGroupRef }),
    import_react192.default.createElement(block_end_labels_default, Object.assign({}, blockEndLabelsProps, { axis: x3, scale: bottomAxisProps.scale, title: bottomAxisProps.title, ariaRoleDescription: bottomAxisProps.ariaRoleDescription, height: plotHeight, width: plotWidth, offsetLeft: inlineStartLabelsWidth + BLOCK_END_LABELS_OFFSET2, offsetRight: BLOCK_END_LABELS_OFFSET2, isRTL: isRtl }))
  ), popover: import_react192.default.createElement(chart_popover_default2, { ref: popoverRef, containerRef: containerRefObject, trackRef: highlightedElementRef, isOpen: isPopoverOpen, isPinned: isPopoverPinned, highlightDetails, onDismiss: onPopoverDismiss, size: detailPopoverSize, footer: detailPopoverFooterContent, dismissAriaLabel: i18nStrings.detailPopoverDismissAriaLabel, onMouseLeave: onPopoverLeave, onBlur: onApplicationBlur, setPopoverText: setDetailsPopoverText }) });
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-legend.js
var import_react193 = __toESM(require_react());
function InternalChartLegend({ series, visibleSeries, highlightedSeries, onHighlightChange, legendTitle, ariaLabel, plotContainerRef }) {
  const legendItems = (0, import_react193.useMemo)(() => {
    return series.filter((s4) => visibleSeries.indexOf(s4.series) !== -1).map(({ series: series2, color: color2 }) => ({
      label: series2.title,
      marker: import_react193.default.createElement(chart_series_marker_default, { color: color2, type: chartLegendMap[series2.type] }),
      datum: series2
    }));
  }, [series, visibleSeries]);
  return import_react193.default.createElement(chart_legend_default, { series: legendItems, highlightedSeries: highlightedSeries || null, onHighlightChange, legendTitle, ariaLabel, plotContainerRef });
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/internal.js
function InternalMixedLineBarChart(_a) {
  var { fitHeight, height, xScaleType, yScaleType, xDomain, yDomain, xTickFormatter, yTickFormatter, highlightedSeries: controlledHighlightedSeries, visibleSeries: controlledVisibleSeries, series: externalSeries, onFilterChange, onHighlightChange: controlledOnHighlightChange, i18nStrings, ariaLabel, ariaLabelledby, ariaDescription, xTitle, yTitle, stackedBars, horizontalBars, hideFilter, additionalFilters, hideLegend, legendTitle, statusType, detailPopoverSize, detailPopoverFooter, detailPopoverSeriesContent, emphasizeBaselineAxis, empty, noMatch, errorText, loadingText, recoveryText, onRecoveryClick, __internalRootRef = null } = _a, props2 = __rest(_a, ["fitHeight", "height", "xScaleType", "yScaleType", "xDomain", "yDomain", "xTickFormatter", "yTickFormatter", "highlightedSeries", "visibleSeries", "series", "onFilterChange", "onHighlightChange", "i18nStrings", "ariaLabel", "ariaLabelledby", "ariaDescription", "xTitle", "yTitle", "stackedBars", "horizontalBars", "hideFilter", "additionalFilters", "hideLegend", "legendTitle", "statusType", "detailPopoverSize", "detailPopoverFooter", "detailPopoverSeriesContent", "emphasizeBaselineAxis", "empty", "noMatch", "errorText", "loadingText", "recoveryText", "onRecoveryClick", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  const containerRef = (0, import_react194.useRef)(null);
  (0, import_react194.useEffect)(() => {
    const gotBarSeries = externalSeries.some((s4) => s4.type === "bar");
    const gotLineSeries = externalSeries.some((s4) => s4.type === "line");
    if (xScaleType !== "categorical" && gotBarSeries) {
      warnOnce("MixedLineBarChart", `Bar series cannot be used with a ${xScaleType} scale. Use a categorical x axis instead.`);
    }
    if (horizontalBars && gotLineSeries) {
      warnOnce("MixedLineBarChart", `Property horizontalBars can only be used with charts that contain only bar or threshold series.`);
    }
    for (const s4 of externalSeries) {
      if (s4.type === "threshold" && s4.x !== void 0 && s4.y !== void 0) {
        warnOnce("MixedLineBarChart", `Series of type "threshold" must contain either x or y property.`);
      }
      if (s4.type === "threshold" && s4.x === void 0 && s4.y === void 0) {
        warnOnce("MixedLineBarChart", `Series of type "threshold" must contain either x or y property.`);
      }
    }
  }, [xScaleType, horizontalBars, externalSeries]);
  const series = (0, import_react194.useMemo)(() => {
    const colors = createCategoryColorScale(externalSeries, (it) => isYThreshold(it) || isXThreshold(it), (it) => it.color || null);
    return externalSeries.map((s4, i2) => ({ index: i2, color: colors[i2], series: s4 }));
  }, [externalSeries]);
  const [highlightedPoint, setHighlightedPoint] = (0, import_react194.useState)(null);
  const [highlightedGroupIndex, setHighlightedGroupIndex] = (0, import_react194.useState)(null);
  const [highlightedSeries = null, setHighlightedSeries] = useControllable(controlledHighlightedSeries, controlledOnHighlightChange, null, {
    componentName: "MixedLineBarChart",
    controlledProp: "highlightedSeries",
    changeHandler: "onHighlightChange"
  });
  const [legendSeries, setLegendSeries] = (0, import_react194.useState)(highlightedSeries);
  (0, import_react194.useEffect)(() => {
    setLegendSeries(controlledHighlightedSeries || null);
  }, [controlledHighlightedSeries]);
  const [externalVisibleSeries, setExternalVisibleSeries] = useControllable(controlledVisibleSeries, onFilterChange, externalSeries, {
    componentName: "MixedLineBarChart",
    controlledProp: "visibleSeries",
    changeHandler: "onFilterChange"
  });
  if (isDevelopment2) {
    const previousSeries = usePrevious(externalSeries);
    const hasPrevious = !!(previousSeries && previousSeries.length);
    const hasCurrent = !!externalSeries.length;
    if (hasPrevious && hasCurrent && externalSeries !== previousSeries && !controlledVisibleSeries && !hideFilter) {
      warnOnce("MixedLineBarChart", "The `series` value passed into the component changed. This may cause problems with filtering - we recommend that you make the `series` value constant, or provide a `visibleSeries` value that derives from the current `series` value.");
    }
  }
  const visibleSeries = (0, import_react194.useMemo)(() => series.filter((s4) => (externalVisibleSeries === null || externalVisibleSeries === void 0 ? void 0 : externalVisibleSeries.indexOf(s4.series)) !== -1), [series, externalVisibleSeries]);
  const filterChange = (selectedSeries) => {
    setExternalVisibleSeries(selectedSeries);
    fireNonCancelableEvent(onFilterChange, {
      visibleSeries: selectedSeries
    });
  };
  const onHighlightChange = (series2) => {
    setHighlightedSeries(series2);
    fireNonCancelableEvent(controlledOnHighlightChange, {
      highlightedSeries: series2
    });
    setLegendSeries(series2);
  };
  const onBlur = (event) => {
    if (event.relatedTarget && !nodeBelongs(containerRef.current, event.relatedTarget)) {
      if (highlightedSeries) {
        onHighlightChange(highlightedSeries);
      }
      setHighlightedPoint(null);
      setHighlightedGroupIndex(null);
      setLegendSeries(null);
    }
  };
  const { isEmpty, isNoMatch, showChart } = getChartStatus({
    externalData: externalSeries,
    visibleData: visibleSeries || [],
    statusType
  });
  const showFilters = statusType === "finished" && (!isEmpty || isNoMatch) && (additionalFilters || !hideFilter);
  const showLegend = !hideLegend && !isEmpty && statusType === "finished";
  const reserveLegendSpace = !showChart && !hideLegend;
  const reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);
  const mergedRef = useMergeRefs(containerRef, __internalRootRef);
  const filterItems = series.map(({ series: series2, color: color2 }) => ({
    label: series2.title,
    marker: import_react194.default.createElement(chart_series_marker_default, { type: chartLegendMap[series2.type], color: color2 }),
    datum: series2
  }));
  return import_react194.default.createElement(ChartWrapper, Object.assign({ ref: mergedRef }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default77.root), fitHeight: !!fitHeight, contentMinHeight: height, defaultFilter: showFilters && !hideFilter ? import_react194.default.createElement(chart_filter_default, { series: filterItems, onChange: filterChange, selectedSeries: externalVisibleSeries || [], i18nStrings }) : null, additionalFilters: showFilters ? additionalFilters : null, reserveFilterSpace: !!reserveFilterSpace, reserveLegendSpace: !!reserveLegendSpace, chartStatus: import_react194.default.createElement(ChartStatusContainer, { isEmpty, isNoMatch, showChart, statusType, empty, noMatch, loadingText, errorText, recoveryText, onRecoveryClick }), chart: showChart ? import_react194.default.createElement(ChartContainer2, { fitHeight, hasFilters: !!showFilters, height, xScaleType, yScaleType, xDomain, yDomain, xTickFormatter: xTickFormatter !== null && xTickFormatter !== void 0 ? xTickFormatter : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.xTickFormatter, yTickFormatter: yTickFormatter !== null && yTickFormatter !== void 0 ? yTickFormatter : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.yTickFormatter, emphasizeBaselineAxis, stackedBars, horizontalBars, series, visibleSeries, highlightedSeries, onHighlightChange, highlightedPoint, setHighlightedPoint, highlightedGroupIndex, setHighlightedGroupIndex, detailPopoverSize, detailPopoverFooter, detailPopoverSeriesContent, xTitle, yTitle, ariaLabel, ariaLabelledby, ariaDescription, i18nStrings }) : null, legend: showLegend ? import_react194.default.createElement(InternalChartLegend, { series, visibleSeries: externalVisibleSeries || [], highlightedSeries: legendSeries, onHighlightChange, legendTitle, ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel, plotContainerRef: containerRef }) : null, onBlur }));
}

// node_modules/@cloudscape-design/components/bar-chart/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/bar-chart/styles.scoped.css";
var styles_css_default78 = {
  "root": "awsui_root_1gfe1_7b6p8_9"
};

// node_modules/@cloudscape-design/components/bar-chart/index.js
function BarChart(_a) {
  var { series = [], height = 500, xScaleType = "categorical", yScaleType = "linear", stackedBars = false, horizontalBars = false, detailPopoverSize = "medium", statusType = "finished", emphasizeBaselineAxis = true, detailPopoverSeriesContent } = _a, props2 = __rest(_a, ["series", "height", "xScaleType", "yScaleType", "stackedBars", "horizontalBars", "detailPopoverSize", "statusType", "emphasizeBaselineAxis", "detailPopoverSeriesContent"]);
  const baseComponentProps = useBaseComponent("BarChart", {
    props: {
      detailPopoverSize,
      emphasizeBaselineAxis,
      fitHeight: props2.fitHeight,
      hideFilter: props2.hideFilter,
      hideLegend: props2.hideLegend,
      horizontalBars,
      stackedBars,
      xScaleType,
      yScaleType
    }
  });
  const baseProps = getBaseProps(props2);
  const className2 = clsx_m_default(baseProps.className, styles_css_default78.root);
  return import_react195.default.createElement(InternalMixedLineBarChart, Object.assign({}, props2, baseComponentProps, { className: className2, height, xScaleType, yScaleType, stackedBars, horizontalBars, series, detailPopoverSize, statusType, emphasizeBaselineAxis, detailPopoverSeriesContent }));
}
applyDisplayName(BarChart, "BarChart");
var bar_chart_default = BarChart;

// node_modules/@cloudscape-design/components/breadcrumb-group/index.js
var import_react196 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/internal.js
var InternalBreadcrumbGroup = createWidgetizedBreadcrumbGroup();

// node_modules/@cloudscape-design/components/breadcrumb-group/index.js
function BreadcrumbGroup(_a) {
  var { items = [] } = _a, props2 = __rest(_a, ["items"]);
  const registeredGlobally = useSetGlobalBreadcrumbs(Object.assign({ items }, props2));
  const baseComponentProps = useBaseComponent("BreadcrumbGroup");
  if (registeredGlobally) {
    return import_react196.default.createElement(BreadcrumbGroupSkeleton, { items });
  }
  return import_react196.default.createElement(InternalBreadcrumbGroup, Object.assign({ items }, props2, baseComponentProps, { __injectAnalyticsComponentMetadata: true }));
}
applyDisplayName(BreadcrumbGroup, "BreadcrumbGroup");

// node_modules/@cloudscape-design/components/button-dropdown/index.js
var import_react197 = __toESM(require_react());
var ButtonDropdown = import_react197.default.forwardRef((_a, ref) => {
  var { items, variant = "normal", loading = false, loadingText, disabled = false, disabledReason, expandableGroups = false, expandToViewport = false, ariaLabel, children, onItemClick, onItemFollow, mainAction, fullWidth } = _a, props2 = __rest(_a, ["items", "variant", "loading", "loadingText", "disabled", "disabledReason", "expandableGroups", "expandToViewport", "ariaLabel", "children", "onItemClick", "onItemFollow", "mainAction", "fullWidth"]);
  const baseComponentProps = useBaseComponent("ButtonDropdown", {
    props: { expandToViewport, expandableGroups, variant },
    metadata: {
      mainAction: !!mainAction,
      checkboxItems: hasCheckboxItems(items),
      hasDisabledReason: Boolean(disabledReason),
      hasDisabledReasons: hasDisabledReasonItems(items)
    }
  });
  const baseProps = getBaseProps(props2);
  const analyticsComponentMetadata = {
    name: "awsui.ButtonDropdown",
    label: `.${styles_css_default19["trigger-label"]}`,
    properties: { variant, disabled: `${disabled}` }
  };
  return import_react197.default.createElement(internal_default9, Object.assign({}, baseProps, baseComponentProps, { ref, items, variant, loading, loadingText, disabled, disabledReason, expandableGroups, expandToViewport, ariaLabel, onItemClick, onItemFollow, mainAction, fullWidth }, getAnalyticsMetadataAttribute({
    component: analyticsComponentMetadata
  })), children);
});
applyDisplayName(ButtonDropdown, "ButtonDropdown");
var button_dropdown_default = ButtonDropdown;

// node_modules/@cloudscape-design/components/button-group/index.js
var import_react206 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-group/internal.js
var import_react205 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-group/item-element.js
var import_react204 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-group/file-input-item.js
var import_react199 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-input/internal.js
var import_react198 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-input/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/file-input/styles.scoped.css";
var styles_css_default79 = {
  "root": "awsui_root_1wp4s_1c9ou_185",
  "file-input": "awsui_file-input_1wp4s_1c9ou_186",
  "hidden": "awsui_hidden_1wp4s_1c9ou_190",
  "file-input-button": "awsui_file-input-button_1wp4s_1c9ou_196",
  "force-focus-outline-icon": "awsui_force-focus-outline-icon_1wp4s_1c9ou_196",
  "force-focus-outline-button": "awsui_force-focus-outline-button_1wp4s_1c9ou_217"
};

// node_modules/@cloudscape-design/components/file-input/internal.js
var InternalFileInput = import_react198.default.forwardRef((_a, ref) => {
  var _b;
  var { accept, ariaRequired, ariaLabel, multiple = false, value, onChange, variant = "button", children, __internalRootRef = null, __inputClassName, __inputNativeAttributes, __injectAnalyticsComponentMetadata } = _a, restProps = __rest(_a, ["accept", "ariaRequired", "ariaLabel", "multiple", "value", "onChange", "variant", "children", "__internalRootRef", "__inputClassName", "__inputNativeAttributes", "__injectAnalyticsComponentMetadata"]);
  const baseProps = getBaseProps(restProps);
  const uploadInputRef = (0, import_react198.useRef)(null);
  const containerRef = (0, import_react198.useRef)(null);
  const mergedRef = useMergeRefs(__internalRootRef, containerRef);
  const uploadButtonLabelId = useUniqueId("upload-button-label");
  const formFieldContext = useFormFieldContext(restProps);
  const selfControlId = useUniqueId("upload-input");
  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;
  useForwardFocus(ref, uploadInputRef);
  const [isFocused, setIsFocused] = (0, import_react198.useState)(false);
  const onUploadButtonClick = () => {
    var _a2;
    return (_a2 = uploadInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.click();
  };
  const onUploadInputFocus = () => {
    var _a2, _b2;
    setIsFocused(true);
    (_b2 = (_a2 = containerRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollIntoView) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
  };
  const onUploadInputBlur = () => setIsFocused(false);
  const onUploadInputChange = ({ target }) => {
    fireNonCancelableEvent(onChange, { value: target.files ? Array.from(target.files) : [] });
  };
  checkControlled("FileInput", "value", value, "onChange", onChange);
  const nativeAttributes = Object.assign({ "aria-label": ariaLabel || children, "aria-labelledby": joinStrings(formFieldContext.ariaLabelledby, uploadButtonLabelId), "aria-describedby": formFieldContext.ariaDescribedby }, __inputNativeAttributes);
  if (formFieldContext.invalid) {
    nativeAttributes["aria-invalid"] = true;
  }
  if (ariaRequired) {
    nativeAttributes["aria-required"] = true;
  }
  if (variant === "icon" && !ariaLabel) {
    warnOnce("FileInput", "Aria label is required with icon variant.");
  }
  (0, import_react198.useEffect)(() => {
    if (window.DataTransfer) {
      const dataTransfer = new DataTransfer();
      for (const file of value) {
        dataTransfer.items.add(file);
      }
      uploadInputRef.current.files = dataTransfer.files;
    }
    if (uploadInputRef.current) {
      uploadInputRef.current.value = "";
    }
  }, [value]);
  const { tabIndex } = useSingleTabStopNavigation(uploadInputRef);
  const analyticsLabel = variant === "button" && children ? "button" : "input";
  const componentAnalyticsMetadata2 = {
    name: "awsui.FileInput",
    label: analyticsLabel
  };
  const analyticsMetadata = { detail: { label: analyticsLabel } };
  if (__injectAnalyticsComponentMetadata) {
    analyticsMetadata.component = componentAnalyticsMetadata2;
  }
  return import_react198.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(baseProps.className, styles_css_default79.root) }, getAnalyticsMetadataAttribute(analyticsMetadata)),
    import_react198.default.createElement("input", Object.assign({ id: controlId, ref: uploadInputRef, type: "file", hidden: false, multiple, accept, onChange: onUploadInputChange, onFocus: onUploadInputFocus, onBlur: onUploadInputBlur, className: clsx_m_default(styles_css_default79["file-input"], styles_css_default79.hidden, __inputClassName), tabIndex }, nativeAttributes)),
    import_react198.default.createElement(internal_default3, { iconName: "upload", variant: variant === "icon" ? "icon" : void 0, formAction: "none", onClick: onUploadButtonClick, className: clsx_m_default(styles_css_default79["file-input-button"], {
      [styles_css_default79["force-focus-outline-button"]]: isFocused && variant === "button",
      [styles_css_default79["force-focus-outline-icon"]]: isFocused && variant === "icon"
    }), __nativeAttributes: { tabIndex: -1, "aria-hidden": true } }, variant === "button" && children),
    import_react198.default.createElement(ScreenreaderOnly, { id: uploadButtonLabelId }, ariaLabel || children)
  );
});
var internal_default15 = InternalFileInput;

// node_modules/@cloudscape-design/components/button-group/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/button-group/test-classes/styles.scoped.css";
var styles_css_default80 = {
  "button-group": "awsui_button-group_1v2mg_1s3dt_5",
  "button-group-item": "awsui_button-group-item_1v2mg_1s3dt_9",
  "button-group-tooltip": "awsui_button-group-tooltip_1v2mg_1s3dt_13",
  "item": "awsui_item_1v2mg_1s3dt_17",
  "tooltip": "awsui_tooltip_1v2mg_1s3dt_21"
};

// node_modules/@cloudscape-design/components/button-group/file-input-item.js
var FileInputItem = (0, import_react199.forwardRef)(({ item, showTooltip, onTooltipDismiss, onFilesChange }, ref) => {
  const [files, setFiles] = (0, import_react199.useState)([]);
  const containerRef = import_react199.default.useRef(null);
  const canShowTooltip = Boolean(showTooltip);
  return import_react199.default.createElement(
    "div",
    { ref: containerRef },
    import_react199.default.createElement(internal_default15, { className: clsx_m_default(styles_css_default80["button-group-item"]), ref, variant: "icon", ariaLabel: item.text, accept: item.accept, multiple: item.multiple, value: files, onChange: (event) => {
      fireCancelableEvent(onFilesChange, { id: item.id, files: event.detail.value });
      setFiles(event.detail.value);
    }, "data-testid": item.id, __inputNativeAttributes: {
      "data-itemid": item.id
    }, __inputClassName: styles_css_default80.item }),
    canShowTooltip && import_react199.default.createElement(Tooltip, { trackRef: containerRef, trackKey: item.id, value: item.text, className: clsx_m_default(styles_css_default80.tooltip, styles_css_default80["button-group-tooltip"]), onDismiss: onTooltipDismiss })
  );
});
var file_input_item_default = FileInputItem;

// node_modules/@cloudscape-design/components/button-group/icon-button-item.js
var import_react200 = __toESM(require_react());
var IconButtonItem = (0, import_react200.forwardRef)(({ item, showTooltip, showFeedback, onTooltipDismiss, onItemClick }, ref) => {
  const containerRef = import_react200.default.useRef(null);
  const hasIcon = item.iconName || item.iconUrl || item.iconSvg;
  if (!hasIcon) {
    warnOnce("ButtonGroup", `Missing icon for item with id: ${item.id}`);
  }
  const canShowTooltip = Boolean(showTooltip && !item.disabled && !item.loading);
  const canShowFeedback = Boolean(showTooltip && showFeedback && item.popoverFeedback);
  return import_react200.default.createElement(
    "div",
    { ref: containerRef },
    import_react200.default.createElement(InternalButton, { variant: "icon", loading: item.loading, loadingText: item.loadingText, disabled: item.disabled, disabledReason: showFeedback ? void 0 : item.disabledReason, __focusable: canShowFeedback, iconName: hasIcon ? item.iconName : "close", iconUrl: item.iconUrl, iconSvg: item.iconSvg, iconAlt: item.text, ariaLabel: item.text, onClick: (event) => fireCancelableEvent(onItemClick, { id: item.id }, event), ref, "data-testid": item.id, "data-itemid": item.id, className: clsx_m_default(styles_css_default80.item, styles_css_default80["button-group-item"]), __title: "" }, item.text),
    (canShowTooltip || canShowFeedback) && import_react200.default.createElement(Tooltip, { trackRef: containerRef, trackKey: item.id, value: showFeedback && import_react200.default.createElement(internal_default2, { tagName: "span" }, item.popoverFeedback) || item.text, className: clsx_m_default(styles_css_default80.tooltip, styles_css_default80["button-group-tooltip"]), onDismiss: onTooltipDismiss })
  );
});
var icon_button_item_default = IconButtonItem;

// node_modules/@cloudscape-design/components/button-group/icon-toggle-button-item.js
var import_react202 = __toESM(require_react());

// node_modules/@cloudscape-design/components/toggle-button/internal.js
var import_react201 = __toESM(require_react());

// node_modules/@cloudscape-design/components/toggle-button/util.js
function getToggleIcon(pressed, defaultIcon, pressedIcon) {
  if (pressed) {
    return pressedIcon !== null && pressedIcon !== void 0 ? pressedIcon : defaultIcon;
  }
  return defaultIcon;
}

// node_modules/@cloudscape-design/components/toggle-button/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/toggle-button/styles.scoped.css";
var styles_css_default81 = {
  "variant-normal": "awsui_variant-normal_1a743_14khj_9",
  "pressed": "awsui_pressed_1a743_14khj_9",
  "variant-icon": "awsui_variant-icon_1a743_14khj_15"
};

// node_modules/@cloudscape-design/components/toggle-button/internal.js
var InternalToggleButton = import_react201.default.forwardRef((_a, ref) => {
  var { pressed, iconName: defaultIconName, pressedIconName, iconSvg: defaultIconSvg, pressedIconSvg, iconUrl: defaultIconUrl, pressedIconUrl, variant, onChange, className: className2 } = _a, rest = __rest(_a, ["pressed", "iconName", "pressedIconName", "iconSvg", "pressedIconSvg", "iconUrl", "pressedIconUrl", "variant", "onChange", "className"]);
  if (isDevelopment2) {
    if (defaultIconName && !pressedIconName) {
      warnOnce("ToggleButton", "`pressedIconName` must be provided for `pressed` state.");
    }
    if (defaultIconSvg && !pressedIconSvg) {
      warnOnce("ToggleButton", "`pressedIconSvg` must be provided for `pressed` state.");
    }
    if (defaultIconUrl && !pressedIconUrl) {
      warnOnce("ToggleButton", "`pressedIconUrl` must be provided for `pressed` state.");
    }
  }
  return import_react201.default.createElement(internal_default3, Object.assign({ className: clsx_m_default(className2, styles_css_default81[`variant-${variant}`], { [styles_css_default81.pressed]: pressed }), variant, formAction: "none", iconName: getToggleIcon(pressed, defaultIconName, pressedIconName), iconUrl: getToggleIcon(pressed, defaultIconUrl, pressedIconUrl), iconSvg: getToggleIcon(pressed, defaultIconSvg, pressedIconSvg), "aria-pressed": pressed, onClick: (event) => {
    event.preventDefault();
    fireNonCancelableEvent(onChange, { pressed: !pressed });
  } }, rest, { ref }));
});

// node_modules/@cloudscape-design/components/button-group/icon-toggle-button-item.js
var IconToggleButtonItem = (0, import_react202.forwardRef)(({ item, showTooltip, showFeedback, onTooltipDismiss, onItemClick }, ref) => {
  var _a;
  const containerRef = import_react202.default.useRef(null);
  const hasIcon = item.iconName || item.iconUrl || item.iconSvg;
  const hasPressedIcon = item.pressedIconName || item.pressedIconUrl || item.pressedIconSvg;
  if (!hasIcon) {
    warnOnce("ButtonGroup", `Missing icon for item with id: ${item.id}`);
  }
  if (!hasPressedIcon) {
    warnOnce("ButtonGroup", `Missing pressed icon for item with id: ${item.id}`);
  }
  const feedbackContent = item.pressed ? (_a = item.pressedPopoverFeedback) !== null && _a !== void 0 ? _a : item.popoverFeedback : item.popoverFeedback;
  const canShowTooltip = showTooltip && !item.disabled && !item.loading;
  const canShowFeedback = showTooltip && showFeedback && feedbackContent;
  return import_react202.default.createElement(
    "div",
    { ref: containerRef },
    import_react202.default.createElement(InternalToggleButton, { variant: "icon", pressed: item.pressed, loading: item.loading, loadingText: item.loadingText, disabled: item.disabled, disabledReason: showFeedback ? void 0 : item.disabledReason, iconName: hasIcon ? item.iconName : "close", iconUrl: item.iconUrl, iconSvg: item.iconSvg, pressedIconName: hasIcon ? item.pressedIconName : "close", pressedIconUrl: item.pressedIconUrl, pressedIconSvg: item.pressedIconUrl, ariaLabel: item.text, onChange: (event) => fireCancelableEvent(onItemClick, { id: item.id, pressed: event.detail.pressed }), ref, "data-testid": item.id, "data-itemid": item.id, className: clsx_m_default(styles_css_default80.item, styles_css_default80["button-group-item"]), __title: "" }, item.text),
    (canShowTooltip || canShowFeedback) && import_react202.default.createElement(Tooltip, { trackRef: containerRef, trackKey: item.id, value: showFeedback && import_react202.default.createElement(internal_default2, { tagName: "span" }, feedbackContent) || item.text, className: clsx_m_default(styles_css_default80.tooltip, styles_css_default80["button-group-tooltip"]), onDismiss: onTooltipDismiss })
  );
});
var icon_toggle_button_item_default = IconToggleButtonItem;

// node_modules/@cloudscape-design/components/button-group/menu-dropdown-item.js
var import_react203 = __toESM(require_react());
var MenuDropdownItem = import_react203.default.forwardRef(({ item, showTooltip, onItemClick, onTooltipDismiss, expandToViewport, position }, ref) => {
  const containerRef = import_react203.default.useRef(null);
  const onClickHandler = (event) => {
    fireCancelableEvent(onItemClick, { id: event.detail.id, checked: event.detail.checked }, event);
  };
  return import_react203.default.createElement(internal_default9, { ref, variant: "icon", items: item.items, onItemClick: onClickHandler, expandToViewport, ariaLabel: item.text, className: styles_css_default80["button-group-item"], position, "data-testid": item.id, disabled: item.disabled, customTriggerBuilder: ({ onClick, isOpen, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => import_react203.default.createElement(
    "div",
    Object.assign({ ref: containerRef }, item.disabled ? {} : getAnalyticsMetadataAttribute({ detail: { position } })),
    !isOpen && showTooltip && !item.disabled && !item.loading && import_react203.default.createElement(Tooltip, { trackRef: containerRef, trackKey: item.id, value: item.text, className: clsx_m_default(styles_css_default80.tooltip, styles_css_default80["button-group-tooltip"]), onDismiss: onTooltipDismiss }),
    import_react203.default.createElement(internal_default3, { ref: triggerRef, variant: "icon", ariaLabel, "data-itemid": item.id, ariaExpanded, className: clsx_m_default(styles_css_default80.item, testUtilsClass), iconName: "ellipsis", loading: item.loading, loadingText: item.loadingText, disabled: item.disabled, disabledReason: item.disabledReason, onClick, __title: "" })
  ) });
});
var menu_dropdown_item_default = MenuDropdownItem;

// node_modules/@cloudscape-design/components/button-group/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/button-group/styles.scoped.css";
var styles_css_default82 = {
  "root": "awsui_root_vdkpj_18dsz_181",
  "item-wrapper": "awsui_item-wrapper_vdkpj_18dsz_217",
  "group": "awsui_group_vdkpj_18dsz_221",
  "divider": "awsui_divider_vdkpj_18dsz_225"
};

// node_modules/@cloudscape-design/components/button-group/item-element.js
var ItemElement2 = (0, import_react204.forwardRef)(({ item, dropdownExpandToViewport, tooltip, setTooltip, onItemClick, onFilesChange, position }, ref) => {
  const containerRef = (0, import_react204.useRef)(null);
  const buttonRef = (0, import_react204.useRef)(null);
  const fileInputRef = (0, import_react204.useRef)(null);
  const buttonDropdownRef = (0, import_react204.useRef)(null);
  (0, import_react204.useImperativeHandle)(ref, () => ({
    focus: () => {
      var _a, _b, _c;
      (_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      (_b = fileInputRef.current) === null || _b === void 0 ? void 0 : _b.focus();
      (_c = buttonDropdownRef.current) === null || _c === void 0 ? void 0 : _c.focus();
    }
  }));
  (0, import_react204.useEffect)(() => {
    if ((tooltip === null || tooltip === void 0 ? void 0 : tooltip.item) !== item.id) {
      return;
    }
    const close = () => {
      setTooltip(null);
    };
    const handlePointerDownEvent = (event) => {
      var _a;
      if (event.target && ((_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
        return;
      }
      close();
    };
    const handleKeyDownEvent = (event) => {
      if (event.key === "Escape") {
        close();
      }
    };
    const controller = new AbortController();
    window.addEventListener("pointerdown", handlePointerDownEvent, { signal: controller.signal });
    window.addEventListener("keydown", handleKeyDownEvent, { signal: controller.signal });
    return () => {
      controller.abort();
    };
  }, [item.id, tooltip, setTooltip]);
  const onShowTooltipSoft = (show) => {
    if (!(tooltip === null || tooltip === void 0 ? void 0 : tooltip.feedback)) {
      setTooltip(show ? { item: item.id, feedback: false } : null);
    }
  };
  const onShowTooltipHard = (show) => {
    if (!show && item.id !== (tooltip === null || tooltip === void 0 ? void 0 : tooltip.item)) {
      return;
    }
    setTooltip(show ? { item: item.id, feedback: false } : null);
  };
  const onClickHandler = (event) => {
    const hasPopoverFeedback = "popoverFeedback" in item && item.popoverFeedback;
    if (hasPopoverFeedback) {
      setTooltip({ item: item.id, feedback: true });
    }
    fireCancelableEvent(onItemClick, event.detail, event);
  };
  const onFilesChangeHandler = (event) => {
    fireCancelableEvent(onFilesChange, event.detail, event);
    setTooltip(null);
  };
  return import_react204.default.createElement(
    "div",
    Object.assign({ key: item.id, className: styles_css_default82["item-wrapper"], ref: containerRef, onPointerEnter: () => onShowTooltipSoft(true), onPointerLeave: () => onShowTooltipSoft(false), onFocus: (event) => {
      if (event && event.relatedTarget && nodeBelongs(containerRef.current, event.relatedTarget)) {
        return;
      }
      onShowTooltipHard(true);
    }, onBlur: () => onShowTooltipHard(false) }, item.type === "menu-dropdown" || item.disabled ? {} : getAnalyticsMetadataAttribute({ detail: { position, id: item.id } })),
    item.type === "icon-button" && import_react204.default.createElement(icon_button_item_default, { ref: buttonRef, item, onItemClick: onClickHandler, showTooltip: (tooltip === null || tooltip === void 0 ? void 0 : tooltip.item) === item.id, showFeedback: !!(tooltip === null || tooltip === void 0 ? void 0 : tooltip.feedback), onTooltipDismiss: () => setTooltip(null) }),
    item.type === "icon-toggle-button" && import_react204.default.createElement(icon_toggle_button_item_default, { ref: buttonRef, item, onItemClick: onClickHandler, showTooltip: (tooltip === null || tooltip === void 0 ? void 0 : tooltip.item) === item.id, showFeedback: !!(tooltip === null || tooltip === void 0 ? void 0 : tooltip.feedback), onTooltipDismiss: () => setTooltip(null) }),
    item.type === "icon-file-input" && import_react204.default.createElement(file_input_item_default, { ref: fileInputRef, item, onFilesChange: onFilesChangeHandler, showTooltip: (tooltip === null || tooltip === void 0 ? void 0 : tooltip.item) === item.id, onTooltipDismiss: () => setTooltip(null) }),
    item.type === "menu-dropdown" && import_react204.default.createElement(menu_dropdown_item_default, { ref: buttonDropdownRef, item, showTooltip: (tooltip === null || tooltip === void 0 ? void 0 : tooltip.item) === item.id, onItemClick: onClickHandler, expandToViewport: dropdownExpandToViewport, onTooltipDismiss: () => setTooltip(null), position })
  );
});
var item_element_default2 = ItemElement2;

// node_modules/@cloudscape-design/components/button-group/internal.js
var InternalButtonGroup = (0, import_react205.forwardRef)((_a, ref) => {
  var { items = [], onItemClick, onFilesChange, ariaLabel, dropdownExpandToViewport, __internalRootRef = null } = _a, props2 = __rest(_a, ["items", "onItemClick", "onFilesChange", "ariaLabel", "dropdownExpandToViewport", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  const focusedIdRef = (0, import_react205.useRef)(null);
  const navigationAPI = (0, import_react205.useRef)(null);
  const containerObjectRef = (0, import_react205.useRef)(null);
  const containerRef = useMergeRefs(containerObjectRef, __internalRootRef);
  const itemsRef = (0, import_react205.useRef)({});
  const [tooltip, setTooltip] = (0, import_react205.useState)(null);
  (0, import_react205.useImperativeHandle)(ref, () => ({
    focus: (id) => {
      var _a2;
      (_a2 = itemsRef.current[id]) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }));
  function getNextFocusTarget() {
    var _a2, _b;
    if (containerObjectRef.current) {
      const buttons = Array.from(containerObjectRef.current.querySelectorAll(`.${styles_css_default80.item}`));
      const activeButtons = buttons.filter((button) => !button.disabled);
      return (_b = (_a2 = activeButtons.find((button) => button.dataset.itemid === focusedIdRef.current)) !== null && _a2 !== void 0 ? _a2 : activeButtons[0]) !== null && _b !== void 0 ? _b : null;
    }
    return null;
  }
  function onUnregisterActive(focusableElement) {
    var _a2;
    const target = (_a2 = navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.getFocusTarget();
    if (target && target.dataset.itemid !== focusableElement.dataset.itemid) {
      target.focus();
    }
  }
  (0, import_react205.useEffect)(() => {
    var _a2;
    (_a2 = navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.updateFocusTarget();
  });
  function onFocus(event) {
    var _a2;
    if (event.target instanceof HTMLElement && event.target.dataset.itemid) {
      focusedIdRef.current = event.target.dataset.itemid;
    }
    (_a2 = navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.updateFocusTarget();
  }
  function onBlur() {
    var _a2;
    (_a2 = navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.updateFocusTarget();
  }
  function onKeyDown(event) {
    var _a2;
    const focusTarget = (_a2 = navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.getFocusTarget();
    const specialKeys = [KeyCode.right, KeyCode.left, KeyCode.end, KeyCode.home, KeyCode.pageUp, KeyCode.pageDown];
    if (hasModifierKeys(event) || specialKeys.indexOf(event.keyCode) === -1) {
      return;
    }
    if (!containerObjectRef.current || !focusTarget) {
      return;
    }
    if (document.activeElement && !document.activeElement.matches(`.${styles_css_default80.item}`)) {
      return;
    }
    event.preventDefault();
    const focusables = getFocusablesFrom(containerObjectRef.current);
    const activeIndex = focusables.indexOf(focusTarget);
    handleKey(event, {
      onHome: () => focusElement(focusables[0]),
      onEnd: () => focusElement(focusables[focusables.length - 1]),
      onInlineStart: () => focusElement(focusables[circleIndex(activeIndex - 1, [0, focusables.length - 1])]),
      onInlineEnd: () => focusElement(focusables[circleIndex(activeIndex + 1, [0, focusables.length - 1])])
    });
  }
  function focusElement(element) {
    element.focus();
  }
  function getFocusablesFrom(target) {
    function isElementRegistered(element) {
      var _a2, _b;
      return (_b = (_a2 = navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.isRegistered(element)) !== null && _b !== void 0 ? _b : false;
    }
    function isElementDisabled(element) {
      if (element instanceof HTMLButtonElement) {
        return element.disabled;
      }
      return false;
    }
    return getAllFocusables(target).filter((el) => isElementRegistered(el) && !isElementDisabled(el));
  }
  return import_react205.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default82.root, styles_css_default80["button-group"], baseProps.className), ref: containerRef, role: "toolbar", "aria-label": ariaLabel, onFocus, onBlur, onKeyDown }),
    import_react205.default.createElement(SingleTabStopNavigationProvider, { ref: navigationAPI, navigationActive: true, getNextFocusTarget, onUnregisterActive }, items.map((itemOrGroup, index) => {
      var _a2;
      const itemContent = (item, position) => import_react205.default.createElement(item_element_default2, { key: item.id, item, dropdownExpandToViewport, tooltip, setTooltip, onItemClick, onFilesChange, ref: (element) => itemsRef.current[item.id] = element, position });
      const isGroupBefore = ((_a2 = items[index - 1]) === null || _a2 === void 0 ? void 0 : _a2.type) === "group";
      const currentItem = items[index];
      const isGroupNow = (currentItem === null || currentItem === void 0 ? void 0 : currentItem.type) === "group";
      const shouldAddDivider = isGroupBefore || !isGroupBefore && isGroupNow && index !== 0;
      if (isGroupNow && currentItem.items.length === 0) {
        warnOnce("ButtonGroup", "Empty group detected. Empty groups are not allowed.");
      }
      return import_react205.default.createElement(
        import_react205.default.Fragment,
        { key: itemOrGroup.type === "group" ? index : itemOrGroup.id },
        shouldAddDivider && import_react205.default.createElement("div", { className: styles_css_default82.divider }),
        itemOrGroup.type === "group" ? import_react205.default.createElement("div", { key: index, role: "group", "aria-label": itemOrGroup.text, className: styles_css_default82.group }, itemOrGroup.items.map((item, subIndex) => itemContent(item, `${index + 1},${subIndex + 1}`))) : itemContent(itemOrGroup, `${index + 1}`)
      );
    }))
  );
});
var internal_default16 = InternalButtonGroup;

// node_modules/@cloudscape-design/components/button-group/index.js
var ButtonGroup = import_react206.default.forwardRef((_a, ref) => {
  var { variant, dropdownExpandToViewport = false } = _a, rest = __rest(_a, ["variant", "dropdownExpandToViewport"]);
  const baseProps = getBaseProps(rest);
  const itemCounts = getItemCounts(rest.items);
  const baseComponentProps = useBaseComponent("ButtonGroup", {
    props: {
      variant,
      dropdownExpandToViewport
    },
    metadata: {
      iconButtonsCount: itemCounts["icon-button"],
      iconToggleButtonsCount: itemCounts["icon-toggle-button"],
      iconFileInputsCount: itemCounts["icon-file-input"],
      menuDropdownsCount: itemCounts["menu-dropdown"],
      groupsCount: itemCounts.group
    }
  });
  const externalProps = getExternalProps(rest);
  const componentMetadata = {
    name: "awsui.ButtonGroup",
    label: { root: "self" }
  };
  return import_react206.default.createElement(internal_default16, Object.assign({}, baseProps, baseComponentProps, externalProps, { ref, variant, dropdownExpandToViewport }, getAnalyticsMetadataAttribute({ component: componentMetadata })));
});
function getItemCounts(allItems = []) {
  const counters = { "icon-button": 0, "icon-toggle-button": 0, "icon-file-input": 0, "menu-dropdown": 0, group: 0 };
  function count(items) {
    for (const item of items) {
      counters[item.type] += 1;
      if (item.type === "group") {
        count(item.items);
      }
    }
  }
  count(allItems);
  return counters;
}
applyDisplayName(ButtonGroup, "ButtonGroup");
var button_group_default = ButtonGroup;

// node_modules/@cloudscape-design/components/calendar/index.js
var import_react214 = __toESM(require_react());

// node_modules/@cloudscape-design/components/calendar/internal.js
var import_react213 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-date-cache/index.js
var import_react207 = __toESM(require_react());
function useDateCache() {
  const cacheRef = (0, import_react207.useRef)(/* @__PURE__ */ new Map());
  return (date2) => {
    const current = cacheRef.current.get(date2.getTime());
    if (current) {
      return current;
    }
    cacheRef.current.set(date2.getTime(), date2);
    return date2;
  };
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/display-format.js
function isoToDisplay(value) {
  return value.replace(/-/g, "/");
}
function displayToIso(value) {
  return value.replace(/\//g, "-");
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-time-offset.js
function formatTimeOffsetISO(isoDate, offsetInMinutes) {
  offsetInMinutes = defaultToLocal(isoDate, offsetInMinutes);
  const { hours, minutes } = getMinutesAndHours(offsetInMinutes);
  const sign2 = offsetInMinutes < 0 ? "-" : "+";
  const formattedOffset = `${sign2}${formatISO2Digits(hours)}:${formatISO2Digits(minutes)}`;
  return formattedOffset;
}
function formatTimeOffsetLocalized(isoDate, offsetInMinutes) {
  offsetInMinutes = defaultToLocal(isoDate, offsetInMinutes);
  if (offsetInMinutes === 0) {
    return "(UTC)";
  }
  const { hours, minutes } = getMinutesAndHours(offsetInMinutes);
  const sign2 = offsetInMinutes < 0 ? "-" : "+";
  const formattedMinutes = minutes === 0 ? "" : `:${minutes}`;
  const formattedOffset = `(UTC${sign2}${hours}${formattedMinutes})`;
  return formattedOffset;
}
function defaultToLocal(isoDate, offsetInMinutes) {
  return offsetInMinutes !== null && offsetInMinutes !== void 0 ? offsetInMinutes : 0 - new Date(isoDate).getTimezoneOffset();
}
function getMinutesAndHours(minutes) {
  return { hours: Math.floor(Math.abs(minutes) / 60), minutes: Math.abs(minutes % 60) };
}
function formatISO2Digits(n) {
  return padLeftZeros(n.toFixed(0), 2);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-iso.js
function format_date_iso_default({ date: isoDate, hideTimeOffset, isDateOnly, timeOffset, isMonthOnly }) {
  const formattedOffset = hideTimeOffset || isDateOnly || isMonthOnly ? "" : formatTimeOffsetISO(isoDate, timeOffset);
  if (isMonthOnly) {
    return format2(parseISO(isoDate), "yyyy-MM");
  }
  return isoDate + formattedOffset;
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-localized.js
function formatDateLocalized({ date: isoDate, hideTimeOffset, isDateOnly, isMonthOnly, timeOffset, locale: locale3 }) {
  let date2 = parseISO(isoDate);
  if (!isValid(date2)) {
    date2 = new Date(isoDate);
  }
  if (isMonthOnly) {
    const formattedMonthDate = new Intl.DateTimeFormat(locale3, {
      month: "long",
      year: "numeric"
    }).format(date2);
    return formattedMonthDate;
  }
  const formattedDate = new Intl.DateTimeFormat(locale3, {
    month: "long",
    year: "numeric",
    day: "numeric"
  }).format(date2);
  if (isDateOnly) {
    return formattedDate;
  }
  const formattedTime = new Intl.DateTimeFormat(locale3, {
    hour: "2-digit",
    hourCycle: "h23",
    minute: "2-digit",
    second: "2-digit"
  }).format(date2);
  const formattedDateTime = formattedDate + getDateTimeSeparator(locale3) + formattedTime;
  if (hideTimeOffset) {
    return formattedDateTime;
  }
  const formattedTimeOffset = formatTimeOffsetLocalized(isoDate, timeOffset);
  return formattedDateTime + " " + formattedTimeOffset;
}
var languagesWithoutDateTimeSeparator = ["ja", "zh-CN", "zh-TW"];
function getDateTimeSeparator(locale3) {
  return locale3 && languagesWithoutDateTimeSeparator.includes(locale3) ? " " : ", ";
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/is-iso-only.js
var dateOnlyRegex = /^\d{4}-\d{2}-\d{2}$/;
var monthOnlyRegex = /^\d{4}-(?:0[1-9]|1[0-2])$/;
function isIsoDateOnly(dateString) {
  return dateOnlyRegex.test(dateString);
}
function isIsoMonthOnly(dateString) {
  return monthOnlyRegex.test(dateString);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-time-with-offset.js
function formatDateTimeWithOffset({ date: date2, format: format3, hideTimeOffset, timeOffset, locale: locale3 }) {
  const isDateOnly = isIsoDateOnly(date2);
  const isMonthOnly = isIsoMonthOnly(date2);
  switch (format3) {
    case "long-localized": {
      return formatDateLocalized({ date: date2, hideTimeOffset, isDateOnly, isMonthOnly, locale: locale3, timeOffset });
    }
    default: {
      return format_date_iso_default({ date: date2, hideTimeOffset, isDateOnly, isMonthOnly, timeOffset });
    }
  }
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date.js
function formatDate(value, granularity = "day") {
  const year = value.getFullYear();
  const month = padLeftZeros(`${value.getMonth() + 1}`, 2);
  if (granularity === "month") {
    return `${year}-${month}`;
  }
  const date2 = padLeftZeros(`${value.getDate()}`, 2);
  return `${year}-${month}-${date2}`;
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-time.js
var formatTime = (value) => {
  const hours = padLeftZeros(`${value.getHours()}`, 2);
  const minutes = padLeftZeros(`${value.getMinutes()}`, 2);
  const seconds = padLeftZeros(`${value.getSeconds()}`, 2);
  return `${hours}:${minutes}:${seconds}`;
};

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-time.js
function formatDateTime(date2) {
  return formatDate(date2) + "T" + formatTime(date2);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/join-date-time.js
function normalizeTimeString(timeString) {
  const parts = timeString.split(":");
  while (parts.length < 3) {
    parts.push("00");
  }
  return parts.join(":");
}
function joinDateTime(dateString, timeString) {
  return `${dateString}T${timeString}`;
}
function splitDateTime(dateStr) {
  const [date2 = "", time2 = ""] = dateStr.split("T");
  return { date: date2, time: time2 };
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/parse-date.js
function parseDate2(value, strict = false) {
  const [yearString, monthString, dayString] = value.split("-");
  const year = Number(yearString);
  const month = Number(monthString);
  const day = Number(dayString);
  if (strict) {
    if (isNaN(year) || isNaN(month) || isNaN(day)) {
      return null;
    }
  }
  return new Date(year, (month || 1) - 1, day || 1);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/parse-timezone-offset.js
function parseTimezoneOffset(isoDate) {
  const [, time2 = ""] = isoDate.split("T");
  const [, signCharacter, offsetPart] = time2.split(/(-|\+)/);
  if (signCharacter && offsetPart) {
    const [offsetHours, offsetMinutes] = offsetPart.split(":");
    return Number(signCharacter + "1") * (Number(offsetHours) * 60 + Number(offsetMinutes));
  }
  const utcTimezoneIndicator = isoDate.indexOf("Z");
  if (utcTimezoneIndicator !== -1) {
    return 0;
  }
  const date2 = new Date(isoDate);
  return 0 - date2.getTimezoneOffset();
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/shift-timezone-offset.js
function shiftTimezoneOffset(dateString, targetTimezoneOffset) {
  const [datePart, timeAndOffsetPart = ""] = dateString.split("T");
  const [timePart] = timeAndOffsetPart.split(/-|\+|Z/);
  const valueWithoutOffset = joinDateTime(datePart, timePart);
  const originalTimezoneOffset = parseTimezoneOffset(dateString);
  const date2 = new Date(valueWithoutOffset);
  targetTimezoneOffset = targetTimezoneOffset !== null && targetTimezoneOffset !== void 0 ? targetTimezoneOffset : 0 - date2.getTimezoneOffset();
  const adjustedDate = addMinutes(date2, targetTimezoneOffset - originalTimezoneOffset);
  return joinDateTime(formatDate(adjustedDate), formatTime(adjustedDate));
}

// node_modules/@cloudscape-design/components/internal/utils/locale/merge-locales.js
function mergeLocales(locale3, fullLocale) {
  const isShort = locale3.length === 2;
  if (isShort && fullLocale.indexOf(locale3) === 0) {
    return fullLocale;
  }
  return locale3;
}

// node_modules/@cloudscape-design/components/internal/utils/locale/normalize-locale.js
function normalizeLocale(component, locale3) {
  var _a;
  locale3 = checkLocale(component, locale3);
  const browserLocale = getBrowserLocale();
  if (locale3) {
    return mergeLocales(locale3, browserLocale);
  }
  const htmlLocale = checkLocale(component, (_a = getHtmlElement()) === null || _a === void 0 ? void 0 : _a.getAttribute("lang"));
  if (htmlLocale) {
    return mergeLocales(htmlLocale, browserLocale);
  }
  return browserLocale;
}
function checkLocale(component, locale3) {
  if (!locale3 || locale3 === "") {
    return "";
  }
  locale3 = locale3 && locale3.replace(/^([a-z]{2})_/, "$1-");
  if (locale3 && !locale3.match(/^[a-z]{2}(-[A-Z]{2})?$/)) {
    warnOnce(component, `Invalid locale provided: ${locale3}. Falling back to default`);
    locale3 = "";
  }
  return locale3;
}
function getHtmlElement() {
  return typeof document !== "undefined" ? document.querySelector("html") : null;
}
function getBrowserLocale() {
  return new Intl.DateTimeFormat().resolvedOptions().locale;
}

// node_modules/weekstart/dist/es-module/api.js
function getWeekStartByRegion(regionCode, regionDayMap2) {
  var code = regionDayMap2[typeof regionCode === "string" ? regionCode.toUpperCase() : regionCode];
  return typeof code === "number" ? code : 1;
}
function getWeekStartByLocale(locale3, langRegionMap2, regionDayMap2) {
  if (locale3) {
    var data = locale3.toLowerCase().split(/[-_]/);
    var language = data[0];
    var country;
    if (data[1] && data[1].length === 4) {
      language += "_" + data[1];
      country = data[2];
    } else {
      country = data[1];
    }
    if (!country) {
      country = langRegionMap2[language];
    }
    if (country) {
      return getWeekStartByRegion(country.match(/^\d+$/) ? Number(country) : country, regionDayMap2);
    }
  }
  return 1;
}

// node_modules/weekstart/dist/es-module/langRegionMap.js
var langRegionMap = {
  en: "US",
  zh: "CN",
  zh_hans: "CN",
  hans: "CN",
  wuu: "CN",
  hsn: "CN",
  hak: "CN",
  nan: "CN",
  gan: "CN",
  hi: "IN",
  te: "IN",
  mr: "IN",
  ta: "IN",
  gu: "IN",
  kn: "IN",
  or: "IN",
  ml: "IN",
  pa_guru: "IN",
  bho: "IN",
  awa: "IN",
  as: "IN",
  mwr: "IN",
  mai: "IN",
  mag: "IN",
  bgc: "IN",
  hne: "IN",
  dcc: "IN",
  dz: "BT",
  tn: "BW",
  am: "ET",
  om: "ET",
  quc: "GT",
  id: "ID",
  jv: "ID",
  su: "ID",
  mad: "ID",
  ms_arab: "ID",
  ga: "IE",
  he: "IL",
  jam: "JM",
  ja: "JP",
  km: "KH",
  ko: "KR",
  lo: "LA",
  mh: "MH",
  my: "MM",
  mt: "MT",
  ne: "NP",
  fil: "PH",
  ceb: "PH",
  ilo: "PH",
  ur: "PK",
  pa: "PK",
  pa_arab: "PK",
  arab: "PK",
  lah: "PK",
  ps: "PK",
  sd: "PK",
  sd_arab: "PK",
  skr: "PK",
  gn: "PY",
  th: "TH",
  tts: "TH",
  aeb: "TN",
  zh_hant: "TW",
  hant: "TW",
  sm: "WS",
  zu: "ZA",
  sn: "ZW",
  arq: "DZ",
  ar: "EG",
  arz: "EG",
  fa: "IR",
  az_arab: "IR",
  ary: "MA",
  bn: "BD",
  rkt: "BD",
  dv: "MV"
};
var langRegionMap_default = langRegionMap;

// node_modules/weekstart/dist/es-module/regionDayMap.js
var regionDayMap = {
  AG: 0,
  ATG: 0,
  28: 0,
  AR: 0,
  ARG: 0,
  32: 0,
  AS: 0,
  ASM: 0,
  16: 0,
  AU: 0,
  AUS: 0,
  36: 0,
  BR: 0,
  BRA: 0,
  76: 0,
  BS: 0,
  BHS: 0,
  44: 0,
  BT: 0,
  BTN: 0,
  64: 0,
  BW: 0,
  BWA: 0,
  72: 0,
  BZ: 0,
  BLZ: 0,
  84: 0,
  CA: 0,
  CAN: 0,
  124: 0,
  CN: 0,
  CHN: 0,
  156: 0,
  CO: 0,
  COL: 0,
  170: 0,
  DM: 0,
  DMA: 0,
  212: 0,
  DO: 0,
  DOM: 0,
  214: 0,
  ET: 0,
  ETH: 0,
  231: 0,
  GT: 0,
  GTM: 0,
  320: 0,
  GU: 0,
  GUM: 0,
  316: 0,
  HK: 0,
  HKG: 0,
  344: 0,
  HN: 0,
  HND: 0,
  340: 0,
  ID: 0,
  IDN: 0,
  360: 0,
  IE: 0,
  IRL: 0,
  372: 0,
  IL: 0,
  ISR: 0,
  376: 0,
  IN: 0,
  IND: 0,
  356: 0,
  JM: 0,
  JAM: 0,
  388: 0,
  JP: 0,
  JPN: 0,
  392: 0,
  KE: 0,
  KEN: 0,
  404: 0,
  KH: 0,
  KHM: 0,
  116: 0,
  KR: 0,
  KOR: 0,
  410: 0,
  LA: 0,
  LA0: 0,
  418: 0,
  MH: 0,
  MHL: 0,
  584: 0,
  MM: 0,
  MMR: 0,
  104: 0,
  MO: 0,
  MAC: 0,
  446: 0,
  MT: 0,
  MLT: 0,
  470: 0,
  MX: 0,
  MEX: 0,
  484: 0,
  MZ: 0,
  MOZ: 0,
  508: 0,
  NI: 0,
  NIC: 0,
  558: 0,
  NP: 0,
  NPL: 0,
  524: 0,
  NZ: 0,
  NZL: 0,
  554: 0,
  PA: 0,
  PAN: 0,
  591: 0,
  PE: 0,
  PER: 0,
  604: 0,
  PH: 0,
  PHL: 0,
  608: 0,
  PK: 0,
  PAK: 0,
  586: 0,
  PR: 0,
  PRI: 0,
  630: 0,
  PY: 0,
  PRY: 0,
  600: 0,
  SA: 0,
  SAU: 0,
  682: 0,
  SG: 0,
  SGP: 0,
  702: 0,
  SV: 0,
  SLV: 0,
  222: 0,
  TH: 0,
  THA: 0,
  764: 0,
  TN: 0,
  TUN: 0,
  788: 0,
  TT: 0,
  TTO: 0,
  780: 0,
  TW: 0,
  TWN: 0,
  158: 0,
  UM: 0,
  UMI: 0,
  581: 0,
  US: 0,
  USA: 0,
  840: 0,
  VE: 0,
  VEN: 0,
  862: 0,
  VI: 0,
  VIR: 0,
  850: 0,
  WS: 0,
  WSM: 0,
  882: 0,
  YE: 0,
  YEM: 0,
  887: 0,
  ZA: 0,
  ZAF: 0,
  710: 0,
  ZW: 0,
  ZWE: 0,
  716: 0,
  AE: 6,
  ARE: 6,
  784: 6,
  AF: 6,
  AFG: 6,
  4: 6,
  BH: 6,
  BHR: 6,
  48: 6,
  DJ: 6,
  DJI: 6,
  262: 6,
  DZ: 6,
  DZA: 6,
  12: 6,
  EG: 6,
  EGY: 6,
  818: 6,
  IQ: 6,
  IRQ: 6,
  368: 6,
  IR: 6,
  IRN: 6,
  364: 6,
  JO: 6,
  JOR: 6,
  400: 6,
  KW: 6,
  KWT: 6,
  414: 6,
  LY: 6,
  LBY: 6,
  434: 6,
  MA: 6,
  MAR: 6,
  504: 6,
  OM: 6,
  OMN: 6,
  512: 6,
  QA: 6,
  QAT: 6,
  634: 6,
  SD: 6,
  SDN: 6,
  729: 6,
  SY: 6,
  SYR: 6,
  760: 6,
  BD: 5,
  BGD: 5,
  50: 5,
  MV: 5,
  MDV: 5,
  462: 5
};
var regionDayMap_default = regionDayMap;

// node_modules/weekstart/dist/es-module/main.js
function getWeekStartByLocale$1(locale3) {
  return getWeekStartByLocale(locale3, langRegionMap_default, regionDayMap_default);
}

// node_modules/@cloudscape-design/components/internal/utils/locale/normalize-start-of-week.js
function normalizeStartOfWeek(startOfWeek2, locale3) {
  return typeof startOfWeek2 === "number" ? startOfWeek2 % 7 : getWeekStartByLocale$1(locale3);
}

// node_modules/@cloudscape-design/components/calendar/grid/index.js
var import_react208 = __toESM(require_react());

// node_modules/@cloudscape-design/components/calendar/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/calendar/styles.scoped.css";
var styles_css_default83 = {
  "calendar": "awsui_calendar_1ykar_1p0hg_153",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_1ykar_1p0hg_1",
  "root": "awsui_root_1ykar_1p0hg_180",
  "calendar-inner": "awsui_calendar-inner_1ykar_1p0hg_218",
  "calendar-header": "awsui_calendar-header_1ykar_1p0hg_222",
  "calendar-header-title": "awsui_calendar-header-title_1ykar_1p0hg_227",
  "calendar-next-btn": "awsui_calendar-next-btn_1ykar_1p0hg_235",
  "calendar-prev-btn": "awsui_calendar-prev-btn_1ykar_1p0hg_238",
  "calendar-grid": "awsui_calendar-grid_1ykar_1p0hg_241",
  "calendar-grid-dense": "awsui_calendar-grid-dense_1ykar_1p0hg_245",
  "calendar-grid-cell": "awsui_calendar-grid-cell_1ykar_1p0hg_253",
  "calendar-date-header": "awsui_calendar-date-header_1ykar_1p0hg_258",
  "calendar-date": "awsui_calendar-date_1ykar_1p0hg_258",
  "calendar-date-enabled": "awsui_calendar-date-enabled_1ykar_1p0hg_278",
  "calendar-date-current-page": "awsui_calendar-date-current-page_1ykar_1p0hg_288",
  "calendar-date-selected": "awsui_calendar-date-selected_1ykar_1p0hg_299",
  "calendar-date-current": "awsui_calendar-date-current_1ykar_1p0hg_288",
  "calendar-date-dense": "awsui_calendar-date-dense_1ykar_1p0hg_320",
  "date-inner": "awsui_date-inner_1ykar_1p0hg_328",
  "calendar-row": "awsui_calendar-row_1ykar_1p0hg_403",
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_1ykar_1p0hg_407"
};

// node_modules/@cloudscape-design/components/calendar/grid/index.js
var GridCell = (0, import_react208.forwardRef)((props2, focusedDateRef) => {
  const { disabledReason } = props2, rest = __rest(props2, ["disabledReason"]);
  const isDisabledWithReason = !!disabledReason;
  const { targetProps, descriptionEl } = useHiddenDescription(disabledReason);
  const ref = (0, import_react208.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react208.useState)(false);
  return import_react208.default.createElement(
    "td",
    Object.assign({ ref: useMergeRefs(focusedDateRef, ref) }, isDisabledWithReason ? targetProps : {}, rest, { onFocus: () => isDisabledWithReason ? setShowTooltip(true) : void 0, onBlur: () => isDisabledWithReason ? setShowTooltip(false) : void 0, onMouseEnter: () => isDisabledWithReason ? setShowTooltip(true) : void 0, onMouseLeave: () => isDisabledWithReason ? setShowTooltip(false) : void 0 }),
    props2.children,
    isDisabledWithReason && import_react208.default.createElement(
      import_react208.default.Fragment,
      null,
      descriptionEl,
      showTooltip && import_react208.default.createElement(Tooltip, { className: styles_css_default83["disabled-reason-tooltip"], trackRef: ref, value: disabledReason, onDismiss: () => setShowTooltip(false) })
    )
  );
});
applyDisplayName(GridCell, "GridCell");
function Grid({ isDateEnabled, dateDisabledReason, focusedDate, focusableDate, onSelectDate, selectedDate, ariaLabelledby, header, rows, isCurrentPage, renderDate, renderDateAnnouncement: renderDateAnnouncement2, isSameDate, onGridKeyDownHandler }) {
  const focusedDateRef = (0, import_react208.useRef)(null);
  useEffectOnUpdate(() => {
    if (focusedDate && focusedDateRef.current) {
      focusedDateRef.current.focus();
    }
  }, [focusedDate]);
  const rowLength = rows[0].length;
  const denseGrid = rowLength > 3;
  return import_react208.default.createElement(
    "table",
    { role: "grid", className: clsx_m_default(styles_css_default83["calendar-grid"], denseGrid && styles_css_default83["calendar-grid-dense"]), "aria-labelledby": ariaLabelledby },
    header,
    import_react208.default.createElement("tbody", { onKeyDown: onGridKeyDownHandler }, rows.map((row, rowIndex) => import_react208.default.createElement("tr", { key: rowIndex, className: styles_css_default83["calendar-row"] }, row.map((date2, dateIndex) => {
      const isFocusable2 = !!focusableDate && isSameDate(date2, focusableDate);
      const isSelected = !!selectedDate && isSameDate(date2, selectedDate);
      const isEnabled = !isDateEnabled || isDateEnabled(date2);
      const disabledReason = dateDisabledReason(date2);
      const isDisabledWithReason = !isEnabled && !!disabledReason;
      const isCurrentDate = isSameDate(date2, /* @__PURE__ */ new Date());
      let tabIndex = void 0;
      if (isFocusable2 && (isEnabled || isDisabledWithReason)) {
        tabIndex = 0;
      } else if (isEnabled || isDisabledWithReason) {
        tabIndex = -1;
      }
      return import_react208.default.createElement(
        GridCell,
        {
          key: `${rowIndex}:${dateIndex}`,
          ref: tabIndex === 0 ? focusedDateRef : void 0,
          tabIndex,
          "aria-current": isCurrentDate ? "date" : void 0,
          "aria-selected": isEnabled ? isSelected : void 0,
          "aria-disabled": !isEnabled,
          // Do not attach click event when the date is disabled, otherwise VO+safari announces clickable
          onClick: isEnabled ? () => onSelectDate(date2) : void 0,
          className: clsx_m_default(styles_css_default83["calendar-grid-cell"], styles_css_default83["calendar-date"], {
            [styles_css_default83["calendar-date-current-page"]]: isCurrentPage(date2),
            [styles_css_default83["calendar-date-enabled"]]: isEnabled,
            [styles_css_default83["calendar-date-selected"]]: isSelected,
            [styles_css_default83["calendar-date-current"]]: isCurrentDate,
            [styles_css_default83["calendar-date-dense"]]: denseGrid
          }),
          disabledReason: isDisabledWithReason ? disabledReason : void 0
        },
        import_react208.default.createElement("span", { className: styles_css_default83["date-inner"], "aria-hidden": "true" }, renderDate(date2)),
        import_react208.default.createElement(ScreenreaderOnly, null, renderDateAnnouncement2(date2, isCurrentDate))
      );
    }))))
  );
}

// node_modules/@cloudscape-design/components/calendar/grid/calendar-grid-header.js
var import_react209 = __toESM(require_react());

// node_modules/@cloudscape-design/components/calendar/utils/intl.js
function setDayIndex(date2, dayIndex) {
  const diff = dayIndex - date2.getDay();
  date2.setDate(date2.getDate() + diff);
}
function renderDayName(locale3, dayIndex, mode) {
  const tempDate = /* @__PURE__ */ new Date();
  setDayIndex(tempDate, dayIndex);
  return tempDate.toLocaleDateString(locale3, { weekday: mode });
}
function renderMonthAndYear(locale3, baseDate) {
  const result = baseDate.toLocaleDateString(locale3, {
    year: "numeric",
    month: "long"
  });
  return result;
}
function renderYear(locale3, date2) {
  return date2.toLocaleDateString(locale3, {
    year: "numeric"
  });
}
var dayLabelCache = /* @__PURE__ */ new Map();
function getDateLabel(locale3, date2, mode = "full") {
  const cacheKey = locale3 + date2.getTime() + mode;
  const cachedValue = dayLabelCache.get(cacheKey);
  if (cachedValue) {
    return cachedValue;
  }
  const value = date2.toLocaleDateString(locale3, {
    weekday: mode === "full" ? "long" : void 0,
    month: "long",
    day: "numeric",
    year: "numeric"
  });
  dayLabelCache.set(cacheKey, value);
  return value;
}
function renderTimeLabel(locale3, date2, format3) {
  let options = {};
  if (format3 === "hh") {
    options = { hour: "2-digit" };
  }
  if (format3 === "hh:mm") {
    options = { hour: "2-digit", minute: "2-digit" };
  }
  const value = date2.toLocaleTimeString(locale3, options);
  return value;
}

// node_modules/@cloudscape-design/components/calendar/grid/calendar-grid-header.js
function CalendarGridHeader({ locale: locale3, rows }) {
  return import_react209.default.createElement(
    "thead",
    null,
    import_react209.default.createElement("tr", null, rows[0].map((date2) => date2.getDay()).map((dayIndex) => import_react209.default.createElement(
      "th",
      { key: dayIndex, scope: "col", className: clsx_m_default(styles_css_default83["calendar-grid-cell"], styles_css_default83["calendar-date-header"]) },
      import_react209.default.createElement("span", { "aria-hidden": "true" }, renderDayName(locale3, dayIndex, "short")),
      import_react209.default.createElement(ScreenreaderOnly, null, renderDayName(locale3, dayIndex, "long"))
    )))
  );
}

// node_modules/@cloudscape-design/components/calendar/utils/navigation-day.js
function moveNextDay(startDate, isDateFocusable) {
  return moveDay(startDate, isDateFocusable, 1);
}
function movePrevDay(startDate, isDateFocusable) {
  return moveDay(startDate, isDateFocusable, -1);
}
function moveNextWeek(startDate, isDateFocusable) {
  return moveDay(startDate, isDateFocusable, 7);
}
function movePrevWeek(startDate, isDateFocusable) {
  return moveDay(startDate, isDateFocusable, -7);
}
function getBaseDay(date2, isDateFocusable) {
  const startDate = startOfMonth(date2);
  if (isDateFocusable(startDate)) {
    return startDate;
  }
  const firstEnabledDate = moveDay(startDate, isDateFocusable, 1);
  return isSameMonth(startDate, firstEnabledDate) ? firstEnabledDate : startDate;
}
function moveDay(startDate, isDateFocusable, step2) {
  const limitYears = 1;
  let current = addDays(startDate, step2);
  while (!isDateFocusable(current)) {
    if (Math.abs(differenceInYears(startDate, current)) > limitYears) {
      return startDate;
    }
    current = addDays(current, step2);
  }
  return current;
}

// node_modules/@cloudscape-design/components/calendar/utils/navigation-month.js
function moveNextMonth(startDate, isDateFocusable) {
  return moveMonth(startDate, isDateFocusable, 1);
}
function movePrevMonth(startDate, isDateFocusable) {
  return moveMonth(startDate, isDateFocusable, -1);
}
function moveMonthDown(startDate, isDateFocusable) {
  return moveMonth(startDate, isDateFocusable, 3);
}
function moveMonthUp(startDate, isDateFocusable) {
  return moveMonth(startDate, isDateFocusable, -3);
}
function getBaseMonth(date2, isDateFocusable) {
  const startDate = startOfYear(date2);
  if (isDateFocusable(startDate)) {
    return startDate;
  }
  const firstEnabledDate = moveMonth(startDate, isDateFocusable, 1);
  return isSameYear(startDate, firstEnabledDate) ? firstEnabledDate : startDate;
}
function moveMonth(startDate, isDateFocusable, step2) {
  const limitYears = 10;
  let current = addMonths(startDate, step2);
  while (!isDateFocusable(current)) {
    if (Math.abs(differenceInYears(startDate, current)) > limitYears) {
      return startDate;
    }
    current = addMonths(current, step2);
  }
  return current;
}

// node_modules/@cloudscape-design/components/calendar/grid/use-calendar-grid-keyboard-navigation.js
function useCalendarGridKeyboardNavigation({ baseDate, focusableDate, granularity, isDateEnabled, isDateFocusable, onChangePage, onFocusDate, onSelectDate }) {
  const isMonthPicker = granularity === "month";
  const moveDown = isMonthPicker ? moveMonthDown : moveNextWeek;
  const moveLeft = isMonthPicker ? movePrevMonth : movePrevDay;
  const moveRight = isMonthPicker ? moveNextMonth : moveNextDay;
  const moveUp = isMonthPicker ? moveMonthUp : movePrevWeek;
  const isSamePage = isMonthPicker ? isSameYear : isSameMonth;
  const onGridKeyDownHandler = (event) => {
    let updatedFocusDate;
    const keys = [KeyCode.up, KeyCode.down, KeyCode.left, KeyCode.right, KeyCode.space, KeyCode.enter];
    if (focusableDate === null || keys.indexOf(event.keyCode) === -1) {
      return;
    }
    event.preventDefault();
    handleKey(event, {
      onActivate: () => {
        if (!isDateEnabled(focusableDate)) {
          return;
        }
        onFocusDate(null);
        onSelectDate(focusableDate);
      },
      onBlockEnd: () => updatedFocusDate = moveDown(focusableDate, isDateFocusable),
      onBlockStart: () => updatedFocusDate = moveUp(focusableDate, isDateFocusable),
      onInlineStart: () => updatedFocusDate = moveLeft(focusableDate, isDateFocusable),
      onInlineEnd: () => updatedFocusDate = moveRight(focusableDate, isDateFocusable)
    });
    if (!updatedFocusDate) {
      return;
    }
    if (!isSamePage(updatedFocusDate, baseDate)) {
      onChangePage(updatedFocusDate);
    }
    onFocusDate(updatedFocusDate);
  };
  return onGridKeyDownHandler;
}

// node_modules/@cloudscape-design/components/calendar/grid/use-calendar-grid-rows.js
var import_react210 = __toESM(require_react());

// node_modules/mnth/web/add-days.js
var addDays2 = function addDays3(date2, days) {
  var result = new Date(date2);
  result.setDate(result.getDate() + days);
  return result;
};

// node_modules/mnth/web/set-date.js
var setDate2 = function setDate3(date2, day) {
  var result = new Date(date2);
  result.setDate(day);
  return result;
};

// node_modules/mnth/web/index.js
function ownKeys(object2, enumerableOnly) {
  var keys = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols2 = Object.getOwnPropertySymbols(object2);
    if (enumerableOnly) symbols2 = symbols2.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
    });
    keys.push.apply(keys, symbols2);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys(Object(source), true).forEach(function(key2) {
        _defineProperty(target, key2, source[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
      });
    }
  }
  return target;
}
var DAYS_IN_WEEK = 7;
var getCalendarMonth = function getCalendarMonth2(date2, options) {
  var _firstDayOfWeek$optio = _objectSpread({
    firstDayOfWeek: 1
  }, options), firstDayOfWeek = _firstDayOfWeek$optio.firstDayOfWeek;
  var firstDateOfMonth = new Date(date2.getFullYear(), date2.getMonth(), 1);
  var lastDateOfMonth = new Date(date2.getFullYear(), date2.getMonth() + 1, 0);
  var firstWeekdayOfMonth = firstDateOfMonth.getDay();
  var lastWeekdayOfMonth = lastDateOfMonth.getDay();
  var daysInMonth = lastDateOfMonth.getDate();
  var daysToPrepend = (firstWeekdayOfMonth - firstDayOfWeek + DAYS_IN_WEEK) % DAYS_IN_WEEK;
  var daysToAppend = (DAYS_IN_WEEK - 1 - lastWeekdayOfMonth + firstDayOfWeek) % DAYS_IN_WEEK;
  var month = [];
  var week = [];
  for (var i2 = 1 - daysToPrepend; i2 <= daysInMonth + daysToAppend + 1; i2++) {
    if (i2 <= 0) {
      week.push(addDays2(firstDateOfMonth, i2 - 1));
    } else if (i2 > daysInMonth) {
      week.push(addDays2(lastDateOfMonth, i2 - daysInMonth));
    } else {
      week.push(setDate2(date2, i2));
    }
    if (week.length === 7) {
      month.push(week);
      week = [];
    }
  }
  return month;
};

// node_modules/@cloudscape-design/components/internal/utils/date-time/calendar.js
function getCalendarYear(date2) {
  const year = date2.getFullYear();
  return new Array(4).fill(0).map((_, i2) => new Array(3).fill(0).map((_2, j) => new Date(year, i2 * 3 + j)));
}
var MonthCalendar = class {
  constructor({ padDates, baseDate, startOfWeek: startOfWeek2, selection }) {
    this.padDates = padDates;
    this.weeks = [];
    this.range = [baseDate, baseDate];
    const allCalendarDates = getCalendarMonthWithSixRows(baseDate, { startOfWeek: startOfWeek2, padDates });
    this.weekdays = allCalendarDates[0].map((date2) => date2.getDay());
    const isDateVisible = (weekIndex, dayIndex) => {
      const week = allCalendarDates[weekIndex];
      const date2 = week === null || week === void 0 ? void 0 : week[dayIndex];
      if (!date2) {
        return false;
      }
      switch (padDates) {
        case "before":
          return isSameMonth(date2, baseDate) || isBefore(date2, baseDate);
        case "after":
          return isSameMonth(date2, baseDate) || isAfter(date2, baseDate);
      }
    };
    const isDateInRange = (weekIndex, dayIndex) => {
      const week = allCalendarDates[weekIndex];
      const date2 = week === null || week === void 0 ? void 0 : week[dayIndex];
      return !!(date2 && selection && checkDateIsInRange(date2, selection[0], selection[1]));
    };
    const getWeekTestIndex = (weekIndex) => {
      var _a;
      const week = allCalendarDates[weekIndex];
      if (!week) {
        return void 0;
      }
      if (!isSameMonth(week[0], baseDate) && !isSameMonth(week[week.length - 1], baseDate)) {
        return void 0;
      }
      return ((_a = getWeekTestIndex(weekIndex - 1)) !== null && _a !== void 0 ? _a : 0) + 1;
    };
    for (let weekIndex = 0; weekIndex < allCalendarDates.length; weekIndex++) {
      const daysOfWeek = allCalendarDates[weekIndex];
      const week = { days: [], testIndex: getWeekTestIndex(weekIndex) };
      for (let dayIndex = 0; dayIndex < daysOfWeek.length; dayIndex++) {
        const date2 = daysOfWeek[dayIndex];
        const isVisible3 = isDateVisible(weekIndex, dayIndex);
        const isSelected = !!(selection && (isSameDay(date2, selection[0]) || isSameDay(date2, selection[1])));
        const isInRange = isDateInRange(weekIndex, dayIndex);
        const isTop = isVisible3 && !isDateVisible(weekIndex - 1, dayIndex);
        const isBottom = isVisible3 && !isDateVisible(weekIndex + 1, dayIndex);
        const isLeft = isVisible3 && !isDateVisible(weekIndex, dayIndex - 1);
        const isRight = isVisible3 && !isDateVisible(weekIndex, dayIndex + 1);
        const isRangeTop = isInRange && !isDateInRange(weekIndex - 1, dayIndex);
        const isRangeBottom = isInRange && !isDateInRange(weekIndex + 1, dayIndex);
        const isRangeLeft = isInRange && !isDateInRange(weekIndex, dayIndex - 1);
        const isRangeRight = isInRange && !isDateInRange(weekIndex, dayIndex + 1);
        week.days.push({
          date: date2,
          isVisible: isVisible3,
          isSelected,
          isInRange,
          isSelectionTop: isTop || isRangeTop,
          isSelectionBottom: isBottom || isRangeBottom,
          isSelectionLeft: isLeft || isRangeLeft,
          isSelectionRight: isRight || isRangeRight
        });
      }
      this.weeks.push(week);
    }
  }
};
var YearCalendar = class {
  constructor({ baseDate, selection }) {
    this.quarters = [];
    this.range = [baseDate, baseDate];
    const allCalendarMonths = getCalendarYear(baseDate);
    const isMonthInRange = (quarterIndex, monthIndex) => {
      const quarter = allCalendarMonths[quarterIndex];
      const month = quarter === null || quarter === void 0 ? void 0 : quarter[monthIndex];
      return !!(month && selection && checkMonthIsInRange(month, selection[0], selection[1]));
    };
    const isMonthVisible = (quarterIndex, monthIndex) => {
      const quarter = allCalendarMonths[quarterIndex];
      const month = quarter === null || quarter === void 0 ? void 0 : quarter[monthIndex];
      if (!month) {
        return false;
      }
      return isSameYear(month, baseDate);
    };
    for (let quarterIndex = 0; quarterIndex < allCalendarMonths.length; quarterIndex++) {
      const monthsOfQuarter = allCalendarMonths[quarterIndex];
      const quarter = { months: [] };
      for (let monthIndex = 0; monthIndex < monthsOfQuarter.length; monthIndex++) {
        const month = monthsOfQuarter[monthIndex];
        const isVisible3 = isMonthVisible(quarterIndex, monthIndex);
        const isSelected = !!(selection && (isSameMonth(month, selection[0]) || isSameMonth(month, selection[1])));
        const isInRange = isMonthInRange(quarterIndex, monthIndex);
        const isTop = isVisible3 && !isMonthVisible(quarterIndex - 1, monthIndex);
        const isBottom = isVisible3 && !isMonthVisible(quarterIndex + 1, monthIndex);
        const isLeft = isVisible3 && !isMonthVisible(quarterIndex, monthIndex - 1);
        const isRight = isVisible3 && !isMonthVisible(quarterIndex, monthIndex + 1);
        const isRangeTop = isInRange && !isMonthInRange(quarterIndex - 1, monthIndex);
        const isRangeBottom = isInRange && !isMonthInRange(quarterIndex + 1, monthIndex);
        const isRangeLeft = isInRange && !isMonthInRange(quarterIndex, monthIndex - 1);
        const isRangeRight = isInRange && !isMonthInRange(quarterIndex, monthIndex + 1);
        quarter.months.push({
          date: month,
          isVisible: isVisible3,
          isSelected,
          isInRange,
          isSelectionTop: isTop || isRangeTop,
          isSelectionBottom: isBottom || isRangeBottom,
          isSelectionLeft: isLeft || isRangeLeft,
          isSelectionRight: isRight || isRangeRight
        });
      }
      this.quarters.push(quarter);
    }
  }
};
function getCalendarMonthWithSixRows(date2, { startOfWeek: startOfWeek2, padDates }) {
  switch (padDates) {
    case "before":
      return [...getPrevMonthRows(date2, startOfWeek2), ...getCurrentMonthRows(date2, startOfWeek2)].slice(-6);
    case "after":
      return [...getCurrentMonthRows(date2, startOfWeek2), ...getNextMonthRows(date2, startOfWeek2)].slice(0, 6);
  }
}
function checkDateIsInRange(date2, dateOne, dateTwo) {
  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {
    return false;
  }
  const inRange = isAfter(date2, dateOne) && isBefore(date2, dateTwo) || isAfter(date2, dateTwo) && isBefore(date2, dateOne);
  return inRange || isSameDay(date2, dateOne) || isSameDay(date2, dateTwo);
}
function checkMonthIsInRange(date2, dateOne, dateTwo) {
  if (!dateOne || !dateTwo || isSameMonth(dateOne, dateTwo)) {
    return false;
  }
  const inRange = isAfter(date2, dateOne) && isBefore(date2, dateTwo) || isAfter(date2, dateTwo) && isBefore(date2, dateOne);
  return inRange || isSameMonth(date2, dateOne) || isSameMonth(date2, dateTwo);
}
function getCurrentMonthRows(date2, firstDayOfWeek) {
  return getCalendarMonth(date2, { firstDayOfWeek });
}
function getPrevMonthRows(date2, firstDayOfWeek) {
  const rows = getCalendarMonth(subMonths(date2, 1), { firstDayOfWeek });
  const lastDay = rows[rows.length - 1][rows[rows.length - 1].length - 1];
  return !isSameMonth(date2, lastDay) ? rows : rows.slice(0, -1);
}
function getNextMonthRows(date2, firstDayOfWeek) {
  const rows = getCalendarMonth(addMonths(date2, 1), { firstDayOfWeek });
  const firstDay = rows[0][0];
  return !isSameMonth(date2, firstDay) ? rows : rows.slice(1);
}

// node_modules/@cloudscape-design/components/calendar/grid/use-calendar-grid-rows.js
function useCalendarGridRows({ baseDate, granularity, locale: locale3, startOfWeek: rawStartOfWeek }) {
  const isMonthPicker = granularity === "month";
  const rows = (0, import_react210.useMemo)(() => {
    if (isMonthPicker) {
      return getCalendarYear(baseDate);
    } else {
      const startOfWeek2 = normalizeStartOfWeek(rawStartOfWeek, locale3);
      return getCalendarMonthWithSixRows(baseDate, { startOfWeek: startOfWeek2, padDates: "after" });
    }
  }, [baseDate, isMonthPicker, rawStartOfWeek, locale3]);
  return rows;
}

// node_modules/@cloudscape-design/components/calendar/header/index.js
var import_react212 = __toESM(require_react());

// node_modules/@cloudscape-design/components/calendar/header/header-button.js
var import_react211 = __toESM(require_react());
function HeaderPrevButton({ ariaLabel, onChange }) {
  return import_react211.default.createElement(InternalButton, { iconName: "angle-left", ariaLabel, variant: "icon", onClick: () => onChange(-1), formAction: "none", className: styles_css_default83["calendar-prev-btn"] });
}
function HeaderNextButton({ ariaLabel, onChange }) {
  return import_react211.default.createElement(InternalButton, { iconName: "angle-right", ariaLabel, variant: "icon", onClick: () => onChange(1), formAction: "none", className: styles_css_default83["calendar-next-btn"] });
}

// node_modules/@cloudscape-design/components/calendar/header/index.js
var CalendarHeader = ({ formattedDate, onChange, previousLabel, nextLabel, headingId }) => {
  return import_react212.default.createElement(
    "div",
    { className: styles_css_default83["calendar-header"] },
    import_react212.default.createElement(HeaderPrevButton, { ariaLabel: previousLabel, onChange }),
    import_react212.default.createElement("h2", { className: styles_css_default83["calendar-header-title"], id: headingId }, formattedDate),
    import_react212.default.createElement(HeaderNextButton, { ariaLabel: nextLabel, onChange })
  );
};
var header_default = CalendarHeader;

// node_modules/@cloudscape-design/components/calendar/use-calendar-labels.js
function useCalendarLabels({ granularity, locale: locale3, i18nStrings, previousMonthAriaLabel, nextMonthAriaLabel, todayAriaLabel }) {
  var _a, _b, _c;
  const i18n = useInternalI18n("calendar");
  const isMonthPicker = granularity === "month";
  const previousButtonLabel = isMonthPicker ? i18n("i18nStrings.previousYearAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousYearAriaLabel) : i18n("previousMonthAriaLabel", (_a = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousMonthAriaLabel) !== null && _a !== void 0 ? _a : previousMonthAriaLabel);
  const nextButtonLabel = isMonthPicker ? i18n("i18nStrings.nextYearAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextYearAriaLabel) : i18n("nextMonthAriaLabel", (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextMonthAriaLabel) !== null && _b !== void 0 ? _b : nextMonthAriaLabel);
  const currentDateLabel = isMonthPicker ? i18n("i18nStrings.currentMonthAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.currentMonthAriaLabel) : i18n("todayAriaLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.todayAriaLabel) !== null && _c !== void 0 ? _c : todayAriaLabel);
  const renderDate = (date2) => isMonthPicker ? date2.toLocaleString(locale3, { month: "short" }) : date2.getDate().toString();
  const renderDateAnnouncement2 = (date2, isCurrentDate) => {
    const formattedDate = isMonthPicker ? renderMonthAndYear(locale3, date2) : getDateLabel(locale3, date2, "short");
    if (isCurrentDate && currentDateLabel) {
      return formattedDate + ". " + currentDateLabel;
    }
    return formattedDate;
  };
  const renderHeaderText = (date2) => isMonthPicker ? date2.getFullYear().toString() : renderMonthAndYear(locale3, date2);
  return {
    previousButtonLabel,
    nextButtonLabel,
    renderDate,
    renderDateAnnouncement: renderDateAnnouncement2,
    renderHeaderText
  };
}

// node_modules/@cloudscape-design/components/calendar/internal.js
function Calendar(_a) {
  var { value, locale: locale3 = "", startOfWeek: startOfWeek2, isDateEnabled = () => true, dateDisabledReason = () => "", ariaLabel, ariaLabelledby, ariaDescribedby, onChange, __internalRootRef, i18nStrings, granularity = "day", previousMonthAriaLabel, nextMonthAriaLabel, todayAriaLabel } = _a, rest = __rest(_a, ["value", "locale", "startOfWeek", "isDateEnabled", "dateDisabledReason", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "onChange", "__internalRootRef", "i18nStrings", "granularity", "previousMonthAriaLabel", "nextMonthAriaLabel", "todayAriaLabel"]);
  checkControlled("Calendar", "value", value, "onChange", onChange);
  const baseProps = getBaseProps(rest);
  const normalizedLocale = normalizeLocale("Calendar", locale3);
  const gridWrapperRef = (0, import_react213.useRef)(null);
  const [focusedDate, setFocusedDate] = (0, import_react213.useState)(null);
  const valueDateCache = useDateCache();
  const focusedDateCache = useDateCache();
  const parsedValue = value && value.length >= 4 ? parseDate2(value) : null;
  const memoizedValue = parsedValue && !isNaN(parsedValue.getDate()) ? valueDateCache(parsedValue) : null;
  const defaultDisplayedDate = memoizedValue !== null && memoizedValue !== void 0 ? memoizedValue : /* @__PURE__ */ new Date();
  const [displayedDate, setDisplayedDate] = (0, import_react213.useState)(defaultDisplayedDate);
  const headingId = useUniqueId("calendar-heading");
  const isMonthPicker = granularity === "month";
  const isDateFocusable = (date2) => isDateEnabled(date2) || !isDateEnabled(date2) && !!dateDisabledReason(date2);
  const baseDate = isMonthPicker ? getBaseMonth(displayedDate, isDateEnabled) : getBaseDay(displayedDate, isDateEnabled);
  const isSameDate = isMonthPicker ? isSameMonth : isSameDay;
  const isSamePage = isMonthPicker ? isSameYear : isSameMonth;
  const isCurrentPage = (date2) => isMonthPicker || isSameMonth(date2, baseDate);
  const { previousButtonLabel, nextButtonLabel, renderDate, renderDateAnnouncement: renderDateAnnouncement2, renderHeaderText } = useCalendarLabels({
    granularity,
    i18nStrings,
    locale: normalizedLocale,
    previousMonthAriaLabel,
    nextMonthAriaLabel,
    todayAriaLabel
  });
  const gridRows = useCalendarGridRows({ baseDate, granularity, startOfWeek: startOfWeek2, locale: normalizedLocale });
  (0, import_react213.useEffect)(() => {
    if (memoizedValue) {
      setDisplayedDate((prev) => prev.getTime() !== memoizedValue.getTime() ? memoizedValue : prev);
    }
  }, [memoizedValue]);
  const selectFocusedDate = (selected, baseDate2) => {
    if (selected && isDateFocusable(selected) && isSamePage(selected, baseDate2)) {
      return selected;
    }
    const today = /* @__PURE__ */ new Date();
    if (isDateFocusable(today) && isSamePage(today, baseDate2)) {
      return today;
    }
    if (isDateFocusable(baseDate2)) {
      return baseDate2;
    }
    return null;
  };
  const focusableDate = focusedDate || selectFocusedDate(memoizedValue, baseDate);
  const onHeaderChangePageHandler = (amount) => {
    const movePage = isMonthPicker ? addYears : addMonths;
    const newDate2 = movePage(baseDate, amount);
    onChangePageHandler(newDate2);
  };
  const onChangePageHandler = (newDate2) => {
    setDisplayedDate(newDate2);
    setFocusedDate(null);
  };
  const onGridFocusDateHandler = (date2) => {
    if (date2) {
      setFocusedDate(date2 ? focusedDateCache(date2) : null);
    }
  };
  const onGridSelectDateHandler = (date2) => {
    fireNonCancelableEvent(onChange, { value: formatDate(date2, granularity) });
    setFocusedDate(null);
  };
  const onGridBlur = (event) => {
    var _a2;
    const newFocusTargetIsInGrid = event.relatedTarget && ((_a2 = gridWrapperRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.relatedTarget));
    if (!newFocusTargetIsInGrid) {
      setFocusedDate(null);
    }
  };
  const onGridKeyDownHandler = useCalendarGridKeyboardNavigation({
    baseDate,
    focusableDate,
    granularity,
    isDateEnabled,
    isDateFocusable,
    onChangePage: onChangePageHandler,
    onFocusDate: onGridFocusDateHandler,
    onSelectDate: onGridSelectDateHandler
  });
  const headerText = renderHeaderText(baseDate);
  return import_react213.default.createElement(
    "div",
    Object.assign({ ref: __internalRootRef }, baseProps, { role: "group", "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, className: clsx_m_default(styles_css_default83.root, styles_css_default83.calendar, baseProps.className) }),
    import_react213.default.createElement(
      "div",
      { className: styles_css_default83["calendar-inner"] },
      import_react213.default.createElement(header_default, { formattedDate: headerText, onChange: onHeaderChangePageHandler, previousLabel: previousButtonLabel, nextLabel: nextButtonLabel, headingId }),
      import_react213.default.createElement(
        "div",
        { onBlur: onGridBlur, ref: gridWrapperRef },
        import_react213.default.createElement(Grid, { isDateEnabled, dateDisabledReason, focusedDate, focusableDate, onSelectDate: onGridSelectDateHandler, onFocusDate: onGridFocusDateHandler, onChangePage: onChangePageHandler, selectedDate: memoizedValue, ariaLabelledby: headingId, header: isMonthPicker ? null : import_react213.default.createElement(CalendarGridHeader, { locale: normalizedLocale, rows: gridRows }), rows: gridRows, isCurrentPage, renderDate, renderDateAnnouncement: renderDateAnnouncement2, isSameDate, onGridKeyDownHandler })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/calendar/index.js
function Calendar2(_a) {
  var { locale: locale3 = "", isDateEnabled = () => true, granularity = "day" } = _a, props2 = __rest(_a, ["locale", "isDateEnabled", "granularity"]);
  const baseComponentProps = useBaseComponent("Calendar", {
    props: { granularity },
    metadata: {
      hasDisabledReasons: Boolean(props2.dateDisabledReason)
    }
  });
  return import_react214.default.createElement(Calendar, Object.assign({}, props2, baseComponentProps, { locale: locale3, isDateEnabled, granularity }));
}
applyDisplayName(Calendar2, "Calendar");

// node_modules/@cloudscape-design/components/cards/index.js
var import_react215 = __toESM(require_react());

// node_modules/@cloudscape-design/components/cards/cards-layout-helper.js
var WIDTHS = [1920, 1400, 1200, 992, 768];
var defaultCardsPerRow = WIDTHS.map((value, index, widths) => ({
  minWidth: value,
  cards: widths.length + 1 - index
}));
var getCardsPerRow = (width, config) => {
  if (config.length === 0) {
    config = defaultCardsPerRow;
  }
  let cardsPerRow = 1;
  const sortedConfig = config.slice().map((value) => ({
    minWidth: value.minWidth || 0,
    cards: value.cards
  })).sort((a4, b2) => b2.minWidth - a4.minWidth);
  sortedConfig.some((layout) => {
    if (width >= layout.minWidth) {
      cardsPerRow = layout.cards;
      return true;
    }
  });
  return cardsPerRow;
};

// node_modules/@cloudscape-design/components/cards/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/cards/styles.scoped.css";
var styles_css_default84 = {
  "card-inner": "awsui_card-inner_p8a6i_1m5fe_161",
  "root": "awsui_root_p8a6i_1m5fe_193",
  "header-variant-full-page": "awsui_header-variant-full-page_p8a6i_1m5fe_232",
  "header-refresh": "awsui_header-refresh_p8a6i_1m5fe_232",
  "list": "awsui_list_p8a6i_1m5fe_239",
  "list-grid-1": "awsui_list-grid-1_p8a6i_1m5fe_250",
  "card": "awsui_card_p8a6i_1m5fe_161",
  "list-grid-2": "awsui_list-grid-2_p8a6i_1m5fe_253",
  "list-grid-3": "awsui_list-grid-3_p8a6i_1m5fe_256",
  "list-grid-4": "awsui_list-grid-4_p8a6i_1m5fe_259",
  "list-grid-5": "awsui_list-grid-5_p8a6i_1m5fe_262",
  "list-grid-6": "awsui_list-grid-6_p8a6i_1m5fe_265",
  "list-grid-7": "awsui_list-grid-7_p8a6i_1m5fe_268",
  "list-grid-8": "awsui_list-grid-8_p8a6i_1m5fe_271",
  "list-grid-9": "awsui_list-grid-9_p8a6i_1m5fe_274",
  "list-grid-10": "awsui_list-grid-10_p8a6i_1m5fe_277",
  "list-grid-11": "awsui_list-grid-11_p8a6i_1m5fe_280",
  "list-grid-12": "awsui_list-grid-12_p8a6i_1m5fe_283",
  "list-grid-13": "awsui_list-grid-13_p8a6i_1m5fe_286",
  "list-grid-14": "awsui_list-grid-14_p8a6i_1m5fe_289",
  "list-grid-15": "awsui_list-grid-15_p8a6i_1m5fe_292",
  "list-grid-16": "awsui_list-grid-16_p8a6i_1m5fe_295",
  "list-grid-17": "awsui_list-grid-17_p8a6i_1m5fe_298",
  "list-grid-18": "awsui_list-grid-18_p8a6i_1m5fe_301",
  "list-grid-19": "awsui_list-grid-19_p8a6i_1m5fe_304",
  "list-grid-20": "awsui_list-grid-20_p8a6i_1m5fe_307",
  "selection-control": "awsui_selection-control_p8a6i_1m5fe_311",
  "loading": "awsui_loading_p8a6i_1m5fe_321",
  "empty": "awsui_empty_p8a6i_1m5fe_322",
  "has-header": "awsui_has-header_p8a6i_1m5fe_329",
  "refresh": "awsui_refresh_p8a6i_1m5fe_332",
  "card-header": "awsui_card-header_p8a6i_1m5fe_403",
  "card-header-inner": "awsui_card-header-inner_p8a6i_1m5fe_411",
  "card-selectable": "awsui_card-selectable_p8a6i_1m5fe_415",
  "card-selected": "awsui_card-selected_p8a6i_1m5fe_418",
  "section": "awsui_section_p8a6i_1m5fe_426",
  "section-header": "awsui_section-header_p8a6i_1m5fe_434",
  "section-content": "awsui_section-content_p8a6i_1m5fe_440",
  "footer-pagination": "awsui_footer-pagination_p8a6i_1m5fe_450"
};

// node_modules/@cloudscape-design/components/cards/index.js
var Cards = import_react215.default.forwardRef(function(_a, ref) {
  var { items = [], cardDefinition, cardsPerRow = [], header, filter, pagination, preferences, empty, loading, loadingText, trackBy, selectedItems, selectionType, isItemDisabled, onSelectionChange, ariaLabels, visibleSections, stickyHeader, stickyHeaderVerticalOffset, variant = "container", renderAriaLive, firstIndex = 1, totalItemsCount, entireCardClickable } = _a, rest = __rest(_a, ["items", "cardDefinition", "cardsPerRow", "header", "filter", "pagination", "preferences", "empty", "loading", "loadingText", "trackBy", "selectedItems", "selectionType", "isItemDisabled", "onSelectionChange", "ariaLabels", "visibleSections", "stickyHeader", "stickyHeaderVerticalOffset", "variant", "renderAriaLive", "firstIndex", "totalItemsCount", "entireCardClickable"]);
  const { __internalRootRef } = useBaseComponent("Cards", {
    props: { entireCardClickable, selectionType, stickyHeader, variant },
    metadata: { usesVisibleSections: !!visibleSections }
  });
  const baseProps = getBaseProps(rest);
  const isRefresh = useVisualRefresh();
  const isMobile = useMobile();
  const computedVariant = isRefresh ? variant : "container";
  const headerIdRef = (0, import_react215.useRef)(void 0);
  const setHeaderRef = (0, import_react215.useCallback)((id) => {
    headerIdRef.current = id;
  }, []);
  const isLabelledByHeader = !(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.cardsLabel) && !!header;
  const [columns, measureRef] = useContainerQuery(({ contentBoxWidth }) => getCardsPerRow(contentBoxWidth, cardsPerRow), [cardsPerRow]);
  const refObject = (0, import_react215.useRef)(null);
  const mergedRef = useMergeRefs(measureRef, refObject, __internalRootRef);
  const getMouseDownTarget = useMouseDownTarget();
  const i18n = useInternalI18n("cards");
  const { isItemSelected, getItemSelectionProps } = useSelection({
    items,
    trackBy,
    selectedItems,
    selectionType,
    isItemDisabled,
    onSelectionChange,
    ariaLabels: {
      itemSelectionLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.itemSelectionLabel,
      selectionGroupLabel: i18n("ariaLabels.selectionGroupLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel)
    }
  });
  const hasToolsHeader = header || filter || pagination || preferences;
  const hasFooterPagination = isMobile && variant === "full-page" && !!pagination;
  const headerRef = (0, import_react215.useRef)(null);
  const { scrollToTop, scrollToItem } = stickyScrolling(refObject, headerRef);
  stickyHeader = !isMobile && stickyHeader;
  const onCardFocus = (event) => {
    if (stickyHeader && !event.currentTarget.contains(getMouseDownTarget())) {
      scrollToItem(event.currentTarget);
    }
  };
  (0, import_react215.useImperativeHandle)(ref, () => ({
    scrollToTop: () => {
      if (stickyHeader) {
        scrollToTop();
      }
    }
  }), [stickyHeader, scrollToTop]);
  let status;
  if (loading) {
    status = import_react215.default.createElement(
      "div",
      { className: styles_css_default84.loading },
      import_react215.default.createElement(
        StatusIndicator,
        { type: "loading" },
        import_react215.default.createElement(internal_default2, { tagName: "span" }, loadingText)
      )
    );
  } else if (empty && !items.length) {
    status = import_react215.default.createElement("div", { className: styles_css_default84.empty }, empty);
  }
  return import_react215.default.createElement(
    LinkDefaultVariantContext.Provider,
    { value: { defaultVariant: "primary" } },
    import_react215.default.createElement(
      AnalyticsFunnelSubStep,
      null,
      import_react215.default.createElement(
        "div",
        Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default84.root), ref: mergedRef }),
        import_react215.default.createElement(
          InternalContainerAsSubstep,
          { header: hasToolsHeader && import_react215.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default84.header, isRefresh && styles_css_default84["header-refresh"], styles_css_default84[`header-variant-${computedVariant}`]) },
            import_react215.default.createElement(
              CollectionLabelContext.Provider,
              { value: { assignId: setHeaderRef } },
              import_react215.default.createElement(ToolsHeader, { header, filter, pagination, preferences })
            )
          ), footer: hasFooterPagination && import_react215.default.createElement("div", { className: styles_css_default84["footer-pagination"] }, pagination), disableContentPaddings: true, disableHeaderPaddings: computedVariant === "full-page", variant: computedVariant === "container" ? "cards" : computedVariant, __stickyHeader: stickyHeader, __stickyOffset: stickyHeaderVerticalOffset, __headerRef: headerRef, __fullPage: computedVariant === "full-page", __disableFooterDivider: true },
          import_react215.default.createElement(
            "div",
            { className: clsx_m_default(hasToolsHeader && styles_css_default84["has-header"], isRefresh && styles_css_default84.refresh, styles_css_default84[`header-variant-${computedVariant}`]) },
            !!renderAriaLive && !!firstIndex && import_react215.default.createElement(
              internal_default2,
              { hidden: true, tagName: "span" },
              import_react215.default.createElement("span", null, renderAriaLive({ totalItemsCount, firstIndex, lastIndex: firstIndex + items.length - 1 }))
            ),
            status !== null && status !== void 0 ? status : import_react215.default.createElement(CardsList, { items, cardDefinition, trackBy, selectionType, columns, isItemSelected, getItemSelectionProps, visibleSections, onFocus: onCardFocus, ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.cardsLabel, ariaLabelledby: isLabelledByHeader && headerIdRef.current ? headerIdRef.current : void 0, entireCardClickable })
          )
        )
      )
    )
  );
});
var cards_default = Cards;
var CardsList = ({ items, cardDefinition, trackBy, selectionType, columns, isItemSelected, getItemSelectionProps, visibleSections, onFocus, ariaLabelledby, ariaLabel, entireCardClickable }) => {
  const selectable = !!selectionType;
  const canClickEntireCard = selectable && entireCardClickable;
  const isRefresh = useVisualRefresh();
  const { moveFocusDown, moveFocusUp } = useSelectionFocusMove(selectionType, items.length);
  let visibleSectionsDefinition = cardDefinition.sections || [];
  visibleSectionsDefinition = visibleSections ? visibleSectionsDefinition.filter((section) => section.id && visibleSections.indexOf(section.id) !== -1) : visibleSectionsDefinition;
  let listRole = void 0;
  let listItemRole = void 0;
  if (selectable) {
    listRole = "group";
    listItemRole = "presentation";
  }
  return import_react215.default.createElement("ol", Object.assign({ className: clsx_m_default(styles_css_default84.list, styles_css_default84[`list-grid-${columns || 1}`]), role: listRole, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel }, focusMarkers && focusMarkers.root), items.map((item, index) => import_react215.default.createElement(
    "li",
    Object.assign({ className: clsx_m_default(styles_css_default84.card, {
      [styles_css_default84["card-selectable"]]: selectable,
      [styles_css_default84["card-selected"]]: selectable && isItemSelected(item)
    }), key: getItemKey(trackBy, item, index), onFocus }, focusMarkers && focusMarkers.item, { role: listItemRole }),
    import_react215.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default84["card-inner"], isRefresh && styles_css_default84.refresh), onClick: canClickEntireCard ? (event) => {
        var _a;
        getItemSelectionProps === null || getItemSelectionProps === void 0 ? void 0 : getItemSelectionProps(item).onChange();
        (_a = event.currentTarget.querySelector("input")) === null || _a === void 0 ? void 0 : _a.focus();
      } : void 0 },
      import_react215.default.createElement(
        "div",
        { className: styles_css_default84["card-header"] },
        import_react215.default.createElement("div", { className: styles_css_default84["card-header-inner"] }, cardDefinition.header ? cardDefinition.header(item) : ""),
        getItemSelectionProps && import_react215.default.createElement(
          "div",
          { className: styles_css_default84["selection-control"] },
          import_react215.default.createElement(SelectionControl, Object.assign({ onFocusDown: moveFocusDown, onFocusUp: moveFocusUp }, getItemSelectionProps(item)))
        )
      ),
      visibleSectionsDefinition.map(({ width = 100, header, content, id }, index2) => import_react215.default.createElement(
        "div",
        { key: id || index2, className: styles_css_default84.section, style: { width: `${width}%` } },
        header ? import_react215.default.createElement("div", { className: styles_css_default84["section-header"] }, header) : "",
        content ? import_react215.default.createElement("div", { className: styles_css_default84["section-content"] }, content(item)) : ""
      ))
    )
  )));
};
applyDisplayName(Cards, "Cards");

// node_modules/@cloudscape-design/components/checkbox/index.js
var import_react216 = __toESM(require_react());
var Checkbox = import_react216.default.forwardRef((_a, ref) => {
  var props2 = __rest(_a, []);
  const baseComponentProps = useBaseComponent("Checkbox", {
    props: { readOnly: props2.readOnly }
  });
  return import_react216.default.createElement(internal_default6, Object.assign({}, props2, baseComponentProps, { ref, __injectAnalyticsComponentMetadata: true }));
});
applyDisplayName(Checkbox, "Checkbox");
var checkbox_default = Checkbox;

// node_modules/@cloudscape-design/components/code-editor/index.js
var import_react230 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/error-screen.js
var import_react217 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/code-editor/styles.scoped.css";
var styles_css_default85 = {
  "code-editor-refresh": "awsui_code-editor-refresh_1gl9c_wxtw7_158",
  "code-editor": "awsui_code-editor_1gl9c_wxtw7_158",
  "pane": "awsui_pane_1gl9c_wxtw7_492",
  "pane__close-container": "awsui_pane__close-container_1gl9c_wxtw7_503",
  "pane__list": "awsui_pane__list_1gl9c_wxtw7_508",
  "pane__table": "awsui_pane__table_1gl9c_wxtw7_515",
  "pane__item": "awsui_pane__item_1gl9c_wxtw7_521",
  "pane__cell": "awsui_pane__cell_1gl9c_wxtw7_521",
  "pane__item--highlighted": "awsui_pane__item--highlighted_1gl9c_wxtw7_535",
  "pane__location": "awsui_pane__location_1gl9c_wxtw7_556",
  "pane__description": "awsui_pane__description_1gl9c_wxtw7_556",
  "focus-lock": "awsui_focus-lock_1gl9c_wxtw7_571",
  "editor": "awsui_editor_1gl9c_wxtw7_615",
  "editor-refresh": "awsui_editor-refresh_1gl9c_wxtw7_645",
  "status-bar": "awsui_status-bar_1gl9c_wxtw7_650",
  "status-bar-with-hidden-pane": "awsui_status-bar-with-hidden-pane_1gl9c_wxtw7_659",
  "status-bar__left": "awsui_status-bar__left_1gl9c_wxtw7_663",
  "status-bar__right": "awsui_status-bar__right_1gl9c_wxtw7_670",
  "status-bar__language-mode": "awsui_status-bar__language-mode_1gl9c_wxtw7_674",
  "status-bar__cursor-position": "awsui_status-bar__cursor-position_1gl9c_wxtw7_674",
  "status-bar__cog-button": "awsui_status-bar__cog-button_1gl9c_wxtw7_680",
  "tab-list": "awsui_tab-list_1gl9c_wxtw7_685",
  "tab-button": "awsui_tab-button_1gl9c_wxtw7_690",
  "tab-button--refresh": "awsui_tab-button--refresh_1gl9c_wxtw7_723",
  "tab-button--warnings": "awsui_tab-button--warnings_1gl9c_wxtw7_726",
  "tab-button--active": "awsui_tab-button--active_1gl9c_wxtw7_735",
  "tab-button--disabled": "awsui_tab-button--disabled_1gl9c_wxtw7_751",
  "tab-button--divider": "awsui_tab-button--divider_1gl9c_wxtw7_784",
  "tab-button--errors": "awsui_tab-button--errors_1gl9c_wxtw7_791",
  "count": "awsui_count_1gl9c_wxtw7_800",
  "text": "awsui_text_1gl9c_wxtw7_803",
  "loading-screen": "awsui_loading-screen_1gl9c_wxtw7_825",
  "error-screen": "awsui_error-screen_1gl9c_wxtw7_826"
};

// node_modules/@cloudscape-design/components/code-editor/error-screen.js
var error_screen_default = ({ children, recoveryText, onRecoveryClick }) => {
  const onFollow = (0, import_react217.useCallback)(() => fireNonCancelableEvent(onRecoveryClick), [onRecoveryClick]);
  return import_react217.default.createElement(
    "div",
    { className: styles_css_default85["error-screen"] },
    import_react217.default.createElement(internal_default, { name: "status-negative", variant: "error" }),
    " ",
    children,
    " ",
    import_react217.default.createElement(internal_default10, { variant: "recovery", onFollow }, recoveryText)
  );
};

// node_modules/@cloudscape-design/components/code-editor/listeners.js
var import_react218 = __toESM(require_react());
function useChangeEffect(editor, onChange, onDelayedChange) {
  const debouncedChangeHandler = useDebounceCallback((detail) => {
    fireNonCancelableEvent(onDelayedChange, detail);
  }, 0);
  const handleChange = useStableCallback(() => {
    const changeDetail = { value: (editor === null || editor === void 0 ? void 0 : editor.getValue()) || "" };
    fireNonCancelableEvent(onChange, changeDetail);
    debouncedChangeHandler(changeDetail);
  });
  (0, import_react218.useEffect)(() => {
    if (!editor) {
      return;
    }
    editor.on("change", handleChange);
    return () => editor.off("change", handleChange);
  }, [editor, handleChange]);
}

// node_modules/@cloudscape-design/components/code-editor/loading-screen.js
var import_react219 = __toESM(require_react());
var loading_screen_default = (props2) => import_react219.default.createElement(
  "div",
  { className: styles_css_default85["loading-screen"] },
  import_react219.default.createElement(InternalSpinner, { size: "normal", variant: "normal" }),
  " ",
  props2.children
);

// node_modules/@cloudscape-design/components/code-editor/pane.js
var import_react221 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/resizable-box/index.js
var import_react220 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/resizable-box/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/code-editor/resizable-box/styles.scoped.css";
var styles_css_default86 = {
  "resizable-box": "awsui_resizable-box_cufu9_1152v_149",
  "cursor-active": "awsui_cursor-active_cufu9_1152v_153",
  "resizable-box-handle": "awsui_resizable-box-handle_cufu9_1152v_167",
  "resize-active": "awsui_resize-active_cufu9_1152v_176"
};

// node_modules/@cloudscape-design/components/code-editor/resizable-box/index.js
var KEYBOARD_STEP_SIZE = 20;
function ResizableBox({ children, height, minHeight, onResize, handleAriaLabel, handleTooltipText }) {
  const [dragOffset, setDragOffset] = (0, import_react220.useState)(null);
  const onResizeStable = useStableCallback(onResize);
  const containerRef = (0, import_react220.useRef)(null);
  const onPointerDown = (event) => {
    if (event.pointerType === "mouse" && event.button !== 0 || !containerRef.current) {
      return;
    }
    const containerBottom = containerRef.current.getBoundingClientRect().bottom;
    setDragOffset(containerBottom - event.clientY);
  };
  const onKeyDown = (event) => {
    switch (event.key) {
      case "ArrowDown":
      case "ArrowRight":
        event.preventDefault();
        onResizeStable(height + KEYBOARD_STEP_SIZE);
        break;
      case "ArrowUp":
      case "ArrowLeft":
        event.preventDefault();
        onResizeStable(Math.max(height - KEYBOARD_STEP_SIZE, minHeight));
        break;
    }
  };
  (0, import_react220.useEffect)(() => {
    if (dragOffset === null || !containerRef.current) {
      return;
    }
    const container = containerRef.current;
    const onPointerMove = (event) => {
      const { top } = container.getBoundingClientRect();
      const cursor = event.clientY;
      onResizeStable(Math.max(cursor + dragOffset - top, minHeight));
    };
    const onPointerUp = () => {
      setDragOffset(null);
    };
    const controller = new AbortController();
    document.body.classList.add(styles_css_default86["resize-active"]);
    container.classList.add(styles_css_default86["cursor-active"]);
    document.addEventListener("pointermove", onPointerMove, { signal: controller.signal });
    document.addEventListener("pointerup", onPointerUp, { signal: controller.signal });
    return () => {
      controller.abort();
      document.body.classList.remove(styles_css_default86["resize-active"]);
      container.classList.remove(styles_css_default86["cursor-active"]);
    };
  }, [dragOffset, minHeight, onResizeStable]);
  return import_react220.default.createElement(
    "div",
    { ref: containerRef, className: styles_css_default86["resizable-box"], style: { height } },
    children,
    import_react220.default.createElement(
      "div",
      { className: styles_css_default86["resizable-box-handle"] },
      import_react220.default.createElement(drag_handle_default, {
        ariaLabel: handleAriaLabel,
        variant: "resize-area",
        // Provide an arbitrary large value to valueMax since the editor can be
        // resized to be infinitely large.
        ariaValue: { valueMin: minHeight, valueMax: 1e6, valueNow: height },
        tooltipText: handleTooltipText,
        onPointerDown,
        onKeyDown,
        directions: {
          "block-start": height > minHeight ? "active" : "disabled",
          "block-end": "active"
        },
        onDirectionClick: (direction) => {
          switch (direction) {
            case "block-end":
              onResizeStable(height + KEYBOARD_STEP_SIZE);
              break;
            case "block-start":
              onResizeStable(Math.max(height - KEYBOARD_STEP_SIZE, minHeight));
              break;
          }
        }
      })
    )
  );
}

// node_modules/@cloudscape-design/components/code-editor/ace-modes.js
var AceModes = [
  { value: "abap", label: "ABAP" },
  { value: "abc", label: "ABC" },
  { value: "actionscript", label: "ActionScript" },
  { value: "ada", label: "ADA" },
  { value: "alda", label: "Alda" },
  { value: "apache_conf", label: "Apache Conf" },
  { value: "apex", label: "Apex" },
  { value: "aql", label: "AQL" },
  { value: "asciidoc", label: "AsciiDoc" },
  { value: "asl", label: "ASL" },
  { value: "assembly_x86", label: "Assembly x86" },
  { value: "autohotkey", label: "AutoHotkey/AutoIt" },
  { value: "batchfile", label: "BatchFile" },
  { value: "c_cpp", label: "C/C++" },
  { value: "c9search", label: "C9Search" },
  { value: "cirru", label: "Cirru" },
  { value: "clojure", label: "Clojure" },
  { value: "cobol", label: "Cobol" },
  { value: "coffee", label: "CoffeeScript" },
  { value: "coldfusion", label: "ColdFusion" },
  { value: "crystal", label: "Crystal" },
  { value: "csharp", label: "C#" },
  { value: "csound_document", label: "Csound Document" },
  { value: "csound_orchestra", label: "Csound" },
  { value: "csound_score", label: "Csound Score" },
  { value: "css", label: "CSS" },
  { value: "curly", label: "Curly" },
  { value: "d", label: "D" },
  { value: "dart", label: "Dart" },
  { value: "diff", label: "Diff" },
  { value: "django", label: "Django" },
  { value: "dockerfile", label: "Dockerfile" },
  { value: "dot", label: "Dot" },
  { value: "drools", label: "Drools" },
  { value: "edifact", label: "Edifact" },
  { value: "eiffel", label: "Eiffel" },
  { value: "ejs", label: "EJS" },
  { value: "elixir", label: "Elixir" },
  { value: "elm", label: "Elm" },
  { value: "erlang", label: "Erlang" },
  { value: "forth", label: "Forth" },
  { value: "fortran", label: "Fortran" },
  { value: "fsharp", label: "FSharp" },
  { value: "fsl", label: "FSL" },
  { value: "ftl", label: "FreeMarker" },
  { value: "gcode", label: "Gcode" },
  { value: "gherkin", label: "Gherkin" },
  { value: "gitignore", label: "Gitignore" },
  { value: "glsl", label: "Glsl" },
  { value: "gobstones", label: "Gobstones" },
  { value: "golang", label: "Go" },
  { value: "graphqlschema", label: "GraphQLSchema" },
  { value: "groovy", label: "Groovy" },
  { value: "haml", label: "HAML" },
  { value: "handlebars", label: "Handlebars" },
  { value: "haskell", label: "Haskell" },
  { value: "haskell_cabal", label: "Haskell Cabal" },
  { value: "haxe", label: "haXe" },
  { value: "hjson", label: "Hjson" },
  { value: "html", label: "HTML" },
  { value: "html_elixir", label: "HTML (Elixir)" },
  { value: "html_ruby", label: "HTML (Ruby)" },
  { value: "ini", label: "INI" },
  { value: "io", label: "Io" },
  { value: "jack", label: "Jack" },
  { value: "jade", label: "Jade" },
  { value: "java", label: "Java" },
  { value: "javascript", label: "JavaScript" },
  { value: "json", label: "JSON" },
  { value: "json5", label: "JSON5" },
  { value: "jsoniq", label: "JSONiq" },
  { value: "jsp", label: "JSP" },
  { value: "jssm", label: "JSSM" },
  { value: "jsx", label: "JSX" },
  { value: "julia", label: "Julia" },
  { value: "kotlin", label: "Kotlin" },
  { value: "latex", label: "LaTeX" },
  { value: "less", label: "LESS" },
  { value: "liquid", label: "Liquid" },
  { value: "lisp", label: "Lisp" },
  { value: "livescript", label: "LiveScript" },
  { value: "logiql", label: "LogiQL" },
  { value: "lsl", label: "LSL" },
  { value: "lua", label: "Lua" },
  { value: "luapage", label: "LuaPage" },
  { value: "lucene", label: "Lucene" },
  { value: "makefile", label: "Makefile" },
  { value: "markdown", label: "Markdown" },
  { value: "mask", label: "Mask" },
  { value: "matlab", label: "MATLAB" },
  { value: "maze", label: "Maze" },
  { value: "mediawiki", label: "MediaWiki" },
  { value: "mel", label: "MEL" },
  { value: "mixal", label: "MIXAL" },
  { value: "mushcode", label: "MUSHCode" },
  { value: "mysql", label: "MySQL" },
  { value: "nginx", label: "Nginx" },
  { value: "nim", label: "Nim" },
  { value: "nix", label: "Nix" },
  { value: "nsis", label: "NSIS" },
  { value: "nunjucks", label: "Nunjucks" },
  { value: "objectivec", label: "Objective-C" },
  { value: "ocaml", label: "OCaml" },
  { value: "pascal", label: "Pascal" },
  { value: "perl", label: "Perl" },
  { value: "perl6", label: "Perl 6" },
  { value: "pgsql", label: "pgSQL" },
  { value: "php", label: "PHP" },
  { value: "php_laravel_blade", label: "PHP (Blade Template)" },
  { value: "pig", label: "Pig" },
  { value: "powershell", label: "Powershell" },
  { value: "praat", label: "Praat" },
  { value: "prisma", label: "Prisma" },
  { value: "prolog", label: "Prolog" },
  { value: "properties", label: "Properties" },
  { value: "protobuf", label: "Protobuf" },
  { value: "puppet", label: "Puppet" },
  { value: "python", label: "Python" },
  { value: "qml", label: "QML" },
  { value: "r", label: "R" },
  { value: "razor", label: "Razor" },
  { value: "rdoc", label: "RDoc" },
  { value: "red", label: "Red" },
  { value: "rhtml", label: "RHTML" },
  { value: "rst", label: "RST" },
  { value: "ruby", label: "Ruby" },
  { value: "rust", label: "Rust" },
  { value: "sass", label: "SASS" },
  { value: "scad", label: "SCAD" },
  { value: "scala", label: "Scala" },
  { value: "scheme", label: "Scheme" },
  { value: "scss", label: "SCSS" },
  { value: "sh", label: "SH" },
  { value: "sjs", label: "SJS" },
  { value: "slim", label: "Slim" },
  { value: "smarty", label: "Smarty" },
  { value: "snippets", label: "snippets" },
  { value: "soy_template", label: "Soy Template" },
  { value: "space", label: "Space" },
  { value: "sql", label: "SQL" },
  { value: "sqlserver", label: "SQLServer" },
  { value: "stylus", label: "Stylus" },
  { value: "svg", label: "SVG" },
  { value: "swift", label: "Swift" },
  { value: "tcl", label: "Tcl" },
  { value: "terraform", label: "Terraform" },
  { value: "tex", label: "Tex" },
  { value: "text", label: "Text" },
  { value: "textile", label: "Textile" },
  { value: "toml", label: "Toml" },
  { value: "tsx", label: "TSX" },
  { value: "twig", label: "Twig" },
  { value: "typescript", label: "TypeScript" },
  { value: "vala", label: "Vala" },
  { value: "vbscript", label: "VBScript" },
  { value: "velocity", label: "Velocity" },
  { value: "verilog", label: "Verilog" },
  { value: "vhdl", label: "VHDL" },
  { value: "visualforce", label: "Visualforce" },
  { value: "wollok", label: "Wollok" },
  { value: "xml", label: "XML" },
  { value: "xquery", label: "XQuery" },
  { value: "yaml", label: "YAML" },
  { value: "zeek", label: "Zeek" }
];

// node_modules/@cloudscape-design/components/code-editor/ace-themes.js
var LightThemes = [
  { value: "chrome", label: "Chrome" },
  { value: "clouds", label: "Clouds" },
  { value: "crimson_editor", label: "Crimson Editor" },
  { value: "dawn", label: "Dawn" },
  { value: "dreamweaver", label: "Dreamweaver" },
  { value: "eclipse", label: "Eclipse" },
  { value: "github", label: "GitHub" },
  { value: "iplastic", label: "IPlastic" },
  { value: "solarized_light", label: "Solarized Light" },
  { value: "textmate", label: "TextMate" },
  { value: "tomorrow", label: "Tomorrow" },
  { value: "xcode", label: "Xcode" },
  { value: "kuroir", label: "Kuroir" },
  { value: "katzenmilch", label: "KatzenMilch" },
  { value: "sqlserver", label: "SQL Server" },
  { value: "cloud_editor", label: "CloudEditor" }
];
var DarkThemes = [
  { value: "ambiance", label: "Ambiance" },
  { value: "chaos", label: "Chaos" },
  { value: "clouds_midnight", label: "Clouds Midnight" },
  { value: "dracula", label: "Dracula" },
  { value: "cobalt", label: "Cobalt" },
  { value: "gruvbox", label: "Gruvbox" },
  { value: "gob", label: "Green on Black" },
  { value: "idle_fingers", label: "idle Fingers" },
  { value: "kr_theme", label: "krTheme" },
  { value: "merbivore", label: "Merbivore" },
  { value: "merbivore_soft", label: "Merbivore Soft" },
  { value: "mono_industrial", label: "Mono Industrial" },
  { value: "monokai", label: "Monokai" },
  { value: "nord_dark", label: "Nord Dark" },
  { value: "pastel_on_dark", label: "Pastel on dark" },
  { value: "solarized_dark", label: "Solarized Dark" },
  { value: "terminal", label: "Terminal" },
  { value: "tomorrow_night", label: "Tomorrow Night" },
  { value: "tomorrow_night_blue", label: "Tomorrow Night Blue" },
  { value: "tomorrow_night_bright", label: "Tomorrow Night Bright" },
  { value: "tomorrow_night_eighties", label: "Tomorrow Night 80s" },
  { value: "twilight", label: "Twilight" },
  { value: "vibrant_ink", label: "Vibrant Ink" },
  { value: "cloud_editor_dark", label: "CloudEditor Dark" }
];

// node_modules/@cloudscape-design/components/code-editor/util.js
var CLOUD_EDITOR_LIGHT_THEME = "cloud_editor";
var CLOUD_EDITOR_DARK_THEME = "cloud_editor_dark";
var FALLBACK_LIGHT_THEME = "dawn";
var FALLBACK_DARK_THEME = "tomorrow_night_bright";
var DEFAULT_AVAILABLE_THEMES = {
  light: LightThemes.map((theme) => theme.value).filter((value) => value !== CLOUD_EDITOR_LIGHT_THEME),
  dark: DarkThemes.map((theme) => theme.value).filter((value) => value !== CLOUD_EDITOR_DARK_THEME)
};
function isAceVersionAtLeast(ace, minVersion) {
  var _a;
  const semanticVersion = (_a = ace === null || ace === void 0 ? void 0 : ace.version) === null || _a === void 0 ? void 0 : _a.split(".").map((part) => {
    const parsed = parseInt(part);
    return Number.isNaN(parsed) ? part : parsed;
  });
  return !!semanticVersion && typeof semanticVersion[0] === "number" && semanticVersion[0] >= minVersion[0] && typeof semanticVersion[1] === "number" && semanticVersion[1] >= minVersion[1] && typeof semanticVersion[2] === "number" && semanticVersion[2] >= minVersion[2];
}
function supportsKeyboardAccessibility(ace) {
  return isAceVersionAtLeast(ace, [1, 23, 0]);
}
function getDefaultConfig(ace) {
  return Object.assign({ behavioursEnabled: true }, supportsKeyboardAccessibility(ace) ? { enableKeyboardAccessibility: true } : {});
}
function getDefaultTheme(mode, themes) {
  if (mode === "light") {
    return (themes === null || themes === void 0 ? void 0 : themes.light.some((value) => value === CLOUD_EDITOR_LIGHT_THEME)) ? CLOUD_EDITOR_LIGHT_THEME : FALLBACK_LIGHT_THEME;
  } else {
    return (themes === null || themes === void 0 ? void 0 : themes.dark.some((value) => value === CLOUD_EDITOR_DARK_THEME)) ? CLOUD_EDITOR_DARK_THEME : FALLBACK_DARK_THEME;
  }
}
function getAceTheme(theme) {
  return `ace/theme/${theme}`;
}
function getLanguageLabel(language) {
  var _a;
  return ((_a = AceModes.filter((mode) => mode.value === language)[0]) === null || _a === void 0 ? void 0 : _a.label) || language;
}
function getStatusButtonId({ paneId, paneStatus }) {
  return paneId ? `${paneId}-button-${paneStatus}` : void 0;
}

// node_modules/@cloudscape-design/components/code-editor/pane.js
var ANNOTATION_ITEM_HEIGHT = 31;
var PANE_ANNOTATIONS_PADDING = 12;
var MIN_HEIGHT = 3 * ANNOTATION_ITEM_HEIGHT + 2 * PANE_ANNOTATIONS_PADDING;
var Pane = ({ id, paneStatus, visible, annotations, highlighted, onClose, onAnnotationClick, onAnnotationClear, cursorPositionLabel, closeButtonAriaLabel, handleAriaLabel, handleTooltipText }) => {
  const [paneHeight, setPaneHeight] = (0, import_react221.useState)(MIN_HEIGHT);
  const listRef = (0, import_react221.useRef)(null);
  (0, import_react221.useEffect)(() => {
    var _a;
    if (!highlighted) {
      return;
    }
    const { row, column } = highlighted;
    const highlightedAnnotationIndex = annotations.indexOf(annotations.filter((a4) => a4.row === row && a4.column === column)[0]);
    if (highlightedAnnotationIndex > -1) {
      const errorItem = (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.children[highlightedAnnotationIndex];
      errorItem === null || errorItem === void 0 ? void 0 : errorItem.focus();
    }
  }, [highlighted, annotations]);
  const onItemClick = (annotation) => {
    onAnnotationClick(annotation);
  };
  const onItemKeyDown = (annotation, event) => {
    if (event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) {
      event.preventDefault();
      onAnnotationClick(annotation);
    }
  };
  const onEscKeyDown = (event) => {
    if (event.keyCode === KeyCode.escape) {
      event.preventDefault();
      onClose();
    }
  };
  const ariaLabelledBy = getStatusButtonId({ paneId: id, paneStatus });
  if (!visible) {
    return null;
  }
  return import_react221.default.createElement(
    "div",
    { id, className: styles_css_default85.pane, onKeyDown: onEscKeyDown, role: "tabpanel", "aria-labelledby": ariaLabelledBy },
    import_react221.default.createElement(
      ResizableBox,
      { height: paneHeight, minHeight: MIN_HEIGHT, onResize: (newHeight) => setPaneHeight(newHeight), handleAriaLabel, handleTooltipText },
      import_react221.default.createElement(
        focus_lock_default,
        { className: styles_css_default85["focus-lock"], autoFocus: true, restoreFocus: true },
        import_react221.default.createElement(
          "div",
          { className: styles_css_default85.pane__list, tabIndex: -1 },
          import_react221.default.createElement(
            "table",
            { className: styles_css_default85.pane__table, role: "presentation" },
            import_react221.default.createElement(
              "colgroup",
              null,
              import_react221.default.createElement("col", {
                style: { width: 1 }
                /* shrink to fit content */
              }),
              import_react221.default.createElement("col", { style: { width: "auto" } })
            ),
            import_react221.default.createElement("tbody", { ref: listRef }, annotations.map((annotation, i2) => {
              var _a;
              return import_react221.default.createElement(
                "tr",
                { key: i2, role: "link", className: styles_css_default85.pane__item, onMouseOver: onAnnotationClear, onClick: onItemClick.bind(null, annotation), onKeyDown: onItemKeyDown.bind(null, annotation), tabIndex: 0 },
                import_react221.default.createElement("td", { className: clsx_m_default(styles_css_default85.pane__location, styles_css_default85.pane__cell), tabIndex: -1 }, (_a = cursorPositionLabel === null || cursorPositionLabel === void 0 ? void 0 : cursorPositionLabel((annotation.row || 0) + 1, (annotation.column || 0) + 1)) !== null && _a !== void 0 ? _a : ""),
                import_react221.default.createElement("td", { className: clsx_m_default(styles_css_default85.pane__description, styles_css_default85.pane__cell), tabIndex: -1 }, annotation.text)
              );
            }))
          )
        ),
        import_react221.default.createElement(
          "div",
          { className: styles_css_default85["pane__close-container"] },
          import_react221.default.createElement(InternalButton, { formAction: "none", variant: "icon", iconName: "close", onClick: onClose, ariaLabel: closeButtonAriaLabel })
        )
      )
    )
  );
};

// node_modules/@cloudscape-design/components/code-editor/preferences-modal.js
var import_react226 = __toESM(require_react());

// node_modules/@cloudscape-design/components/column-layout/internal.js
var import_react224 = __toESM(require_react());

// node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/index.js
var import_react222 = __toESM(require_react());

// node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/styles.scoped.css";
var styles_css_default87 = {
  "css-grid": "awsui_css-grid_zqq3x_1t536_181",
  "grid-no-gutters": "awsui_grid-no-gutters_zqq3x_1t536_192",
  "grid-variant-text-grid": "awsui_grid-variant-text-grid_zqq3x_1t536_195",
  "item": "awsui_item_zqq3x_1t536_195",
  "first-column": "awsui_first-column_zqq3x_1t536_212"
};

// node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/index.js
var isOdd = (value) => value % 2 !== 0;
function calculcateCssColumnCount(columns, minColumnWidth, containerWidth) {
  if (!containerWidth) {
    return columns;
  }
  const targetColumnCount = Math.min(columns, Math.floor(containerWidth / minColumnWidth));
  return Math.max(1, targetColumnCount < columns && isOdd(targetColumnCount) ? targetColumnCount - 1 : targetColumnCount);
}
function FlexibleColumnLayout({ columns = 1, minColumnWidth = 0, disableGutters, variant, children, __tagOverride }) {
  const [containerWidth, containerRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const columnCount = calculcateCssColumnCount(columns, minColumnWidth, containerWidth);
  const shouldDisableGutters = variant !== "text-grid" && disableGutters;
  const flattenedChildren = flattenChildren(children);
  const Tag = __tagOverride !== null && __tagOverride !== void 0 ? __tagOverride : "div";
  return import_react222.default.createElement(Tag, { ref: containerRef, className: clsx_m_default(styles_css_default87["css-grid"], styles_css_default87[`grid-variant-${variant}`], shouldDisableGutters && [styles_css_default87["grid-no-gutters"]]), style: { gridTemplateColumns: `repeat(${columnCount}, minmax(0, 1fr))` } }, flattenedChildren.map((child, i2) => {
    const key2 = child.key;
    return import_react222.default.createElement("div", { key: key2 ? String(key2) : void 0, className: clsx_m_default(styles_css_default87.item, {
      [styles_css_default87["first-column"]]: i2 % columnCount === 0
    }) }, child);
  }));
}

// node_modules/@cloudscape-design/components/column-layout/grid-column-layout.js
var import_react223 = __toESM(require_react());

// node_modules/@cloudscape-design/components/column-layout/util.js
function repeat(value, times) {
  const array = [];
  for (let i2 = 0; i2 < times; i2++) {
    array[i2] = value;
  }
  return array;
}

// node_modules/@cloudscape-design/components/column-layout/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/column-layout/styles.scoped.css";
var styles_css_default88 = {
  "column-layout": "awsui_column-layout_vvxn7_u5w81_181",
  "grid": "awsui_grid_vvxn7_u5w81_213",
  "grid-no-gutters": "awsui_grid-no-gutters_vvxn7_u5w81_219",
  "grid-variant-text-grid": "awsui_grid-variant-text-grid_vvxn7_u5w81_223",
  "grid-breakpoint-default": "awsui_grid-breakpoint-default_vvxn7_u5w81_231",
  "grid-columns-1": "awsui_grid-columns-1_vvxn7_u5w81_234",
  "grid-breakpoint-xxs": "awsui_grid-breakpoint-xxs_vvxn7_u5w81_234",
  "grid-breakpoint-xs": "awsui_grid-breakpoint-xs_vvxn7_u5w81_237",
  "grid-columns-2": "awsui_grid-columns-2_vvxn7_u5w81_240",
  "grid-columns-3": "awsui_grid-columns-3_vvxn7_u5w81_246",
  "grid-columns-4": "awsui_grid-columns-4_vvxn7_u5w81_252",
  "grid-vertical-borders": "awsui_grid-vertical-borders_vvxn7_u5w81_268",
  "grid-horizontal-borders": "awsui_grid-horizontal-borders_vvxn7_u5w81_301"
};

// node_modules/@cloudscape-design/components/column-layout/grid-column-layout.js
var COLUMN_DEFS = {
  1: { colspan: { default: 12, xxs: 12, xs: 12 } },
  2: { colspan: { default: 12, xxs: 6, xs: 6 } },
  3: { colspan: { default: 12, xxs: 6, xs: 4 } },
  4: { colspan: { default: 12, xxs: 6, xs: 3 } }
};
function GridColumnLayout({ columns, variant, borders, disableGutters, __breakpoint, children, __tagOverride }) {
  var _a;
  const isTextGridVariant = variant === "text-grid";
  const shouldDisableGutters = !isTextGridVariant && disableGutters;
  const shouldHaveHorizontalBorders = !isTextGridVariant && (borders === "horizontal" || borders === "all");
  const shouldHaveVerticalBorders = !isTextGridVariant && (borders === "vertical" || borders === "all");
  const flattenedChildren = flattenChildren(children);
  const [breakpoint, ref] = useContainerBreakpoints(COLUMN_TRIGGERS);
  return import_react223.default.createElement(internal_default5, { ref, disableGutters: true, gridDefinition: repeat((_a = COLUMN_DEFS[columns]) !== null && _a !== void 0 ? _a : {}, flattenedChildren.length), className: clsx_m_default(styles_css_default88.grid, styles_css_default88[`grid-columns-${columns}`], styles_css_default88[`grid-variant-${variant}`], {
    [styles_css_default88["grid-horizontal-borders"]]: shouldHaveHorizontalBorders,
    [styles_css_default88["grid-vertical-borders"]]: shouldHaveVerticalBorders,
    [styles_css_default88["grid-no-gutters"]]: shouldDisableGutters
  }), __breakpoint: __breakpoint || breakpoint, __responsiveClassName: (breakpoint2) => breakpoint2 && styles_css_default88[`grid-breakpoint-${breakpoint2}`], __tagOverride }, children);
}

// node_modules/@cloudscape-design/components/column-layout/internal.js
var COLUMN_TRIGGERS = ["default", "xxs", "xs"];
function ColumnLayout(_a) {
  var { columns = 1, variant = "default", borders = "none", disableGutters = false, minColumnWidth, children, __tagOverride, __breakpoint, __internalRootRef } = _a, restProps = __rest(_a, ["columns", "variant", "borders", "disableGutters", "minColumnWidth", "children", "__tagOverride", "__breakpoint", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  return import_react224.default.createElement("div", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default88["column-layout"]), ref: __internalRootRef }), minColumnWidth ? import_react224.default.createElement(FlexibleColumnLayout, { columns, borders, variant, minColumnWidth, disableGutters, __tagOverride }, children) : import_react224.default.createElement(GridColumnLayout, { columns, variant, borders, disableGutters, __breakpoint, __tagOverride }, children));
}

// node_modules/@cloudscape-design/components/select/internal.js
var import_react225 = __toESM(require_react());

// node_modules/@cloudscape-design/components/select/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/select/styles.scoped.css";
var styles_css_default89 = {
  "root": "awsui_root_r2vco_1yzpb_145"
};

// node_modules/@cloudscape-design/components/select/internal.js
var InternalSelect = import_react225.default.forwardRef((_a, externalRef) => {
  var _b;
  var { options, filteringType = "none", filteringPlaceholder, filteringAriaLabel, filteringClearAriaLabel, filteringResultsText, inlineLabelText, ariaRequired, placeholder, disabled, readOnly, ariaLabel, statusType = "finished", empty, loadingText, finishedText, errorText, noMatch, triggerVariant = "label", renderHighlightedAriaLive, selectedOption, onBlur, onFocus, onLoadItems, onChange, virtualScroll, expandToViewport, autoFocus, __inFilteringToken, __internalRootRef = null } = _a, restProps = __rest(_a, ["options", "filteringType", "filteringPlaceholder", "filteringAriaLabel", "filteringClearAriaLabel", "filteringResultsText", "inlineLabelText", "ariaRequired", "placeholder", "disabled", "readOnly", "ariaLabel", "statusType", "empty", "loadingText", "finishedText", "errorText", "noMatch", "triggerVariant", "renderHighlightedAriaLive", "selectedOption", "onBlur", "onFocus", "onLoadItems", "onChange", "virtualScroll", "expandToViewport", "autoFocus", "__inFilteringToken", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  const formFieldContext = useFormFieldContext(restProps);
  const i18n = useInternalI18n("select");
  const errorIconAriaLabel = i18n("errorIconAriaLabel", restProps.errorIconAriaLabel);
  const selectedAriaLabel = i18n("selectedAriaLabel", restProps.selectedAriaLabel);
  const recoveryText = i18n("recoveryText", restProps.recoveryText);
  if (restProps.recoveryText && !onLoadItems) {
    warnOnce("Select", "`onLoadItems` must be provided for `recoveryText` to be displayed.");
  }
  const { handleLoadMore, handleRecoveryClick, fireLoadItems } = useLoadItems({
    onLoadItems,
    options,
    statusType
  });
  checkControlled("Select", "selectedOption", selectedOption, "onChange", onChange);
  checkOptionValueField("Select", "options", options);
  const [filteringValue, setFilteringValue] = (0, import_react225.useState)("");
  const { filteredOptions, parentMap, totalCount, matchesCount } = prepareOptions(options, filteringType, filteringValue);
  const rootRef = (0, import_react225.useRef)(null);
  const triggerRef = (0, import_react225.useRef)(null);
  const selfControlId = useUniqueId("trigger");
  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;
  const scrollToIndex = (0, import_react225.useRef)(null);
  const { isOpen, highlightType, highlightedOption, highlightedIndex, getTriggerProps, getDropdownProps, getFilterProps, getMenuProps, getOptionProps: getOptionProps2, highlightOption, selectOption, announceSelected } = useSelect({
    selectedOptions: selectedOption ? [selectedOption] : [],
    updateSelectedOption: (option) => fireNonCancelableEvent(onChange, { selectedOption: option }),
    options: filteredOptions,
    filteringType,
    onBlur,
    onFocus,
    externalRef,
    fireLoadItems,
    setFilteringValue,
    statusType
  });
  const handleNativeSearch = useNativeSearch({
    isEnabled: filteringType === "none" && !readOnly,
    options: filteredOptions,
    highlightOption: !isOpen ? selectOption : highlightOption,
    highlightedOption: !isOpen ? selectedOption : highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option
  });
  const selectAriaLabelId = useUniqueId("select-arialabel-");
  const footerId = useUniqueId("footer");
  (0, import_react225.useEffect)(() => {
    var _a2;
    (_a2 = scrollToIndex.current) === null || _a2 === void 0 ? void 0 : _a2.call(scrollToIndex, highlightedIndex);
  }, [highlightedIndex]);
  const filter = import_react225.default.createElement(filter_default, Object.assign({ clearAriaLabel: filteringClearAriaLabel, filteringType, placeholder: filteringPlaceholder, ariaLabel: filteringAriaLabel, ariaRequired, value: filteringValue }, getFilterProps()));
  const trigger = import_react225.default.createElement(trigger_default, Object.assign({ ref: triggerRef, placeholder, disabled, readOnly, triggerVariant, triggerProps: getTriggerProps(disabled, autoFocus), selectedOption, isOpen, inFilteringToken: __inFilteringToken, inlineLabelText }, formFieldContext, { controlId, ariaLabelledby: joinStrings(formFieldContext.ariaLabelledby, selectAriaLabelId) }));
  const isEmpty = !options || options.length === 0;
  const isNoMatch = filteredOptions && filteredOptions.length === 0;
  const isFiltered = filteringType !== "none" && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;
  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(matchesCount, totalCount) : void 0;
  const dropdownStatus = useDropdownStatus({
    statusType,
    empty,
    loadingText,
    finishedText,
    errorText,
    recoveryText,
    isEmpty,
    isNoMatch,
    noMatch,
    isFiltered,
    filteringResultsText: filteredText,
    errorIconAriaLabel,
    onRecoveryClick: handleRecoveryClick,
    hasRecoveryCallback: !!onLoadItems
  });
  const menuProps = Object.assign(Object.assign({}, getMenuProps()), { onLoadMore: handleLoadMore, ariaLabelledby: joinStrings(selectAriaLabelId, controlId), ariaDescribedby: dropdownStatus.content ? footerId : void 0 });
  const announcement = useAnnouncement({
    announceSelected,
    highlightedOption,
    getParent: (option) => {
      var _a2;
      return (_a2 = parentMap.get(option)) === null || _a2 === void 0 ? void 0 : _a2.option;
    },
    selectedAriaLabel,
    renderHighlightedAriaLive
  });
  const ListComponent = virtualScroll ? virtual_list_default : plain_list_default;
  const handleMouseDown = (event) => {
    const target = event.target;
    if (target !== document.activeElement) {
      event.preventDefault();
    }
  };
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  const dropdownProps = getDropdownProps();
  return import_react225.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(styles_css_default89.root, baseProps.className), onKeyDown: handleNativeSearch }),
    import_react225.default.createElement(
      dropdown_default,
      Object.assign({}, dropdownProps, { ariaLabelledby: dropdownProps.dropdownContentRole ? joinStrings(selectAriaLabelId, controlId) : void 0, ariaDescribedby: dropdownProps.dropdownContentRole ? dropdownStatus.content ? footerId : void 0 : void 0, open: isOpen, stretchTriggerHeight: !!__inFilteringToken, stretchBeyondTriggerWidth: true, trigger, header: filter, onMouseDown: handleMouseDown, footer: dropdownStatus.isSticky ? import_react225.default.createElement(dropdown_footer_default, { content: isOpen ? dropdownStatus.content : null, id: footerId }) : null, expandToViewport }),
      import_react225.default.createElement(ListComponent, { listBottom: !dropdownStatus.isSticky ? import_react225.default.createElement(dropdown_footer_default, { content: isOpen ? dropdownStatus.content : null, id: footerId }) : null, menuProps, getOptionProps: getOptionProps2, filteredOptions, filteringValue, ref: scrollToIndex, hasDropdownStatus: dropdownStatus.content !== null, screenReaderContent: announcement, highlightType })
    ),
    import_react225.default.createElement("div", { hidden: true, id: selectAriaLabelId }, ariaLabel || inlineLabelText)
  );
});
var internal_default17 = InternalSelect;

// node_modules/@cloudscape-design/components/code-editor/preferences-modal.js
function filterThemes(allThemes, available) {
  return allThemes.filter((theme) => available.indexOf(theme.value) > -1);
}
var preferences_modal_default = (props2) => {
  var _a, _b, _c, _d;
  const [wrapLines, setWrapLines] = (0, import_react226.useState)((_b = (_a = props2.preferences) === null || _a === void 0 ? void 0 : _a.wrapLines) !== null && _b !== void 0 ? _b : true);
  const [theme, setTheme] = (0, import_react226.useState)((_d = (_c = props2.preferences) === null || _c === void 0 ? void 0 : _c.theme) !== null && _d !== void 0 ? _d : props2.defaultTheme);
  const themeOptions = [
    {
      label: props2.i18nStrings.lightThemes,
      options: filterThemes(LightThemes, props2.themes.light)
    },
    {
      label: props2.i18nStrings.darkThemes,
      options: filterThemes(DarkThemes, props2.themes.dark)
    }
  ];
  const [selectedThemeOption, setSelectedThemeOption] = (0, import_react226.useState)(() => [...LightThemes, ...DarkThemes].filter((t2) => t2.value === theme)[0]);
  const onThemeSelected = (e3) => {
    setTheme(e3.detail.selectedOption.value);
    setSelectedThemeOption(e3.detail.selectedOption);
  };
  return import_react226.default.createElement(
    InternalModal,
    { size: "medium", visible: true, getModalRoot: props2.getModalRoot, removeModalRoot: props2.removeModalRoot, onDismiss: props2.onDismiss, header: props2.i18nStrings.header, closeAriaLabel: props2.i18nStrings.close, footer: import_react226.default.createElement(
      InternalBox,
      { float: "right" },
      import_react226.default.createElement(
        internal_default4,
        { direction: "horizontal", size: "xs" },
        import_react226.default.createElement(InternalButton, { onClick: props2.onDismiss }, props2.i18nStrings.cancel),
        import_react226.default.createElement(InternalButton, { onClick: () => props2.onConfirm({ wrapLines, theme }), variant: "primary" }, props2.i18nStrings.confirm)
      )
    ) },
    import_react226.default.createElement(
      ColumnLayout,
      { columns: 2, variant: "text-grid" },
      import_react226.default.createElement(
        "div",
        null,
        import_react226.default.createElement(internal_default6, { checked: wrapLines, onChange: (e3) => setWrapLines(e3.detail.checked) }, props2.i18nStrings.wrapLines)
      ),
      import_react226.default.createElement(
        "div",
        null,
        import_react226.default.createElement(
          InternalFormField,
          { label: props2.i18nStrings.theme },
          import_react226.default.createElement(internal_default17, { selectedOption: selectedThemeOption, onChange: onThemeSelected, options: themeOptions, filteringType: "auto", filteringAriaLabel: props2.i18nStrings.themeFilteringAriaLabel, filteringClearAriaLabel: props2.i18nStrings.themeFilteringClearAriaLabel, filteringPlaceholder: props2.i18nStrings.themeFilteringPlaceholder })
        )
      )
    )
  );
};

// node_modules/@cloudscape-design/components/code-editor/setup-editor.js
function setupEditor(ace, editor, setAnnotations, setCursorPosition, setHighlightedAnnotation, setPaneStatus) {
  setEditorDefaults(ace, editor);
  editor.session.selection.on("changeCursor", () => {
    setCursorPosition(editor.getCursorPosition());
  });
  editor.session.on("changeAnnotation", () => {
    const editorAnnotations = editor.session.getAnnotations();
    const newAnnotations = editorAnnotations.filter((a4) => a4.type !== "info");
    if (editorAnnotations.length !== newAnnotations.length) {
      editor.session.setAnnotations(newAnnotations);
    }
    setAnnotations(newAnnotations);
  });
  const moveCursorToAnnotation = (a4) => {
    if (typeof a4.row === "number") {
      editor.gotoLine(a4.row + 1, a4.column || 0, false);
    }
  };
  const openAnnotation = (row) => {
    const currentAnnotations = editor.session.getAnnotations().filter((a4) => a4.row === row && a4.type !== "info");
    const errors = currentAnnotations.filter((a4) => a4.type === "error");
    if (errors.length > 0) {
      setHighlightedAnnotation(errors[0]);
      setPaneStatus("error");
      moveCursorToAnnotation(errors[0]);
    } else if (currentAnnotations.length > 0) {
      setHighlightedAnnotation(currentAnnotations[0]);
      setPaneStatus("warning");
      moveCursorToAnnotation(currentAnnotations[0]);
    } else {
      setHighlightedAnnotation(void 0);
      setPaneStatus("hidden");
      editor.gotoLine(row + 1, 0, false);
    }
  };
  editor.on("gutterclick", (e3) => {
    const { row } = e3.getDocumentPosition();
    openAnnotation(row);
  });
  editor.on("gutterkeydown", (e3) => {
    if (e3.isInAnnotationLane() && (e3.getKey() === "space" || e3.getKey() === "return")) {
      const row = e3.getRow();
      openAnnotation(row);
    }
  });
  editor.on("change", () => {
    if (editor.getValue().length === 0) {
      editor.session.clearAnnotations();
    }
  });
}
function setEditorDefaults(ace, editor) {
  ace.config.loadModule("ace/ext/language_tools", function() {
    editor.setOptions({
      displayIndentGuides: false,
      enableSnippets: true,
      enableBasicAutocompletion: true
    });
  });
  editor.setAutoScrollEditorIntoView(true);
  if (!supportsKeyboardAccessibility(ace)) {
    editor.commands.addCommand({
      name: "exitCodeEditor",
      bindKey: "Esc",
      exec: () => {
        editor.container.focus();
      }
    });
  }
  editor.on("focus", () => {
    editor.textInput.getElement().setAttribute("tabindex", 0);
  });
  editor.on("blur", () => {
    editor.textInput.getElement().setAttribute("tabindex", -1);
  });
  editor.textInput.getElement().setAttribute("tabindex", -1);
  editor.commands.removeCommand("showSettingsMenu", false);
  editor.on("guttermousedown", (e3) => {
    e3.stop();
  });
  editor.setHighlightActiveLine(false);
  editor.$updateHighlightActiveLine = function() {
    const session = this.getSession();
    let highlight;
    if (this.$highlightActiveLine) {
      if (this.$selectionStyle !== "line" || !this.selection.isMultiLine()) {
        highlight = this.getCursorPosition();
      }
      if (this.renderer.$maxLines && this.session.getLength() === 1 && !(this.renderer.$minLines > 1)) {
        highlight = false;
      }
    }
    if (session.$highlightLineMarker && !highlight) {
      session.removeMarker(session.$highlightLineMarker.id);
      session.$highlightLineMarker = null;
    } else if (!session.$highlightLineMarker && highlight) {
      const range3 = new ace.Range(highlight.row, 0, highlight.row, Infinity);
      range3.id = session.addMarker(range3, "ace_active-line", "fullLine");
      session.$highlightLineMarker = range3;
    } else if (highlight) {
      session.$highlightLineMarker.start.row = highlight.row;
      session.$highlightLineMarker.end.row = highlight.row;
      session.$highlightLineMarker.start.column = 0;
      session._signal("changeBackMarker");
    }
  };
  editor.setHighlightActiveLine(true);
  editor.on("showGutterTooltip", (tooltip) => {
    tooltip.hide();
  });
}

// node_modules/@cloudscape-design/components/code-editor/status-bar.js
var import_react228 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/tab-button.js
var import_react227 = __toESM(require_react());
var TabButton = import_react227.default.forwardRef(({ active, disabled, iconName, onClick, onFocus, onBlur, tabIndex, ariaHidden, ariaLabel, paneId, isRefresh, count, text, className: className2, id }, ref) => {
  return import_react227.default.createElement(
    "button",
    { className: clsx_m_default([styles_css_default85["tab-button"], className2], {
      [styles_css_default85["tab-button--active"]]: active,
      [styles_css_default85["tab-button--disabled"]]: disabled,
      [styles_css_default85["tab-button--refresh"]]: isRefresh
    }), id, type: "button", onClick, onFocus, onBlur, disabled, ref, tabIndex, role: "tab", "aria-selected": active, "aria-controls": paneId, "aria-hidden": ariaHidden, "aria-label": ariaLabel },
    import_react227.default.createElement(internal_default, { name: iconName }),
    import_react227.default.createElement("span", { className: styles_css_default85.count }, count),
    import_react227.default.createElement("span", { className: styles_css_default85.text }, text)
  );
});

// node_modules/@cloudscape-design/components/code-editor/status-bar.js
function StatusBar({ languageLabel, cursorPosition, paneStatus, onErrorPaneToggle, onWarningPaneToggle, onTabFocus, onTabBlur, errorsTabRef, warningsTabRef, isTabFocused, paneId, onPreferencesOpen, i18nStrings, errorCount, warningCount, isRefresh }) {
  const i18n = useInternalI18n("code-editor");
  const errorText = `${i18n("i18nStrings.errorsTab", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorsTab)}: ${errorCount}`;
  const warningText = `${i18n("i18nStrings.warningsTab", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningsTab)}: ${warningCount}`;
  const errorButtonId = getStatusButtonId({ paneId, paneStatus: "error" });
  const warningButtonId = getStatusButtonId({ paneId, paneStatus: "warning" });
  return import_react228.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default85["status-bar"], {
      [styles_css_default85["status-bar-with-hidden-pane"]]: paneStatus === "hidden"
    }) },
    import_react228.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default85["status-bar__left"]) },
      import_react228.default.createElement("span", { className: styles_css_default85["status-bar__language-mode"] }, languageLabel),
      import_react228.default.createElement("span", { className: styles_css_default85["status-bar__cursor-position"] }, cursorPosition),
      import_react228.default.createElement(
        "div",
        { className: styles_css_default85["tab-list"], role: "tablist" },
        import_react228.default.createElement(TabButton, { id: errorButtonId, count: errorCount, text: errorText, className: styles_css_default85["tab-button--errors"], iconName: "status-negative", disabled: errorCount === 0, active: paneStatus === "error", onClick: onErrorPaneToggle, onFocus: onTabFocus, onBlur: onTabBlur, ref: errorsTabRef, ariaLabel: errorText, paneId, isRefresh }),
        import_react228.default.createElement("span", { className: styles_css_default85["tab-button--divider"] }),
        import_react228.default.createElement(TabButton, { id: warningButtonId, count: warningCount, text: warningText, className: styles_css_default85["tab-button--warnings"], iconName: "status-warning", disabled: warningCount === 0, active: paneStatus === "warning", onClick: onWarningPaneToggle, onFocus: onTabFocus, onBlur: onTabBlur, ref: warningsTabRef, tabIndex: paneStatus === "error" && isTabFocused ? -1 : void 0, ariaHidden: paneStatus === "error" && isTabFocused ? true : void 0, ariaLabel: warningText, paneId, isRefresh })
      ),
      import_react228.default.createElement(
        internal_default2,
        { assertive: true, hidden: true, tagName: "span" },
        import_react228.default.createElement(
          "span",
          null,
          errorText,
          " "
        ),
        import_react228.default.createElement("span", null, warningText)
      )
    ),
    import_react228.default.createElement(
      "div",
      { className: styles_css_default85["status-bar__right"] },
      import_react228.default.createElement(
        "div",
        { className: styles_css_default85["status-bar__cog-button"] },
        import_react228.default.createElement(InternalButton, { formAction: "none", variant: "icon", iconName: "settings", iconAlt: "Settings", ariaLabel: i18n("i18nStrings.preferencesButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesButtonAriaLabel), onClick: onPreferencesOpen, __nativeAttributes: {
          tabIndex: paneStatus !== "hidden" && isTabFocused ? -1 : void 0,
          "aria-hidden": paneStatus !== "hidden" && isTabFocused ? true : void 0
        } })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/code-editor/use-editor.js
var import_react229 = __toESM(require_react());
function useEditor(ace, themes, loading) {
  const editorRef = (0, import_react229.useRef)(null);
  const [editor, setEditor] = (0, import_react229.useState)(null);
  const [initialTheme] = (0, import_react229.useState)(getAceTheme(getDefaultTheme(useCurrentMode(editorRef), themes)));
  (0, import_react229.useEffect)(() => {
    const elem = editorRef.current;
    if (!ace || !elem) {
      return;
    }
    const config = getDefaultConfig(ace);
    setEditor(ace.edit(elem, Object.assign(Object.assign({}, config), { theme: initialTheme })));
  }, [ace, loading, initialTheme]);
  return { editorRef, editor };
}
function useSyncEditorLabels(editor, { controlId, ariaLabel, ariaLabelledby, ariaDescribedby }) {
  (0, import_react229.useEffect)(() => {
    if (!editor) {
      return;
    }
    const { textarea } = editor.renderer;
    if (!textarea) {
      return;
    }
    const updateAttribute = (attribute, value) => {
      if (value) {
        textarea.setAttribute(attribute, value);
      } else {
        textarea.removeAttribute(attribute);
      }
    };
    updateAttribute("id", controlId);
    updateAttribute("aria-labelledby", ariaLabelledby);
    updateAttribute("aria-describedby", ariaDescribedby);
    if (typeof editor.getOption("textInputAriaLabel") === "string") {
      editor.setOption("textInputAriaLabel", ariaLabel !== null && ariaLabel !== void 0 ? ariaLabel : "");
    } else {
      updateAttribute("aria-label", ariaLabel);
    }
  }, [ariaLabel, ariaDescribedby, ariaLabelledby, controlId, editor]);
}
function useSyncEditorSize(editor, { width, height }) {
  (0, import_react229.useEffect)(() => {
    editor === null || editor === void 0 ? void 0 : editor.resize();
  }, [editor, width, height]);
  const onResize = (0, import_react229.useCallback)(() => {
    editor === null || editor === void 0 ? void 0 : editor.resize();
  }, [editor]);
  return { onResize };
}
function useSyncEditorValue(editor, value) {
  (0, import_react229.useEffect)(() => {
    if (!editor) {
      return;
    }
    if (value === editor.getValue()) {
      return;
    }
    const pos = editor.session.selection.toJSON();
    editor.setValue(value, -1);
    editor.session.selection.fromJSON(pos);
  }, [editor, value]);
}
function useSyncEditorLanguage(editor, language) {
  (0, import_react229.useEffect)(() => {
    editor === null || editor === void 0 ? void 0 : editor.session.setMode(`ace/mode/${language}`);
  }, [editor, language]);
}
function useSyncEditorWrapLines(editor, wrapLines) {
  (0, import_react229.useEffect)(() => {
    editor === null || editor === void 0 ? void 0 : editor.session.setUseWrapMode(wrapLines !== null && wrapLines !== void 0 ? wrapLines : true);
  }, [editor, wrapLines]);
}
function useSyncEditorTheme(editor, theme) {
  (0, import_react229.useEffect)(() => {
    editor === null || editor === void 0 ? void 0 : editor.setTheme(getAceTheme(theme));
  }, [editor, theme]);
}

// node_modules/@cloudscape-design/components/code-editor/index.js
var CodeEditor = (0, import_react230.forwardRef)((props2, ref) => {
  var _a, _b;
  const { ace, value, language, i18nStrings, editorContentHeight, onEditorContentResize, ariaLabel, languageLabel: customLanguageLabel, preferences, loading, themes, getModalRoot, removeModalRoot } = props2, rest = __rest(props2, ["ace", "value", "language", "i18nStrings", "editorContentHeight", "onEditorContentResize", "ariaLabel", "languageLabel", "preferences", "loading", "themes", "getModalRoot", "removeModalRoot"]);
  const { __internalRootRef } = useBaseComponent("CodeEditor", { props: { language } });
  const { controlId, ariaLabelledby, ariaDescribedby } = useFormFieldContext(props2);
  const [editorHeight = 480, setEditorHeight] = useControllable(editorContentHeight, onEditorContentResize, 480, {
    componentName: "code-editor",
    changeHandler: "onEditorContentResize",
    controlledProp: "editorContentHeight"
  });
  const mode = useCurrentMode(__internalRootRef);
  const isRefresh = useVisualRefresh();
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("code-editor");
  const i18nModal = useInternalI18n("modal");
  const errorsTabRef = (0, import_react230.useRef)(null);
  const warningsTabRef = (0, import_react230.useRef)(null);
  const [codeEditorWidth, codeEditorMeasureRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const mergedRef = useMergeRefs(codeEditorMeasureRef, __internalRootRef);
  const paneId = useUniqueId("code-editor-pane");
  const [paneStatus, setPaneStatus] = (0, import_react230.useState)("hidden");
  const [annotations, setAnnotations] = (0, import_react230.useState)([]);
  const [highlightedAnnotation, setHighlightedAnnotation] = (0, import_react230.useState)();
  const [cursorPosition, setCursorPosition] = (0, import_react230.useState)({ row: 0, column: 0 });
  const [isTabFocused, setTabFocused] = (0, import_react230.useState)(false);
  const { editorRef, editor } = useEditor(ace, themes, loading);
  useForwardFocus(ref, editorRef);
  (0, import_react230.useEffect)(() => {
    if (!ace || !editor) {
      return;
    }
    setupEditor(ace, editor, setAnnotations, setCursorPosition, setHighlightedAnnotation, setPaneStatus);
    return () => {
      editor === null || editor === void 0 ? void 0 : editor.destroy();
    };
  }, [ace, editor]);
  useSyncEditorLabels(editor, { controlId, ariaLabel, ariaLabelledby, ariaDescribedby });
  const { onResize } = useSyncEditorSize(editor, { width: codeEditorWidth, height: editorContentHeight });
  useSyncEditorValue(editor, value);
  useSyncEditorLanguage(editor, language);
  useSyncEditorWrapLines(editor, preferences === null || preferences === void 0 ? void 0 : preferences.wrapLines);
  const defaultTheme = getDefaultTheme(mode, themes);
  useSyncEditorTheme(editor, (_a = preferences === null || preferences === void 0 ? void 0 : preferences.theme) !== null && _a !== void 0 ? _a : defaultTheme);
  useChangeEffect(editor, props2.onChange, props2.onDelayedChange);
  (0, import_react230.useEffect)(() => {
    if (annotations.length === 0) {
      setPaneStatus("hidden");
    }
    if (props2.onValidate) {
      fireNonCancelableEvent(props2.onValidate, { annotations });
    }
  }, [annotations, props2.onValidate]);
  const languageLabel = customLanguageLabel !== null && customLanguageLabel !== void 0 ? customLanguageLabel : getLanguageLabel(language);
  const errorCount = annotations.filter((a4) => a4.type === "error").length;
  const warningCount = annotations.filter((a4) => a4.type === "warning").length;
  const currentAnnotations = (0, import_react230.useMemo)(() => annotations.filter((a4) => a4.type === paneStatus), [annotations, paneStatus]);
  const onEditorKeydown = (0, import_react230.useCallback)((e3) => {
    if (editor && e3.target === editor.container && e3.keyCode === KeyCode.enter) {
      e3.stopPropagation();
      e3.preventDefault();
      editor.focus();
    }
  }, [editor]);
  const onTabFocus = (0, import_react230.useCallback)(() => setTabFocused(true), []);
  const onTabBlur = (0, import_react230.useCallback)(() => setTabFocused(false), []);
  const onErrorPaneToggle = (0, import_react230.useCallback)(() => {
    setPaneStatus(paneStatus !== "error" ? "error" : "hidden");
  }, [paneStatus]);
  const onWarningPaneToggle = (0, import_react230.useCallback)(() => {
    setPaneStatus(paneStatus !== "warning" ? "warning" : "hidden");
  }, [paneStatus]);
  const onPaneClose = () => {
    setPaneStatus("hidden");
  };
  const onAnnotationClick = ({ row = 0, column = 0 }) => {
    if (!editor) {
      return;
    }
    editor.focus();
    editor.gotoLine(row + 1, column, false);
    setHighlightedAnnotation(void 0);
  };
  const onAnnotationClear = (0, import_react230.useCallback)(() => {
    setHighlightedAnnotation(void 0);
  }, []);
  const [isPreferencesModalVisible, setPreferencesModalVisible] = (0, import_react230.useState)(false);
  const onPreferencesOpen = () => setPreferencesModalVisible(true);
  const onPreferencesConfirm = (p) => {
    fireNonCancelableEvent(props2.onPreferencesChange, p);
    setPreferencesModalVisible(false);
  };
  const onPreferencesDismiss = () => setPreferencesModalVisible(false);
  const isPaneVisible = paneStatus !== "hidden";
  return import_react230.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default85["code-editor"], baseProps.className, { [styles_css_default85["code-editor-refresh"]]: isRefresh }), ref: mergedRef }),
    loading && import_react230.default.createElement(
      loading_screen_default,
      null,
      import_react230.default.createElement(internal_default2, { tagName: "span" }, i18n("i18nStrings.loadingState", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.loadingState))
    ),
    !ace && !loading && import_react230.default.createElement(error_screen_default, { recoveryText: i18n("i18nStrings.errorStateRecovery", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorStateRecovery), onRecoveryClick: props2.onRecoveryClick }, i18n("i18nStrings.errorState", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorState)),
    ace && !loading && import_react230.default.createElement(
      import_react230.default.Fragment,
      null,
      import_react230.default.createElement(
        ResizableBox,
        { height: Math.max(editorHeight, 20), minHeight: 20, onResize: (height) => {
          setEditorHeight(height);
          onResize();
          fireNonCancelableEvent(onEditorContentResize, { height });
        }, handleAriaLabel: i18n("i18nStrings.resizeHandleAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleAriaLabel), handleTooltipText: i18n("i18nStrings.resizeHandleTooltipText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleTooltipText) },
        import_react230.default.createElement("div", { ref: editorRef, className: clsx_m_default(styles_css_default85.editor, styles_css_default85.ace, isRefresh && styles_css_default85["editor-refresh"]), onKeyDown: onEditorKeydown, tabIndex: 0, role: "group", "aria-label": i18n("i18nStrings.editorGroupAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.editorGroupAriaLabel) })
      ),
      import_react230.default.createElement(
        "div",
        { role: "group", "aria-label": i18n("i18nStrings.statusBarGroupAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.statusBarGroupAriaLabel) },
        import_react230.default.createElement(StatusBar, { languageLabel, cursorPosition: i18n("i18nStrings.cursorPosition", (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.cursorPosition) === null || _b === void 0 ? void 0 : _b.call(i18nStrings, cursorPosition.row + 1, cursorPosition.column + 1), (format3) => format3({ row: cursorPosition.row + 1, column: cursorPosition.column + 1 })), errorCount, warningCount, paneStatus, onErrorPaneToggle, onWarningPaneToggle, onTabFocus, onTabBlur, errorsTabRef, warningsTabRef, i18nStrings, isTabFocused, paneId: isPaneVisible ? paneId : void 0, onPreferencesOpen, isRefresh }),
        import_react230.default.createElement(Pane, { id: paneId, paneStatus, visible: isPaneVisible, annotations: currentAnnotations, highlighted: highlightedAnnotation, onAnnotationClick, onAnnotationClear, onClose: onPaneClose, cursorPositionLabel: i18n("i18nStrings.cursorPosition", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.cursorPosition, (format3) => (row, column) => format3({ row, column })), closeButtonAriaLabel: i18n("i18nStrings.paneCloseButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.paneCloseButtonAriaLabel), handleAriaLabel: i18n("i18nStrings.resizeHandleAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleAriaLabel), handleTooltipText: i18n("i18nStrings.resizeHandleTooltipText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleTooltipText) })
      ),
      isPreferencesModalVisible && import_react230.default.createElement(preferences_modal_default, { getModalRoot, removeModalRoot, onConfirm: onPreferencesConfirm, onDismiss: onPreferencesDismiss, themes: themes !== null && themes !== void 0 ? themes : DEFAULT_AVAILABLE_THEMES, preferences, defaultTheme, i18nStrings: {
        header: i18n("i18nStrings.preferencesModalHeader", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalHeader),
        cancel: i18n("i18nStrings.preferencesModalCancel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalCancel),
        confirm: i18n("i18nStrings.preferencesModalConfirm", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalConfirm),
        close: i18nModal("closeAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalCloseAriaLabel) || (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalCancel),
        wrapLines: i18n("i18nStrings.preferencesModalWrapLines", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalWrapLines),
        theme: i18n("i18nStrings.preferencesModalTheme", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalTheme),
        lightThemes: i18n("i18nStrings.preferencesModalLightThemes", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalLightThemes),
        darkThemes: i18n("i18nStrings.preferencesModalDarkThemes", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalDarkThemes),
        themeFilteringAriaLabel: i18n("i18nStrings.preferencesModalThemeFilteringAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalThemeFilteringAriaLabel),
        themeFilteringPlaceholder: i18n("i18nStrings.preferencesModalThemeFilteringPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalThemeFilteringPlaceholder),
        themeFilteringClearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalThemeFilteringClearAriaLabel
      } })
    )
  );
});
applyDisplayName(CodeEditor, "CodeEditor");
var code_editor_default = CodeEditor;

// node_modules/@cloudscape-design/components/collection-preferences/index.js
var import_react251 = __toESM(require_react());

// node_modules/@cloudscape-design/components/collection-preferences/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/collection-preferences/analytics-metadata/styles.scoped.css";
var styles_css_default90 = {
  "trigger-button": "awsui_trigger-button_119fv_11zih_5"
};

// node_modules/@cloudscape-design/components/collection-preferences/analytics-metadata/utils.js
var getComponentAnalyticsMetadata = (disabled, preferences = {}) => {
  const metadata = {
    name: "awsui.CollectionPreferences",
    label: `.${styles_css_default90["trigger-button"]}`,
    properties: {
      disabled: `${!!disabled}`
    }
  };
  if (preferences.pageSize) {
    metadata.properties.pageSize = `${preferences.pageSize}`;
  }
  if (preferences.wrapLines !== void 0) {
    metadata.properties.wrapLines = `${!!preferences.wrapLines}`;
  }
  if (preferences.stripedRows !== void 0) {
    metadata.properties.stripedRows = `${!!preferences.stripedRows}`;
  }
  if (preferences.contentDensity !== void 0) {
    metadata.properties.contentDensity = preferences.contentDensity;
  }
  if (preferences.visibleContent) {
    metadata.properties.visibleContentCount = `${preferences.visibleContent.length}`;
  }
  if (preferences.stickyColumns) {
    if (preferences.stickyColumns.first) {
      metadata.properties.stickyColumnsFirst = `${preferences.stickyColumns.first}`;
    }
    if (preferences.stickyColumns.last) {
      metadata.properties.stickyColumnsLast = `${preferences.stickyColumns.last}`;
    }
  }
  if (preferences.contentDisplay) {
    metadata.properties.contentDisplayVisibleCount = `${preferences.contentDisplay.filter(({ visible }) => !!visible).length}`;
  }
  return metadata;
};
var getAnalyticsInnerContextAttribute = (preference) => getAnalyticsMetadataAttribute({
  component: {
    innerContext: {
      preference
    }
  }
});

// node_modules/@cloudscape-design/components/collection-preferences/content-display/index.js
var import_react246 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/sortable-area/use-live-announcements.js
var import_react231 = __toESM(require_react());
var formatDndStarted = (format3) => (position, total) => format3({ position, total });
var formatDndItemReordered = (format3) => (initialPosition, currentPosition, total) => format3({ currentPosition, total, isInitialPosition: `${initialPosition === currentPosition}` });
var formatDndItemCommitted = (format3) => (initialPosition, finalPosition, total) => format3({
  initialPosition,
  finalPosition,
  total,
  isInitialPosition: `${initialPosition === finalPosition}`
});
function useLiveAnnouncements({ items, itemDefinition, isDragging, liveAnnouncementDndStarted, liveAnnouncementDndItemReordered, liveAnnouncementDndItemCommitted, liveAnnouncementDndDiscarded }) {
  const isFirstAnnouncement = (0, import_react231.useRef)(true);
  if (!isDragging) {
    isFirstAnnouncement.current = true;
  }
  return {
    onDragStart({ active }) {
      if (active && liveAnnouncementDndStarted) {
        const index = items.findIndex((item) => itemDefinition.id(item) === active.id);
        return liveAnnouncementDndStarted(index + 1, items.length);
      }
    },
    onDragOver({ active, over }) {
      if (liveAnnouncementDndItemReordered) {
        if (isFirstAnnouncement.current) {
          isFirstAnnouncement.current = false;
          if (!over || over.id === active.id) {
            return;
          }
        }
        const initialIndex = items.findIndex((item) => itemDefinition.id(item) === active.id);
        const currentIdex = over ? items.findIndex((item) => itemDefinition.id(item) === over.id) : initialIndex;
        return liveAnnouncementDndItemReordered(initialIndex + 1, currentIdex + 1, items.length);
      }
    },
    onDragEnd({ active, over }) {
      if (liveAnnouncementDndItemCommitted) {
        const initialIndex = items.findIndex((item) => itemDefinition.id(item) === active.id);
        const finalIndex = over ? items.findIndex((item) => itemDefinition.id(item) === over.id) : initialIndex;
        return liveAnnouncementDndItemCommitted(initialIndex + 1, finalIndex + 1, items.length);
      }
    },
    onDragCancel() {
      return liveAnnouncementDndDiscarded;
    }
  };
}

// node_modules/@cloudscape-design/components/list/internal.js
var import_react239 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/sortable-area/index.js
var import_react237 = __toESM(require_react());

// node_modules/@dnd-kit/core/dist/core.esm.js
var import_react234 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/@dnd-kit/utilities/dist/utilities.esm.js
var import_react232 = __toESM(require_react());
function useCombinedRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  return (0, import_react232.useMemo)(
    () => (node) => {
      refs.forEach((ref) => ref(node));
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    refs
  );
}
var canUseDOM = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
function isWindow(element) {
  const elementString = Object.prototype.toString.call(element);
  return elementString === "[object Window]" || // In Electron context the Window object serializes to [object global]
  elementString === "[object global]";
}
function isNode(node) {
  return "nodeType" in node;
}
function getWindow(target) {
  var _target$ownerDocument, _target$ownerDocument2;
  if (!target) {
    return window;
  }
  if (isWindow(target)) {
    return target;
  }
  if (!isNode(target)) {
    return window;
  }
  return (_target$ownerDocument = (_target$ownerDocument2 = target.ownerDocument) == null ? void 0 : _target$ownerDocument2.defaultView) != null ? _target$ownerDocument : window;
}
function isDocument(node) {
  const {
    Document
  } = getWindow(node);
  return node instanceof Document;
}
function isHTMLElement(node) {
  if (isWindow(node)) {
    return false;
  }
  return node instanceof getWindow(node).HTMLElement;
}
function isSVGElement(node) {
  return node instanceof getWindow(node).SVGElement;
}
function getOwnerDocument(target) {
  if (!target) {
    return document;
  }
  if (isWindow(target)) {
    return target.document;
  }
  if (!isNode(target)) {
    return document;
  }
  if (isDocument(target)) {
    return target;
  }
  if (isHTMLElement(target) || isSVGElement(target)) {
    return target.ownerDocument;
  }
  return document;
}
var useIsomorphicLayoutEffect2 = canUseDOM ? import_react232.useLayoutEffect : import_react232.useEffect;
function useEvent(handler) {
  const handlerRef = (0, import_react232.useRef)(handler);
  useIsomorphicLayoutEffect2(() => {
    handlerRef.current = handler;
  });
  return (0, import_react232.useCallback)(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return handlerRef.current == null ? void 0 : handlerRef.current(...args);
  }, []);
}
function useInterval() {
  const intervalRef = (0, import_react232.useRef)(null);
  const set2 = (0, import_react232.useCallback)((listener, duration) => {
    intervalRef.current = setInterval(listener, duration);
  }, []);
  const clear = (0, import_react232.useCallback)(() => {
    if (intervalRef.current !== null) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }, []);
  return [set2, clear];
}
function useLatestValue(value, dependencies) {
  if (dependencies === void 0) {
    dependencies = [value];
  }
  const valueRef = (0, import_react232.useRef)(value);
  useIsomorphicLayoutEffect2(() => {
    if (valueRef.current !== value) {
      valueRef.current = value;
    }
  }, dependencies);
  return valueRef;
}
function useLazyMemo(callback, dependencies) {
  const valueRef = (0, import_react232.useRef)();
  return (0, import_react232.useMemo)(
    () => {
      const newValue = callback(valueRef.current);
      valueRef.current = newValue;
      return newValue;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [...dependencies]
  );
}
function useNodeRef(onChange) {
  const onChangeHandler = useEvent(onChange);
  const node = (0, import_react232.useRef)(null);
  const setNodeRef = (0, import_react232.useCallback)(
    (element) => {
      if (element !== node.current) {
        onChangeHandler == null ? void 0 : onChangeHandler(element, node.current);
      }
      node.current = element;
    },
    //eslint-disable-next-line
    []
  );
  return [node, setNodeRef];
}
function usePrevious2(value) {
  const ref = (0, import_react232.useRef)();
  (0, import_react232.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
var ids = {};
function useUniqueId2(prefix, value) {
  return (0, import_react232.useMemo)(() => {
    if (value) {
      return value;
    }
    const id = ids[prefix] == null ? 0 : ids[prefix] + 1;
    ids[prefix] = id;
    return prefix + "-" + id;
  }, [prefix, value]);
}
function createAdjustmentFn(modifier) {
  return function(object2) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }
    return adjustments.reduce((accumulator, adjustment) => {
      const entries = Object.entries(adjustment);
      for (const [key2, valueAdjustment] of entries) {
        const value = accumulator[key2];
        if (value != null) {
          accumulator[key2] = value + modifier * valueAdjustment;
        }
      }
      return accumulator;
    }, {
      ...object2
    });
  };
}
var add2 = createAdjustmentFn(1);
var subtract = createAdjustmentFn(-1);
function hasViewportRelativeCoordinates(event) {
  return "clientX" in event && "clientY" in event;
}
function isKeyboardEvent(event) {
  if (!event) {
    return false;
  }
  const {
    KeyboardEvent
  } = getWindow(event.target);
  return KeyboardEvent && event instanceof KeyboardEvent;
}
function isTouchEvent(event) {
  if (!event) {
    return false;
  }
  const {
    TouchEvent
  } = getWindow(event.target);
  return TouchEvent && event instanceof TouchEvent;
}
function getEventCoordinates(event) {
  if (isTouchEvent(event)) {
    if (event.touches && event.touches.length) {
      const {
        clientX: x3,
        clientY: y4
      } = event.touches[0];
      return {
        x: x3,
        y: y4
      };
    } else if (event.changedTouches && event.changedTouches.length) {
      const {
        clientX: x3,
        clientY: y4
      } = event.changedTouches[0];
      return {
        x: x3,
        y: y4
      };
    }
  }
  if (hasViewportRelativeCoordinates(event)) {
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  return null;
}
var CSS2 = Object.freeze({
  Translate: {
    toString(transform) {
      if (!transform) {
        return;
      }
      const {
        x: x3,
        y: y4
      } = transform;
      return "translate3d(" + (x3 ? Math.round(x3) : 0) + "px, " + (y4 ? Math.round(y4) : 0) + "px, 0)";
    }
  },
  Scale: {
    toString(transform) {
      if (!transform) {
        return;
      }
      const {
        scaleX,
        scaleY
      } = transform;
      return "scaleX(" + scaleX + ") scaleY(" + scaleY + ")";
    }
  },
  Transform: {
    toString(transform) {
      if (!transform) {
        return;
      }
      return [CSS2.Translate.toString(transform), CSS2.Scale.toString(transform)].join(" ");
    }
  },
  Transition: {
    toString(_ref) {
      let {
        property,
        duration,
        easing
      } = _ref;
      return property + " " + duration + "ms " + easing;
    }
  }
});
var SELECTOR = "a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]";
function findFirstFocusableNode(element) {
  if (element.matches(SELECTOR)) {
    return element;
  }
  return element.querySelector(SELECTOR);
}

// node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js
var import_react233 = __toESM(require_react());
var hiddenStyles = {
  display: "none"
};
function HiddenText(_ref) {
  let {
    id,
    value
  } = _ref;
  return import_react233.default.createElement("div", {
    id,
    style: hiddenStyles
  }, value);
}
function LiveRegion(_ref) {
  let {
    id,
    announcement,
    ariaLiveType = "assertive"
  } = _ref;
  const visuallyHidden = {
    position: "fixed",
    top: 0,
    left: 0,
    width: 1,
    height: 1,
    margin: -1,
    border: 0,
    padding: 0,
    overflow: "hidden",
    clip: "rect(0 0 0 0)",
    clipPath: "inset(100%)",
    whiteSpace: "nowrap"
  };
  return import_react233.default.createElement("div", {
    id,
    style: visuallyHidden,
    role: "status",
    "aria-live": ariaLiveType,
    "aria-atomic": true
  }, announcement);
}
function useAnnouncement2() {
  const [announcement, setAnnouncement] = (0, import_react233.useState)("");
  const announce = (0, import_react233.useCallback)((value) => {
    if (value != null) {
      setAnnouncement(value);
    }
  }, []);
  return {
    announce,
    announcement
  };
}

// node_modules/@dnd-kit/core/dist/core.esm.js
var DndMonitorContext = (0, import_react234.createContext)(null);
function useDndMonitor(listener) {
  const registerListener = (0, import_react234.useContext)(DndMonitorContext);
  (0, import_react234.useEffect)(() => {
    if (!registerListener) {
      throw new Error("useDndMonitor must be used within a children of <DndContext>");
    }
    const unsubscribe = registerListener(listener);
    return unsubscribe;
  }, [listener, registerListener]);
}
function useDndMonitorProvider() {
  const [listeners] = (0, import_react234.useState)(() => /* @__PURE__ */ new Set());
  const registerListener = (0, import_react234.useCallback)((listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  }, [listeners]);
  const dispatch = (0, import_react234.useCallback)((_ref) => {
    let {
      type,
      event
    } = _ref;
    listeners.forEach((listener) => {
      var _listener$type;
      return (_listener$type = listener[type]) == null ? void 0 : _listener$type.call(listener, event);
    });
  }, [listeners]);
  return [dispatch, registerListener];
}
var defaultScreenReaderInstructions = {
  draggable: "\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  "
};
var defaultAnnouncements = {
  onDragStart(_ref) {
    let {
      active
    } = _ref;
    return "Picked up draggable item " + active.id + ".";
  },
  onDragOver(_ref2) {
    let {
      active,
      over
    } = _ref2;
    if (over) {
      return "Draggable item " + active.id + " was moved over droppable area " + over.id + ".";
    }
    return "Draggable item " + active.id + " is no longer over a droppable area.";
  },
  onDragEnd(_ref3) {
    let {
      active,
      over
    } = _ref3;
    if (over) {
      return "Draggable item " + active.id + " was dropped over droppable area " + over.id;
    }
    return "Draggable item " + active.id + " was dropped.";
  },
  onDragCancel(_ref4) {
    let {
      active
    } = _ref4;
    return "Dragging was cancelled. Draggable item " + active.id + " was dropped.";
  }
};
function Accessibility(_ref) {
  let {
    announcements = defaultAnnouncements,
    container,
    hiddenTextDescribedById,
    screenReaderInstructions = defaultScreenReaderInstructions
  } = _ref;
  const {
    announce,
    announcement
  } = useAnnouncement2();
  const liveRegionId = useUniqueId2("DndLiveRegion");
  const [mounted, setMounted] = (0, import_react234.useState)(false);
  (0, import_react234.useEffect)(() => {
    setMounted(true);
  }, []);
  useDndMonitor((0, import_react234.useMemo)(() => ({
    onDragStart(_ref2) {
      let {
        active
      } = _ref2;
      announce(announcements.onDragStart({
        active
      }));
    },
    onDragMove(_ref3) {
      let {
        active,
        over
      } = _ref3;
      if (announcements.onDragMove) {
        announce(announcements.onDragMove({
          active,
          over
        }));
      }
    },
    onDragOver(_ref4) {
      let {
        active,
        over
      } = _ref4;
      announce(announcements.onDragOver({
        active,
        over
      }));
    },
    onDragEnd(_ref5) {
      let {
        active,
        over
      } = _ref5;
      announce(announcements.onDragEnd({
        active,
        over
      }));
    },
    onDragCancel(_ref6) {
      let {
        active,
        over
      } = _ref6;
      announce(announcements.onDragCancel({
        active,
        over
      }));
    }
  }), [announce, announcements]));
  if (!mounted) {
    return null;
  }
  const markup = import_react234.default.createElement(import_react234.default.Fragment, null, import_react234.default.createElement(HiddenText, {
    id: hiddenTextDescribedById,
    value: screenReaderInstructions.draggable
  }), import_react234.default.createElement(LiveRegion, {
    id: liveRegionId,
    announcement
  }));
  return container ? (0, import_react_dom2.createPortal)(markup, container) : markup;
}
var Action;
(function(Action2) {
  Action2["DragStart"] = "dragStart";
  Action2["DragMove"] = "dragMove";
  Action2["DragEnd"] = "dragEnd";
  Action2["DragCancel"] = "dragCancel";
  Action2["DragOver"] = "dragOver";
  Action2["RegisterDroppable"] = "registerDroppable";
  Action2["SetDroppableDisabled"] = "setDroppableDisabled";
  Action2["UnregisterDroppable"] = "unregisterDroppable";
})(Action || (Action = {}));
function noop() {
}
function useSensor(sensor, options) {
  return (0, import_react234.useMemo)(
    () => ({
      sensor,
      options: options != null ? options : {}
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [sensor, options]
  );
}
function useSensors() {
  for (var _len = arguments.length, sensors = new Array(_len), _key = 0; _key < _len; _key++) {
    sensors[_key] = arguments[_key];
  }
  return (0, import_react234.useMemo)(
    () => [...sensors].filter((sensor) => sensor != null),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [...sensors]
  );
}
var defaultCoordinates = Object.freeze({
  x: 0,
  y: 0
});
function distanceBetween(p1, p2) {
  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}
function getRelativeTransformOrigin(event, rect) {
  const eventCoordinates = getEventCoordinates(event);
  if (!eventCoordinates) {
    return "0 0";
  }
  const transformOrigin = {
    x: (eventCoordinates.x - rect.left) / rect.width * 100,
    y: (eventCoordinates.y - rect.top) / rect.height * 100
  };
  return transformOrigin.x + "% " + transformOrigin.y + "%";
}
function sortCollisionsAsc(_ref, _ref2) {
  let {
    data: {
      value: a4
    }
  } = _ref;
  let {
    data: {
      value: b2
    }
  } = _ref2;
  return a4 - b2;
}
function sortCollisionsDesc(_ref3, _ref4) {
  let {
    data: {
      value: a4
    }
  } = _ref3;
  let {
    data: {
      value: b2
    }
  } = _ref4;
  return b2 - a4;
}
function getFirstCollision(collisions, property) {
  if (!collisions || collisions.length === 0) {
    return null;
  }
  const [firstCollision] = collisions;
  return property ? firstCollision[property] : firstCollision;
}
function centerOfRectangle(rect, left, top) {
  if (left === void 0) {
    left = rect.left;
  }
  if (top === void 0) {
    top = rect.top;
  }
  return {
    x: left + rect.width * 0.5,
    y: top + rect.height * 0.5
  };
}
var closestCenter = (_ref) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref;
  const centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);
    if (rect) {
      const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);
      collisions.push({
        id,
        data: {
          droppableContainer,
          value: distBetween
        }
      });
    }
  }
  return collisions.sort(sortCollisionsAsc);
};
function getIntersectionRatio(entry, target) {
  const top = Math.max(target.top, entry.top);
  const left = Math.max(target.left, entry.left);
  const right = Math.min(target.left + target.width, entry.left + entry.width);
  const bottom = Math.min(target.top + target.height, entry.top + entry.height);
  const width = right - left;
  const height = bottom - top;
  if (left < right && top < bottom) {
    const targetArea = target.width * target.height;
    const entryArea = entry.width * entry.height;
    const intersectionArea = width * height;
    const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);
    return Number(intersectionRatio.toFixed(4));
  }
  return 0;
}
var rectIntersection = (_ref) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref;
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);
    if (rect) {
      const intersectionRatio = getIntersectionRatio(rect, collisionRect);
      if (intersectionRatio > 0) {
        collisions.push({
          id,
          data: {
            droppableContainer,
            value: intersectionRatio
          }
        });
      }
    }
  }
  return collisions.sort(sortCollisionsDesc);
};
function adjustScale(transform, rect1, rect2) {
  return {
    ...transform,
    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,
    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1
  };
}
function getRectDelta(rect1, rect2) {
  return rect1 && rect2 ? {
    x: rect1.left - rect2.left,
    y: rect1.top - rect2.top
  } : defaultCoordinates;
}
function createRectAdjustmentFn(modifier) {
  return function adjustClientRect(rect) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }
    return adjustments.reduce((acc, adjustment) => ({
      ...acc,
      top: acc.top + modifier * adjustment.y,
      bottom: acc.bottom + modifier * adjustment.y,
      left: acc.left + modifier * adjustment.x,
      right: acc.right + modifier * adjustment.x
    }), {
      ...rect
    });
  };
}
var getAdjustedRect = createRectAdjustmentFn(1);
function parseTransform(transform) {
  if (transform.startsWith("matrix3d(")) {
    const transformArray = transform.slice(9, -1).split(/, /);
    return {
      x: +transformArray[12],
      y: +transformArray[13],
      scaleX: +transformArray[0],
      scaleY: +transformArray[5]
    };
  } else if (transform.startsWith("matrix(")) {
    const transformArray = transform.slice(7, -1).split(/, /);
    return {
      x: +transformArray[4],
      y: +transformArray[5],
      scaleX: +transformArray[0],
      scaleY: +transformArray[3]
    };
  }
  return null;
}
function inverseTransform(rect, transform, transformOrigin) {
  const parsedTransform = parseTransform(transform);
  if (!parsedTransform) {
    return rect;
  }
  const {
    scaleX,
    scaleY,
    x: translateX,
    y: translateY
  } = parsedTransform;
  const x3 = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);
  const y4 = rect.top - translateY - (1 - scaleY) * parseFloat(transformOrigin.slice(transformOrigin.indexOf(" ") + 1));
  const w2 = scaleX ? rect.width / scaleX : rect.width;
  const h3 = scaleY ? rect.height / scaleY : rect.height;
  return {
    width: w2,
    height: h3,
    top: y4,
    right: x3 + w2,
    bottom: y4 + h3,
    left: x3
  };
}
var defaultOptions2 = {
  ignoreTransform: false
};
function getClientRect(element, options) {
  if (options === void 0) {
    options = defaultOptions2;
  }
  let rect = element.getBoundingClientRect();
  if (options.ignoreTransform) {
    const {
      transform,
      transformOrigin
    } = getWindow(element).getComputedStyle(element);
    if (transform) {
      rect = inverseTransform(rect, transform, transformOrigin);
    }
  }
  const {
    top,
    left,
    width,
    height,
    bottom,
    right
  } = rect;
  return {
    top,
    left,
    width,
    height,
    bottom,
    right
  };
}
function getTransformAgnosticClientRect(element) {
  return getClientRect(element, {
    ignoreTransform: true
  });
}
function getWindowClientRect(element) {
  const width = element.innerWidth;
  const height = element.innerHeight;
  return {
    top: 0,
    left: 0,
    right: width,
    bottom: height,
    width,
    height
  };
}
function isFixed(node, computedStyle) {
  if (computedStyle === void 0) {
    computedStyle = getWindow(node).getComputedStyle(node);
  }
  return computedStyle.position === "fixed";
}
function isScrollable(element, computedStyle) {
  if (computedStyle === void 0) {
    computedStyle = getWindow(element).getComputedStyle(element);
  }
  const overflowRegex = /(auto|scroll|overlay)/;
  const properties2 = ["overflow", "overflowX", "overflowY"];
  return properties2.some((property) => {
    const value = computedStyle[property];
    return typeof value === "string" ? overflowRegex.test(value) : false;
  });
}
function getScrollableAncestors(element, limit) {
  const scrollParents = [];
  function findScrollableAncestors(node) {
    if (limit != null && scrollParents.length >= limit) {
      return scrollParents;
    }
    if (!node) {
      return scrollParents;
    }
    if (isDocument(node) && node.scrollingElement != null && !scrollParents.includes(node.scrollingElement)) {
      scrollParents.push(node.scrollingElement);
      return scrollParents;
    }
    if (!isHTMLElement(node) || isSVGElement(node)) {
      return scrollParents;
    }
    if (scrollParents.includes(node)) {
      return scrollParents;
    }
    const computedStyle = getWindow(element).getComputedStyle(node);
    if (node !== element) {
      if (isScrollable(node, computedStyle)) {
        scrollParents.push(node);
      }
    }
    if (isFixed(node, computedStyle)) {
      return scrollParents;
    }
    return findScrollableAncestors(node.parentNode);
  }
  if (!element) {
    return scrollParents;
  }
  return findScrollableAncestors(element);
}
function getFirstScrollableAncestor(node) {
  const [firstScrollableAncestor] = getScrollableAncestors(node, 1);
  return firstScrollableAncestor != null ? firstScrollableAncestor : null;
}
function getScrollableElement(element) {
  if (!canUseDOM || !element) {
    return null;
  }
  if (isWindow(element)) {
    return element;
  }
  if (!isNode(element)) {
    return null;
  }
  if (isDocument(element) || element === getOwnerDocument(element).scrollingElement) {
    return window;
  }
  if (isHTMLElement(element)) {
    return element;
  }
  return null;
}
function getScrollXCoordinate(element) {
  if (isWindow(element)) {
    return element.scrollX;
  }
  return element.scrollLeft;
}
function getScrollYCoordinate(element) {
  if (isWindow(element)) {
    return element.scrollY;
  }
  return element.scrollTop;
}
function getScrollCoordinates(element) {
  return {
    x: getScrollXCoordinate(element),
    y: getScrollYCoordinate(element)
  };
}
var Direction;
(function(Direction2) {
  Direction2[Direction2["Forward"] = 1] = "Forward";
  Direction2[Direction2["Backward"] = -1] = "Backward";
})(Direction || (Direction = {}));
function isDocumentScrollingElement(element) {
  if (!canUseDOM || !element) {
    return false;
  }
  return element === document.scrollingElement;
}
function getScrollPosition(scrollingContainer) {
  const minScroll = {
    x: 0,
    y: 0
  };
  const dimensions = isDocumentScrollingElement(scrollingContainer) ? {
    height: window.innerHeight,
    width: window.innerWidth
  } : {
    height: scrollingContainer.clientHeight,
    width: scrollingContainer.clientWidth
  };
  const maxScroll = {
    x: scrollingContainer.scrollWidth - dimensions.width,
    y: scrollingContainer.scrollHeight - dimensions.height
  };
  const isTop = scrollingContainer.scrollTop <= minScroll.y;
  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
  return {
    isTop,
    isLeft,
    isBottom,
    isRight,
    maxScroll,
    minScroll
  };
}
var defaultThreshold = {
  x: 0.2,
  y: 0.2
};
function getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref, acceleration, thresholdPercentage) {
  let {
    top,
    left,
    right,
    bottom
  } = _ref;
  if (acceleration === void 0) {
    acceleration = 10;
  }
  if (thresholdPercentage === void 0) {
    thresholdPercentage = defaultThreshold;
  }
  const {
    isTop,
    isBottom,
    isLeft,
    isRight
  } = getScrollPosition(scrollContainer);
  const direction = {
    x: 0,
    y: 0
  };
  const speed = {
    x: 0,
    y: 0
  };
  const threshold = {
    height: scrollContainerRect.height * thresholdPercentage.y,
    width: scrollContainerRect.width * thresholdPercentage.x
  };
  if (!isTop && top <= scrollContainerRect.top + threshold.height) {
    direction.y = Direction.Backward;
    speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold.height - top) / threshold.height);
  } else if (!isBottom && bottom >= scrollContainerRect.bottom - threshold.height) {
    direction.y = Direction.Forward;
    speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold.height - bottom) / threshold.height);
  }
  if (!isRight && right >= scrollContainerRect.right - threshold.width) {
    direction.x = Direction.Forward;
    speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold.width - right) / threshold.width);
  } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {
    direction.x = Direction.Backward;
    speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold.width - left) / threshold.width);
  }
  return {
    direction,
    speed
  };
}
function getScrollElementRect(element) {
  if (element === document.scrollingElement) {
    const {
      innerWidth,
      innerHeight
    } = window;
    return {
      top: 0,
      left: 0,
      right: innerWidth,
      bottom: innerHeight,
      width: innerWidth,
      height: innerHeight
    };
  }
  const {
    top,
    left,
    right,
    bottom
  } = element.getBoundingClientRect();
  return {
    top,
    left,
    right,
    bottom,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function getScrollOffsets(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node) => {
    return add2(acc, getScrollCoordinates(node));
  }, defaultCoordinates);
}
function getScrollXOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node) => {
    return acc + getScrollXCoordinate(node);
  }, 0);
}
function getScrollYOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node) => {
    return acc + getScrollYCoordinate(node);
  }, 0);
}
function scrollIntoViewIfNeeded(element, measure) {
  if (measure === void 0) {
    measure = getClientRect;
  }
  if (!element) {
    return;
  }
  const {
    top,
    left,
    bottom,
    right
  } = measure(element);
  const firstScrollableAncestor = getFirstScrollableAncestor(element);
  if (!firstScrollableAncestor) {
    return;
  }
  if (bottom <= 0 || right <= 0 || top >= window.innerHeight || left >= window.innerWidth) {
    element.scrollIntoView({
      block: "center",
      inline: "center"
    });
  }
}
var properties = [["x", ["left", "right"], getScrollXOffset], ["y", ["top", "bottom"], getScrollYOffset]];
var Rect = class {
  constructor(rect, element) {
    this.rect = void 0;
    this.width = void 0;
    this.height = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.right = void 0;
    this.left = void 0;
    const scrollableAncestors = getScrollableAncestors(element);
    const scrollOffsets = getScrollOffsets(scrollableAncestors);
    this.rect = {
      ...rect
    };
    this.width = rect.width;
    this.height = rect.height;
    for (const [axis, keys, getScrollOffset] of properties) {
      for (const key2 of keys) {
        Object.defineProperty(this, key2, {
          get: () => {
            const currentOffsets = getScrollOffset(scrollableAncestors);
            const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;
            return this.rect[key2] + scrollOffsetsDeltla;
          },
          enumerable: true
        });
      }
    }
    Object.defineProperty(this, "rect", {
      enumerable: false
    });
  }
};
var Listeners = class {
  constructor(target) {
    this.target = void 0;
    this.listeners = [];
    this.removeAll = () => {
      this.listeners.forEach((listener) => {
        var _this$target;
        return (_this$target = this.target) == null ? void 0 : _this$target.removeEventListener(...listener);
      });
    };
    this.target = target;
  }
  add(eventName, handler, options) {
    var _this$target2;
    (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options);
    this.listeners.push([eventName, handler, options]);
  }
};
function getEventListenerTarget(target) {
  const {
    EventTarget
  } = getWindow(target);
  return target instanceof EventTarget ? target : getOwnerDocument(target);
}
function hasExceededDistance(delta, measurement) {
  const dx = Math.abs(delta.x);
  const dy = Math.abs(delta.y);
  if (typeof measurement === "number") {
    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;
  }
  if ("x" in measurement && "y" in measurement) {
    return dx > measurement.x && dy > measurement.y;
  }
  if ("x" in measurement) {
    return dx > measurement.x;
  }
  if ("y" in measurement) {
    return dy > measurement.y;
  }
  return false;
}
var EventName;
(function(EventName3) {
  EventName3["Click"] = "click";
  EventName3["DragStart"] = "dragstart";
  EventName3["Keydown"] = "keydown";
  EventName3["ContextMenu"] = "contextmenu";
  EventName3["Resize"] = "resize";
  EventName3["SelectionChange"] = "selectionchange";
  EventName3["VisibilityChange"] = "visibilitychange";
})(EventName || (EventName = {}));
function preventDefault(event) {
  event.preventDefault();
}
function stopPropagation(event) {
  event.stopPropagation();
}
var KeyboardCode;
(function(KeyboardCode3) {
  KeyboardCode3["Space"] = "Space";
  KeyboardCode3["Down"] = "ArrowDown";
  KeyboardCode3["Right"] = "ArrowRight";
  KeyboardCode3["Left"] = "ArrowLeft";
  KeyboardCode3["Up"] = "ArrowUp";
  KeyboardCode3["Esc"] = "Escape";
  KeyboardCode3["Enter"] = "Enter";
  KeyboardCode3["Tab"] = "Tab";
})(KeyboardCode || (KeyboardCode = {}));
var defaultKeyboardCodes = {
  start: [KeyboardCode.Space, KeyboardCode.Enter],
  cancel: [KeyboardCode.Esc],
  end: [KeyboardCode.Space, KeyboardCode.Enter, KeyboardCode.Tab]
};
var defaultKeyboardCoordinateGetter = (event, _ref) => {
  let {
    currentCoordinates
  } = _ref;
  switch (event.code) {
    case KeyboardCode.Right:
      return {
        ...currentCoordinates,
        x: currentCoordinates.x + 25
      };
    case KeyboardCode.Left:
      return {
        ...currentCoordinates,
        x: currentCoordinates.x - 25
      };
    case KeyboardCode.Down:
      return {
        ...currentCoordinates,
        y: currentCoordinates.y + 25
      };
    case KeyboardCode.Up:
      return {
        ...currentCoordinates,
        y: currentCoordinates.y - 25
      };
  }
  return void 0;
};
var KeyboardSensor = class {
  constructor(props2) {
    this.props = void 0;
    this.autoScrollEnabled = false;
    this.referenceCoordinates = void 0;
    this.listeners = void 0;
    this.windowListeners = void 0;
    this.props = props2;
    const {
      event: {
        target
      }
    } = props2;
    this.props = props2;
    this.listeners = new Listeners(getOwnerDocument(target));
    this.windowListeners = new Listeners(getWindow(target));
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.attach();
  }
  attach() {
    this.handleStart();
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));
  }
  handleStart() {
    const {
      activeNode,
      onStart
    } = this.props;
    const node = activeNode.node.current;
    if (node) {
      scrollIntoViewIfNeeded(node);
    }
    onStart(defaultCoordinates);
  }
  handleKeyDown(event) {
    if (isKeyboardEvent(event)) {
      const {
        active,
        context,
        options
      } = this.props;
      const {
        keyboardCodes = defaultKeyboardCodes,
        coordinateGetter = defaultKeyboardCoordinateGetter,
        scrollBehavior = "smooth"
      } = options;
      const {
        code
      } = event;
      if (keyboardCodes.end.includes(code)) {
        this.handleEnd(event);
        return;
      }
      if (keyboardCodes.cancel.includes(code)) {
        this.handleCancel(event);
        return;
      }
      const {
        collisionRect
      } = context.current;
      const currentCoordinates = collisionRect ? {
        x: collisionRect.left,
        y: collisionRect.top
      } : defaultCoordinates;
      if (!this.referenceCoordinates) {
        this.referenceCoordinates = currentCoordinates;
      }
      const newCoordinates = coordinateGetter(event, {
        active,
        context: context.current,
        currentCoordinates
      });
      if (newCoordinates) {
        const coordinatesDelta = subtract(newCoordinates, currentCoordinates);
        const scrollDelta = {
          x: 0,
          y: 0
        };
        const {
          scrollableAncestors
        } = context.current;
        for (const scrollContainer of scrollableAncestors) {
          const direction = event.code;
          const {
            isTop,
            isRight,
            isLeft,
            isBottom,
            maxScroll,
            minScroll
          } = getScrollPosition(scrollContainer);
          const scrollElementRect = getScrollElementRect(scrollContainer);
          const clampedCoordinates = {
            x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),
            y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
          };
          const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;
          const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;
          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {
            const newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;
            const canScrollToNewCoordinates = direction === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;
            if (canScrollToNewCoordinates && !coordinatesDelta.y) {
              scrollContainer.scrollTo({
                left: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }
            if (canScrollToNewCoordinates) {
              scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;
            } else {
              scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;
            }
            if (scrollDelta.x) {
              scrollContainer.scrollBy({
                left: -scrollDelta.x,
                behavior: scrollBehavior
              });
            }
            break;
          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
            const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
            const canScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;
            if (canScrollToNewCoordinates && !coordinatesDelta.x) {
              scrollContainer.scrollTo({
                top: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }
            if (canScrollToNewCoordinates) {
              scrollDelta.y = scrollContainer.scrollTop - newScrollCoordinates;
            } else {
              scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;
            }
            if (scrollDelta.y) {
              scrollContainer.scrollBy({
                top: -scrollDelta.y,
                behavior: scrollBehavior
              });
            }
            break;
          }
        }
        this.handleMove(event, add2(subtract(newCoordinates, this.referenceCoordinates), scrollDelta));
      }
    }
  }
  handleMove(event, coordinates) {
    const {
      onMove
    } = this.props;
    event.preventDefault();
    onMove(coordinates);
  }
  handleEnd(event) {
    const {
      onEnd
    } = this.props;
    event.preventDefault();
    this.detach();
    onEnd();
  }
  handleCancel(event) {
    const {
      onCancel
    } = this.props;
    event.preventDefault();
    this.detach();
    onCancel();
  }
  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
  }
};
KeyboardSensor.activators = [{
  eventName: "onKeyDown",
  handler: (event, _ref, _ref2) => {
    let {
      keyboardCodes = defaultKeyboardCodes,
      onActivation
    } = _ref;
    let {
      active
    } = _ref2;
    const {
      code
    } = event.nativeEvent;
    if (keyboardCodes.start.includes(code)) {
      const activator = active.activatorNode.current;
      if (activator && event.target !== activator) {
        return false;
      }
      event.preventDefault();
      onActivation == null ? void 0 : onActivation({
        event: event.nativeEvent
      });
      return true;
    }
    return false;
  }
}];
function isDistanceConstraint(constraint) {
  return Boolean(constraint && "distance" in constraint);
}
function isDelayConstraint(constraint) {
  return Boolean(constraint && "delay" in constraint);
}
var AbstractPointerSensor = class {
  constructor(props2, events2, listenerTarget) {
    var _getEventCoordinates;
    if (listenerTarget === void 0) {
      listenerTarget = getEventListenerTarget(props2.event.target);
    }
    this.props = void 0;
    this.events = void 0;
    this.autoScrollEnabled = true;
    this.document = void 0;
    this.activated = false;
    this.initialCoordinates = void 0;
    this.timeoutId = null;
    this.listeners = void 0;
    this.documentListeners = void 0;
    this.windowListeners = void 0;
    this.props = props2;
    this.events = events2;
    const {
      event
    } = props2;
    const {
      target
    } = event;
    this.props = props2;
    this.events = events2;
    this.document = getOwnerDocument(target);
    this.documentListeners = new Listeners(this.document);
    this.listeners = new Listeners(listenerTarget);
    this.windowListeners = new Listeners(getWindow(target));
    this.initialCoordinates = (_getEventCoordinates = getEventCoordinates(event)) != null ? _getEventCoordinates : defaultCoordinates;
    this.handleStart = this.handleStart.bind(this);
    this.handleMove = this.handleMove.bind(this);
    this.handleEnd = this.handleEnd.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.handleKeydown = this.handleKeydown.bind(this);
    this.removeTextSelection = this.removeTextSelection.bind(this);
    this.attach();
  }
  attach() {
    const {
      events: events2,
      props: {
        options: {
          activationConstraint,
          bypassActivationConstraint
        }
      }
    } = this;
    this.listeners.add(events2.move.name, this.handleMove, {
      passive: false
    });
    this.listeners.add(events2.end.name, this.handleEnd);
    if (events2.cancel) {
      this.listeners.add(events2.cancel.name, this.handleCancel);
    }
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.DragStart, preventDefault);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    this.windowListeners.add(EventName.ContextMenu, preventDefault);
    this.documentListeners.add(EventName.Keydown, this.handleKeydown);
    if (activationConstraint) {
      if (bypassActivationConstraint != null && bypassActivationConstraint({
        event: this.props.event,
        activeNode: this.props.activeNode,
        options: this.props.options
      })) {
        return this.handleStart();
      }
      if (isDelayConstraint(activationConstraint)) {
        this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);
        this.handlePending(activationConstraint);
        return;
      }
      if (isDistanceConstraint(activationConstraint)) {
        this.handlePending(activationConstraint);
        return;
      }
    }
    this.handleStart();
  }
  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
    setTimeout(this.documentListeners.removeAll, 50);
    if (this.timeoutId !== null) {
      clearTimeout(this.timeoutId);
      this.timeoutId = null;
    }
  }
  handlePending(constraint, offset) {
    const {
      active,
      onPending
    } = this.props;
    onPending(active, constraint, this.initialCoordinates, offset);
  }
  handleStart() {
    const {
      initialCoordinates
    } = this;
    const {
      onStart
    } = this.props;
    if (initialCoordinates) {
      this.activated = true;
      this.documentListeners.add(EventName.Click, stopPropagation, {
        capture: true
      });
      this.removeTextSelection();
      this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);
      onStart(initialCoordinates);
    }
  }
  handleMove(event) {
    var _getEventCoordinates2;
    const {
      activated,
      initialCoordinates,
      props: props2
    } = this;
    const {
      onMove,
      options: {
        activationConstraint
      }
    } = props2;
    if (!initialCoordinates) {
      return;
    }
    const coordinates = (_getEventCoordinates2 = getEventCoordinates(event)) != null ? _getEventCoordinates2 : defaultCoordinates;
    const delta = subtract(initialCoordinates, coordinates);
    if (!activated && activationConstraint) {
      if (isDistanceConstraint(activationConstraint)) {
        if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
        if (hasExceededDistance(delta, activationConstraint.distance)) {
          return this.handleStart();
        }
      }
      if (isDelayConstraint(activationConstraint)) {
        if (hasExceededDistance(delta, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
      }
      this.handlePending(activationConstraint, delta);
      return;
    }
    if (event.cancelable) {
      event.preventDefault();
    }
    onMove(coordinates);
  }
  handleEnd() {
    const {
      onAbort,
      onEnd
    } = this.props;
    this.detach();
    if (!this.activated) {
      onAbort(this.props.active);
    }
    onEnd();
  }
  handleCancel() {
    const {
      onAbort,
      onCancel
    } = this.props;
    this.detach();
    if (!this.activated) {
      onAbort(this.props.active);
    }
    onCancel();
  }
  handleKeydown(event) {
    if (event.code === KeyboardCode.Esc) {
      this.handleCancel();
    }
  }
  removeTextSelection() {
    var _this$document$getSel;
    (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();
  }
};
var events = {
  cancel: {
    name: "pointercancel"
  },
  move: {
    name: "pointermove"
  },
  end: {
    name: "pointerup"
  }
};
var PointerSensor = class extends AbstractPointerSensor {
  constructor(props2) {
    const {
      event
    } = props2;
    const listenerTarget = getOwnerDocument(event.target);
    super(props2, events, listenerTarget);
  }
};
PointerSensor.activators = [{
  eventName: "onPointerDown",
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    if (!event.isPrimary || event.button !== 0) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var events$1 = {
  move: {
    name: "mousemove"
  },
  end: {
    name: "mouseup"
  }
};
var MouseButton;
(function(MouseButton2) {
  MouseButton2[MouseButton2["RightClick"] = 2] = "RightClick";
})(MouseButton || (MouseButton = {}));
var MouseSensor = class extends AbstractPointerSensor {
  constructor(props2) {
    super(props2, events$1, getOwnerDocument(props2.event.target));
  }
};
MouseSensor.activators = [{
  eventName: "onMouseDown",
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    if (event.button === MouseButton.RightClick) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var events$2 = {
  cancel: {
    name: "touchcancel"
  },
  move: {
    name: "touchmove"
  },
  end: {
    name: "touchend"
  }
};
var TouchSensor = class extends AbstractPointerSensor {
  constructor(props2) {
    super(props2, events$2);
  }
  static setup() {
    window.addEventListener(events$2.move.name, noop2, {
      capture: false,
      passive: false
    });
    return function teardown() {
      window.removeEventListener(events$2.move.name, noop2);
    };
    function noop2() {
    }
  }
};
TouchSensor.activators = [{
  eventName: "onTouchStart",
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    const {
      touches
    } = event;
    if (touches.length > 1) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var AutoScrollActivator;
(function(AutoScrollActivator2) {
  AutoScrollActivator2[AutoScrollActivator2["Pointer"] = 0] = "Pointer";
  AutoScrollActivator2[AutoScrollActivator2["DraggableRect"] = 1] = "DraggableRect";
})(AutoScrollActivator || (AutoScrollActivator = {}));
var TraversalOrder;
(function(TraversalOrder2) {
  TraversalOrder2[TraversalOrder2["TreeOrder"] = 0] = "TreeOrder";
  TraversalOrder2[TraversalOrder2["ReversedTreeOrder"] = 1] = "ReversedTreeOrder";
})(TraversalOrder || (TraversalOrder = {}));
function useAutoScroller(_ref) {
  let {
    acceleration,
    activator = AutoScrollActivator.Pointer,
    canScroll,
    draggingRect,
    enabled,
    interval = 5,
    order = TraversalOrder.TreeOrder,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects,
    delta,
    threshold
  } = _ref;
  const scrollIntent = useScrollIntent({
    delta,
    disabled: !enabled
  });
  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();
  const scrollSpeed = (0, import_react234.useRef)({
    x: 0,
    y: 0
  });
  const scrollDirection = (0, import_react234.useRef)({
    x: 0,
    y: 0
  });
  const rect = (0, import_react234.useMemo)(() => {
    switch (activator) {
      case AutoScrollActivator.Pointer:
        return pointerCoordinates ? {
          top: pointerCoordinates.y,
          bottom: pointerCoordinates.y,
          left: pointerCoordinates.x,
          right: pointerCoordinates.x
        } : null;
      case AutoScrollActivator.DraggableRect:
        return draggingRect;
    }
  }, [activator, draggingRect, pointerCoordinates]);
  const scrollContainerRef = (0, import_react234.useRef)(null);
  const autoScroll = (0, import_react234.useCallback)(() => {
    const scrollContainer = scrollContainerRef.current;
    if (!scrollContainer) {
      return;
    }
    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;
    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;
    scrollContainer.scrollBy(scrollLeft, scrollTop);
  }, []);
  const sortedScrollableAncestors = (0, import_react234.useMemo)(() => order === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order, scrollableAncestors]);
  (0, import_react234.useEffect)(
    () => {
      if (!enabled || !scrollableAncestors.length || !rect) {
        clearAutoScrollInterval();
        return;
      }
      for (const scrollContainer of sortedScrollableAncestors) {
        if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {
          continue;
        }
        const index = scrollableAncestors.indexOf(scrollContainer);
        const scrollContainerRect = scrollableAncestorRects[index];
        if (!scrollContainerRect) {
          continue;
        }
        const {
          direction,
          speed
        } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);
        for (const axis of ["x", "y"]) {
          if (!scrollIntent[axis][direction[axis]]) {
            speed[axis] = 0;
            direction[axis] = 0;
          }
        }
        if (speed.x > 0 || speed.y > 0) {
          clearAutoScrollInterval();
          scrollContainerRef.current = scrollContainer;
          setAutoScrollInterval(autoScroll, interval);
          scrollSpeed.current = speed;
          scrollDirection.current = direction;
          return;
        }
      }
      scrollSpeed.current = {
        x: 0,
        y: 0
      };
      scrollDirection.current = {
        x: 0,
        y: 0
      };
      clearAutoScrollInterval();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      acceleration,
      autoScroll,
      canScroll,
      clearAutoScrollInterval,
      enabled,
      interval,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(rect),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(scrollIntent),
      setAutoScrollInterval,
      scrollableAncestors,
      sortedScrollableAncestors,
      scrollableAncestorRects,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(threshold)
    ]
  );
}
var defaultScrollIntent = {
  x: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  },
  y: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  }
};
function useScrollIntent(_ref2) {
  let {
    delta,
    disabled
  } = _ref2;
  const previousDelta = usePrevious2(delta);
  return useLazyMemo((previousIntent) => {
    if (disabled || !previousDelta || !previousIntent) {
      return defaultScrollIntent;
    }
    const direction = {
      x: Math.sign(delta.x - previousDelta.x),
      y: Math.sign(delta.y - previousDelta.y)
    };
    return {
      x: {
        [Direction.Backward]: previousIntent.x[Direction.Backward] || direction.x === -1,
        [Direction.Forward]: previousIntent.x[Direction.Forward] || direction.x === 1
      },
      y: {
        [Direction.Backward]: previousIntent.y[Direction.Backward] || direction.y === -1,
        [Direction.Forward]: previousIntent.y[Direction.Forward] || direction.y === 1
      }
    };
  }, [disabled, delta, previousDelta]);
}
function useCachedNode(draggableNodes, id) {
  const draggableNode = id != null ? draggableNodes.get(id) : void 0;
  const node = draggableNode ? draggableNode.node.current : null;
  return useLazyMemo((cachedNode) => {
    var _ref;
    if (id == null) {
      return null;
    }
    return (_ref = node != null ? node : cachedNode) != null ? _ref : null;
  }, [node, id]);
}
function useCombineActivators(sensors, getSyntheticHandler) {
  return (0, import_react234.useMemo)(() => sensors.reduce((accumulator, sensor) => {
    const {
      sensor: Sensor
    } = sensor;
    const sensorActivators = Sensor.activators.map((activator) => ({
      eventName: activator.eventName,
      handler: getSyntheticHandler(activator.handler, sensor)
    }));
    return [...accumulator, ...sensorActivators];
  }, []), [sensors, getSyntheticHandler]);
}
var MeasuringStrategy;
(function(MeasuringStrategy2) {
  MeasuringStrategy2[MeasuringStrategy2["Always"] = 0] = "Always";
  MeasuringStrategy2[MeasuringStrategy2["BeforeDragging"] = 1] = "BeforeDragging";
  MeasuringStrategy2[MeasuringStrategy2["WhileDragging"] = 2] = "WhileDragging";
})(MeasuringStrategy || (MeasuringStrategy = {}));
var MeasuringFrequency;
(function(MeasuringFrequency2) {
  MeasuringFrequency2["Optimized"] = "optimized";
})(MeasuringFrequency || (MeasuringFrequency = {}));
var defaultValue = /* @__PURE__ */ new Map();
function useDroppableMeasuring(containers, _ref) {
  let {
    dragging,
    dependencies,
    config
  } = _ref;
  const [queue, setQueue] = (0, import_react234.useState)(null);
  const {
    frequency,
    measure,
    strategy
  } = config;
  const containersRef = (0, import_react234.useRef)(containers);
  const disabled = isDisabled();
  const disabledRef = useLatestValue(disabled);
  const measureDroppableContainers = (0, import_react234.useCallback)(function(ids2) {
    if (ids2 === void 0) {
      ids2 = [];
    }
    if (disabledRef.current) {
      return;
    }
    setQueue((value) => {
      if (value === null) {
        return ids2;
      }
      return value.concat(ids2.filter((id) => !value.includes(id)));
    });
  }, [disabledRef]);
  const timeoutId = (0, import_react234.useRef)(null);
  const droppableRects = useLazyMemo((previousValue) => {
    if (disabled && !dragging) {
      return defaultValue;
    }
    if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || queue != null) {
      const map2 = /* @__PURE__ */ new Map();
      for (let container of containers) {
        if (!container) {
          continue;
        }
        if (queue && queue.length > 0 && !queue.includes(container.id) && container.rect.current) {
          map2.set(container.id, container.rect.current);
          continue;
        }
        const node = container.node.current;
        const rect = node ? new Rect(measure(node), node) : null;
        container.rect.current = rect;
        if (rect) {
          map2.set(container.id, rect);
        }
      }
      return map2;
    }
    return previousValue;
  }, [containers, queue, dragging, disabled, measure]);
  (0, import_react234.useEffect)(() => {
    containersRef.current = containers;
  }, [containers]);
  (0, import_react234.useEffect)(
    () => {
      if (disabled) {
        return;
      }
      measureDroppableContainers();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [dragging, disabled]
  );
  (0, import_react234.useEffect)(
    () => {
      if (queue && queue.length > 0) {
        setQueue(null);
      }
    },
    //eslint-disable-next-line react-hooks/exhaustive-deps
    [JSON.stringify(queue)]
  );
  (0, import_react234.useEffect)(
    () => {
      if (disabled || typeof frequency !== "number" || timeoutId.current !== null) {
        return;
      }
      timeoutId.current = setTimeout(() => {
        measureDroppableContainers();
        timeoutId.current = null;
      }, frequency);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [frequency, disabled, measureDroppableContainers, ...dependencies]
  );
  return {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled: queue != null
  };
  function isDisabled() {
    switch (strategy) {
      case MeasuringStrategy.Always:
        return false;
      case MeasuringStrategy.BeforeDragging:
        return dragging;
      default:
        return !dragging;
    }
  }
}
function useInitialValue(value, computeFn) {
  return useLazyMemo((previousValue) => {
    if (!value) {
      return null;
    }
    if (previousValue) {
      return previousValue;
    }
    return typeof computeFn === "function" ? computeFn(value) : value;
  }, [computeFn, value]);
}
function useInitialRect(node, measure) {
  return useInitialValue(node, measure);
}
function useMutationObserver(_ref) {
  let {
    callback,
    disabled
  } = _ref;
  const handleMutations = useEvent(callback);
  const mutationObserver = (0, import_react234.useMemo)(() => {
    if (disabled || typeof window === "undefined" || typeof window.MutationObserver === "undefined") {
      return void 0;
    }
    const {
      MutationObserver: MutationObserver2
    } = window;
    return new MutationObserver2(handleMutations);
  }, [handleMutations, disabled]);
  (0, import_react234.useEffect)(() => {
    return () => mutationObserver == null ? void 0 : mutationObserver.disconnect();
  }, [mutationObserver]);
  return mutationObserver;
}
function useResizeObserver2(_ref) {
  let {
    callback,
    disabled
  } = _ref;
  const handleResize = useEvent(callback);
  const resizeObserver = (0, import_react234.useMemo)(
    () => {
      if (disabled || typeof window === "undefined" || typeof window.ResizeObserver === "undefined") {
        return void 0;
      }
      const {
        ResizeObserver
      } = window;
      return new ResizeObserver(handleResize);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [disabled]
  );
  (0, import_react234.useEffect)(() => {
    return () => resizeObserver == null ? void 0 : resizeObserver.disconnect();
  }, [resizeObserver]);
  return resizeObserver;
}
function defaultMeasure(element) {
  return new Rect(getClientRect(element), element);
}
function useRect2(element, measure, fallbackRect) {
  if (measure === void 0) {
    measure = defaultMeasure;
  }
  const [rect, setRect] = (0, import_react234.useState)(null);
  function measureRect() {
    setRect((currentRect) => {
      if (!element) {
        return null;
      }
      if (element.isConnected === false) {
        var _ref;
        return (_ref = currentRect != null ? currentRect : fallbackRect) != null ? _ref : null;
      }
      const newRect = measure(element);
      if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {
        return currentRect;
      }
      return newRect;
    });
  }
  const mutationObserver = useMutationObserver({
    callback(records) {
      if (!element) {
        return;
      }
      for (const record of records) {
        const {
          type,
          target
        } = record;
        if (type === "childList" && target instanceof HTMLElement && target.contains(element)) {
          measureRect();
          break;
        }
      }
    }
  });
  const resizeObserver = useResizeObserver2({
    callback: measureRect
  });
  useIsomorphicLayoutEffect2(() => {
    measureRect();
    if (element) {
      resizeObserver == null ? void 0 : resizeObserver.observe(element);
      mutationObserver == null ? void 0 : mutationObserver.observe(document.body, {
        childList: true,
        subtree: true
      });
    } else {
      resizeObserver == null ? void 0 : resizeObserver.disconnect();
      mutationObserver == null ? void 0 : mutationObserver.disconnect();
    }
  }, [element]);
  return rect;
}
function useRectDelta(rect) {
  const initialRect = useInitialValue(rect);
  return getRectDelta(rect, initialRect);
}
var defaultValue$1 = [];
function useScrollableAncestors(node) {
  const previousNode = (0, import_react234.useRef)(node);
  const ancestors = useLazyMemo((previousValue) => {
    if (!node) {
      return defaultValue$1;
    }
    if (previousValue && previousValue !== defaultValue$1 && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {
      return previousValue;
    }
    return getScrollableAncestors(node);
  }, [node]);
  (0, import_react234.useEffect)(() => {
    previousNode.current = node;
  }, [node]);
  return ancestors;
}
function useScrollOffsets(elements) {
  const [scrollCoordinates, setScrollCoordinates] = (0, import_react234.useState)(null);
  const prevElements = (0, import_react234.useRef)(elements);
  const handleScroll = (0, import_react234.useCallback)((event) => {
    const scrollingElement = getScrollableElement(event.target);
    if (!scrollingElement) {
      return;
    }
    setScrollCoordinates((scrollCoordinates2) => {
      if (!scrollCoordinates2) {
        return null;
      }
      scrollCoordinates2.set(scrollingElement, getScrollCoordinates(scrollingElement));
      return new Map(scrollCoordinates2);
    });
  }, []);
  (0, import_react234.useEffect)(() => {
    const previousElements = prevElements.current;
    if (elements !== previousElements) {
      cleanup(previousElements);
      const entries = elements.map((element) => {
        const scrollableElement = getScrollableElement(element);
        if (scrollableElement) {
          scrollableElement.addEventListener("scroll", handleScroll, {
            passive: true
          });
          return [scrollableElement, getScrollCoordinates(scrollableElement)];
        }
        return null;
      }).filter((entry) => entry != null);
      setScrollCoordinates(entries.length ? new Map(entries) : null);
      prevElements.current = elements;
    }
    return () => {
      cleanup(elements);
      cleanup(previousElements);
    };
    function cleanup(elements2) {
      elements2.forEach((element) => {
        const scrollableElement = getScrollableElement(element);
        scrollableElement == null ? void 0 : scrollableElement.removeEventListener("scroll", handleScroll);
      });
    }
  }, [handleScroll, elements]);
  return (0, import_react234.useMemo)(() => {
    if (elements.length) {
      return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => add2(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);
    }
    return defaultCoordinates;
  }, [elements, scrollCoordinates]);
}
function useScrollOffsetsDelta(scrollOffsets, dependencies) {
  if (dependencies === void 0) {
    dependencies = [];
  }
  const initialScrollOffsets = (0, import_react234.useRef)(null);
  (0, import_react234.useEffect)(
    () => {
      initialScrollOffsets.current = null;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    dependencies
  );
  (0, import_react234.useEffect)(() => {
    const hasScrollOffsets = scrollOffsets !== defaultCoordinates;
    if (hasScrollOffsets && !initialScrollOffsets.current) {
      initialScrollOffsets.current = scrollOffsets;
    }
    if (!hasScrollOffsets && initialScrollOffsets.current) {
      initialScrollOffsets.current = null;
    }
  }, [scrollOffsets]);
  return initialScrollOffsets.current ? subtract(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;
}
function useSensorSetup(sensors) {
  (0, import_react234.useEffect)(
    () => {
      if (!canUseDOM) {
        return;
      }
      const teardownFns = sensors.map((_ref) => {
        let {
          sensor
        } = _ref;
        return sensor.setup == null ? void 0 : sensor.setup();
      });
      return () => {
        for (const teardown of teardownFns) {
          teardown == null ? void 0 : teardown();
        }
      };
    },
    // TO-DO: Sensors length could theoretically change which would not be a valid dependency
    // eslint-disable-next-line react-hooks/exhaustive-deps
    sensors.map((_ref2) => {
      let {
        sensor
      } = _ref2;
      return sensor;
    })
  );
}
function useSyntheticListeners(listeners, id) {
  return (0, import_react234.useMemo)(() => {
    return listeners.reduce((acc, _ref) => {
      let {
        eventName,
        handler
      } = _ref;
      acc[eventName] = (event) => {
        handler(event, id);
      };
      return acc;
    }, {});
  }, [listeners, id]);
}
function useWindowRect(element) {
  return (0, import_react234.useMemo)(() => element ? getWindowClientRect(element) : null, [element]);
}
var defaultValue$2 = [];
function useRects(elements, measure) {
  if (measure === void 0) {
    measure = getClientRect;
  }
  const [firstElement] = elements;
  const windowRect = useWindowRect(firstElement ? getWindow(firstElement) : null);
  const [rects, setRects] = (0, import_react234.useState)(defaultValue$2);
  function measureRects() {
    setRects(() => {
      if (!elements.length) {
        return defaultValue$2;
      }
      return elements.map((element) => isDocumentScrollingElement(element) ? windowRect : new Rect(measure(element), element));
    });
  }
  const resizeObserver = useResizeObserver2({
    callback: measureRects
  });
  useIsomorphicLayoutEffect2(() => {
    resizeObserver == null ? void 0 : resizeObserver.disconnect();
    measureRects();
    elements.forEach((element) => resizeObserver == null ? void 0 : resizeObserver.observe(element));
  }, [elements]);
  return rects;
}
function getMeasurableNode(node) {
  if (!node) {
    return null;
  }
  if (node.children.length > 1) {
    return node;
  }
  const firstChild = node.children[0];
  return isHTMLElement(firstChild) ? firstChild : node;
}
function useDragOverlayMeasuring(_ref) {
  let {
    measure
  } = _ref;
  const [rect, setRect] = (0, import_react234.useState)(null);
  const handleResize = (0, import_react234.useCallback)((entries) => {
    for (const {
      target
    } of entries) {
      if (isHTMLElement(target)) {
        setRect((rect2) => {
          const newRect = measure(target);
          return rect2 ? {
            ...rect2,
            width: newRect.width,
            height: newRect.height
          } : newRect;
        });
        break;
      }
    }
  }, [measure]);
  const resizeObserver = useResizeObserver2({
    callback: handleResize
  });
  const handleNodeChange = (0, import_react234.useCallback)((element) => {
    const node = getMeasurableNode(element);
    resizeObserver == null ? void 0 : resizeObserver.disconnect();
    if (node) {
      resizeObserver == null ? void 0 : resizeObserver.observe(node);
    }
    setRect(node ? measure(node) : null);
  }, [measure, resizeObserver]);
  const [nodeRef, setRef] = useNodeRef(handleNodeChange);
  return (0, import_react234.useMemo)(() => ({
    nodeRef,
    rect,
    setRef
  }), [rect, nodeRef, setRef]);
}
var defaultSensors = [{
  sensor: PointerSensor,
  options: {}
}, {
  sensor: KeyboardSensor,
  options: {}
}];
var defaultData = {
  current: {}
};
var defaultMeasuringConfiguration = {
  draggable: {
    measure: getTransformAgnosticClientRect
  },
  droppable: {
    measure: getTransformAgnosticClientRect,
    strategy: MeasuringStrategy.WhileDragging,
    frequency: MeasuringFrequency.Optimized
  },
  dragOverlay: {
    measure: getClientRect
  }
};
var DroppableContainersMap = class extends Map {
  get(id) {
    var _super$get;
    return id != null ? (_super$get = super.get(id)) != null ? _super$get : void 0 : void 0;
  }
  toArray() {
    return Array.from(this.values());
  }
  getEnabled() {
    return this.toArray().filter((_ref) => {
      let {
        disabled
      } = _ref;
      return !disabled;
    });
  }
  getNodeFor(id) {
    var _this$get$node$curren, _this$get;
    return (_this$get$node$curren = (_this$get = this.get(id)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : void 0;
  }
};
var defaultPublicContext = {
  activatorEvent: null,
  active: null,
  activeNode: null,
  activeNodeRect: null,
  collisions: null,
  containerNodeRect: null,
  draggableNodes: /* @__PURE__ */ new Map(),
  droppableRects: /* @__PURE__ */ new Map(),
  droppableContainers: new DroppableContainersMap(),
  over: null,
  dragOverlay: {
    nodeRef: {
      current: null
    },
    rect: null,
    setRef: noop
  },
  scrollableAncestors: [],
  scrollableAncestorRects: [],
  measuringConfiguration: defaultMeasuringConfiguration,
  measureDroppableContainers: noop,
  windowRect: null,
  measuringScheduled: false
};
var defaultInternalContext = {
  activatorEvent: null,
  activators: [],
  active: null,
  activeNodeRect: null,
  ariaDescribedById: {
    draggable: ""
  },
  dispatch: noop,
  draggableNodes: /* @__PURE__ */ new Map(),
  over: null,
  measureDroppableContainers: noop
};
var InternalContext = (0, import_react234.createContext)(defaultInternalContext);
var PublicContext = (0, import_react234.createContext)(defaultPublicContext);
function getInitialState() {
  return {
    draggable: {
      active: null,
      initialCoordinates: {
        x: 0,
        y: 0
      },
      nodes: /* @__PURE__ */ new Map(),
      translate: {
        x: 0,
        y: 0
      }
    },
    droppable: {
      containers: new DroppableContainersMap()
    }
  };
}
function reducer(state, action) {
  switch (action.type) {
    case Action.DragStart:
      return {
        ...state,
        draggable: {
          ...state.draggable,
          initialCoordinates: action.initialCoordinates,
          active: action.active
        }
      };
    case Action.DragMove:
      if (state.draggable.active == null) {
        return state;
      }
      return {
        ...state,
        draggable: {
          ...state.draggable,
          translate: {
            x: action.coordinates.x - state.draggable.initialCoordinates.x,
            y: action.coordinates.y - state.draggable.initialCoordinates.y
          }
        }
      };
    case Action.DragEnd:
    case Action.DragCancel:
      return {
        ...state,
        draggable: {
          ...state.draggable,
          active: null,
          initialCoordinates: {
            x: 0,
            y: 0
          },
          translate: {
            x: 0,
            y: 0
          }
        }
      };
    case Action.RegisterDroppable: {
      const {
        element
      } = action;
      const {
        id
      } = element;
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.set(id, element);
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    case Action.SetDroppableDisabled: {
      const {
        id,
        key: key2,
        disabled
      } = action;
      const element = state.droppable.containers.get(id);
      if (!element || key2 !== element.key) {
        return state;
      }
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.set(id, {
        ...element,
        disabled
      });
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    case Action.UnregisterDroppable: {
      const {
        id,
        key: key2
      } = action;
      const element = state.droppable.containers.get(id);
      if (!element || key2 !== element.key) {
        return state;
      }
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.delete(id);
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    default: {
      return state;
    }
  }
}
function RestoreFocus(_ref) {
  let {
    disabled
  } = _ref;
  const {
    active,
    activatorEvent,
    draggableNodes
  } = (0, import_react234.useContext)(InternalContext);
  const previousActivatorEvent = usePrevious2(activatorEvent);
  const previousActiveId = usePrevious2(active == null ? void 0 : active.id);
  (0, import_react234.useEffect)(() => {
    if (disabled) {
      return;
    }
    if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {
      if (!isKeyboardEvent(previousActivatorEvent)) {
        return;
      }
      if (document.activeElement === previousActivatorEvent.target) {
        return;
      }
      const draggableNode = draggableNodes.get(previousActiveId);
      if (!draggableNode) {
        return;
      }
      const {
        activatorNode,
        node
      } = draggableNode;
      if (!activatorNode.current && !node.current) {
        return;
      }
      requestAnimationFrame(() => {
        for (const element of [activatorNode.current, node.current]) {
          if (!element) {
            continue;
          }
          const focusableNode = findFirstFocusableNode(element);
          if (focusableNode) {
            focusableNode.focus();
            break;
          }
        }
      });
    }
  }, [activatorEvent, disabled, draggableNodes, previousActiveId, previousActivatorEvent]);
  return null;
}
function applyModifiers(modifiers, _ref) {
  let {
    transform,
    ...args
  } = _ref;
  return modifiers != null && modifiers.length ? modifiers.reduce((accumulator, modifier) => {
    return modifier({
      transform: accumulator,
      ...args
    });
  }, transform) : transform;
}
function useMeasuringConfiguration(config) {
  return (0, import_react234.useMemo)(
    () => ({
      draggable: {
        ...defaultMeasuringConfiguration.draggable,
        ...config == null ? void 0 : config.draggable
      },
      droppable: {
        ...defaultMeasuringConfiguration.droppable,
        ...config == null ? void 0 : config.droppable
      },
      dragOverlay: {
        ...defaultMeasuringConfiguration.dragOverlay,
        ...config == null ? void 0 : config.dragOverlay
      }
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [config == null ? void 0 : config.draggable, config == null ? void 0 : config.droppable, config == null ? void 0 : config.dragOverlay]
  );
}
function useLayoutShiftScrollCompensation(_ref) {
  let {
    activeNode,
    measure,
    initialRect,
    config = true
  } = _ref;
  const initialized = (0, import_react234.useRef)(false);
  const {
    x: x3,
    y: y4
  } = typeof config === "boolean" ? {
    x: config,
    y: config
  } : config;
  useIsomorphicLayoutEffect2(() => {
    const disabled = !x3 && !y4;
    if (disabled || !activeNode) {
      initialized.current = false;
      return;
    }
    if (initialized.current || !initialRect) {
      return;
    }
    const node = activeNode == null ? void 0 : activeNode.node.current;
    if (!node || node.isConnected === false) {
      return;
    }
    const rect = measure(node);
    const rectDelta = getRectDelta(rect, initialRect);
    if (!x3) {
      rectDelta.x = 0;
    }
    if (!y4) {
      rectDelta.y = 0;
    }
    initialized.current = true;
    if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {
      const firstScrollableAncestor = getFirstScrollableAncestor(node);
      if (firstScrollableAncestor) {
        firstScrollableAncestor.scrollBy({
          top: rectDelta.y,
          left: rectDelta.x
        });
      }
    }
  }, [activeNode, x3, y4, initialRect, measure]);
}
var ActiveDraggableContext = (0, import_react234.createContext)({
  ...defaultCoordinates,
  scaleX: 1,
  scaleY: 1
});
var Status;
(function(Status2) {
  Status2[Status2["Uninitialized"] = 0] = "Uninitialized";
  Status2[Status2["Initializing"] = 1] = "Initializing";
  Status2[Status2["Initialized"] = 2] = "Initialized";
})(Status || (Status = {}));
var DndContext = (0, import_react234.memo)(function DndContext2(_ref) {
  var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;
  let {
    id,
    accessibility,
    autoScroll = true,
    children,
    sensors = defaultSensors,
    collisionDetection = rectIntersection,
    measuring,
    modifiers,
    ...props2
  } = _ref;
  const store = (0, import_react234.useReducer)(reducer, void 0, getInitialState);
  const [state, dispatch] = store;
  const [dispatchMonitorEvent, registerMonitorListener] = useDndMonitorProvider();
  const [status, setStatus] = (0, import_react234.useState)(Status.Uninitialized);
  const isInitialized = status === Status.Initialized;
  const {
    draggable: {
      active: activeId,
      nodes: draggableNodes,
      translate
    },
    droppable: {
      containers: droppableContainers
    }
  } = state;
  const node = activeId != null ? draggableNodes.get(activeId) : null;
  const activeRects = (0, import_react234.useRef)({
    initial: null,
    translated: null
  });
  const active = (0, import_react234.useMemo)(() => {
    var _node$data;
    return activeId != null ? {
      id: activeId,
      // It's possible for the active node to unmount while dragging
      data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,
      rect: activeRects
    } : null;
  }, [activeId, node]);
  const activeRef = (0, import_react234.useRef)(null);
  const [activeSensor, setActiveSensor] = (0, import_react234.useState)(null);
  const [activatorEvent, setActivatorEvent] = (0, import_react234.useState)(null);
  const latestProps = useLatestValue(props2, Object.values(props2));
  const draggableDescribedById = useUniqueId2("DndDescribedBy", id);
  const enabledDroppableContainers = (0, import_react234.useMemo)(() => droppableContainers.getEnabled(), [droppableContainers]);
  const measuringConfiguration = useMeasuringConfiguration(measuring);
  const {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled
  } = useDroppableMeasuring(enabledDroppableContainers, {
    dragging: isInitialized,
    dependencies: [translate.x, translate.y],
    config: measuringConfiguration.droppable
  });
  const activeNode = useCachedNode(draggableNodes, activeId);
  const activationCoordinates = (0, import_react234.useMemo)(() => activatorEvent ? getEventCoordinates(activatorEvent) : null, [activatorEvent]);
  const autoScrollOptions = getAutoScrollerOptions();
  const initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);
  useLayoutShiftScrollCompensation({
    activeNode: activeId != null ? draggableNodes.get(activeId) : null,
    config: autoScrollOptions.layoutShiftCompensation,
    initialRect: initialActiveNodeRect,
    measure: measuringConfiguration.draggable.measure
  });
  const activeNodeRect = useRect2(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);
  const containerNodeRect = useRect2(activeNode ? activeNode.parentElement : null);
  const sensorContext = (0, import_react234.useRef)({
    activatorEvent: null,
    active: null,
    activeNode,
    collisionRect: null,
    collisions: null,
    droppableRects,
    draggableNodes,
    draggingNode: null,
    draggingNodeRect: null,
    droppableContainers,
    over: null,
    scrollableAncestors: [],
    scrollAdjustedTranslate: null
  });
  const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);
  const dragOverlay = useDragOverlayMeasuring({
    measure: measuringConfiguration.dragOverlay.measure
  });
  const draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;
  const draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;
  const usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect);
  const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect);
  const windowRect = useWindowRect(draggingNode ? getWindow(draggingNode) : null);
  const scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);
  const scrollableAncestorRects = useRects(scrollableAncestors);
  const modifiedTranslate = applyModifiers(modifiers, {
    transform: {
      x: translate.x - nodeRectDelta.x,
      y: translate.y - nodeRectDelta.y,
      scaleX: 1,
      scaleY: 1
    },
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggingNodeRect,
    over: sensorContext.current.over,
    overlayNodeRect: dragOverlay.rect,
    scrollableAncestors,
    scrollableAncestorRects,
    windowRect
  });
  const pointerCoordinates = activationCoordinates ? add2(activationCoordinates, translate) : null;
  const scrollOffsets = useScrollOffsets(scrollableAncestors);
  const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets);
  const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [activeNodeRect]);
  const scrollAdjustedTranslate = add2(modifiedTranslate, scrollAdjustment);
  const collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;
  const collisions = active && collisionRect ? collisionDetection({
    active,
    collisionRect,
    droppableRects,
    droppableContainers: enabledDroppableContainers,
    pointerCoordinates
  }) : null;
  const overId = getFirstCollision(collisions, "id");
  const [over, setOver] = (0, import_react234.useState)(null);
  const appliedTranslate = usesDragOverlay ? modifiedTranslate : add2(modifiedTranslate, activeNodeScrollDelta);
  const transform = adjustScale(appliedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);
  const activeSensorRef = (0, import_react234.useRef)(null);
  const instantiateSensor = (0, import_react234.useCallback)(
    (event, _ref2) => {
      let {
        sensor: Sensor,
        options
      } = _ref2;
      if (activeRef.current == null) {
        return;
      }
      const activeNode2 = draggableNodes.get(activeRef.current);
      if (!activeNode2) {
        return;
      }
      const activatorEvent2 = event.nativeEvent;
      const sensorInstance = new Sensor({
        active: activeRef.current,
        activeNode: activeNode2,
        event: activatorEvent2,
        options,
        // Sensors need to be instantiated with refs for arguments that change over time
        // otherwise they are frozen in time with the stale arguments
        context: sensorContext,
        onAbort(id2) {
          const draggableNode = draggableNodes.get(id2);
          if (!draggableNode) {
            return;
          }
          const {
            onDragAbort
          } = latestProps.current;
          const event2 = {
            id: id2
          };
          onDragAbort == null ? void 0 : onDragAbort(event2);
          dispatchMonitorEvent({
            type: "onDragAbort",
            event: event2
          });
        },
        onPending(id2, constraint, initialCoordinates, offset) {
          const draggableNode = draggableNodes.get(id2);
          if (!draggableNode) {
            return;
          }
          const {
            onDragPending
          } = latestProps.current;
          const event2 = {
            id: id2,
            constraint,
            initialCoordinates,
            offset
          };
          onDragPending == null ? void 0 : onDragPending(event2);
          dispatchMonitorEvent({
            type: "onDragPending",
            event: event2
          });
        },
        onStart(initialCoordinates) {
          const id2 = activeRef.current;
          if (id2 == null) {
            return;
          }
          const draggableNode = draggableNodes.get(id2);
          if (!draggableNode) {
            return;
          }
          const {
            onDragStart
          } = latestProps.current;
          const event2 = {
            activatorEvent: activatorEvent2,
            active: {
              id: id2,
              data: draggableNode.data,
              rect: activeRects
            }
          };
          (0, import_react_dom2.unstable_batchedUpdates)(() => {
            onDragStart == null ? void 0 : onDragStart(event2);
            setStatus(Status.Initializing);
            dispatch({
              type: Action.DragStart,
              initialCoordinates,
              active: id2
            });
            dispatchMonitorEvent({
              type: "onDragStart",
              event: event2
            });
            setActiveSensor(activeSensorRef.current);
            setActivatorEvent(activatorEvent2);
          });
        },
        onMove(coordinates) {
          dispatch({
            type: Action.DragMove,
            coordinates
          });
        },
        onEnd: createHandler(Action.DragEnd),
        onCancel: createHandler(Action.DragCancel)
      });
      activeSensorRef.current = sensorInstance;
      function createHandler(type) {
        return async function handler() {
          const {
            active: active2,
            collisions: collisions2,
            over: over2,
            scrollAdjustedTranslate: scrollAdjustedTranslate2
          } = sensorContext.current;
          let event2 = null;
          if (active2 && scrollAdjustedTranslate2) {
            const {
              cancelDrop
            } = latestProps.current;
            event2 = {
              activatorEvent: activatorEvent2,
              active: active2,
              collisions: collisions2,
              delta: scrollAdjustedTranslate2,
              over: over2
            };
            if (type === Action.DragEnd && typeof cancelDrop === "function") {
              const shouldCancel = await Promise.resolve(cancelDrop(event2));
              if (shouldCancel) {
                type = Action.DragCancel;
              }
            }
          }
          activeRef.current = null;
          (0, import_react_dom2.unstable_batchedUpdates)(() => {
            dispatch({
              type
            });
            setStatus(Status.Uninitialized);
            setOver(null);
            setActiveSensor(null);
            setActivatorEvent(null);
            activeSensorRef.current = null;
            const eventName = type === Action.DragEnd ? "onDragEnd" : "onDragCancel";
            if (event2) {
              const handler2 = latestProps.current[eventName];
              handler2 == null ? void 0 : handler2(event2);
              dispatchMonitorEvent({
                type: eventName,
                event: event2
              });
            }
          });
        };
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [draggableNodes]
  );
  const bindActivatorToSensorInstantiator = (0, import_react234.useCallback)((handler, sensor) => {
    return (event, active2) => {
      const nativeEvent = event.nativeEvent;
      const activeDraggableNode = draggableNodes.get(active2);
      if (
        // Another sensor is already instantiating
        activeRef.current !== null || // No active draggable
        !activeDraggableNode || // Event has already been captured
        nativeEvent.dndKit || nativeEvent.defaultPrevented
      ) {
        return;
      }
      const activationContext = {
        active: activeDraggableNode
      };
      const shouldActivate = handler(event, sensor.options, activationContext);
      if (shouldActivate === true) {
        nativeEvent.dndKit = {
          capturedBy: sensor.sensor
        };
        activeRef.current = active2;
        instantiateSensor(event, sensor);
      }
    };
  }, [draggableNodes, instantiateSensor]);
  const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);
  useSensorSetup(sensors);
  useIsomorphicLayoutEffect2(() => {
    if (activeNodeRect && status === Status.Initializing) {
      setStatus(Status.Initialized);
    }
  }, [activeNodeRect, status]);
  (0, import_react234.useEffect)(
    () => {
      const {
        onDragMove
      } = latestProps.current;
      const {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        over: over2
      } = sensorContext.current;
      if (!active2 || !activatorEvent2) {
        return;
      }
      const event = {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        delta: {
          x: scrollAdjustedTranslate.x,
          y: scrollAdjustedTranslate.y
        },
        over: over2
      };
      (0, import_react_dom2.unstable_batchedUpdates)(() => {
        onDragMove == null ? void 0 : onDragMove(event);
        dispatchMonitorEvent({
          type: "onDragMove",
          event
        });
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]
  );
  (0, import_react234.useEffect)(
    () => {
      const {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        droppableContainers: droppableContainers2,
        scrollAdjustedTranslate: scrollAdjustedTranslate2
      } = sensorContext.current;
      if (!active2 || activeRef.current == null || !activatorEvent2 || !scrollAdjustedTranslate2) {
        return;
      }
      const {
        onDragOver
      } = latestProps.current;
      const overContainer = droppableContainers2.get(overId);
      const over2 = overContainer && overContainer.rect.current ? {
        id: overContainer.id,
        rect: overContainer.rect.current,
        data: overContainer.data,
        disabled: overContainer.disabled
      } : null;
      const event = {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        delta: {
          x: scrollAdjustedTranslate2.x,
          y: scrollAdjustedTranslate2.y
        },
        over: over2
      };
      (0, import_react_dom2.unstable_batchedUpdates)(() => {
        setOver(over2);
        onDragOver == null ? void 0 : onDragOver(event);
        dispatchMonitorEvent({
          type: "onDragOver",
          event
        });
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [overId]
  );
  useIsomorphicLayoutEffect2(() => {
    sensorContext.current = {
      activatorEvent,
      active,
      activeNode,
      collisionRect,
      collisions,
      droppableRects,
      draggableNodes,
      draggingNode,
      draggingNodeRect,
      droppableContainers,
      over,
      scrollableAncestors,
      scrollAdjustedTranslate
    };
    activeRects.current = {
      initial: draggingNodeRect,
      translated: collisionRect
    };
  }, [active, activeNode, collisions, collisionRect, draggableNodes, draggingNode, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate]);
  useAutoScroller({
    ...autoScrollOptions,
    delta: translate,
    draggingRect: collisionRect,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects
  });
  const publicContext = (0, import_react234.useMemo)(() => {
    const context = {
      active,
      activeNode,
      activeNodeRect,
      activatorEvent,
      collisions,
      containerNodeRect,
      dragOverlay,
      draggableNodes,
      droppableContainers,
      droppableRects,
      over,
      measureDroppableContainers,
      scrollableAncestors,
      scrollableAncestorRects,
      measuringConfiguration,
      measuringScheduled,
      windowRect
    };
    return context;
  }, [active, activeNode, activeNodeRect, activatorEvent, collisions, containerNodeRect, dragOverlay, draggableNodes, droppableContainers, droppableRects, over, measureDroppableContainers, scrollableAncestors, scrollableAncestorRects, measuringConfiguration, measuringScheduled, windowRect]);
  const internalContext = (0, import_react234.useMemo)(() => {
    const context = {
      activatorEvent,
      activators,
      active,
      activeNodeRect,
      ariaDescribedById: {
        draggable: draggableDescribedById
      },
      dispatch,
      draggableNodes,
      over,
      measureDroppableContainers
    };
    return context;
  }, [activatorEvent, activators, active, activeNodeRect, dispatch, draggableDescribedById, draggableNodes, over, measureDroppableContainers]);
  return import_react234.default.createElement(DndMonitorContext.Provider, {
    value: registerMonitorListener
  }, import_react234.default.createElement(InternalContext.Provider, {
    value: internalContext
  }, import_react234.default.createElement(PublicContext.Provider, {
    value: publicContext
  }, import_react234.default.createElement(ActiveDraggableContext.Provider, {
    value: transform
  }, children)), import_react234.default.createElement(RestoreFocus, {
    disabled: (accessibility == null ? void 0 : accessibility.restoreFocus) === false
  })), import_react234.default.createElement(Accessibility, {
    ...accessibility,
    hiddenTextDescribedById: draggableDescribedById
  }));
  function getAutoScrollerOptions() {
    const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;
    const autoScrollGloballyDisabled = typeof autoScroll === "object" ? autoScroll.enabled === false : autoScroll === false;
    const enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;
    if (typeof autoScroll === "object") {
      return {
        ...autoScroll,
        enabled
      };
    }
    return {
      enabled
    };
  }
});
var NullContext = (0, import_react234.createContext)(null);
var defaultRole = "button";
var ID_PREFIX = "Draggable";
function useDraggable(_ref) {
  let {
    id,
    data,
    disabled = false,
    attributes
  } = _ref;
  const key2 = useUniqueId2(ID_PREFIX);
  const {
    activators,
    activatorEvent,
    active,
    activeNodeRect,
    ariaDescribedById,
    draggableNodes,
    over
  } = (0, import_react234.useContext)(InternalContext);
  const {
    role = defaultRole,
    roleDescription = "draggable",
    tabIndex = 0
  } = attributes != null ? attributes : {};
  const isDragging = (active == null ? void 0 : active.id) === id;
  const transform = (0, import_react234.useContext)(isDragging ? ActiveDraggableContext : NullContext);
  const [node, setNodeRef] = useNodeRef();
  const [activatorNode, setActivatorNodeRef] = useNodeRef();
  const listeners = useSyntheticListeners(activators, id);
  const dataRef = useLatestValue(data);
  useIsomorphicLayoutEffect2(
    () => {
      draggableNodes.set(id, {
        id,
        key: key2,
        node,
        activatorNode,
        data: dataRef
      });
      return () => {
        const node2 = draggableNodes.get(id);
        if (node2 && node2.key === key2) {
          draggableNodes.delete(id);
        }
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [draggableNodes, id]
  );
  const memoizedAttributes = (0, import_react234.useMemo)(() => ({
    role,
    tabIndex,
    "aria-disabled": disabled,
    "aria-pressed": isDragging && role === defaultRole ? true : void 0,
    "aria-roledescription": roleDescription,
    "aria-describedby": ariaDescribedById.draggable
  }), [disabled, role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);
  return {
    active,
    activatorEvent,
    activeNodeRect,
    attributes: memoizedAttributes,
    isDragging,
    listeners: disabled ? void 0 : listeners,
    node,
    over,
    setNodeRef,
    setActivatorNodeRef,
    transform
  };
}
function useDndContext() {
  return (0, import_react234.useContext)(PublicContext);
}
var ID_PREFIX$1 = "Droppable";
var defaultResizeObserverConfig = {
  timeout: 25
};
function useDroppable(_ref) {
  let {
    data,
    disabled = false,
    id,
    resizeObserverConfig
  } = _ref;
  const key2 = useUniqueId2(ID_PREFIX$1);
  const {
    active,
    dispatch,
    over,
    measureDroppableContainers
  } = (0, import_react234.useContext)(InternalContext);
  const previous = (0, import_react234.useRef)({
    disabled
  });
  const resizeObserverConnected = (0, import_react234.useRef)(false);
  const rect = (0, import_react234.useRef)(null);
  const callbackId = (0, import_react234.useRef)(null);
  const {
    disabled: resizeObserverDisabled,
    updateMeasurementsFor,
    timeout: resizeObserverTimeout
  } = {
    ...defaultResizeObserverConfig,
    ...resizeObserverConfig
  };
  const ids2 = useLatestValue(updateMeasurementsFor != null ? updateMeasurementsFor : id);
  const handleResize = (0, import_react234.useCallback)(
    () => {
      if (!resizeObserverConnected.current) {
        resizeObserverConnected.current = true;
        return;
      }
      if (callbackId.current != null) {
        clearTimeout(callbackId.current);
      }
      callbackId.current = setTimeout(() => {
        measureDroppableContainers(Array.isArray(ids2.current) ? ids2.current : [ids2.current]);
        callbackId.current = null;
      }, resizeObserverTimeout);
    },
    //eslint-disable-next-line react-hooks/exhaustive-deps
    [resizeObserverTimeout]
  );
  const resizeObserver = useResizeObserver2({
    callback: handleResize,
    disabled: resizeObserverDisabled || !active
  });
  const handleNodeChange = (0, import_react234.useCallback)((newElement, previousElement) => {
    if (!resizeObserver) {
      return;
    }
    if (previousElement) {
      resizeObserver.unobserve(previousElement);
      resizeObserverConnected.current = false;
    }
    if (newElement) {
      resizeObserver.observe(newElement);
    }
  }, [resizeObserver]);
  const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);
  const dataRef = useLatestValue(data);
  (0, import_react234.useEffect)(() => {
    if (!resizeObserver || !nodeRef.current) {
      return;
    }
    resizeObserver.disconnect();
    resizeObserverConnected.current = false;
    resizeObserver.observe(nodeRef.current);
  }, [nodeRef, resizeObserver]);
  (0, import_react234.useEffect)(
    () => {
      dispatch({
        type: Action.RegisterDroppable,
        element: {
          id,
          key: key2,
          disabled,
          node: nodeRef,
          rect,
          data: dataRef
        }
      });
      return () => dispatch({
        type: Action.UnregisterDroppable,
        key: key2,
        id
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [id]
  );
  (0, import_react234.useEffect)(() => {
    if (disabled !== previous.current.disabled) {
      dispatch({
        type: Action.SetDroppableDisabled,
        id,
        key: key2,
        disabled
      });
      previous.current.disabled = disabled;
    }
  }, [id, key2, disabled, dispatch]);
  return {
    active,
    rect,
    isOver: (over == null ? void 0 : over.id) === id,
    node: nodeRef,
    over,
    setNodeRef
  };
}
function AnimationManager(_ref) {
  let {
    animation,
    children
  } = _ref;
  const [clonedChildren, setClonedChildren] = (0, import_react234.useState)(null);
  const [element, setElement] = (0, import_react234.useState)(null);
  const previousChildren = usePrevious2(children);
  if (!children && !clonedChildren && previousChildren) {
    setClonedChildren(previousChildren);
  }
  useIsomorphicLayoutEffect2(() => {
    if (!element) {
      return;
    }
    const key2 = clonedChildren == null ? void 0 : clonedChildren.key;
    const id = clonedChildren == null ? void 0 : clonedChildren.props.id;
    if (key2 == null || id == null) {
      setClonedChildren(null);
      return;
    }
    Promise.resolve(animation(id, element)).then(() => {
      setClonedChildren(null);
    });
  }, [animation, clonedChildren, element]);
  return import_react234.default.createElement(import_react234.default.Fragment, null, children, clonedChildren ? (0, import_react234.cloneElement)(clonedChildren, {
    ref: setElement
  }) : null);
}
var defaultTransform = {
  x: 0,
  y: 0,
  scaleX: 1,
  scaleY: 1
};
function NullifiedContextProvider(_ref) {
  let {
    children
  } = _ref;
  return import_react234.default.createElement(InternalContext.Provider, {
    value: defaultInternalContext
  }, import_react234.default.createElement(ActiveDraggableContext.Provider, {
    value: defaultTransform
  }, children));
}
var baseStyles = {
  position: "fixed",
  touchAction: "none"
};
var defaultTransition = (activatorEvent) => {
  const isKeyboardActivator = isKeyboardEvent(activatorEvent);
  return isKeyboardActivator ? "transform 250ms ease" : void 0;
};
var PositionedOverlay = (0, import_react234.forwardRef)((_ref, ref) => {
  let {
    as,
    activatorEvent,
    adjustScale: adjustScale2,
    children,
    className: className2,
    rect,
    style,
    transform,
    transition = defaultTransition
  } = _ref;
  if (!rect) {
    return null;
  }
  const scaleAdjustedTransform = adjustScale2 ? transform : {
    ...transform,
    scaleX: 1,
    scaleY: 1
  };
  const styles = {
    ...baseStyles,
    width: rect.width,
    height: rect.height,
    top: rect.top,
    left: rect.left,
    transform: CSS2.Transform.toString(scaleAdjustedTransform),
    transformOrigin: adjustScale2 && activatorEvent ? getRelativeTransformOrigin(activatorEvent, rect) : void 0,
    transition: typeof transition === "function" ? transition(activatorEvent) : transition,
    ...style
  };
  return import_react234.default.createElement(as, {
    className: className2,
    style: styles,
    ref
  }, children);
});
var defaultDropAnimationSideEffects = (options) => (_ref) => {
  let {
    active,
    dragOverlay
  } = _ref;
  const originalStyles = {};
  const {
    styles,
    className: className2
  } = options;
  if (styles != null && styles.active) {
    for (const [key2, value] of Object.entries(styles.active)) {
      if (value === void 0) {
        continue;
      }
      originalStyles[key2] = active.node.style.getPropertyValue(key2);
      active.node.style.setProperty(key2, value);
    }
  }
  if (styles != null && styles.dragOverlay) {
    for (const [key2, value] of Object.entries(styles.dragOverlay)) {
      if (value === void 0) {
        continue;
      }
      dragOverlay.node.style.setProperty(key2, value);
    }
  }
  if (className2 != null && className2.active) {
    active.node.classList.add(className2.active);
  }
  if (className2 != null && className2.dragOverlay) {
    dragOverlay.node.classList.add(className2.dragOverlay);
  }
  return function cleanup() {
    for (const [key2, value] of Object.entries(originalStyles)) {
      active.node.style.setProperty(key2, value);
    }
    if (className2 != null && className2.active) {
      active.node.classList.remove(className2.active);
    }
  };
};
var defaultKeyframeResolver = (_ref2) => {
  let {
    transform: {
      initial,
      final
    }
  } = _ref2;
  return [{
    transform: CSS2.Transform.toString(initial)
  }, {
    transform: CSS2.Transform.toString(final)
  }];
};
var defaultDropAnimationConfiguration = {
  duration: 250,
  easing: "ease",
  keyframes: defaultKeyframeResolver,
  sideEffects: defaultDropAnimationSideEffects({
    styles: {
      active: {
        opacity: "0"
      }
    }
  })
};
function useDropAnimation(_ref3) {
  let {
    config,
    draggableNodes,
    droppableContainers,
    measuringConfiguration
  } = _ref3;
  return useEvent((id, node) => {
    if (config === null) {
      return;
    }
    const activeDraggable = draggableNodes.get(id);
    if (!activeDraggable) {
      return;
    }
    const activeNode = activeDraggable.node.current;
    if (!activeNode) {
      return;
    }
    const measurableNode = getMeasurableNode(node);
    if (!measurableNode) {
      return;
    }
    const {
      transform
    } = getWindow(node).getComputedStyle(node);
    const parsedTransform = parseTransform(transform);
    if (!parsedTransform) {
      return;
    }
    const animation = typeof config === "function" ? config : createDefaultDropAnimation(config);
    scrollIntoViewIfNeeded(activeNode, measuringConfiguration.draggable.measure);
    return animation({
      active: {
        id,
        data: activeDraggable.data,
        node: activeNode,
        rect: measuringConfiguration.draggable.measure(activeNode)
      },
      draggableNodes,
      dragOverlay: {
        node,
        rect: measuringConfiguration.dragOverlay.measure(measurableNode)
      },
      droppableContainers,
      measuringConfiguration,
      transform: parsedTransform
    });
  });
}
function createDefaultDropAnimation(options) {
  const {
    duration,
    easing,
    sideEffects,
    keyframes
  } = {
    ...defaultDropAnimationConfiguration,
    ...options
  };
  return (_ref4) => {
    let {
      active,
      dragOverlay,
      transform,
      ...rest
    } = _ref4;
    if (!duration) {
      return;
    }
    const delta = {
      x: dragOverlay.rect.left - active.rect.left,
      y: dragOverlay.rect.top - active.rect.top
    };
    const scale = {
      scaleX: transform.scaleX !== 1 ? active.rect.width * transform.scaleX / dragOverlay.rect.width : 1,
      scaleY: transform.scaleY !== 1 ? active.rect.height * transform.scaleY / dragOverlay.rect.height : 1
    };
    const finalTransform = {
      x: transform.x - delta.x,
      y: transform.y - delta.y,
      ...scale
    };
    const animationKeyframes = keyframes({
      ...rest,
      active,
      dragOverlay,
      transform: {
        initial: transform,
        final: finalTransform
      }
    });
    const [firstKeyframe] = animationKeyframes;
    const lastKeyframe = animationKeyframes[animationKeyframes.length - 1];
    if (JSON.stringify(firstKeyframe) === JSON.stringify(lastKeyframe)) {
      return;
    }
    const cleanup = sideEffects == null ? void 0 : sideEffects({
      active,
      dragOverlay,
      ...rest
    });
    const animation = dragOverlay.node.animate(animationKeyframes, {
      duration,
      easing,
      fill: "forwards"
    });
    return new Promise((resolve) => {
      animation.onfinish = () => {
        cleanup == null ? void 0 : cleanup();
        resolve();
      };
    });
  };
}
var key = 0;
function useKey(id) {
  return (0, import_react234.useMemo)(() => {
    if (id == null) {
      return;
    }
    key++;
    return key;
  }, [id]);
}
var DragOverlay = import_react234.default.memo((_ref) => {
  let {
    adjustScale: adjustScale2 = false,
    children,
    dropAnimation: dropAnimationConfig,
    style,
    transition,
    modifiers,
    wrapperElement = "div",
    className: className2,
    zIndex = 999
  } = _ref;
  const {
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggableNodes,
    droppableContainers,
    dragOverlay,
    over,
    measuringConfiguration,
    scrollableAncestors,
    scrollableAncestorRects,
    windowRect
  } = useDndContext();
  const transform = (0, import_react234.useContext)(ActiveDraggableContext);
  const key2 = useKey(active == null ? void 0 : active.id);
  const modifiedTransform = applyModifiers(modifiers, {
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggingNodeRect: dragOverlay.rect,
    over,
    overlayNodeRect: dragOverlay.rect,
    scrollableAncestors,
    scrollableAncestorRects,
    transform,
    windowRect
  });
  const initialRect = useInitialValue(activeNodeRect);
  const dropAnimation = useDropAnimation({
    config: dropAnimationConfig,
    draggableNodes,
    droppableContainers,
    measuringConfiguration
  });
  const ref = initialRect ? dragOverlay.setRef : void 0;
  return import_react234.default.createElement(NullifiedContextProvider, null, import_react234.default.createElement(AnimationManager, {
    animation: dropAnimation
  }, active && key2 ? import_react234.default.createElement(PositionedOverlay, {
    key: key2,
    id: active.id,
    ref,
    as: wrapperElement,
    activatorEvent,
    adjustScale: adjustScale2,
    className: className2,
    transition,
    rect: initialRect,
    style: {
      zIndex,
      ...style
    },
    transform: modifiedTransform
  }, children) : null));
});

// node_modules/@dnd-kit/sortable/dist/sortable.esm.js
var import_react235 = __toESM(require_react());
function arrayMove(array, from, to) {
  const newArray = array.slice();
  newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from, 1)[0]);
  return newArray;
}
function getSortedRects(items, rects) {
  return items.reduce((accumulator, id, index) => {
    const rect = rects.get(id);
    if (rect) {
      accumulator[index] = rect;
    }
    return accumulator;
  }, Array(items.length));
}
function isValidIndex(index) {
  return index !== null && index >= 0;
}
function itemsEqual(a4, b2) {
  if (a4 === b2) {
    return true;
  }
  if (a4.length !== b2.length) {
    return false;
  }
  for (let i2 = 0; i2 < a4.length; i2++) {
    if (a4[i2] !== b2[i2]) {
      return false;
    }
  }
  return true;
}
function normalizeDisabled(disabled) {
  if (typeof disabled === "boolean") {
    return {
      draggable: disabled,
      droppable: disabled
    };
  }
  return disabled;
}
var rectSortingStrategy = (_ref) => {
  let {
    rects,
    activeIndex,
    overIndex,
    index
  } = _ref;
  const newRects = arrayMove(rects, overIndex, activeIndex);
  const oldRect = rects[index];
  const newRect = newRects[index];
  if (!newRect || !oldRect) {
    return null;
  }
  return {
    x: newRect.left - oldRect.left,
    y: newRect.top - oldRect.top,
    scaleX: newRect.width / oldRect.width,
    scaleY: newRect.height / oldRect.height
  };
};
var defaultScale$1 = {
  scaleX: 1,
  scaleY: 1
};
var verticalListSortingStrategy = (_ref) => {
  var _rects$activeIndex;
  let {
    activeIndex,
    activeNodeRect: fallbackActiveRect,
    index,
    rects,
    overIndex
  } = _ref;
  const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;
  if (!activeNodeRect) {
    return null;
  }
  if (index === activeIndex) {
    const overIndexRect = rects[overIndex];
    if (!overIndexRect) {
      return null;
    }
    return {
      x: 0,
      y: activeIndex < overIndex ? overIndexRect.top + overIndexRect.height - (activeNodeRect.top + activeNodeRect.height) : overIndexRect.top - activeNodeRect.top,
      ...defaultScale$1
    };
  }
  const itemGap = getItemGap$1(rects, index, activeIndex);
  if (index > activeIndex && index <= overIndex) {
    return {
      x: 0,
      y: -activeNodeRect.height - itemGap,
      ...defaultScale$1
    };
  }
  if (index < activeIndex && index >= overIndex) {
    return {
      x: 0,
      y: activeNodeRect.height + itemGap,
      ...defaultScale$1
    };
  }
  return {
    x: 0,
    y: 0,
    ...defaultScale$1
  };
};
function getItemGap$1(clientRects, index, activeIndex) {
  const currentRect = clientRects[index];
  const previousRect = clientRects[index - 1];
  const nextRect = clientRects[index + 1];
  if (!currentRect) {
    return 0;
  }
  if (activeIndex < index) {
    return previousRect ? currentRect.top - (previousRect.top + previousRect.height) : nextRect ? nextRect.top - (currentRect.top + currentRect.height) : 0;
  }
  return nextRect ? nextRect.top - (currentRect.top + currentRect.height) : previousRect ? currentRect.top - (previousRect.top + previousRect.height) : 0;
}
var ID_PREFIX2 = "Sortable";
var Context = import_react235.default.createContext({
  activeIndex: -1,
  containerId: ID_PREFIX2,
  disableTransforms: false,
  items: [],
  overIndex: -1,
  useDragOverlay: false,
  sortedRects: [],
  strategy: rectSortingStrategy,
  disabled: {
    draggable: false,
    droppable: false
  }
});
function SortableContext(_ref) {
  let {
    children,
    id,
    items: userDefinedItems,
    strategy = rectSortingStrategy,
    disabled: disabledProp = false
  } = _ref;
  const {
    active,
    dragOverlay,
    droppableRects,
    over,
    measureDroppableContainers
  } = useDndContext();
  const containerId = useUniqueId2(ID_PREFIX2, id);
  const useDragOverlay = Boolean(dragOverlay.rect !== null);
  const items = (0, import_react235.useMemo)(() => userDefinedItems.map((item) => typeof item === "object" && "id" in item ? item.id : item), [userDefinedItems]);
  const isDragging = active != null;
  const activeIndex = active ? items.indexOf(active.id) : -1;
  const overIndex = over ? items.indexOf(over.id) : -1;
  const previousItemsRef = (0, import_react235.useRef)(items);
  const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);
  const disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;
  const disabled = normalizeDisabled(disabledProp);
  useIsomorphicLayoutEffect2(() => {
    if (itemsHaveChanged && isDragging) {
      measureDroppableContainers(items);
    }
  }, [itemsHaveChanged, items, isDragging, measureDroppableContainers]);
  (0, import_react235.useEffect)(() => {
    previousItemsRef.current = items;
  }, [items]);
  const contextValue = (0, import_react235.useMemo)(
    () => ({
      activeIndex,
      containerId,
      disabled,
      disableTransforms,
      items,
      overIndex,
      useDragOverlay,
      sortedRects: getSortedRects(items, droppableRects),
      strategy
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [activeIndex, containerId, disabled.draggable, disabled.droppable, disableTransforms, items, overIndex, droppableRects, useDragOverlay, strategy]
  );
  return import_react235.default.createElement(Context.Provider, {
    value: contextValue
  }, children);
}
var defaultNewIndexGetter = (_ref) => {
  let {
    id,
    items,
    activeIndex,
    overIndex
  } = _ref;
  return arrayMove(items, activeIndex, overIndex).indexOf(id);
};
var defaultAnimateLayoutChanges = (_ref2) => {
  let {
    containerId,
    isSorting,
    wasDragging,
    index,
    items,
    newIndex,
    previousItems,
    previousContainerId,
    transition
  } = _ref2;
  if (!transition || !wasDragging) {
    return false;
  }
  if (previousItems !== items && index === newIndex) {
    return false;
  }
  if (isSorting) {
    return true;
  }
  return newIndex !== index && containerId === previousContainerId;
};
var defaultTransition2 = {
  duration: 200,
  easing: "ease"
};
var transitionProperty = "transform";
var disabledTransition = CSS2.Transition.toString({
  property: transitionProperty,
  duration: 0,
  easing: "linear"
});
var defaultAttributes = {
  roleDescription: "sortable"
};
function useDerivedTransform(_ref) {
  let {
    disabled,
    index,
    node,
    rect
  } = _ref;
  const [derivedTransform, setDerivedtransform] = (0, import_react235.useState)(null);
  const previousIndex = (0, import_react235.useRef)(index);
  useIsomorphicLayoutEffect2(() => {
    if (!disabled && index !== previousIndex.current && node.current) {
      const initial = rect.current;
      if (initial) {
        const current = getClientRect(node.current, {
          ignoreTransform: true
        });
        const delta = {
          x: initial.left - current.left,
          y: initial.top - current.top,
          scaleX: initial.width / current.width,
          scaleY: initial.height / current.height
        };
        if (delta.x || delta.y) {
          setDerivedtransform(delta);
        }
      }
    }
    if (index !== previousIndex.current) {
      previousIndex.current = index;
    }
  }, [disabled, index, node, rect]);
  (0, import_react235.useEffect)(() => {
    if (derivedTransform) {
      setDerivedtransform(null);
    }
  }, [derivedTransform]);
  return derivedTransform;
}
function useSortable(_ref) {
  let {
    animateLayoutChanges = defaultAnimateLayoutChanges,
    attributes: userDefinedAttributes,
    disabled: localDisabled,
    data: customData,
    getNewIndex = defaultNewIndexGetter,
    id,
    strategy: localStrategy,
    resizeObserverConfig,
    transition = defaultTransition2
  } = _ref;
  const {
    items,
    containerId,
    activeIndex,
    disabled: globalDisabled,
    disableTransforms,
    sortedRects,
    overIndex,
    useDragOverlay,
    strategy: globalStrategy
  } = (0, import_react235.useContext)(Context);
  const disabled = normalizeLocalDisabled(localDisabled, globalDisabled);
  const index = items.indexOf(id);
  const data = (0, import_react235.useMemo)(() => ({
    sortable: {
      containerId,
      index,
      items
    },
    ...customData
  }), [containerId, customData, index, items]);
  const itemsAfterCurrentSortable = (0, import_react235.useMemo)(() => items.slice(items.indexOf(id)), [items, id]);
  const {
    rect,
    node,
    isOver,
    setNodeRef: setDroppableNodeRef
  } = useDroppable({
    id,
    data,
    disabled: disabled.droppable,
    resizeObserverConfig: {
      updateMeasurementsFor: itemsAfterCurrentSortable,
      ...resizeObserverConfig
    }
  });
  const {
    active,
    activatorEvent,
    activeNodeRect,
    attributes,
    setNodeRef: setDraggableNodeRef,
    listeners,
    isDragging,
    over,
    setActivatorNodeRef,
    transform
  } = useDraggable({
    id,
    data,
    attributes: {
      ...defaultAttributes,
      ...userDefinedAttributes
    },
    disabled: disabled.draggable
  });
  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);
  const isSorting = Boolean(active);
  const displaceItem = isSorting && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);
  const shouldDisplaceDragSource = !useDragOverlay && isDragging;
  const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;
  const strategy = localStrategy != null ? localStrategy : globalStrategy;
  const finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({
    rects: sortedRects,
    activeNodeRect,
    activeIndex,
    overIndex,
    index
  }) : null;
  const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? getNewIndex({
    id,
    items,
    activeIndex,
    overIndex
  }) : index;
  const activeId = active == null ? void 0 : active.id;
  const previous = (0, import_react235.useRef)({
    activeId,
    items,
    newIndex,
    containerId
  });
  const itemsHaveChanged = items !== previous.current.items;
  const shouldAnimateLayoutChanges = animateLayoutChanges({
    active,
    containerId,
    isDragging,
    isSorting,
    id,
    index,
    items,
    newIndex: previous.current.newIndex,
    previousItems: previous.current.items,
    previousContainerId: previous.current.containerId,
    transition,
    wasDragging: previous.current.activeId != null
  });
  const derivedTransform = useDerivedTransform({
    disabled: !shouldAnimateLayoutChanges,
    index,
    node,
    rect
  });
  (0, import_react235.useEffect)(() => {
    if (isSorting && previous.current.newIndex !== newIndex) {
      previous.current.newIndex = newIndex;
    }
    if (containerId !== previous.current.containerId) {
      previous.current.containerId = containerId;
    }
    if (items !== previous.current.items) {
      previous.current.items = items;
    }
  }, [isSorting, newIndex, containerId, items]);
  (0, import_react235.useEffect)(() => {
    if (activeId === previous.current.activeId) {
      return;
    }
    if (activeId && !previous.current.activeId) {
      previous.current.activeId = activeId;
      return;
    }
    const timeoutId = setTimeout(() => {
      previous.current.activeId = activeId;
    }, 50);
    return () => clearTimeout(timeoutId);
  }, [activeId]);
  return {
    active,
    activeIndex,
    attributes,
    data,
    rect,
    index,
    newIndex,
    items,
    isOver,
    isSorting,
    isDragging,
    listeners,
    node,
    overIndex,
    over,
    setNodeRef,
    setActivatorNodeRef,
    setDroppableNodeRef,
    setDraggableNodeRef,
    transform: derivedTransform != null ? derivedTransform : finalTransform,
    transition: getTransition()
  };
  function getTransition() {
    if (
      // Temporarily disable transitions for a single frame to set up derived transforms
      derivedTransform || // Or to prevent items jumping to back to their "new" position when items change
      itemsHaveChanged && previous.current.newIndex === index
    ) {
      return disabledTransition;
    }
    if (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent) || !transition) {
      return void 0;
    }
    if (isSorting || shouldAnimateLayoutChanges) {
      return CSS2.Transition.toString({
        ...transition,
        property: transitionProperty
      });
    }
    return void 0;
  }
}
function normalizeLocalDisabled(localDisabled, globalDisabled) {
  var _localDisabled$dragga, _localDisabled$droppa;
  if (typeof localDisabled === "boolean") {
    return {
      draggable: localDisabled,
      // Backwards compatibility
      droppable: false
    };
  }
  return {
    draggable: (_localDisabled$dragga = localDisabled == null ? void 0 : localDisabled.draggable) != null ? _localDisabled$dragga : globalDisabled.draggable,
    droppable: (_localDisabled$droppa = localDisabled == null ? void 0 : localDisabled.droppable) != null ? _localDisabled$droppa : globalDisabled.droppable
  };
}
function hasSortableData(entry) {
  if (!entry) {
    return false;
  }
  const data = entry.data.current;
  if (data && "sortable" in data && typeof data.sortable === "object" && "containerId" in data.sortable && "items" in data.sortable && "index" in data.sortable) {
    return true;
  }
  return false;
}
var directions = [KeyboardCode.Down, KeyboardCode.Right, KeyboardCode.Up, KeyboardCode.Left];

// node_modules/@cloudscape-design/components/internal/components/sortable-area/use-drag-and-drop-reorder.js
var import_react236 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/sortable-area/keyboard-sensor/defaults.js
var defaultKeyboardCodes2 = {
  start: [KeyboardCode.Space, KeyboardCode.Enter],
  cancel: [KeyboardCode.Esc],
  end: [KeyboardCode.Space, KeyboardCode.Enter]
};

// node_modules/@cloudscape-design/components/internal/components/sortable-area/keyboard-sensor/utilities/events.js
var EventName2;
(function(EventName3) {
  EventName3["Blur"] = "blur";
  EventName3["Keydown"] = "keydown";
  EventName3["Resize"] = "resize";
  EventName3["VisibilityChange"] = "visibilitychange";
})(EventName2 || (EventName2 = {}));

// node_modules/@cloudscape-design/components/internal/components/sortable-area/keyboard-sensor/utilities/listeners.js
var Listeners2 = class {
  constructor(target) {
    this.target = target;
    this.listeners = [];
    this.removeAll = () => {
      this.listeners.forEach((listener) => {
        var _a;
        return (_a = this.target) === null || _a === void 0 ? void 0 : _a.removeEventListener(...listener);
      });
    };
  }
  add(eventName, handler, options) {
    var _a;
    (_a = this.target) === null || _a === void 0 ? void 0 : _a.addEventListener(eventName, handler, options);
    this.listeners.push([eventName, handler, options]);
  }
};

// node_modules/@cloudscape-design/components/internal/components/sortable-area/keyboard-sensor/utilities/scroll.js
function isDocumentScrollingElement2(element) {
  if (!canUseDOM || !element) {
    return false;
  }
  return element === document.scrollingElement;
}
function getScrollPosition2(scrollingContainer) {
  const minScroll = {
    x: 0,
    y: 0
  };
  const dimensions = isDocumentScrollingElement2(scrollingContainer) ? {
    height: window.innerHeight,
    width: window.innerWidth
  } : {
    height: scrollingContainer.clientHeight,
    width: scrollingContainer.clientWidth
  };
  const maxScroll = {
    x: scrollingContainer.scrollWidth - dimensions.width,
    y: scrollingContainer.scrollHeight - dimensions.height
  };
  const isTop = scrollingContainer.scrollTop <= minScroll.y;
  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
  return {
    isTop,
    isLeft,
    isBottom,
    isRight,
    maxScroll,
    minScroll
  };
}
function getScrollElementRect2(element) {
  if (element === document.scrollingElement) {
    const { innerWidth, innerHeight } = window;
    return {
      top: 0,
      left: 0,
      right: innerWidth,
      bottom: innerHeight,
      width: innerWidth,
      height: innerHeight
    };
  }
  const { top, left, right, bottom } = element.getBoundingClientRect();
  return {
    top,
    left,
    right,
    bottom,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function applyScroll({ currentCoordinates, direction, newCoordinates, scrollableAncestors }) {
  for (const scrollContainer of scrollableAncestors) {
    const coordinatesDelta = subtract(newCoordinates, currentCoordinates);
    const { isTop, isBottom, maxScroll, minScroll } = getScrollPosition2(scrollContainer);
    const scrollElementRect = getScrollElementRect2(scrollContainer);
    const clampedCoordinates = {
      y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
    };
    const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;
    if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
      const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
      const canScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;
      if (canScrollToNewCoordinates) {
        scrollContainer.scrollTo({
          top: newScrollCoordinates,
          behavior: "smooth"
        });
        return true;
      }
      break;
    }
  }
  return false;
}

// node_modules/@cloudscape-design/components/internal/components/sortable-area/keyboard-sensor/index.js
var KeyboardSensor2 = class {
  constructor(props2) {
    this.props = props2;
    this.autoScrollEnabled = false;
    const { event: { target } } = props2;
    this.props = props2;
    this.listeners = new Listeners2(getOwnerDocument(target));
    this.windowListeners = new Listeners2(getWindow(target));
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.attach();
  }
  attach() {
    var _a;
    this.handleStart();
    this.windowListeners.add(EventName2.Resize, this.handleCancel);
    this.windowListeners.add(EventName2.VisibilityChange, this.handleCancel);
    (_a = this.props.event.target) === null || _a === void 0 ? void 0 : _a.addEventListener(EventName2.Blur, this.handleCancel);
    setTimeout(() => this.listeners.add(EventName2.Keydown, this.handleKeyDown));
  }
  handleStart() {
    const { activeNode, onStart } = this.props;
    const node = activeNode.node.current;
    if (node) {
      scrollElementIntoView(node);
    }
    onStart(defaultCoordinates);
  }
  handleKeyDown(event) {
    if (isKeyboardEvent(event)) {
      const { active, context, options } = this.props;
      const { keyboardCodes = defaultKeyboardCodes2, coordinateGetter } = options;
      const { code } = event;
      if (keyboardCodes.end.indexOf(code) !== -1) {
        this.handleEnd(event);
        return;
      }
      if (keyboardCodes.cancel.indexOf(code) !== -1) {
        this.handleCancel(event);
        return;
      }
      const { collisionRect } = context.current;
      const currentCoordinates = collisionRect ? { x: collisionRect.left, y: collisionRect.top } : defaultCoordinates;
      if (!this.referenceCoordinates) {
        this.referenceCoordinates = currentCoordinates;
      }
      if (!coordinateGetter) {
        return;
      }
      const newCoordinates = coordinateGetter(event, {
        active,
        context: context.current,
        currentCoordinates
      });
      if (newCoordinates) {
        const { scrollableAncestors } = context.current;
        const direction = event.code;
        const scrolled = applyScroll({ currentCoordinates, direction, newCoordinates, scrollableAncestors });
        if (!scrolled) {
          this.handleMove(event, subtract(newCoordinates, this.referenceCoordinates));
        }
      }
    }
  }
  handleMove(event, coordinates) {
    const { onMove } = this.props;
    event.preventDefault();
    onMove(coordinates);
  }
  handleEnd(event) {
    const { onEnd } = this.props;
    event.preventDefault();
    this.detach();
    onEnd();
  }
  handleCancel(event) {
    const { onCancel } = this.props;
    if (event.type !== EventName2.Blur) {
      event.preventDefault();
    }
    this.detach();
    onCancel();
  }
  detach() {
    var _a;
    (_a = this.props.event.target) === null || _a === void 0 ? void 0 : _a.removeEventListener(EventName2.Blur, this.handleCancel);
    this.listeners.removeAll();
    this.windowListeners.removeAll();
  }
};
KeyboardSensor2.activators = [
  {
    eventName: "onKeyDown",
    handler: (event, { keyboardCodes = defaultKeyboardCodes2, onActivation }, { active }) => {
      const { code } = event.nativeEvent;
      if (keyboardCodes.start.indexOf(code) !== -1) {
        const activator = active.activatorNode.current;
        if (activator && event.target !== activator) {
          return false;
        }
        event.preventDefault();
        onActivation === null || onActivation === void 0 ? void 0 : onActivation({ event: event.nativeEvent });
        return true;
      }
      return false;
    }
  }
];

// node_modules/@cloudscape-design/components/internal/components/sortable-area/use-drag-and-drop-reorder.js
var KeyboardCode2;
(function(KeyboardCode3) {
  KeyboardCode3["Space"] = "Space";
  KeyboardCode3["Down"] = "ArrowDown";
  KeyboardCode3["Right"] = "ArrowRight";
  KeyboardCode3["Left"] = "ArrowLeft";
  KeyboardCode3["Up"] = "ArrowUp";
  KeyboardCode3["Esc"] = "Escape";
  KeyboardCode3["Enter"] = "Enter";
})(KeyboardCode2 || (KeyboardCode2 = {}));
function useDragAndDropReorder({ items, itemDefinition }) {
  const isKeyboard = (0, import_react236.useRef)(false);
  const positionDelta = (0, import_react236.useRef)(0);
  const [activeItemId, setActiveItemId] = (0, import_react236.useState)(null);
  const setActiveItem = (id) => {
    setActiveItemId(id);
    if (!id) {
      isKeyboard.current = false;
      positionDelta.current = 0;
    }
  };
  const handleKeyDown = (event) => {
    if (isKeyboard.current && activeItemId) {
      const currentTargetIndex = items.findIndex((item) => itemDefinition.id(item) === activeItemId) + positionDelta.current;
      if (event.key === "ArrowDown" && currentTargetIndex < items.length - 1) {
        positionDelta.current += 1;
      } else if (event.key === "ArrowUp" && currentTargetIndex > 0) {
        positionDelta.current -= 1;
      }
    }
    if (activeItemId && isEscape2(event.key)) {
      event.stopPropagation();
    }
  };
  const getClosestId = (active) => {
    if (positionDelta.current === 0) {
      return active.id;
    }
    const currentIndex = items.findIndex((item) => itemDefinition.id(item) === active.id);
    const newIndex = Math.max(0, Math.min(items.length - 1, currentIndex + positionDelta.current));
    return itemDefinition.id(items[newIndex]);
  };
  const collisionDetection = ({ active, collisionRect, droppableContainers, droppableRects, pointerCoordinates }) => {
    if (isKeyboard.current) {
      const collidingContainer = getCollidingContainer({
        activeId: active.id,
        closestId: getClosestId(active),
        droppableContainers
      });
      return collidingContainer ? [collidingContainer] : [];
    } else {
      return closestCenter({ active, collisionRect, droppableRects, droppableContainers, pointerCoordinates });
    }
  };
  const coordinateGetter = (event, { context: { active, collisionRect, droppableRects, droppableContainers } }) => {
    if (event.code === KeyboardCode2.Up || event.code === KeyboardCode2.Down) {
      event.preventDefault();
      if (!active || !collisionRect) {
        return;
      }
      const closestId = getClosestId(active);
      if (closestId !== null) {
        const activeDroppable = droppableContainers.get(active.id);
        const newDroppable = droppableContainers.get(closestId);
        const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;
        const newNode = newDroppable === null || newDroppable === void 0 ? void 0 : newDroppable.node.current;
        if (newNode && newRect && activeDroppable && newDroppable) {
          const isAfterActive = isAfter2(activeDroppable, newDroppable);
          const offset = {
            x: isAfterActive ? collisionRect.width - newRect.width : 0,
            y: isAfterActive ? collisionRect.height - newRect.height : 0
          };
          const rectCoordinates = {
            x: newRect.left,
            y: newRect.top
          };
          return {
            x: rectCoordinates.x - offset.x,
            y: rectCoordinates.y - offset.y
          };
        }
      }
    }
  };
  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor2, {
    coordinateGetter,
    onActivation: () => {
      isKeyboard.current = true;
    }
  }));
  return {
    activeItemId,
    setActiveItemId: setActiveItem,
    collisionDetection,
    coordinateGetter,
    handleKeyDown,
    sensors
  };
}
function isAfter2(a4, b2) {
  return hasSortableData(a4) && hasSortableData(b2) && a4.data.current.sortable.index < b2.data.current.sortable.index;
}
function getCollidingContainer({ activeId, closestId, droppableContainers }) {
  if (closestId === activeId) {
    return;
  }
  const collidingContainer = droppableContainers.find(({ id }) => id === closestId);
  if (collidingContainer) {
    return {
      id: collidingContainer.id,
      data: {
        droppableContainer: collidingContainer,
        value: 0
      }
    };
  }
}
var isEscape2 = (key2) => key2 === "Escape" || key2 === "Esc";

// node_modules/@cloudscape-design/components/internal/components/sortable-area/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/sortable-area/styles.scoped.css";
var styles_css_default91 = {
  "drag-overlay": "awsui_drag-overlay_1ksmw_ajj2q_145",
  "drag-overlay-item": "awsui_drag-overlay-item_1ksmw_ajj2q_149",
  "drag-overlay-container": "awsui_drag-overlay-container_1ksmw_ajj2q_176",
  "active": "awsui_active_1ksmw_ajj2q_204",
  "placeholder": "awsui_placeholder_1ksmw_ajj2q_214",
  "placeholder-item": "awsui_placeholder-item_1ksmw_ajj2q_223",
  "placeholder-container": "awsui_placeholder-container_1ksmw_ajj2q_229",
  "sorting": "awsui_sorting_1ksmw_ajj2q_236"
};

// node_modules/@cloudscape-design/components/internal/components/sortable-area/index.js
function SortableArea({ items, itemDefinition, renderItem, onItemsChange, disableReorder, i18nStrings }) {
  var _a;
  const { activeItemId, setActiveItemId, collisionDetection, handleKeyDown, sensors } = useDragAndDropReorder({
    items,
    itemDefinition
  });
  const activeItem = activeItemId ? items.find((item) => itemDefinition.id(item) === activeItemId) : null;
  const isDragging = activeItemId !== null;
  const announcements = useLiveAnnouncements(Object.assign({ items, itemDefinition, isDragging }, i18nStrings));
  const portalContainer = usePortalContainer();
  return import_react237.default.createElement(
    DndContext,
    { sensors, collisionDetection, accessibility: {
      announcements,
      restoreFocus: false,
      screenReaderInstructions: (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dragHandleAriaDescription) ? { draggable: i18nStrings.dragHandleAriaDescription } : void 0,
      container: portalContainer !== null && portalContainer !== void 0 ? portalContainer : void 0
    }, onDragStart: ({ active }) => setActiveItemId(active.id), onDragEnd: (event) => {
      setActiveItemId(null);
      const { active, over } = event;
      if (over && active.id !== over.id) {
        const movedItem = items.find((item) => itemDefinition.id(item) === active.id);
        const oldIndex = items.findIndex((item) => itemDefinition.id(item) === active.id);
        const newIndex = items.findIndex((item) => itemDefinition.id(item) === over.id);
        fireNonCancelableEvent(onItemsChange, { items: arrayMove([...items], oldIndex, newIndex), movedItem });
      }
    }, onDragCancel: () => setActiveItemId(null) },
    import_react237.default.createElement(SortableContext, { disabled: disableReorder, items: items.map((item) => itemDefinition.id(item)), strategy: verticalListSortingStrategy }, items.map((item) => import_react237.default.createElement(DraggableItem, { key: itemDefinition.id(item), item, itemDefinition, renderItem, onKeyDown: handleKeyDown, dragHandleAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dragHandleAriaLabel }))),
    import_react237.default.createElement(
      Portal,
      { container: portalContainer },
      import_react237.default.createElement(DragOverlay, { className: clsx_m_default(styles_css_default91["drag-overlay"], styles_css_default91[`drag-overlay-${getBorderRadiusVariant(itemDefinition)}`]), dropAnimation: null, style: { zIndex: 5e3 } }, activeItem && renderItem({
        item: activeItem,
        id: activeItemId.toString(),
        style: {},
        className: styles_css_default91.active,
        isDropPlaceholder: true,
        isSortingActive: false,
        isDragGhost: true,
        dragHandleProps: {
          ariaLabel: (_a = joinStrings(i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dragHandleAriaLabel, itemDefinition.label(activeItem))) !== null && _a !== void 0 ? _a : "",
          active: true,
          onKeyDown: handleKeyDown
        }
      }))
    )
  );
}
function usePortalContainer() {
  const portalContainerRef = (0, import_react237.useRef)(typeof document !== "undefined" ? document.createElement("div") : null);
  (0, import_react237.useEffect)(() => {
    const container = portalContainerRef.current;
    if (container && !container.isConnected) {
      document.body.appendChild(container);
    }
    return () => {
      if (container && container.isConnected) {
        document.body.removeChild(container);
      }
    };
  }, []);
  return portalContainerRef.current;
}
function DraggableItem({ item, itemDefinition, dragHandleAriaLabel, onKeyDown, renderItem }) {
  var _a;
  const id = itemDefinition.id(item);
  const { isDragging, isSorting, listeners, setNodeRef, transform, attributes } = useSortable({
    id
  });
  const style = { transform: CSS2.Translate.toString(transform) };
  const dragHandleListeners = attributes["aria-disabled"] ? {} : Object.assign(Object.assign({}, listeners), { onKeyDown: (event) => {
    if (onKeyDown) {
      onKeyDown(event);
    }
    if (listeners === null || listeners === void 0 ? void 0 : listeners.onKeyDown) {
      listeners.onKeyDown(event);
    }
  } });
  const className2 = clsx_m_default(isDragging && clsx_m_default(styles_css_default91.placeholder, styles_css_default91[`placeholder-${getBorderRadiusVariant(itemDefinition)}`]), isSorting && styles_css_default91.sorting);
  return import_react237.default.createElement(import_react237.default.Fragment, null, renderItem({
    item,
    id,
    ref: setNodeRef,
    style,
    className: className2,
    isDropPlaceholder: isDragging,
    isSortingActive: isSorting,
    isDragGhost: false,
    dragHandleProps: Object.assign(Object.assign({}, dragHandleListeners), { ariaLabel: (_a = joinStrings(dragHandleAriaLabel, itemDefinition.label(item))) !== null && _a !== void 0 ? _a : "", ariaDescribedby: attributes["aria-describedby"], disabled: attributes["aria-disabled"] })
  }));
}
function getBorderRadiusVariant(itemDefinition) {
  var _a;
  return (_a = itemDefinition.borderRadius) !== null && _a !== void 0 ? _a : "item";
}

// node_modules/@cloudscape-design/components/internal/components/structured-item/index.js
var import_react238 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/structured-item/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/structured-item/styles.scoped.css";
var styles_css_default92 = {
  "root": "awsui_root_1ifko_cskao_145",
  "disable-paddings": "awsui_disable-paddings_1ifko_cskao_183",
  "main": "awsui_main_1ifko_cskao_187",
  "content-wrap": "awsui_content-wrap_1ifko_cskao_193",
  "wrap-actions": "awsui_wrap-actions_1ifko_cskao_203",
  "content": "awsui_content_1ifko_cskao_193",
  "actions": "awsui_actions_1ifko_cskao_211"
};

// node_modules/@cloudscape-design/components/internal/components/structured-item/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/structured-item/test-classes/styles.scoped.css";
var styles_css_default93 = {
  "content": "awsui_content_x6dl3_7yzrg_5",
  "icon": "awsui_icon_x6dl3_7yzrg_6",
  "actions": "awsui_actions_x6dl3_7yzrg_7",
  "secondary": "awsui_secondary_x6dl3_7yzrg_8"
};

// node_modules/@cloudscape-design/components/internal/components/structured-item/index.js
function InternalStructuredItem({ content, icon, actions, secondaryContent, disablePaddings, wrapActions = true }) {
  return import_react238.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default92.root, styles_css_default93.root, disablePaddings && styles_css_default92["disable-paddings"]) },
    icon && import_react238.default.createElement("div", { className: clsx_m_default(styles_css_default92.icon, styles_css_default93.icon) }, icon),
    import_react238.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default92.main) },
      import_react238.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default92["content-wrap"], wrapActions && styles_css_default92["wrap-actions"]) },
        import_react238.default.createElement("div", { className: clsx_m_default(styles_css_default92.content, styles_css_default93.content) }, content),
        actions && import_react238.default.createElement("div", { className: clsx_m_default(styles_css_default92.actions, styles_css_default93.actions) }, actions)
      ),
      secondaryContent && import_react238.default.createElement("div", { className: clsx_m_default(styles_css_default92.secondary, styles_css_default93.secondary) }, secondaryContent)
    )
  );
}

// node_modules/@cloudscape-design/components/list/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/list/styles.scoped.css";
var styles_css_default94 = {
  "root": "awsui_root_1axkx_1swaz_145",
  "item": "awsui_item_1axkx_1swaz_183",
  "disable-item-paddings": "awsui_disable-item-paddings_1axkx_1swaz_186",
  "disable-paddings": "awsui_disable-paddings_1axkx_1swaz_189",
  "sortable-item": "awsui_sortable-item_1axkx_1swaz_196"
};

// node_modules/@cloudscape-design/components/list/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/list/test-classes/styles.scoped.css";
var styles_css_default95 = {
  "root": "awsui_root_rckk5_b9f2m_5",
  "item": "awsui_item_rckk5_b9f2m_6"
};

// node_modules/@cloudscape-design/components/list/internal.js
var extractValidStructuredItemProps = ({ content, secondaryContent, icon, actions }) => ({
  content,
  secondaryContent,
  icon,
  actions
});
function InternalList(_a) {
  var { items, renderItem, sortable = false, sortDisabled = false, tagOverride: Tag = sortable ? "ol" : "ul", ariaLabel, ariaLabelledby, ariaDescribedby, onSortingChange, i18nStrings, disablePaddings, disableItemPaddings, __internalRootRef = null } = _a, rest = __rest(_a, ["items", "renderItem", "sortable", "sortDisabled", "tagOverride", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "onSortingChange", "i18nStrings", "disablePaddings", "disableItemPaddings", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("list");
  let contents;
  if (sortable) {
    contents = import_react239.default.createElement(SortableArea, { items, disableReorder: sortDisabled, itemDefinition: {
      id: (item) => renderItem(item).id,
      label: (item) => {
        var _a2;
        const details = renderItem(item);
        return (_a2 = details.announcementLabel) !== null && _a2 !== void 0 ? _a2 : details.content;
      }
    }, onItemsChange: (event) => fireNonCancelableEvent(onSortingChange, { items: event.detail.items }), i18nStrings: {
      liveAnnouncementDndStarted: i18n("liveAnnouncementDndStarted", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.liveAnnouncementDndStarted, formatDndStarted),
      liveAnnouncementDndItemReordered: i18n("liveAnnouncementDndItemReordered", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.liveAnnouncementDndItemReordered, formatDndItemReordered),
      liveAnnouncementDndItemCommitted: i18n("liveAnnouncementDndItemCommitted", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.liveAnnouncementDndItemCommitted, formatDndItemCommitted),
      liveAnnouncementDndDiscarded: i18n("liveAnnouncementDndDiscarded", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.liveAnnouncementDndDiscarded),
      dragHandleAriaLabel: i18n("dragHandleAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dragHandleAriaLabel),
      dragHandleAriaDescription: i18n("dragHandleAriaDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dragHandleAriaDescription)
    }, renderItem: ({ ref, item, id, style, className: className2, dragHandleProps, isDragGhost }) => {
      const structuredItemProps = extractValidStructuredItemProps(renderItem(item));
      const itemClass = clsx_m_default(styles_css_default94.item, styles_css_default95.item, disableItemPaddings && styles_css_default94["disable-item-paddings"], styles_css_default94["sortable-item"], className2);
      const content = import_react239.default.createElement(
        import_react239.default.Fragment,
        null,
        import_react239.default.createElement(drag_handle_default, Object.assign({}, dragHandleProps)),
        import_react239.default.createElement(InternalStructuredItem, Object.assign({}, structuredItemProps, { disablePaddings: disableItemPaddings }))
      );
      if (isDragGhost) {
        return import_react239.default.createElement("div", { className: itemClass }, content);
      }
      return import_react239.default.createElement("li", { ref, className: itemClass, style, "data-testid": id }, content);
    } });
  } else {
    contents = items === null || items === void 0 ? void 0 : items.map((item) => {
      const _a2 = renderItem(item), { id } = _a2, structuredItemProps = __rest(_a2, ["id"]);
      return import_react239.default.createElement(
        "li",
        { key: id, "data-testid": id, className: clsx_m_default(styles_css_default94.item, styles_css_default95.item, disablePaddings && styles_css_default94["disable-paddings"], disableItemPaddings && styles_css_default94["disable-item-paddings"]) },
        import_react239.default.createElement(InternalStructuredItem, Object.assign({}, extractValidStructuredItemProps(structuredItemProps), { disablePaddings: disableItemPaddings }))
      );
    });
  }
  return import_react239.default.createElement(Tag, Object.assign({ ref: __internalRootRef }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default94.root, styles_css_default95.root), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }), contents);
}

// node_modules/@cloudscape-design/components/text-filter/internal.js
var import_react243 = __toESM(require_react());

// node_modules/@cloudscape-design/components/text-filter/analytics/use-table-integration.js
var import_react240 = __toESM(require_react());
var useTableIntegration = (filteringText, countText) => {
  const tableComponentContext = useTableComponentsContext();
  const countValue = (0, import_react240.useMemo)(() => parseCountValue(countText), [countText]);
  (0, import_react240.useEffect)(() => {
    var _a;
    if ((_a = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.filterRef) === null || _a === void 0 ? void 0 : _a.current) {
      tableComponentContext.filterRef.current.filterText = filteringText;
      tableComponentContext.filterRef.current.filterCount = countValue;
      tableComponentContext.filterRef.current.filtered = !!filteringText;
      return () => {
        var _a2, _b, _c;
        (_a2 = tableComponentContext.filterRef.current) === null || _a2 === void 0 ? true : delete _a2.filterText;
        (_b = tableComponentContext.filterRef.current) === null || _b === void 0 ? true : delete _b.filterCount;
        (_c = tableComponentContext.filterRef.current) === null || _c === void 0 ? true : delete _c.filtered;
      };
    }
  }, [tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.filterRef, countValue, filteringText]);
};

// node_modules/@cloudscape-design/components/text-filter/search-results.js
var import_react241 = __toESM(require_react());

// node_modules/@cloudscape-design/components/text-filter/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/text-filter/styles.scoped.css";
var styles_css_default96 = {
  "root": "awsui_root_1sdq3_1y1he_145",
  "input": "awsui_input_1sdq3_1y1he_180",
  "results": "awsui_results_1sdq3_1y1he_184"
};

// node_modules/@cloudscape-design/components/text-filter/search-results.js
var LIVE_REGION_DELAY = 2e3;
var SearchResults = import_react241.default.forwardRef(({ id, renderLiveRegion, children }, ref) => {
  const liveRegionRef = (0, import_react241.useRef)(null);
  (0, import_react241.useImperativeHandle)(ref, () => ({
    reannounce: () => {
      var _a;
      (_a = liveRegionRef.current) === null || _a === void 0 ? void 0 : _a.reannounce();
    }
  }), []);
  return import_react241.default.createElement(
    import_react241.default.Fragment,
    null,
    import_react241.default.createElement("span", { className: styles_css_default96.results, id }, children),
    renderLiveRegion && import_react241.default.createElement(internal_default2, { delay: LIVE_REGION_DELAY, tagName: "span", hidden: true, ref: liveRegionRef }, children)
  );
});

// node_modules/@cloudscape-design/components/text-filter/use-debounce-search-result-callback.js
var import_react242 = __toESM(require_react());
var LIVE_REGION_DELAY2 = 2e3;
function useDebounceSearchResultCallback({ searchQuery, countText, loading, announceCallback }) {
  const loadingRef = (0, import_react242.useRef)(loading);
  const debounceLiveAnnouncement = useDebounceCallback(() => {
    if (!countText || loadingRef.current) {
      return;
    }
    announceCallback();
  }, LIVE_REGION_DELAY2);
  (0, import_react242.useEffect)(() => {
    loadingRef.current = loading;
    debounceLiveAnnouncement();
  }, [searchQuery, countText, loading, debounceLiveAnnouncement]);
}

// node_modules/@cloudscape-design/components/text-filter/internal.js
var InternalTextFilter = import_react243.default.forwardRef((_a, ref) => {
  var { filteringText, filteringAriaLabel, filteringPlaceholder, filteringClearAriaLabel, controlId, ariaLabelledby, ariaDescribedby, disabled, countText, disableBrowserAutocorrect, onChange, onDelayedChange, loading = false, __internalRootRef } = _a, rest = __rest(_a, ["filteringText", "filteringAriaLabel", "filteringPlaceholder", "filteringClearAriaLabel", "controlId", "ariaLabelledby", "ariaDescribedby", "disabled", "countText", "disableBrowserAutocorrect", "onChange", "onDelayedChange", "loading", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const inputRef = (0, import_react243.useRef)(null);
  const searchResultsRef = (0, import_react243.useRef)(null);
  useForwardFocus(ref, inputRef);
  useTableIntegration(filteringText, countText);
  const searchResultsId = useUniqueId("text-filter-search-results");
  const showResults = filteringText && countText && !disabled;
  useDebounceSearchResultCallback({
    searchQuery: filteringText,
    countText,
    loading,
    announceCallback: () => {
      var _a2;
      (_a2 = searchResultsRef.current) === null || _a2 === void 0 ? void 0 : _a2.reannounce();
    }
  });
  return import_react243.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default96.root), ref: __internalRootRef }),
    import_react243.default.createElement(internal_default11, { __inheritFormFieldProps: true, disableBrowserAutocorrect, ref: inputRef, className: styles_css_default96.input, type: "search", ariaLabel: filteringAriaLabel, placeholder: filteringPlaceholder, value: filteringText, disabled, controlId, ariaLabelledby, ariaDescribedby: joinStrings(showResults ? searchResultsId : void 0, ariaDescribedby), autoComplete: false, clearAriaLabel: filteringClearAriaLabel, onChange: (event) => fireNonCancelableEvent(onChange, { filteringText: event.detail.value }), __onDelayedInput: (event) => fireNonCancelableEvent(onDelayedChange, { filteringText: event.detail.value }) }),
    showResults ? import_react243.default.createElement(SearchResults, { renderLiveRegion: !loading, id: searchResultsId, ref: searchResultsRef }, countText) : null
  );
});
var internal_default18 = InternalTextFilter;

// node_modules/@cloudscape-design/components/collection-preferences/content-display/content-display-option.js
var import_react245 = __toESM(require_react());

// node_modules/@cloudscape-design/components/toggle/internal.js
var import_react244 = __toESM(require_react());

// node_modules/@cloudscape-design/components/toggle/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/toggle/styles.scoped.css";
var styles_css_default97 = {
  "root": "awsui_root_4yi2u_17q58_145",
  "outline": "awsui_outline_4yi2u_17q58_178",
  "toggle-control": "awsui_toggle-control_4yi2u_17q58_200",
  "toggle-control-checked": "awsui_toggle-control-checked_4yi2u_17q58_213",
  "toggle-control-disabled": "awsui_toggle-control-disabled_4yi2u_17q58_216",
  "toggle-control-readonly": "awsui_toggle-control-readonly_4yi2u_17q58_222",
  "toggle-handle": "awsui_toggle-handle_4yi2u_17q58_226",
  "toggle-handle-checked": "awsui_toggle-handle-checked_4yi2u_17q58_251",
  "toggle-handle-disabled": "awsui_toggle-handle-disabled_4yi2u_17q58_258",
  "toggle-handle-readonly": "awsui_toggle-handle-readonly_4yi2u_17q58_262"
};

// node_modules/@cloudscape-design/components/toggle/internal.js
var InternalToggle = import_react244.default.forwardRef((_a, ref) => {
  var { controlId, checked, name, disabled, readOnly, children, description, ariaLabel, ariaControls, onFocus, onBlur, onChange, __internalRootRef = null, __injectAnalyticsComponentMetadata } = _a, rest = __rest(_a, ["controlId", "checked", "name", "disabled", "readOnly", "children", "description", "ariaLabel", "ariaControls", "onFocus", "onBlur", "onChange", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const checkboxRef = (0, import_react244.useRef)(null);
  const analyticsMetadata = {};
  const analyticsComponentMetadata = {
    name: "awsui.Toggle",
    label: { root: "self" }
  };
  if (__injectAnalyticsComponentMetadata) {
    analyticsMetadata.component = analyticsComponentMetadata;
  }
  if (!disabled && !readOnly) {
    analyticsMetadata.action = !checked ? "select" : "deselect";
  }
  useForwardFocus(ref, checkboxRef);
  return import_react244.default.createElement(AbstractSwitch, Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default97.root, baseProps.className), controlClassName: clsx_m_default(styles_css_default97["toggle-control"], {
    [styles_css_default97["toggle-control-checked"]]: checked,
    [styles_css_default97["toggle-control-disabled"]]: disabled,
    [styles_css_default97["toggle-control-readonly"]]: readOnly
  }), outlineClassName: styles_css_default97.outline, controlId, disabled, readOnly, label: children, description, descriptionBottomPadding: true, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, nativeControl: (nativeControlProps) => import_react244.default.createElement("input", Object.assign({}, nativeControlProps, {
    ref: checkboxRef,
    type: "checkbox",
    checked,
    name,
    "aria-disabled": readOnly && !disabled ? "true" : void 0,
    onFocus: () => fireNonCancelableEvent(onFocus),
    onBlur: () => fireNonCancelableEvent(onBlur),
    // empty handler to suppress React controllability warning
    onChange: () => {
    }
  })), onClick: () => {
    var _a2;
    (_a2 = checkboxRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    fireNonCancelableEvent(onChange, { checked: !checked });
  }, styledControl: (
    /*Using span, not div for HTML validity*/
    import_react244.default.createElement("span", { className: clsx_m_default(styles_css_default97["toggle-handle"], {
      [styles_css_default97["toggle-handle-checked"]]: checked,
      [styles_css_default97["toggle-handle-disabled"]]: disabled,
      [styles_css_default97["toggle-handle-readonly"]]: readOnly
    }) })
  ), __internalRootRef }, getAnalyticsMetadataAttribute(analyticsMetadata)));
});
var internal_default19 = InternalToggle;

// node_modules/@cloudscape-design/components/collection-preferences/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/collection-preferences/styles.scoped.css";
var styles_css_default98 = {
  "visible-content": "awsui_visible-content_tc96w_via2y_153",
  "visible-content-toggle": "awsui_visible-content-toggle_tc96w_via2y_154",
  "visible-content-groups": "awsui_visible-content-groups_tc96w_via2y_155",
  "visible-content-group": "awsui_visible-content-group_tc96w_via2y_155",
  "visible-content-title": "awsui_visible-content-title_tc96w_via2y_160",
  "visible-content-group-label": "awsui_visible-content-group-label_tc96w_via2y_170",
  "visible-content-option": "awsui_visible-content-option_tc96w_via2y_176",
  "visible-content-option-label": "awsui_visible-content-option-label_tc96w_via2y_189",
  "content-display-option-toggle": "awsui_content-display-option-toggle_tc96w_via2y_212",
  "content-display-option-content": "awsui_content-display-option-content_tc96w_via2y_216",
  "content-display-option-label": "awsui_content-display-option-label_tc96w_via2y_256",
  "content-display": "awsui_content-display_tc96w_via2y_212",
  "content-display-text-filter": "awsui_content-display-text-filter_tc96w_via2y_264",
  "content-display-no-match": "awsui_content-display-no-match_tc96w_via2y_265",
  "content-display-title": "awsui_content-display-title_tc96w_via2y_269",
  "content-display-description": "awsui_content-display-description_tc96w_via2y_278",
  "content-display-option-list": "awsui_content-display-option-list_tc96w_via2y_286",
  "root": "awsui_root_tc96w_via2y_293",
  "modal-root": "awsui_modal-root_tc96w_via2y_294",
  "trigger-button": "awsui_trigger-button_tc96w_via2y_295",
  "cancel-button": "awsui_cancel-button_tc96w_via2y_296",
  "confirm-button": "awsui_confirm-button_tc96w_via2y_297",
  "custom": "awsui_custom_tc96w_via2y_298",
  "content-before": "awsui_content-before_tc96w_via2y_299",
  "second-column-small": "awsui_second-column-small_tc96w_via2y_303",
  "wrap-lines": "awsui_wrap-lines_tc96w_via2y_307",
  "striped-rows": "awsui_striped-rows_tc96w_via2y_308",
  "content-density": "awsui_content-density_tc96w_via2y_309",
  "page-size": "awsui_page-size_tc96w_via2y_310",
  "page-size-form-field": "awsui_page-size-form-field_tc96w_via2y_311",
  "page-size-radio-group": "awsui_page-size-radio-group_tc96w_via2y_312",
  "sticky-columns": "awsui_sticky-columns_tc96w_via2y_313",
  "sticky-columns-form-field": "awsui_sticky-columns-form-field_tc96w_via2y_314",
  "sticky-columns-radio-group": "awsui_sticky-columns-radio-group_tc96w_via2y_315",
  "sticky-columns-first": "awsui_sticky-columns-first_tc96w_via2y_316",
  "sticky-columns-last": "awsui_sticky-columns-last_tc96w_via2y_317"
};

// node_modules/@cloudscape-design/components/collection-preferences/content-display/content-display-option.js
var componentPrefix = "content-display-option";
var getClassName = (suffix) => styles_css_default98[[componentPrefix, suffix].filter(Boolean).join("-")];
var ContentDisplayOption = (0, import_react245.forwardRef)(({ onToggle, option }, ref) => {
  const idPrefix = useUniqueId(componentPrefix);
  const controlId = `${idPrefix}-control-${option.id}`;
  return import_react245.default.createElement(
    "div",
    { ref, className: getClassName("content") },
    import_react245.default.createElement("label", { className: getClassName("label"), htmlFor: controlId }, option.label),
    import_react245.default.createElement(
      "div",
      { className: getClassName("toggle") },
      import_react245.default.createElement(internal_default19, { checked: !!option.visible, onChange: () => onToggle && onToggle(option), disabled: option.alwaysVisible === true, controlId })
    )
  );
});
var content_display_option_default = ContentDisplayOption;

// node_modules/@cloudscape-design/components/collection-preferences/content-display/utils.js
function getSortedOptions({ options, contentDisplay }) {
  const optionsById = /* @__PURE__ */ new Map();
  for (const { id, visible } of contentDisplay) {
    optionsById.set(id, { id, label: id, visible });
  }
  for (const option of options) {
    const existing = optionsById.get(option.id);
    optionsById.set(option.id, Object.assign(Object.assign({}, option), { visible: !!(existing === null || existing === void 0 ? void 0 : existing.visible) }));
  }
  return Array.from(optionsById.values());
}
function getFilteredOptions(options, filterText) {
  filterText = filterText.trim().toLowerCase();
  if (!filterText) {
    return options;
  }
  return options.filter((option) => option.label.toLowerCase().trim().includes(filterText));
}

// node_modules/@cloudscape-design/components/collection-preferences/content-display/index.js
var componentPrefix2 = "content-display";
var getClassName2 = (suffix) => styles_css_default98[`${componentPrefix2}-${suffix}`];
function ContentDisplayPreference({ title, description, options, value = options.map(({ id }) => ({
  id,
  visible: true
})), onChange, liveAnnouncementDndStarted, liveAnnouncementDndItemReordered, liveAnnouncementDndItemCommitted, liveAnnouncementDndDiscarded, dragHandleAriaDescription, dragHandleAriaLabel, enableColumnFiltering = false, i18nStrings }) {
  const idPrefix = useUniqueId(componentPrefix2);
  const i18n = useInternalI18n("collection-preferences");
  const [columnFilteringText, setColumnFilteringText] = (0, import_react246.useState)("");
  const titleId = `${idPrefix}-title`;
  const descriptionId = `${idPrefix}-description`;
  const [sortedOptions, sortedAndFilteredOptions] = (0, import_react246.useMemo)(() => {
    const sorted = getSortedOptions({ options, contentDisplay: value });
    const filtered = getFilteredOptions(sorted, columnFilteringText);
    return [sorted, filtered];
  }, [columnFilteringText, options, value]);
  const onToggle = (option) => {
    onChange(sortedOptions.map(({ id, visible }) => ({ id, visible: id === option.id ? !option.visible : visible })));
  };
  return import_react246.default.createElement(
    "div",
    Object.assign({ className: styles_css_default98[componentPrefix2] }, getAnalyticsInnerContextAttribute("contentDisplay")),
    import_react246.default.createElement("h3", { className: getClassName2("title"), id: titleId }, i18n("contentDisplayPreference.title", title)),
    import_react246.default.createElement("p", { className: getClassName2("description"), id: descriptionId }, i18n("contentDisplayPreference.description", description)),
    enableColumnFiltering && import_react246.default.createElement(
      "div",
      { className: getClassName2("text-filter") },
      import_react246.default.createElement(internal_default18, { filteringText: columnFilteringText, filteringPlaceholder: i18n("contentDisplayPreference.i18nStrings.columnFilteringPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringPlaceholder), filteringAriaLabel: i18n("contentDisplayPreference.i18nStrings.columnFilteringAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringAriaLabel), filteringClearAriaLabel: i18n("contentDisplayPreference.i18nStrings.columnFilteringClearFilterText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringClearFilterText), onChange: ({ detail }) => setColumnFilteringText(detail.filteringText), countText: i18n("contentDisplayPreference.i18nStrings.columnFilteringCountText", (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringCountText) ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringCountText(sortedAndFilteredOptions.length) : void 0, (format3) => format3({ count: sortedAndFilteredOptions.length })) })
    ),
    sortedAndFilteredOptions.length === 0 && import_react246.default.createElement(
      "div",
      { className: getClassName2("no-match") },
      import_react246.default.createElement(
        internal_default4,
        { size: "s", alignItems: "center" },
        import_react246.default.createElement(InternalBox, { margin: { top: "m" } }, i18n("contentDisplayPreference.i18nStrings.columnFilteringNoMatchText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringNoMatchText)),
        import_react246.default.createElement(internal_default3, { onClick: () => setColumnFilteringText("") }, i18n("contentDisplayPreference.i18nStrings.columnFilteringClearFilterText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringClearFilterText))
      )
    ),
    import_react246.default.createElement(InternalList, { items: sortedAndFilteredOptions, renderItem: (item) => ({
      id: item.id,
      content: import_react246.default.createElement(content_display_option_default, { option: item, onToggle }),
      announcementLabel: item.label
    }), disableItemPaddings: true, sortable: true, sortDisabled: columnFilteringText.trim().length > 0, onSortingChange: ({ detail: { items } }) => {
      onChange(items);
    }, ariaDescribedby: descriptionId, ariaLabelledby: titleId, i18nStrings: {
      liveAnnouncementDndStarted: i18n("contentDisplayPreference.liveAnnouncementDndStarted", liveAnnouncementDndStarted, formatDndStarted),
      liveAnnouncementDndItemReordered: i18n("contentDisplayPreference.liveAnnouncementDndItemReordered", liveAnnouncementDndItemReordered, formatDndItemReordered),
      liveAnnouncementDndItemCommitted: i18n("contentDisplayPreference.liveAnnouncementDndItemCommitted", liveAnnouncementDndItemCommitted, formatDndItemCommitted),
      liveAnnouncementDndDiscarded: i18n("contentDisplayPreference.liveAnnouncementDndDiscarded", liveAnnouncementDndDiscarded),
      dragHandleAriaLabel: i18n("contentDisplayPreference.dragHandleAriaLabel", dragHandleAriaLabel),
      dragHandleAriaDescription: i18n("contentDisplayPreference.dragHandleAriaDescription", dragHandleAriaDescription)
    } })
  );
}

// node_modules/@cloudscape-design/components/collection-preferences/utils.js
var import_react249 = __toESM(require_react());

// node_modules/@cloudscape-design/components/radio-group/internal.js
var import_react248 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/forward-focus/radio-group.js
var import_react247 = __toESM(require_react());
function useRadioGroupForwardFocus(forwardedRef, items, value) {
  const itemRef = (0, import_react247.useRef)(null);
  const itemIndex = items && findIndex2(items, (item) => item.value === value);
  (0, import_react247.useImperativeHandle)(forwardedRef, () => ({
    focus() {
      var _a;
      (_a = itemRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }));
  return [itemRef, itemIndex !== void 0 && itemIndex !== -1 ? itemIndex : 0];
}
function findIndex2(items, predicate) {
  for (let i2 = 0; i2 < items.length; i2++) {
    if (predicate(items[i2])) {
      return i2;
    }
  }
  return -1;
}

// node_modules/@cloudscape-design/components/radio-group/internal.js
var InternalRadioGroup = import_react248.default.forwardRef((_a, ref) => {
  var { name, value, items, ariaLabel, ariaRequired, ariaControls, onChange, readOnly, __internalRootRef = null } = _a, props2 = __rest(_a, ["name", "value", "items", "ariaLabel", "ariaRequired", "ariaControls", "onChange", "readOnly", "__internalRootRef"]);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(props2);
  const baseProps = getBaseProps(props2);
  const generatedName = useUniqueId("awsui-radio-");
  const [radioButtonRef, radioButtonRefIndex] = useRadioGroupForwardFocus(ref, items, value);
  return import_react248.default.createElement("div", Object.assign({ role: "radiogroup", "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel, "aria-describedby": ariaDescribedby, "aria-required": ariaRequired, "aria-controls": ariaControls, "aria-readonly": readOnly ? "true" : void 0 }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default4.root), ref: __internalRootRef }), items && items.map((item, index) => import_react248.default.createElement(radio_button_default, Object.assign({ key: item.value, ref: index === radioButtonRefIndex ? radioButtonRef : void 0, checked: item.value === value, name: name || generatedName, value: item.value, label: item.label, description: item.description, disabled: item.disabled, onChange, controlId: item.controlId, readOnly }, getAnalyticsMetadataAttribute(!item.disabled && !readOnly ? {
    detail: {
      position: `${index + 1}`,
      value: item.value
    }
  } : {})))));
});
var internal_default20 = InternalRadioGroup;

// node_modules/@cloudscape-design/components/collection-preferences/utils.js
var copyPreferences = ({ pageSize, wrapLines, stripedRows, contentDensity, visibleContent, contentDisplay, stickyColumns, custom: custom8 }) => ({
  pageSize,
  wrapLines,
  stripedRows,
  contentDensity,
  visibleContent,
  contentDisplay,
  stickyColumns,
  custom: custom8
});
var mergePreferences = (newPref, oldPref) => {
  const newObj = Object.assign({}, oldPref);
  const prefNames = [
    "pageSize",
    "wrapLines",
    "stripedRows",
    "contentDensity",
    "visibleContent",
    "custom",
    "contentDisplay",
    "stickyColumns"
  ];
  for (const prefName of prefNames) {
    if (newPref[prefName] !== void 0) {
      newObj[prefName] = newPref[prefName];
    }
  }
  return newObj;
};
var ModalContentLayout = ({ left, right }) => {
  const [breakpoint, ref] = useContainerBreakpoints(["xs"]);
  const smallContainer = breakpoint === "default";
  const columns = left && right ? 2 : 1;
  return import_react249.default.createElement(
    "div",
    { ref },
    import_react249.default.createElement(
      ColumnLayout,
      { columns: smallContainer ? 1 : columns, variant: "text-grid" },
      left && import_react249.default.createElement("div", null, left),
      right && import_react249.default.createElement("div", { className: clsx_m_default(left && smallContainer && styles_css_default98["second-column-small"]) }, right)
    )
  );
};
var PageSizePreference = ({ title, options, value, onChange }) => {
  const i18n = useInternalI18n("collection-preferences");
  return import_react249.default.createElement(
    "div",
    Object.assign({ className: styles_css_default98["page-size"] }, getAnalyticsInnerContextAttribute("pageSize")),
    import_react249.default.createElement(
      InternalFormField,
      { label: i18n("pageSizePreference.title", title), stretch: true, className: styles_css_default98["page-size-form-field"] },
      import_react249.default.createElement(internal_default20, { className: styles_css_default98["page-size-radio-group"], value: `${value}`, items: options.map(({ label, value: value2 }) => ({ label, value: `${value2}` })), onChange: ({ detail }) => onChange(parseInt(detail.value, 10)) })
    )
  );
};
var WrapLinesPreference = ({ label, description, value, onChange }) => {
  const i18n = useInternalI18n("collection-preferences");
  return import_react249.default.createElement(
    "div",
    Object.assign({}, getAnalyticsInnerContextAttribute("wrapLines")),
    import_react249.default.createElement(internal_default6, { checked: !!value, description: i18n("wrapLinesPreference.description", description), onChange: ({ detail }) => onChange(detail.checked), className: styles_css_default98["wrap-lines"] }, i18n("wrapLinesPreference.label", label))
  );
};
function StripedRowsPreference({ label, description, value, onChange }) {
  const i18n = useInternalI18n("collection-preferences");
  return import_react249.default.createElement(
    "div",
    Object.assign({}, getAnalyticsInnerContextAttribute("stripedRows")),
    import_react249.default.createElement(internal_default6, { checked: !!value, description: i18n("stripedRowsPreference.description", description), onChange: ({ detail }) => onChange(detail.checked), className: styles_css_default98["striped-rows"] }, i18n("stripedRowsPreference.label", label))
  );
}
var ContentDensityPreference = ({ label, description, value, onChange }) => {
  const i18n = useInternalI18n("collection-preferences");
  return import_react249.default.createElement(
    "div",
    Object.assign({}, getAnalyticsInnerContextAttribute("contentDensity")),
    import_react249.default.createElement(internal_default6, { checked: value === "compact", description: i18n("contentDensityPreference.description", description), onChange: ({ detail }) => onChange(detail.checked ? "compact" : "comfortable"), className: styles_css_default98["content-density"] }, i18n("contentDensityPreference.label", label))
  );
};
var StickyPreference = ({ firstOrLast, preference, value, onChange }) => {
  const { title, description, options } = preference;
  return import_react249.default.createElement(
    "div",
    Object.assign({ className: styles_css_default98[`sticky-columns-${firstOrLast}`] }, getAnalyticsInnerContextAttribute("stickyColumns")),
    import_react249.default.createElement(
      InternalFormField,
      { className: styles_css_default98["sticky-columns-form-field"], label: title, description },
      import_react249.default.createElement(internal_default20, { className: styles_css_default98["sticky-columns-radio-group"], value: typeof value !== "undefined" ? `${value}` : null, items: options.map(({ label, value: value2 }) => ({ label, value: `${value2}` })), onChange: ({ detail }) => onChange(Number(detail.value)) })
    )
  );
};
var StickyColumnsPreference = ({ firstColumns, lastColumns, onChange, value }) => {
  return import_react249.default.createElement(
    internal_default4,
    { className: styles_css_default98["sticky-columns"], size: "l" },
    firstColumns && import_react249.default.createElement(StickyPreference, { firstOrLast: "first", preference: firstColumns, value: value === null || value === void 0 ? void 0 : value.first, onChange: (newValue) => onChange(Object.assign(Object.assign({}, value), { first: newValue })) }),
    lastColumns && import_react249.default.createElement(StickyPreference, { firstOrLast: "last", preference: lastColumns, value: value === null || value === void 0 ? void 0 : value.last, onChange: (newValue) => onChange(Object.assign(Object.assign({}, value), { last: newValue })) })
  );
};
var CustomPreference = ({ value, customPreference, onChange }) => {
  const [customState, setCustomState] = (0, import_react249.useState)(value);
  if (customPreference) {
    return import_react249.default.createElement("div", Object.assign({ className: styles_css_default98.custom }, getAnalyticsInnerContextAttribute("custom")), customPreference(customState, (value2) => {
      setCustomState(() => value2);
      onChange(value2);
    }));
  }
  return null;
};

// node_modules/@cloudscape-design/components/collection-preferences/visible-content.js
var import_react250 = __toESM(require_react());
var isVisible = (id, visibleIds) => visibleIds.indexOf(id) !== -1;
var className = (suffix) => ({
  className: styles_css_default98[`visible-content-${suffix}`]
});
function VisibleContentPreference({ title, options, value = [], onChange }) {
  const idPrefix = useUniqueId("visible-content");
  const flatOptionsIds = options.reduce((ids2, group) => [...ids2, ...group.options.reduce((groupIds, option) => [...groupIds, option.id], [])], []);
  const onToggle = (id) => {
    if (!isVisible(id, value)) {
      onChange([...value, id].sort((firstId, secondId) => flatOptionsIds.indexOf(firstId) - flatOptionsIds.indexOf(secondId)));
    } else {
      onChange(value.filter((currentId) => currentId !== id));
    }
  };
  const selectionOption = (option, optionGroupIndex, optionIndex) => {
    const labelId = `${idPrefix}-${optionGroupIndex}-${optionIndex}`;
    return import_react250.default.createElement(
      "div",
      Object.assign({ key: optionIndex }, className("option")),
      import_react250.default.createElement("label", Object.assign({}, className("option-label"), { htmlFor: labelId }), option.label),
      import_react250.default.createElement(
        "div",
        Object.assign({}, className("toggle")),
        import_react250.default.createElement(internal_default19, { checked: isVisible(option.id, value), onChange: () => onToggle(option.id), disabled: option.editable === false, controlId: labelId })
      )
    );
  };
  const outerGroupLabelId = `${idPrefix}-outer`;
  return import_react250.default.createElement(
    "div",
    Object.assign({ className: styles_css_default98["visible-content"] }, getAnalyticsInnerContextAttribute("visibleContent")),
    import_react250.default.createElement("h3", Object.assign({}, className("title"), { id: outerGroupLabelId }), title),
    import_react250.default.createElement(internal_default4, Object.assign({}, className("groups"), { size: "xs" }), options.map((optionGroup, optionGroupIndex) => {
      const groupLabelId = `${idPrefix}-${optionGroupIndex}`;
      return import_react250.default.createElement(
        "div",
        Object.assign({ key: optionGroupIndex }, className("group"), { role: "group", "aria-labelledby": `${outerGroupLabelId} ${groupLabelId}` }),
        import_react250.default.createElement("div", Object.assign({}, className("group-label"), { id: groupLabelId }), optionGroup.label),
        import_react250.default.createElement("div", null, optionGroup.options.map((option, optionIndex) => selectionOption(option, optionGroupIndex, optionIndex)))
      );
    }))
  );
}

// node_modules/@cloudscape-design/components/collection-preferences/index.js
var componentName2 = "CollectionPreferences";
function CollectionPreferences(_a) {
  var _b;
  var { title, confirmLabel, cancelLabel, closeAriaLabel, disabled = false, onConfirm, onCancel, visibleContentPreference, contentDisplayPreference, pageSizePreference, wrapLinesPreference, stripedRowsPreference, contentDensityPreference, stickyColumnsPreference, preferences, customPreference, getModalRoot, removeModalRoot, contentBefore } = _a, rest = __rest(_a, ["title", "confirmLabel", "cancelLabel", "closeAriaLabel", "disabled", "onConfirm", "onCancel", "visibleContentPreference", "contentDisplayPreference", "pageSizePreference", "wrapLinesPreference", "stripedRowsPreference", "contentDensityPreference", "stickyColumnsPreference", "preferences", "customPreference", "getModalRoot", "removeModalRoot", "contentBefore"]);
  const parentMetadata = (0, import_react251.useContext)(CollectionPreferencesMetadata);
  const { __internalRootRef } = useBaseComponent("CollectionPreferences", {
    props: {},
    metadata: Object.assign(Object.assign({}, parentMetadata), { hasStripedRowsPreference: !!stripedRowsPreference, hasVisibleContentPreference: !!visibleContentPreference, hasContentDisplayPreference: !!contentDisplayPreference, hasContentDensityPreference: !!contentDensityPreference, hasStickyColumnsPreference: !!stickyColumnsPreference, hasContentDisplayColumnFiltering: !!(contentDisplayPreference === null || contentDisplayPreference === void 0 ? void 0 : contentDisplayPreference.enableColumnFiltering), visibleContentOptionsCount: (_b = visibleContentPreference === null || visibleContentPreference === void 0 ? void 0 : visibleContentPreference.options) === null || _b === void 0 ? void 0 : _b.length })
  });
  checkControlled("CollectionPreferences", "preferences", preferences, "onConfirm", onConfirm);
  const i18n = useInternalI18n("collection-preferences");
  const baseProps = getBaseProps(rest);
  const [modalVisible, setModalVisible] = (0, import_react251.useState)(false);
  const [temporaryPreferences, setTemporaryPreferences] = (0, import_react251.useState)(copyPreferences(preferences || {}));
  const triggerRef = (0, import_react251.useRef)(null);
  const dialogPreviouslyOpen = (0, import_react251.useRef)(false);
  (0, import_react251.useEffect)(() => {
    var _a2;
    if (!modalVisible) {
      if (dialogPreviouslyOpen.current) {
        (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      }
    } else {
      dialogPreviouslyOpen.current = true;
    }
  }, [modalVisible]);
  const onConfirmListener = () => {
    setModalVisible(false);
    fireNonCancelableEvent(onConfirm, temporaryPreferences);
  };
  const onCancelListener = () => {
    fireNonCancelableEvent(onCancel, {});
    setModalVisible(false);
    setTemporaryPreferences(copyPreferences(preferences || {}));
  };
  const hasContentOnTheLeft = !!(pageSizePreference || wrapLinesPreference || stripedRowsPreference || contentDensityPreference || stickyColumnsPreference || customPreference);
  const hasContentOnTheRight = !!(visibleContentPreference || contentDisplayPreference);
  const onChange = (changedPreferences) => setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences));
  if (visibleContentPreference && contentDisplayPreference) {
    warnOnce(componentName2, "You provided both `visibleContentPreference` and `contentDisplayPreference` props. `visibleContentPreference` will be ignored and only `contentDisplayPreference` will be rendered.");
  }
  const referrerId = useUniqueId();
  const tableComponentContext = useTableComponentsContext();
  (0, import_react251.useEffect)(() => {
    var _a2;
    if ((_a2 = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.preferencesRef) === null || _a2 === void 0 ? void 0 : _a2.current) {
      tableComponentContext.preferencesRef.current.pageSize = preferences === null || preferences === void 0 ? void 0 : preferences.pageSize;
      if (preferences === null || preferences === void 0 ? void 0 : preferences.contentDisplay) {
        tableComponentContext.preferencesRef.current.visibleColumns = preferences === null || preferences === void 0 ? void 0 : preferences.contentDisplay.filter((column) => column.visible).map((column) => column.id);
      } else if (preferences === null || preferences === void 0 ? void 0 : preferences.visibleContent) {
        tableComponentContext.preferencesRef.current.visibleColumns = [...preferences.visibleContent];
      }
      return () => {
        var _a3, _b2;
        (_a3 = tableComponentContext.preferencesRef.current) === null || _a3 === void 0 ? true : delete _a3.pageSize;
        (_b2 = tableComponentContext.preferencesRef.current) === null || _b2 === void 0 ? true : delete _b2.visibleColumns;
      };
    }
  }, [
    tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.preferencesRef,
    preferences === null || preferences === void 0 ? void 0 : preferences.contentDisplay,
    preferences === null || preferences === void 0 ? void 0 : preferences.visibleContent,
    preferences === null || preferences === void 0 ? void 0 : preferences.pageSize
  ]);
  return import_react251.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default98.root), ref: __internalRootRef }),
    import_react251.default.createElement(
      "div",
      Object.assign({ id: referrerId }, getAnalyticsMetadataAttribute({ component: getComponentAnalyticsMetadata(disabled, preferences) })),
      import_react251.default.createElement(InternalButton, { ref: triggerRef, className: clsx_m_default(styles_css_default98["trigger-button"], styles_css_default90["trigger-button"]), disabled, ariaLabel: i18n("title", title), onClick: () => {
        setTemporaryPreferences(copyPreferences(preferences || {}));
        setModalVisible(true);
      }, variant: "icon", iconName: "settings", formAction: "none", analyticsAction: "open" }),
      !disabled && modalVisible && import_react251.default.createElement(
        InternalModal,
        { className: styles_css_default98["modal-root"], visible: true, getModalRoot, removeModalRoot, header: i18n("title", title), referrerId, footer: import_react251.default.createElement(
          InternalBox,
          { float: "right" },
          import_react251.default.createElement(
            internal_default4,
            { direction: "horizontal", size: "xs" },
            import_react251.default.createElement(InternalButton, { className: styles_css_default98["cancel-button"], variant: "link", formAction: "none", onClick: onCancelListener, analyticsAction: "cancel" }, i18n("cancelLabel", cancelLabel)),
            import_react251.default.createElement(InternalButton, { className: styles_css_default98["confirm-button"], variant: "primary", formAction: "none", onClick: onConfirmListener, analyticsAction: "confirm" }, i18n("confirmLabel", confirmLabel))
          )
        ), closeAriaLabel: closeAriaLabel || cancelLabel, size: hasContentOnTheLeft && hasContentOnTheRight ? "large" : "medium", onDismiss: onCancelListener },
        import_react251.default.createElement("div", { className: styles_css_default98["content-before"] }, contentBefore),
        import_react251.default.createElement(ModalContentLayout, { left: hasContentOnTheLeft && import_react251.default.createElement(
          internal_default4,
          { size: "l" },
          pageSizePreference && import_react251.default.createElement(PageSizePreference, Object.assign({ value: temporaryPreferences.pageSize }, pageSizePreference, { onChange: (pageSize) => onChange({ pageSize }) })),
          wrapLinesPreference && import_react251.default.createElement(WrapLinesPreference, Object.assign({ value: temporaryPreferences.wrapLines }, wrapLinesPreference, { onChange: (wrapLines) => onChange({ wrapLines }) })),
          stripedRowsPreference && import_react251.default.createElement(StripedRowsPreference, Object.assign({ value: temporaryPreferences.stripedRows }, stripedRowsPreference, { onChange: (stripedRows) => onChange({ stripedRows }) })),
          contentDensityPreference && import_react251.default.createElement(ContentDensityPreference, Object.assign({ value: temporaryPreferences.contentDensity }, contentDensityPreference, { onChange: (contentDensity) => onChange({ contentDensity }) })),
          stickyColumnsPreference && import_react251.default.createElement(StickyColumnsPreference, Object.assign({ value: temporaryPreferences.stickyColumns }, stickyColumnsPreference, { onChange: (stickyColumns) => onChange({ stickyColumns }) })),
          customPreference && import_react251.default.createElement(CustomPreference, { value: temporaryPreferences.custom, customPreference, onChange: (custom8) => onChange({ custom: custom8 }) })
        ), right: contentDisplayPreference ? import_react251.default.createElement(ContentDisplayPreference, Object.assign({}, contentDisplayPreference, { value: temporaryPreferences.contentDisplay, onChange: (contentDisplay) => onChange({ contentDisplay }) })) : visibleContentPreference && import_react251.default.createElement(VisibleContentPreference, Object.assign({ value: temporaryPreferences.visibleContent }, visibleContentPreference, { onChange: (visibleItems) => onChange({ visibleContent: visibleItems }) })) })
      )
    )
  );
}
applyDisplayName(CollectionPreferences, componentName2);

// node_modules/@cloudscape-design/components/column-layout/index.js
var import_react252 = __toESM(require_react());
function ColumnLayout2(_a) {
  var { columns = 1, variant = "default", borders = "none", disableGutters = false } = _a, props2 = __rest(_a, ["columns", "variant", "borders", "disableGutters"]);
  const baseComponentProps = useBaseComponent("ColumnLayout", {
    props: { borders, columns, disableGutters, minColumnWidth: props2.minColumnWidth, variant }
  });
  const externalProps = getExternalProps(props2);
  return import_react252.default.createElement(ColumnLayout, Object.assign({ columns, variant, borders, disableGutters }, externalProps, baseComponentProps));
}
applyDisplayName(ColumnLayout2, "ColumnLayout");

// node_modules/@cloudscape-design/components/content-layout/index.js
var import_react256 = __toESM(require_react());

// node_modules/@cloudscape-design/components/content-layout/internal.js
var import_react255 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-dynamic-overlap/index.js
var import_react253 = __toESM(require_react());
var import_react254 = __toESM(require_react());
function useDynamicOverlap(props2) {
  var _a;
  const disabled = (_a = props2 === null || props2 === void 0 ? void 0 : props2.disabled) !== null && _a !== void 0 ? _a : false;
  const setDynamicOverlapHeight = (0, import_react253.useContext)(DynamicOverlapContext);
  const overlapElementRef = (0, import_react254.useRef)(null);
  const getElement = (0, import_react254.useCallback)(() => overlapElementRef.current, [overlapElementRef]);
  const updateState = (0, import_react254.useCallback)((entry) => {
    if (!disabled) {
      setDynamicOverlapHeight(entry.contentBoxHeight);
    }
  }, [disabled, setDynamicOverlapHeight]);
  useResizeObserver(getElement, updateState);
  (0, import_react253.useLayoutEffect)(function handleDynamicOverlapHeight() {
    return () => {
      if (!disabled) {
        setDynamicOverlapHeight(0);
      }
    };
  }, [disabled, setDynamicOverlapHeight]);
  return overlapElementRef;
}

// node_modules/@cloudscape-design/components/content-layout/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/content-layout/styles.scoped.css";
var styles_css_default99 = {
  "layout": "awsui_layout_5gtk3_lpv1b_145",
  "background": "awsui_background_5gtk3_lpv1b_159",
  "is-overlap-disabled": "awsui_is-overlap-disabled_5gtk3_lpv1b_164",
  "header-background": "awsui_header-background_5gtk3_lpv1b_167",
  "notifications": "awsui_notifications_5gtk3_lpv1b_171",
  "breadcrumbs": "awsui_breadcrumbs_5gtk3_lpv1b_176",
  "default-padding": "awsui_default-padding_5gtk3_lpv1b_181",
  "header-wrapper": "awsui_header-wrapper_5gtk3_lpv1b_185",
  "with-divider": "awsui_with-divider_5gtk3_lpv1b_190",
  "content": "awsui_content_5gtk3_lpv1b_193",
  "has-header": "awsui_has-header_5gtk3_lpv1b_197",
  "is-visual-refresh": "awsui_is-visual-refresh_5gtk3_lpv1b_204",
  "has-default-background": "awsui_has-default-background_5gtk3_lpv1b_204",
  "has-notifications": "awsui_has-notifications_5gtk3_lpv1b_208"
};

// node_modules/@cloudscape-design/components/content-layout/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/content-layout/test-classes/styles.scoped.css";
var styles_css_default100 = {
  "header": "awsui_header_64tge_1scxg_5",
  "secondary-header": "awsui_secondary-header_64tge_1scxg_9",
  "notifications": "awsui_notifications_64tge_1scxg_13",
  "breadcrumbs": "awsui_breadcrumbs_64tge_1scxg_17"
};

// node_modules/@cloudscape-design/components/content-layout/internal.js
var halfGeckoMaxCssLength = ((1 << 30) - 1) / 120;
function InternalContentLayout(_a) {
  var { children, disableOverlap, header, headerVariant = "default", headerBackgroundStyle, __internalRootRef, maxContentWidth = Number.MAX_VALUE, breadcrumbs, notifications, defaultPadding: defaultPadding2, secondaryHeader } = _a, rest = __rest(_a, ["children", "disableOverlap", "header", "headerVariant", "headerBackgroundStyle", "__internalRootRef", "maxContentWidth", "breadcrumbs", "notifications", "defaultPadding", "secondaryHeader"]);
  const mainRef = (0, import_react255.useRef)(null);
  const mergedRef = useMergeRefs(mainRef, __internalRootRef);
  const baseProps = getBaseProps(rest);
  const isVisualRefresh = useVisualRefresh();
  const mode = useCurrentMode(mainRef);
  const overlapElement = useDynamicOverlap();
  const isOverlapDisabled = !children || disableOverlap;
  const contentHeaderClassName = headerVariant === "high-contrast" && isVisualRefresh ? highContrastHeaderClassName : "";
  return import_react255.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default99.layout, {
      [styles_css_default99["is-overlap-disabled"]]: isOverlapDisabled,
      [styles_css_default99["is-visual-refresh"]]: isVisualRefresh,
      [styles_css_default99["has-header"]]: !!header,
      [styles_css_default99["default-padding"]]: !!defaultPadding2,
      [styles_css_default99["has-notifications"]]: !!notifications
    }), style: {
      [custom_css_properties_default.contentLayoutMaxContentWidth]: maxContentWidth < Number.MAX_VALUE ? `${maxContentWidth}px` : `${halfGeckoMaxCssLength}px`
    }, ref: mergedRef }),
    import_react255.default.createElement("div", { className: clsx_m_default(styles_css_default99.background, { [styles_css_default99["has-default-background"]]: !headerBackgroundStyle }, contentHeaderClassName), ref: overlapElement }, headerBackgroundStyle && import_react255.default.createElement("div", { className: styles_css_default99["header-background"], style: {
      background: typeof headerBackgroundStyle === "function" ? headerBackgroundStyle(mode) : headerBackgroundStyle
    } })),
    notifications && import_react255.default.createElement("div", { className: clsx_m_default(styles_css_default99.notifications, styles_css_default100.notifications, contentHeaderClassName) }, notifications),
    breadcrumbs && import_react255.default.createElement("div", { className: clsx_m_default(styles_css_default99.breadcrumbs, styles_css_default100.breadcrumbs, contentHeaderClassName) }, breadcrumbs),
    header && !secondaryHeader && import_react255.default.createElement("div", { className: clsx_m_default(styles_css_default99["header-wrapper"], styles_css_default100.header, contentHeaderClassName, {
      [styles_css_default99["with-divider"]]: headerVariant === "divider"
    }) }, header),
    header && secondaryHeader && import_react255.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default99["header-wrapper"], {
        [styles_css_default99["with-divider"]]: headerVariant === "divider"
      }) },
      import_react255.default.createElement(
        internal_default5,
        { gridDefinition: [{ colspan: { default: 12, xs: 9 } }, { colspan: { default: 12, xs: 3 } }] },
        import_react255.default.createElement("div", { className: clsx_m_default(styles_css_default100.header, contentHeaderClassName) }, header),
        import_react255.default.createElement("div", { className: styles_css_default100["secondary-header"] }, secondaryHeader)
      )
    ),
    import_react255.default.createElement("div", { className: clsx_m_default(styles_css_default99.content, {
      [styles_css_default99["with-divider"]]: headerVariant === "divider"
    }) }, children)
  );
}

// node_modules/@cloudscape-design/components/content-layout/index.js
function ContentLayout(props2) {
  const baseComponentProps = useBaseComponent("ContentLayout", {
    props: { disableOverlap: props2.disableOverlap }
  });
  return import_react256.default.createElement(InternalContentLayout, Object.assign({}, props2, baseComponentProps));
}
applyDisplayName(ContentLayout, "ContentLayout");

// node_modules/@cloudscape-design/components/copy-to-clipboard/index.js
var import_react259 = __toESM(require_react());

// node_modules/@cloudscape-design/components/copy-to-clipboard/internal.js
var import_react258 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/internal.js
var import_react257 = __toESM(require_react());
var internal_default21 = import_react257.default.forwardRef(InternalPopover);
function InternalPopover(_a, ref) {
  var { position = "right", size = "medium", fixedWidth = false, triggerType = "text", dismissButton: dismissButton3 = true, children, header, content, triggerAriaLabel, wrapTriggerText = true, isInline = false, renderWithPortal = false, __onOpen, __internalRootRef = null, __closeAnalyticsAction } = _a, restProps = __rest(_a, ["position", "size", "fixedWidth", "triggerType", "dismissButton", "children", "header", "content", "triggerAriaLabel", "wrapTriggerText", "isInline", "renderWithPortal", "__onOpen", "__internalRootRef", "__closeAnalyticsAction"]);
  const baseProps = getBaseProps(restProps);
  const triggerRef = (0, import_react257.useRef)(null);
  const popoverRef = (0, import_react257.useRef)(null);
  const clickFrameId = (0, import_react257.useRef)(null);
  const i18n = useInternalI18n("popover");
  const dismissAriaLabel = i18n("dismissAriaLabel", restProps.dismissAriaLabel);
  const [visible, setVisible] = (0, import_react257.useState)(false);
  const focusTrigger = (0, import_react257.useCallback)(() => {
    var _a2, _b;
    if (["text", "text-inline"].includes(triggerType)) {
      (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    } else if (triggerRef.current) {
      (_b = getFirstFocusable(triggerRef.current)) === null || _b === void 0 ? void 0 : _b.focus();
    }
  }, [triggerType]);
  const onTriggerClick = (0, import_react257.useCallback)(() => {
    fireNonCancelableEvent(__onOpen);
    setVisible(true);
  }, [__onOpen]);
  const onDismiss = (0, import_react257.useCallback)(() => {
    setVisible(false);
    focusTrigger();
  }, [focusTrigger]);
  const onTriggerKeyDown = (0, import_react257.useCallback)((event) => {
    const isEscapeKey = event.keyCode === KeyCode.escape;
    const isTabKey = event.keyCode === KeyCode.tab;
    if (isEscapeKey && visible) {
      event.stopPropagation();
    }
    if (isTabKey || isEscapeKey) {
      setVisible(false);
    }
  }, [visible]);
  (0, import_react257.useImperativeHandle)(ref, () => ({
    dismiss: () => {
      setVisible(false);
    },
    focus: () => {
      setVisible(false);
      focusTrigger();
    }
  }));
  (0, import_react257.useEffect)(() => {
    if (!triggerRef.current) {
      return;
    }
    const document2 = triggerRef.current.ownerDocument;
    const onDocumentClick = () => {
      if (clickFrameId.current === null) {
        setVisible(false);
      }
    };
    document2.addEventListener("mousedown", onDocumentClick);
    return () => {
      document2.removeEventListener("mousedown", onDocumentClick);
    };
  }, []);
  const popoverClasses = usePortalModeClasses(triggerRef);
  const triggerProps = {
    // https://github.com/microsoft/TypeScript/issues/36659
    ref: triggerRef,
    onClick: onTriggerClick,
    onKeyDown: onTriggerKeyDown,
    className: clsx_m_default(styles_css_default.trigger, styles_css_default[`trigger-type-${triggerType}`])
  };
  const { tabIndex: triggerTabIndex } = useSingleTabStopNavigation(triggerRef);
  const referrerId = useUniqueId();
  const popoverContent = import_react257.default.createElement(
    "div",
    { "aria-live": dismissButton3 ? void 0 : "polite", "aria-atomic": dismissButton3 ? void 0 : true, className: clsx_m_default(popoverClasses, !renderWithPortal && styles_css_default["popover-inline-content"]), "data-awsui-referrer-id": referrerId },
    import_react257.default.createElement(
      PopoverContainer,
      { size, fixedWidth, position, trackRef: triggerRef, arrow: (position2) => import_react257.default.createElement(arrow_default, { position: position2 }), renderWithPortal, zIndex: renderWithPortal ? 7e3 : void 0 },
      import_react257.default.createElement(
        LinkDefaultVariantContext.Provider,
        { value: { defaultVariant: "primary" } },
        import_react257.default.createElement(PopoverBody, { dismissButton: dismissButton3, dismissAriaLabel, header, onDismiss, overflowVisible: "both", closeAnalyticsAction: __closeAnalyticsAction }, content)
      )
    )
  );
  const mergedRef = useMergeRefs(popoverRef, __internalRootRef);
  return import_react257.default.createElement(
    "span",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default.root, baseProps.className, triggerType === "filtering-token" && styles_css_default["root-filtering-token"], isInline && styles_css_default["no-wrap"]), ref: mergedRef, onMouseDown: () => {
      clickFrameId.current = requestAnimationFrame(() => {
        clickFrameId.current = null;
      });
    } }),
    ["text", "text-inline"].includes(triggerType) ? import_react257.default.createElement("button", Object.assign({}, triggerProps, { className: clsx_m_default(triggerProps.className, wrapTriggerText === false && styles_css_default["overflow-ellipsis"]), tabIndex: triggerTabIndex, type: "button", "aria-haspopup": "dialog", id: referrerId, "aria-label": triggerAriaLabel }), children) : import_react257.default.createElement("span", Object.assign({}, triggerProps, { id: referrerId }), children),
    visible && import_react257.default.createElement(reset_contexts_for_modal_default, null, renderWithPortal ? import_react257.default.createElement(Portal, null, popoverContent) : popoverContent)
  );
}

// node_modules/@cloudscape-design/components/copy-to-clipboard/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/copy-to-clipboard/styles.scoped.css";
var styles_css_default101 = {
  "root": "awsui_root_5a145_19zbi_9",
  "inline-container": "awsui_inline-container_5a145_19zbi_13",
  "inline-container-trigger": "awsui_inline-container-trigger_5a145_19zbi_16"
};

// node_modules/@cloudscape-design/components/copy-to-clipboard/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/copy-to-clipboard/test-classes/styles.scoped.css";
var styles_css_default102 = {
  "root": "awsui_root_ljpwc_30z5b_5",
  "text-to-copy": "awsui_text-to-copy_ljpwc_30z5b_9",
  "text-to-display": "awsui_text-to-display_ljpwc_30z5b_13"
};

// node_modules/@cloudscape-design/components/copy-to-clipboard/internal.js
function InternalCopyToClipboard(_a) {
  var { variant = "button", copyButtonAriaLabel, copyButtonText, copySuccessText, copyErrorText, textToCopy, textToDisplay, popoverRenderWithPortal, disabled, disabledReason, __internalRootRef = null } = _a, restProps = __rest(_a, ["variant", "copyButtonAriaLabel", "copyButtonText", "copySuccessText", "copyErrorText", "textToCopy", "textToDisplay", "popoverRenderWithPortal", "disabled", "disabledReason", "__internalRootRef"]);
  const [status, setStatus] = (0, import_react258.useState)("pending");
  const [statusText, setStatusText] = (0, import_react258.useState)("");
  const baseProps = getBaseProps(restProps);
  const onClick = () => {
    if (!navigator.clipboard) {
      setStatus("error");
      setStatusText(copyErrorText);
      return;
    }
    setStatus("pending");
    setStatusText("");
    navigator.clipboard.writeText(textToCopy).then(() => {
      setStatus("success");
      setStatusText(copySuccessText);
    }).catch(() => {
      setStatus("error");
      setStatusText(copyErrorText);
    });
  };
  const triggerVariant = {
    button: "normal",
    icon: "icon",
    inline: "inline-icon"
  }[variant];
  const isInline = variant === "inline";
  const button = import_react258.default.createElement(internal_default3, { ariaLabel: copyButtonAriaLabel !== null && copyButtonAriaLabel !== void 0 ? copyButtonAriaLabel : copyButtonText, iconName: "copy", variant: triggerVariant, wrapText: false, formAction: "none", disabled, disabledReason }, copyButtonText);
  const trigger = disabled ? button : import_react258.default.createElement(internal_default21, { isInline, size: "medium", position: "top", triggerType: "custom", dismissButton: false, renderWithPortal: popoverRenderWithPortal, content: import_react258.default.createElement(StatusIndicator, { type: status }, statusText), __onOpen: onClick }, button);
  return import_react258.default.createElement("span", Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default101.root, styles_css_default102.root) }), isInline ? import_react258.default.createElement(
    "span",
    { className: styles_css_default101["inline-container"] },
    import_react258.default.createElement("span", { className: styles_css_default101["inline-container-trigger"] }, trigger),
    import_react258.default.createElement("span", { className: clsx_m_default(styles_css_default102["text-to-display"], styles_css_default102["text-to-copy"]) }, textToDisplay !== null && textToDisplay !== void 0 ? textToDisplay : textToCopy)
  ) : trigger);
}

// node_modules/@cloudscape-design/components/copy-to-clipboard/index.js
function CopyToClipboard(_a) {
  var { variant = "button", popoverRenderWithPortal = false } = _a, restProps = __rest(_a, ["variant", "popoverRenderWithPortal"]);
  const baseProps = useBaseComponent("CopyToClipboard", {
    props: { variant }
  });
  const filteredProps = getExternalProps(restProps);
  return import_react259.default.createElement(InternalCopyToClipboard, Object.assign({ variant, popoverRenderWithPortal }, baseProps, filteredProps));
}
applyDisplayName(CopyToClipboard, "CopyToClipboard");

// node_modules/@cloudscape-design/components/date-input/index.js
var import_react262 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-input/internal.js
var import_react261 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/masked-input/index.js
var import_react260 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/masked-input/keyboard-handler.js
var backspaceHandler = (initialValue, format3, selectionStart, selectionEnd) => {
  const multiCharDelete = selectionStart !== selectionEnd;
  if (multiCharDelete) {
    const isCursorAtEnd = selectionEnd === initialValue.length;
    if (!isCursorAtEnd) {
      return format3.replaceDigitsWithZeroes(initialValue, selectionStart, selectionEnd);
    }
    return {
      value: initialValue.slice(0, selectionStart),
      position: selectionStart
    };
  }
  const isSeparator = format3.isSegmentStart(selectionStart);
  const atEnd = selectionStart === initialValue.length;
  if (!atEnd) {
    if (isSeparator) {
      return format3.deleteSeparator(initialValue, selectionStart);
    } else {
      return format3.deleteDigit(initialValue, selectionStart);
    }
  }
  if (isSeparator) {
    return {
      value: initialValue.slice(0, selectionStart - 2),
      position: selectionStart - 2
    };
  }
  return {
    value: initialValue.slice(0, selectionStart - 1),
    position: selectionStart - 1
  };
};
var keyHandler = (initialValue, key2, format3, selectionStart, selectionEnd) => {
  let value = initialValue;
  const position = selectionStart;
  if (selectionStart === value.length && value.length === format3.getMaxLength()) {
    return { value, position };
  }
  if (selectionStart !== value.length && selectionEnd === value.length) {
    const sliceEnd = format3.isCursorAtSeparator(selectionStart) ? selectionStart + 1 : selectionStart;
    value = initialValue.slice(0, sliceEnd);
  }
  if (format3.isCursorAtSeparator(position)) {
    return { value, position: position + 1 };
  }
  return format3.processKey(value, key2, position);
};
var enterHandler = (value, format3) => {
  if (!value) {
    return { value: "", position: 0 };
  }
  const autoCompletedValue = format3.autoComplete(value);
  const position = autoCompletedValue.length;
  return { value: autoCompletedValue, position };
};

// node_modules/@cloudscape-design/components/internal/components/masked-input/utils/keys.js
var isSpecialCommand = (keyCode) => {
  return keyCode > 7 && keyCode < 47 && keyCode !== KeyCode.space;
};
var isClipboardCommand = (ctrlKey, metaKey) => ctrlKey || metaKey;
var isCommand = (keyCode, ctrlKey, metaKey) => isSpecialCommand(keyCode) || isClipboardCommand(ctrlKey, metaKey);
var isDigit = (char) => !isNaN(parseInt(char, 10));

// node_modules/@cloudscape-design/components/internal/components/masked-input/use-mask.js
var onAutoComplete = (value, onChange, maskFormat) => {
  if (!value) {
    return;
  }
  const autoCompletedValue = maskFormat.autoComplete(value);
  if (autoCompletedValue !== value) {
    onChange(autoCompletedValue);
  }
};
var preventDefault2 = (event, result) => result && event.preventDefault();
var useMask = ({ value = "", onBlur, onChange, onKeyDown, format: format3, inputRef, autofix = false, disableAutocompleteOnBlur = false, setPosition }) => {
  if (!format3.isValid(value)) {
    warnOnce("useMask", `Invalid string "${value}" provided`);
  }
  const onMaskChange = (updatedValue) => {
    const autofixedUpdatedValue = autofix ? format3.correctMinMaxValues(updatedValue) : updatedValue;
    if (autofixedUpdatedValue === value || !format3.isValid(autofixedUpdatedValue)) {
      return;
    }
    onChange(autofixedUpdatedValue);
  };
  const initialValue = autofix ? format3.correctMinMaxValues(value) : value;
  const maskedValue = format3.getValidValue(initialValue);
  return {
    value: maskedValue,
    onKeyDown: (event) => {
      var _a, _b;
      const selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;
      const selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;
      let result;
      const { keyCode, key: key2, ctrlKey, metaKey } = event.detail;
      if (isDigit(key2) || format3.isSeparator(key2)) {
        result = keyHandler(maskedValue, key2, format3, selectionStart, selectionEnd);
        preventDefault2(event, result);
      } else if (keyCode === KeyCode.backspace) {
        result = backspaceHandler(maskedValue, format3, selectionStart, selectionEnd);
        preventDefault2(event, result);
      } else if (keyCode === KeyCode.enter) {
        result = enterHandler(maskedValue, format3);
      } else if (!isCommand(keyCode, ctrlKey, metaKey)) {
        event.preventDefault();
      }
      if (result) {
        const { value: value2, position } = result;
        onMaskChange(value2);
        setPosition(position);
      }
      onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);
    },
    onChange: ({ detail }) => onMaskChange(detail.value),
    onBlur: () => {
      if (!disableAutocompleteOnBlur) {
        onAutoComplete(maskedValue, onChange, format3);
      }
      onBlur === null || onBlur === void 0 ? void 0 : onBlur();
    },
    onPaste: (event) => {
      var _a, _b;
      const text = (event.clipboardData || window.clipboardData).getData("text");
      const selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;
      const selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;
      const formattedText = format3.formatPastedText(text, maskedValue, selectionStart, selectionEnd);
      onMaskChange(formattedText);
    }
  };
};
var use_mask_default = useMask;

// node_modules/@cloudscape-design/components/internal/components/masked-input/utils/strings.js
var insertAt = (text, toInsert, start, end = start) => text.slice(0, start) + toInsert + text.slice(end);

// node_modules/@cloudscape-design/components/internal/components/masked-input/utils/mask-format.js
var MaskFormat = class {
  constructor({ separator, inputSeparators = [], segments }) {
    this.positionFormats = /* @__PURE__ */ new Map();
    this.segments = [];
    this.separator = separator;
    this.inputSeparators = [...inputSeparators, separator];
    this.enrichSegmentDefinitions(segments);
  }
  tryAppendSeparator(value) {
    const withSeparator = `${value}${this.separator}`;
    return this.isValid(withSeparator) ? withSeparator : value;
  }
  isSeparator(key2) {
    return this.inputSeparators.indexOf(key2) !== -1;
  }
  isValid(value) {
    const inputSegments = value.split(this.separator);
    if (inputSegments.length > this.segments.length) {
      return false;
    }
    return inputSegments.every((segmentValue, i2) => {
      const segment = this.segments[i2];
      if (segmentValue === "") {
        if (i2 === inputSegments.length - 1) {
          return true;
        } else {
          return false;
        }
      }
      if (!segmentValue.match(/^\d+$/)) {
        return false;
      }
      if (segmentValue.length < segment.length && i2 !== inputSegments.length - 1) {
        return false;
      }
      const intValue = parseInt(segmentValue, 10);
      if (segmentValue.length > segment.length) {
        return false;
      }
      if (intValue < segment.min || intValue > segment.max(value)) {
        if (i2 === inputSegments.length - 1 && segmentValue.length < segment.length) {
          return true;
        }
        return false;
      }
      return true;
    });
  }
  getValidValue(value) {
    let validValue = value;
    do {
      if (this.isValid(validValue)) {
        return this.tryAppendSeparator(validValue);
      }
      validValue = validValue.substring(0, validValue.length - 1);
    } while (validValue.length > 0);
    return "";
  }
  autoComplete(value) {
    const [lastSegmentValue, ...completeSegmentValues] = value.split(this.separator).reverse();
    const lastSegment = this.segments[completeSegmentValues.length];
    const paddedLastSegmentValue = this.padWithDefaultValue(lastSegmentValue, lastSegment);
    const partial = [...completeSegmentValues.reverse(), paddedLastSegmentValue];
    while (partial.length < this.segments.length) {
      const nextSegment = this.segments[partial.length];
      const segmentValue = this.padWithDefaultValue("", nextSegment);
      partial.push(segmentValue);
    }
    value = partial.join(this.separator);
    value = this.correctMinMaxValues(value);
    return value;
  }
  getSegmentValueWithAddition(position, value, enteredDigit) {
    const segment = this.positionFormats.get(position);
    const segmentValue = value.substr(segment.start, segment.length);
    const segmentPosition = position - segment.start;
    const newValue = insertAt(segmentValue, enteredDigit, segmentPosition, segmentPosition + 1);
    return parseInt(newValue, 10);
  }
  replaceDigitsWithZeroes(value, cursorStart, cursorEnd) {
    const position = this.isCursorAtSeparator(cursorStart) ? cursorStart + 1 : cursorStart;
    if (this.isCursorAtSeparator(cursorStart)) {
      cursorStart++;
    }
    if (!this.isSegmentStart(cursorStart)) {
      const segment = this.positionFormats.get(cursorStart);
      value = insertAt(value, padLeftZeros("", segment.end - cursorStart), cursorStart, segment.end);
      cursorStart = segment.end + 1;
    }
    let currentSegment;
    while (cursorStart < cursorEnd && (currentSegment = this.positionFormats.get(cursorStart + 1))) {
      const insertionEnd = Math.min(cursorEnd, currentSegment.end);
      value = insertAt(value, padLeftZeros("", insertionEnd - currentSegment.start), currentSegment.start, insertionEnd);
      cursorStart = insertionEnd + 1;
    }
    value = this.correctMinMaxValues(value);
    return {
      value,
      position
    };
  }
  handleSeparatorInput(value, position) {
    if (position === value.length && !this.isSegmentStart(position)) {
      const segment = this.positionFormats.get(position);
      let segmentValue = value.substr(segment.start, segment.length);
      segmentValue = this.padWithDefaultValue(segmentValue, segment);
      value = insertAt(value, segmentValue, segment.start, segment.end);
      value = this.correctMinMaxValues(value);
      return {
        value,
        position: value.length
      };
    }
  }
  isCursorAtSeparator(position) {
    return 0 < position && position < this.getMaxLength() && this.positionFormats.get(position) === void 0;
  }
  isSegmentStart(position) {
    return position === 0 || this.isCursorAtSeparator(position - 1);
  }
  getSegmentMaxValue(value, position) {
    return this.positionFormats.get(position).max(value);
  }
  getSegmentMinValue(value, position) {
    return this.positionFormats.get(position).min;
  }
  getMaxLength() {
    const last = this.segments[this.segments.length - 1];
    return last.start + last.length;
  }
  deleteSeparator(value, position) {
    value = insertAt(value, "0", position - 2, position - 1);
    return {
      value: this.correctMinMaxValues(value),
      position: position - 2
    };
  }
  deleteDigit(value, position) {
    value = insertAt(value, "0", position - 1, position);
    const length = value.length;
    if (value.slice(length - 2) === "0:") {
      value = value.slice(0, length - 2);
    }
    return {
      value: this.correctMinMaxValues(value),
      position: position - 1
    };
  }
  correctMinMaxValues(value) {
    let segment = this.positionFormats.get(0);
    while (segment && value.length >= segment.end) {
      const segmentValue = parseInt(value.substr(segment.start, segment.length), 10);
      const segmentMax = segment.max(value);
      if (segmentValue < segment.min) {
        let toInsert = segment.min.toFixed();
        toInsert = padLeftZeros(toInsert, segment.length);
        value = insertAt(value, toInsert, segment.start, segment.end);
      }
      if (segmentValue > segmentMax) {
        value = insertAt(value, segmentMax.toFixed(), segment.start, segment.end);
      }
      segment = this.positionFormats.get(segment.end + 1);
    }
    return value.substr(0, this.segments[this.segments.length - 1].end);
  }
  formatPastedText(text, value, cursorStart, cursorEnd) {
    const keyArr = text.trim().split("");
    let position = cursorStart;
    let formattedValue = value;
    if (cursorEnd > cursorStart && cursorEnd === value.length) {
      formattedValue = value.slice(0, cursorStart);
    }
    for (const key2 of keyArr) {
      if (position >= this.getMaxLength()) {
        break;
      }
      const result = this.processKey(formattedValue, key2, position);
      formattedValue = result.value;
      position = result.position;
    }
    return this.tryAppendSeparator(formattedValue);
  }
  processKey(initialValue, key2, initialPosition) {
    let value = initialValue;
    let position = initialPosition;
    if (this.isSeparator(key2)) {
      const result = this.handleSeparatorInput(value, position);
      if (result) {
        value = result.value;
        position = result.position;
      }
    } else {
      const isCursorAtEnd = position === value.length;
      const segmentValue = this.getSegmentValueWithAddition(position, value, key2);
      const segmentMaxValue = this.getSegmentMaxValue(value, position);
      const segmentMinValue = this.getSegmentMinValue(value, position);
      const firstDigitGreater = parseInt(key2, 10) > parseInt(segmentMaxValue.toFixed()[0], 10);
      const isValidPosition = isCursorAtEnd || segmentValue.toFixed().length === 1;
      const exceedsMaxAtSegmentStart = this.isSegmentStart(position) && isValidPosition && firstDigitGreater;
      if (exceedsMaxAtSegmentStart) {
        value = insertAt(value, `0${key2}`, position, position + 2);
        position += 2;
      } else if (segmentValue > segmentMaxValue && this.isSegmentStart(position)) {
        value = insertAt(value, segmentMaxValue.toFixed(), position, position + segmentMaxValue.toFixed().length);
        position += segmentMaxValue.toFixed().length;
      } else if (segmentValue > segmentMaxValue) {
        value = insertAt(value, segmentMaxValue.toFixed(), position - 1, position + 1);
        position += 1;
      } else if (segmentValue < segmentMinValue && !this.isSegmentStart(position)) {
        value = insertAt(value, segmentMinValue.toFixed(), position, position + 1);
        position += 1;
      } else {
        value = insertAt(value, key2, position, position + 1);
        position += 1;
      }
    }
    value = this.tryAppendSeparator(value);
    if (this.isCursorAtSeparator(position)) {
      position++;
    }
    return { value, position };
  }
  padWithDefaultValue(segmentValue, segment) {
    let defaultValue2 = (segment.default || segment.min).toFixed();
    defaultValue2 = padLeftZeros(defaultValue2, segment.length);
    return insertAt(defaultValue2, segmentValue, segment.length - segmentValue.length, segment.length);
  }
  enrichSegmentDefinitions(segments) {
    this.positionFormats = /* @__PURE__ */ new Map();
    this.segments = [];
    let position = 0;
    for (const segment of segments) {
      const max3 = segment.max;
      const fullSegment = Object.assign(Object.assign({}, segment), { max: typeof max3 === "number" ? () => max3 : max3, start: position, end: position + segment.length });
      this.segments.push(fullSegment);
      for (let j = 0; j < fullSegment.length; j++) {
        this.positionFormats.set(position++, fullSegment);
      }
      position++;
    }
  }
};
var mask_format_default = MaskFormat;

// node_modules/@cloudscape-design/components/internal/components/masked-input/index.js
var MaskedInput = import_react260.default.forwardRef((_a, ref) => {
  var { value, onBlur, onChange, onKeyDown, mask, autofix = false, disableAutocompleteOnBlur = false } = _a, rest = __rest(_a, ["value", "onBlur", "onChange", "onKeyDown", "mask", "autofix", "disableAutocompleteOnBlur"]);
  const baseProps = getBaseProps(rest);
  const formFieldContext = useFormFieldContext(rest);
  const inputRef = import_react260.default.useRef(null);
  const [cursorPosition, setCursorPosition] = (0, import_react260.useState)(null);
  (0, import_react260.useLayoutEffect)(() => {
    var _a2;
    if (cursorPosition !== null) {
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.setSelectionRange(cursorPosition, cursorPosition);
    }
  }, [cursorPosition, inputRef]);
  const _b = use_mask_default({
    format: new mask_format_default(mask),
    value,
    inputRef,
    autofix,
    disableAutocompleteOnBlur,
    onChange: (value2) => !rest.readOnly && fireNonCancelableEvent(onChange, { value: value2 }),
    onKeyDown: (event) => !rest.readOnly && onKeyDown && fireCancelableEvent(onKeyDown, event.detail, event),
    onBlur: () => fireNonCancelableEvent(onBlur),
    setPosition: setCursorPosition
  }), { onPaste } = _b, maskProps = __rest(_b, ["onPaste"]);
  const inputProps = Object.assign(Object.assign(Object.assign(Object.assign({}, rest), baseProps), formFieldContext), maskProps);
  const mergedRef = useMergeRefs(ref, inputRef);
  return import_react260.default.createElement(internal_default11, Object.assign({}, inputProps, { ref: mergedRef, __nativeAttributes: {
    onPaste
  } }));
});
var masked_input_default = MaskedInput;

// node_modules/@cloudscape-design/components/date-input/utils.js
function daysMax(value) {
  const baseDate = displayToIso(value).substring(0, 7);
  return getDaysInMonth(parseDate2(baseDate));
}
var yearMask = { min: 0, max: 9999, default: 2e3, length: 4 };
var monthMask = { min: 1, max: 12, length: 2 };
var dayMask = { min: 1, max: daysMax, length: 2 };
var generateMaskArgs = ({
  granularity = "day",
  /**
   * There are only two options, 'iso' and 'slashed' which is our current default format. If more formats are entered
   * we should take the formatting type rather than teh boolean when we make an update
   */
  isIso = false
} = {}) => {
  return {
    separator: isIso ? "-" : "/",
    inputSeparators: [...isIso ? ["/"] : ["-"], ".", " "],
    segments: granularity === "month" ? [yearMask, monthMask] : [yearMask, monthMask, dayMask]
  };
};

// node_modules/@cloudscape-design/components/date-input/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/date-input/styles.scoped.css";
var styles_css_default103 = {
  "root": "awsui_root_yodkx_im8v7_5"
};

// node_modules/@cloudscape-design/components/date-input/internal.js
var InternalDateInput = import_react261.default.forwardRef((_a, ref) => {
  var { value, onChange, granularity, __internalRootRef = null } = _a, props2 = __rest(_a, ["value", "onChange", "granularity", "__internalRootRef"]);
  return import_react261.default.createElement(masked_input_default, Object.assign({ ref }, props2, { value: isoToDisplay(value || ""), onChange: (event) => fireNonCancelableEvent(onChange, { value: displayToIso(event.detail.value) }), className: clsx_m_default(styles_css_default103.root, props2.className), mask: generateMaskArgs({ granularity }), autofix: true, autoComplete: false, disableAutocompleteOnBlur: false, disableBrowserAutocorrect: true, __internalRootRef }));
});
var internal_default22 = InternalDateInput;

// node_modules/@cloudscape-design/components/date-input/index.js
var DateInput = import_react262.default.forwardRef((props2, ref) => {
  const baseComponentProps = useBaseComponent("DateInput", {
    props: { autoFocus: props2.autoFocus, readOnly: props2.readOnly }
  });
  return import_react262.default.createElement(internal_default22, Object.assign({}, props2, baseComponentProps, { ref }));
});
applyDisplayName(DateInput, "DateInput");
var date_input_default = DateInput;

// node_modules/@cloudscape-design/components/date-picker/index.js
var import_react264 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-focus-tracker.js
var import_react263 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/focus-tracker.js
var FocusTracker = class {
  constructor(node, { onFocusEnter, onFocusLeave }) {
    this.node = node;
    this.currentlyFocused = false;
    this.focusInListener = (event) => {
      const focusIsInside = nodeBelongs(this.node, event.target);
      if (!this.currentlyFocused && focusIsInside) {
        this.triggerFocus();
      }
    };
    this.focusOutListener = (event) => {
      const nextFocused = event.relatedTarget;
      const isNextFocusedInParent = !nodeBelongs(this.node, nextFocused);
      if (this.currentlyFocused && (nextFocused === null || isNextFocusedInParent)) {
        this.triggerBlur();
      }
    };
    this.onFocusEnter = onFocusEnter;
    this.onFocusLeave = onFocusLeave;
    this.controller = new AbortController();
  }
  initialize() {
    this.currentlyFocused = nodeBelongs(this.node, document.activeElement);
    document.addEventListener("focusin", this.focusInListener, { signal: this.controller.signal });
    document.addEventListener("focusout", this.focusOutListener, { signal: this.controller.signal });
  }
  destroy() {
    this.controller.abort();
  }
  triggerBlur() {
    this.currentlyFocused = false;
    this.onFocusLeave();
  }
  triggerFocus() {
    this.currentlyFocused = true;
    this.onFocusEnter();
  }
};

// node_modules/@cloudscape-design/components/internal/hooks/use-focus-tracker.js
var useFocusTracker = ({ rootRef, onBlur, onFocus }) => {
  const focusTracker = (0, import_react263.useRef)(null);
  (0, import_react263.useEffect)(() => {
    if (!rootRef.current) {
      return;
    }
    focusTracker.current = new FocusTracker(rootRef.current, {
      onFocusLeave: () => {
        fireNonCancelableEvent(onBlur);
      },
      onFocusEnter: () => {
        fireNonCancelableEvent(onFocus);
      }
    });
    focusTracker.current.initialize();
    return () => {
      var _a;
      (_a = focusTracker.current) === null || _a === void 0 ? void 0 : _a.destroy();
    };
  }, [rootRef, onBlur, onFocus]);
};

// node_modules/@cloudscape-design/components/date-picker/utils.js
function isValidFullDate({ date: date2, granularity }) {
  const regex = granularity === "month" ? /^\d{4}-\d{2}(-\d{2})?$/ : /^\d{4}-\d{2}-\d{2}$/;
  return !!date2.match(regex);
}
function getSelectedDateLabel({ date: date2, granularity, locale: locale3 }) {
  return granularity === "month" ? renderMonthAndYear(locale3, date2) : getDateLabel(locale3, date2);
}
function getBaseDateLabel({ date: date2, granularity, locale: locale3 }) {
  return granularity === "month" ? renderYear(locale3, date2) : renderMonthAndYear(locale3, date2);
}

// node_modules/@cloudscape-design/components/date-picker/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/date-picker/styles.scoped.css";
var styles_css_default104 = {
  "root": "awsui_root_145pa_1qi9j_145",
  "focus-lock": "awsui_focus-lock_145pa_1qi9j_177",
  "calendar": "awsui_calendar_145pa_1qi9j_181",
  "date-picker-container": "awsui_date-picker-container_145pa_1qi9j_197",
  "date-picker-trigger": "awsui_date-picker-trigger_145pa_1qi9j_202",
  "date-picker-input": "awsui_date-picker-input_145pa_1qi9j_206",
  "open-calendar-button": "awsui_open-calendar-button_145pa_1qi9j_211"
};

// node_modules/@cloudscape-design/components/date-picker/index.js
var DatePicker = import_react264.default.forwardRef((_a, ref) => {
  var _b, _c, _d;
  var { locale: locale3 = "", startOfWeek: startOfWeek2, isDateEnabled, dateDisabledReason, nextMonthAriaLabel, previousMonthAriaLabel, todayAriaLabel, i18nStrings, placeholder = "", value = "", readOnly = false, disabled = false, onBlur, autoFocus = false, onChange, onFocus, name, ariaLabel, ariaRequired, controlId, invalid, warning, openCalendarAriaLabel, expandToViewport, granularity = "day" } = _a, restProps = __rest(_a, ["locale", "startOfWeek", "isDateEnabled", "dateDisabledReason", "nextMonthAriaLabel", "previousMonthAriaLabel", "todayAriaLabel", "i18nStrings", "placeholder", "value", "readOnly", "disabled", "onBlur", "autoFocus", "onChange", "onFocus", "name", "ariaLabel", "ariaRequired", "controlId", "invalid", "warning", "openCalendarAriaLabel", "expandToViewport", "granularity"]);
  const { __internalRootRef } = useBaseComponent("DatePicker", {
    props: { autoFocus, expandToViewport, granularity, readOnly },
    metadata: { hasDisabledReasons: Boolean(dateDisabledReason) }
  });
  checkControlled("DatePicker", "value", value, "onChange", onChange);
  const contextLocale = useLocale();
  const normalizedLocale = normalizeLocale("DatePicker", locale3 || contextLocale);
  const baseProps = getBaseProps(restProps);
  const [isDropDownOpen, setIsDropDownOpen] = (0, import_react264.useState)(false);
  const { ariaLabelledby, ariaDescribedby } = useFormFieldContext(restProps);
  const internalInputRef = (0, import_react264.useRef)(null);
  const buttonRef = (0, import_react264.useRef)(null);
  useForwardFocus(ref, internalInputRef);
  const rootRef = (0, import_react264.useRef)(null);
  const dropdownId = useUniqueId("calender");
  const calendarDescriptionId = useUniqueId("calendar-description-");
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  useFocusTracker({ rootRef, onBlur, onFocus });
  const onDropdownCloseHandler = (0, import_react264.useCallback)(() => setIsDropDownOpen(false), [setIsDropDownOpen]);
  const onButtonClickHandler = () => {
    if (!isDropDownOpen) {
      setIsDropDownOpen(true);
    }
  };
  const onWrapperKeyDownHandler = (event) => {
    var _a2;
    if (event.keyCode === KeyCode.escape && isDropDownOpen) {
      event.stopPropagation();
      (_a2 = buttonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      setIsDropDownOpen(false);
    }
  };
  const onInputChangeHandler = (event) => {
    fireNonCancelableEvent(onChange, { value: event.detail.value });
  };
  const onInputBlurHandler = () => {
    if (!isDropDownOpen) {
      setIsDropDownOpen(false);
    }
  };
  const parsedValue = value && value.length >= 4 ? parseDate2(value) : null;
  const baseDate = parsedValue || /* @__PURE__ */ new Date();
  const hasFullValue = isValidFullDate({ date: value, granularity });
  const buttonAriaLabel = openCalendarAriaLabel && openCalendarAriaLabel(hasFullValue && parsedValue ? getSelectedDateLabel({ date: parsedValue, granularity, locale: normalizedLocale }) : null);
  const trigger = import_react264.default.createElement(
    "div",
    { className: styles_css_default104["date-picker-trigger"] },
    import_react264.default.createElement(
      "div",
      { className: styles_css_default104["date-picker-input"] },
      import_react264.default.createElement(internal_default22, { name, invalid, warning, controlId, ariaLabelledby, ariaDescribedby, ariaLabel, ariaRequired, value, disabled, readOnly, onChange: onInputChangeHandler, onBlur: onInputBlurHandler, placeholder, ref: internalInputRef, autoFocus, onFocus: onDropdownCloseHandler, granularity })
    ),
    import_react264.default.createElement(
      "div",
      null,
      import_react264.default.createElement(InternalButton, { iconName: "calendar", className: styles_css_default104["open-calendar-button"], onClick: onButtonClickHandler, ref: buttonRef, ariaLabel: buttonAriaLabel, disabled: disabled || readOnly, formAction: "none" })
    )
  );
  baseProps.className = clsx_m_default(baseProps.className, styles_css_default104.root, styles_css_default104["date-picker-container"]);
  return import_react264.default.createElement("div", Object.assign({}, baseProps, { ref: mergedRef, onKeyDown: !disabled && !readOnly ? onWrapperKeyDownHandler : void 0 }), disabled || readOnly ? trigger : import_react264.default.createElement(dropdown_default, { stretchWidth: true, stretchHeight: true, open: isDropDownOpen, onDropdownClose: onDropdownCloseHandler, trigger, expandToViewport, scrollable: false, dropdownId }, isDropDownOpen && import_react264.default.createElement(
    focus_lock_default,
    { className: styles_css_default104["focus-lock"], autoFocus: true },
    import_react264.default.createElement(
      "div",
      { tabIndex: 0, className: styles_css_default104.calendar, role: "dialog" },
      import_react264.default.createElement(Calendar, { value, onChange: (e3) => {
        var _a2;
        fireNonCancelableEvent(onChange, e3.detail);
        (_a2 = buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
        setIsDropDownOpen(false);
      }, locale: normalizedLocale, startOfWeek: startOfWeek2, ariaDescribedby: calendarDescriptionId, ariaLabel, ariaLabelledby, granularity, isDateEnabled, dateDisabledReason, i18nStrings: Object.assign(Object.assign({}, i18nStrings), { todayAriaLabel: (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.todayAriaLabel) !== null && _b !== void 0 ? _b : todayAriaLabel, nextMonthAriaLabel: (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextMonthAriaLabel) !== null && _c !== void 0 ? _c : nextMonthAriaLabel, previousMonthAriaLabel: (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousMonthAriaLabel) !== null && _d !== void 0 ? _d : previousMonthAriaLabel }) }),
      import_react264.default.createElement(internal_default2, { id: calendarDescriptionId, hidden: true, tagName: "span" }, getBaseDateLabel({ date: baseDate, granularity, locale: normalizedLocale }))
    )
  )));
});
applyDisplayName(DatePicker, "DatePicker");
var date_picker_default = DatePicker;

// node_modules/@cloudscape-design/components/date-range-picker/index.js
var import_react279 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/dropdown.js
var import_react278 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/index.js
var import_react272 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/index.js
var import_react267 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/has-value.js
function hasValue(value) {
  return value !== null && value !== void 0;
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/utils.js
function findDateToFocus(selected, baseDate, isDateEnabled) {
  if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {
    return selected;
  }
  const today = /* @__PURE__ */ new Date();
  if (isDateEnabled(today) && isSameMonth(today, baseDate)) {
    return today;
  }
  if (isDateEnabled(baseDate)) {
    return baseDate;
  }
  return null;
}
function findMonthToFocus(selected, baseDate, isMonthEnabled) {
  if (selected && isMonthEnabled(selected) && isSameYear(selected, baseDate)) {
    return selected;
  }
  const today = /* @__PURE__ */ new Date();
  if (isMonthEnabled(today) && isSameYear(today, baseDate)) {
    return today;
  }
  if (isMonthEnabled(baseDate)) {
    return baseDate;
  }
  return null;
}
function findMonthToDisplay(value, isSingleGrid) {
  if (value.start.date) {
    const startDate = parseDate2(value.start.date);
    if (isSingleGrid) {
      return startOfMonth(startDate);
    }
    return startOfMonth(addMonths(startDate, 1));
  }
  if (value.end.date) {
    return startOfMonth(parseDate2(value.end.date));
  }
  return startOfMonth(Date.now());
}
function findYearToDisplay(value, isSingleGrid) {
  if (value.start.date) {
    const startDate = parseDate2(value.start.date);
    if (isSingleGrid) {
      return startOfYear(startDate);
    }
    return startOfYear(addYears(startDate, 1));
  }
  if (value.end.date) {
    return startOfYear(parseDate2(value.end.date));
  }
  return startOfYear(Date.now());
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/grid.js
var import_react266 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/grid-cell.js
var import_react265 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/date-range-picker/test-classes/styles.scoped.css";
var styles_css_default105 = {
  "root": "awsui_root_1afkv_i99li_5",
  "dropdown": "awsui_dropdown_1afkv_i99li_6",
  "label": "awsui_label_1afkv_i99li_7",
  "relative-range-radio-group": "awsui_relative-range-radio-group_1afkv_i99li_8",
  "custom-range-duration-input": "awsui_custom-range-duration-input_1afkv_i99li_9",
  "custom-range-unit-select": "awsui_custom-range-unit-select_1afkv_i99li_10",
  "mode-switch": "awsui_mode-switch_1afkv_i99li_11",
  "first-grid": "awsui_first-grid_1afkv_i99li_12",
  "second-grid": "awsui_second-grid_1afkv_i99li_13",
  "calendar-header": "awsui_calendar-header_1afkv_i99li_14",
  "calendar-next-page-btn": "awsui_calendar-next-page-btn_1afkv_i99li_15",
  "calendar-prev-page-btn": "awsui_calendar-prev-page-btn_1afkv_i99li_16",
  "calendar-next-month-btn": "awsui_calendar-next-month-btn_1afkv_i99li_17",
  "calendar-prev-month-btn": "awsui_calendar-prev-month-btn_1afkv_i99li_18",
  "calendar-aria-live": "awsui_calendar-aria-live_1afkv_i99li_19",
  "calendar-date": "awsui_calendar-date_1afkv_i99li_20",
  "calendar-week": "awsui_calendar-week_1afkv_i99li_21",
  "calendar-month": "awsui_calendar-month_1afkv_i99li_22",
  "calendar-quarter": "awsui_calendar-quarter_1afkv_i99li_23",
  "today": "awsui_today_1afkv_i99li_24",
  "this-month": "awsui_this-month_1afkv_i99li_25",
  "day-header": "awsui_day-header_1afkv_i99li_26",
  "start-date": "awsui_start-date_1afkv_i99li_27",
  "end-date": "awsui_end-date_1afkv_i99li_28",
  "start-time-input": "awsui_start-time-input_1afkv_i99li_29",
  "end-time-input": "awsui_end-time-input_1afkv_i99li_30",
  "start-date-input": "awsui_start-date-input_1afkv_i99li_31",
  "end-date-input": "awsui_end-date-input_1afkv_i99li_32",
  "start-month-input": "awsui_start-month-input_1afkv_i99li_33",
  "end-month-input": "awsui_end-month-input_1afkv_i99li_34",
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_1afkv_i99li_35",
  "validation-section": "awsui_validation-section_1afkv_i99li_36",
  "validation-error": "awsui_validation-error_1afkv_i99li_37",
  "clear-button": "awsui_clear-button_1afkv_i99li_38",
  "apply-button": "awsui_apply-button_1afkv_i99li_39",
  "cancel-button": "awsui_cancel-button_1afkv_i99li_40"
};

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/grid-cell.js
var GridCell2 = (0, import_react265.forwardRef)((props2, focusedDateRef) => {
  const { disabledReason } = props2, rest = __rest(props2, ["disabledReason"]);
  const isDisabledWithReason = !!disabledReason;
  const { targetProps, descriptionEl } = useHiddenDescription(disabledReason);
  const ref = (0, import_react265.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react265.useState)(false);
  return import_react265.default.createElement(
    "td",
    Object.assign({ ref: useMergeRefs(focusedDateRef, ref) }, rest, isDisabledWithReason ? targetProps : {}, { onFocus: (event) => {
      if (rest.onFocus) {
        rest.onFocus(event);
      }
      if (isDisabledWithReason) {
        setShowTooltip(true);
      }
    }, onBlur: (event) => {
      if (rest.onBlur) {
        rest.onBlur(event);
      }
      if (isDisabledWithReason) {
        setShowTooltip(false);
      }
    }, onMouseEnter: (event) => {
      if (rest.onMouseEnter) {
        rest.onMouseEnter(event);
      }
      if (isDisabledWithReason) {
        setShowTooltip(true);
      }
    }, onMouseLeave: (event) => {
      if (rest.onMouseLeave) {
        rest.onMouseLeave(event);
      }
      if (isDisabledWithReason) {
        setShowTooltip(false);
      }
    } }),
    props2.children,
    isDisabledWithReason && import_react265.default.createElement(
      import_react265.default.Fragment,
      null,
      descriptionEl,
      showTooltip && import_react265.default.createElement(Tooltip, { className: styles_css_default105["disabled-reason-tooltip"], trackRef: ref, value: disabledReason, onDismiss: () => setShowTooltip(false) })
    )
  );
});
applyDisplayName(GridCell2, "GridCell");

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/intl.js
function setDayIndex2(date2, dayIndex) {
  const diff = dayIndex - date2.getDay();
  date2.setDate(date2.getDate() + diff);
}
function renderDayName2(locale3, dayIndex, mode) {
  const tempDate = /* @__PURE__ */ new Date();
  setDayIndex2(tempDate, dayIndex);
  return tempDate.toLocaleDateString(locale3, { weekday: mode });
}
function renderMonthAndYear2(locale3, baseDate) {
  const result = baseDate.toLocaleDateString(locale3, {
    year: "numeric",
    month: "long"
  });
  return result;
}
var dayLabelCache2 = /* @__PURE__ */ new Map();
function getDateLabel2(locale3, date2, mode = "full") {
  const cacheKey = locale3 + date2.getTime() + mode;
  const cachedValue = dayLabelCache2.get(cacheKey);
  if (cachedValue) {
    return cachedValue;
  }
  const value = date2.toLocaleDateString(locale3, {
    weekday: mode === "full" ? "long" : void 0,
    month: "long",
    day: "numeric",
    year: "numeric"
  });
  dayLabelCache2.set(cacheKey, value);
  return value;
}
function renderDateAnnouncement({ date: date2, isCurrent, locale: locale3, granularity = "day", currentLabel }) {
  const formattedDate = granularity === "month" ? renderMonthAndYear2(locale3, date2) : getDateLabel2(locale3, date2, "short");
  if (isCurrent && currentLabel) {
    return `${formattedDate}. ${currentLabel}`;
  }
  return formattedDate;
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/styles.scoped.css";
var styles_css_default106 = {
  "grid": "awsui_grid_1mfbn_96osr_149",
  "grid-cell": "awsui_grid-cell_1mfbn_96osr_154",
  "day-header": "awsui_day-header_1mfbn_96osr_161",
  "day": "awsui_day_1mfbn_96osr_161",
  "month": "awsui_month_1mfbn_96osr_172",
  "day-inner": "awsui_day-inner_1mfbn_96osr_220",
  "month-inner": "awsui_month-inner_1mfbn_96osr_221",
  "in-first-row": "awsui_in-first-row_1mfbn_96osr_228",
  "in-previous-month": "awsui_in-previous-month_1mfbn_96osr_228",
  "in-previous-year": "awsui_in-previous-year_1mfbn_96osr_229",
  "last-day-of-month": "awsui_last-day-of-month_1mfbn_96osr_233",
  "last-month-of-year": "awsui_last-month-of-year_1mfbn_96osr_234",
  "in-next-month": "awsui_in-next-month_1mfbn_96osr_238",
  "in-next-year": "awsui_in-next-year_1mfbn_96osr_239",
  "in-first-column": "awsui_in-first-column_1mfbn_96osr_243",
  "in-visible-calendar": "awsui_in-visible-calendar_1mfbn_96osr_246",
  "in-current-month": "awsui_in-current-month_1mfbn_96osr_246",
  "in-current-year": "awsui_in-current-year_1mfbn_96osr_246",
  "enabled": "awsui_enabled_1mfbn_96osr_250",
  "in-range": "awsui_in-range_1mfbn_96osr_256",
  "end-date": "awsui_end-date_1mfbn_96osr_256",
  "start-date": "awsui_start-date_1mfbn_96osr_256",
  "no-range": "awsui_no-range_1mfbn_96osr_256",
  "selected": "awsui_selected_1mfbn_96osr_266",
  "today": "awsui_today_1mfbn_96osr_271",
  "this-month": "awsui_this-month_1mfbn_96osr_272",
  "in-range-border-block-start": "awsui_in-range-border-block-start_1mfbn_96osr_328",
  "in-range-border-inline-end": "awsui_in-range-border-inline-end_1mfbn_96osr_331",
  "in-range-border-block-end": "awsui_in-range-border-block-end_1mfbn_96osr_334",
  "in-range-border-inline-start": "awsui_in-range-border-inline-start_1mfbn_96osr_337"
};

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/grid.js
var dayUtils = {
  getItemKey: (rowIndex, rowItemIndex) => `${rowIndex}:${rowItemIndex}`,
  isSameItem: (date1, date2) => isSameDay(date1, date2),
  isSamePage: (date1, date2) => isSameMonth(date1, date2),
  checkIfCurrentDay: (date2) => isToday(date2),
  checkIfCurrentMonth: () => false,
  checkIfCurrent: (date2) => isToday(date2),
  getPageName: () => "month"
};
var monthUtils = {
  getItemKey: (rowIndex, rowItemIndex) => `Month ${rowIndex * 3 + rowItemIndex + 1}`,
  isSameItem: (date1, date2) => isSameMonth(date1, date2),
  isSamePage: (date1, date2) => isSameYear(date1, date2),
  checkIfCurrentDay: () => false,
  checkIfCurrentMonth: (date2) => isThisMonth(date2),
  checkIfCurrent: (date2) => isThisMonth(date2),
  getPageName: () => "year"
};
function Grid2({ padDates, baseDate, selectedStartDate, selectedEndDate, rangeStartDate, rangeEndDate, focusedDate, focusedDateRef, onSelectDate, onGridKeyDownHandler, onFocusedDateChange, isDateEnabled, dateDisabledReason, locale: locale3, todayAriaLabel, currentMonthAriaLabel, ariaLabelledby, className: className2, startOfWeek: rawStartOfWeek = 0, granularity = "day" }) {
  const baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime();
  const i18n = useInternalI18n("date-range-picker");
  const isMonthPicker = granularity === "month";
  const startOfWeek2 = normalizeStartOfWeek(rawStartOfWeek, locale3);
  const calendar2 = (0, import_react266.useMemo)(
    () => {
      const startDate = rangeStartDate !== null && rangeStartDate !== void 0 ? rangeStartDate : rangeEndDate;
      const endDate = rangeEndDate !== null && rangeEndDate !== void 0 ? rangeEndDate : rangeStartDate;
      const selection = startDate && endDate ? [startDate, endDate] : null;
      if (isMonthPicker) {
        const calendarData2 = new YearCalendar({ baseDate, selection });
        return {
          header: [],
          rows: calendarData2.quarters,
          range: calendarData2.range
        };
      }
      const calendarData = new MonthCalendar({ padDates, startOfWeek: startOfWeek2, baseDate, selection });
      return {
        header: calendarData.weekdays,
        rows: calendarData.weeks,
        range: calendarData.range
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [padDates, startOfWeek2, baseDateTime, rangeStartDate, rangeEndDate]
  );
  const currentAnnouncement = i18n(isMonthPicker ? "i18nStrings.currentMonthAriaLabel" : "i18nStrings.todayAriaLabel", isMonthPicker ? currentMonthAriaLabel : todayAriaLabel);
  return import_react266.default.createElement(
    "table",
    { role: "grid", "aria-labelledby": ariaLabelledby, className: clsx_m_default(styles_css_default106.grid, className2) },
    !isMonthPicker && import_react266.default.createElement(
      "thead",
      null,
      import_react266.default.createElement("tr", null, calendar2.header.map((dayIndex) => import_react266.default.createElement(
        "th",
        { key: dayIndex, scope: "col", className: clsx_m_default(styles_css_default106["grid-cell"], styles_css_default106["day-header"], styles_css_default105["day-header"]) },
        import_react266.default.createElement("span", { "aria-hidden": "true" }, renderDayName2(locale3, dayIndex, "short")),
        import_react266.default.createElement(ScreenreaderOnly, null, renderDayName2(locale3, dayIndex, "long"))
      )))
    ),
    import_react266.default.createElement("tbody", { onKeyDown: onGridKeyDownHandler }, calendar2.rows.map((row, rowIndex) => {
      const rowItems = isMonthPicker ? row.months : row.days;
      const weekTestIndex = !isMonthPicker ? row.testIndex : void 0;
      return import_react266.default.createElement("tr", Object.assign({ key: rowIndex, className: clsx_m_default({
        [styles_css_default105["calendar-quarter"]]: isMonthPicker,
        [styles_css_default105["calendar-week"]]: !isMonthPicker
      }) }, !isMonthPicker && weekTestIndex ? {
        ["data-awsui-weekindex"]: weekTestIndex
      } : {}), rowItems.map(({ date: date2, isVisible: isVisible3, isInRange, isSelectionTop, isSelectionBottom, isSelectionLeft, isSelectionRight }, rowItemIndex) => {
        const { getItemKey: getItemKey2, isSameItem, isSamePage, checkIfCurrent, checkIfCurrentDay, checkIfCurrentMonth, getPageName } = isMonthPicker ? monthUtils : dayUtils;
        const itemKey = getItemKey2(rowIndex, rowItemIndex);
        const pageName = getPageName();
        const isCurrentDay = checkIfCurrentDay(date2);
        const isCurrentMonth = checkIfCurrentMonth(date2);
        const isCurrent = checkIfCurrent(date2);
        const isStartDate = !!selectedStartDate && isSameItem(date2, selectedStartDate);
        const isEndDate = !!selectedEndDate && isSameItem(date2, selectedEndDate);
        const isSelected = isStartDate || isEndDate;
        const isFocused = !!focusedDate && isSameItem(date2, focusedDate) && isSamePage(date2, baseDate);
        const onlyOneSelected = !!rangeStartDate && !!rangeEndDate ? isSameItem(rangeStartDate, rangeEndDate) : !selectedStartDate || !selectedEndDate;
        const isEnabled = (!isDateEnabled || isDateEnabled(date2)) && isSamePage(date2, baseDate);
        const disabledReason = dateDisabledReason(date2);
        const isDisabledWithReason = !isEnabled && !!disabledReason;
        const isFocusable2 = isFocused && (isEnabled || isDisabledWithReason);
        const baseClasses = {
          [styles_css_default105["calendar-date"]]: !isMonthPicker && isSameMonth(date2, baseDate),
          [styles_css_default105["calendar-month"]]: isMonthPicker && isSameYear(date2, baseDate),
          [styles_css_default106.day]: !isMonthPicker,
          [styles_css_default106.month]: isMonthPicker,
          [styles_css_default106["grid-cell"]]: true,
          [styles_css_default106["in-first-row"]]: rowIndex === 0,
          [styles_css_default106["in-first-column"]]: rowItemIndex === 0
        };
        if (!isVisible3) {
          return import_react266.default.createElement("td", { key: itemKey, ref: isFocused ? focusedDateRef : void 0, className: clsx_m_default(baseClasses, {
            [styles_css_default106[`last-day-of-month`]]: !isMonthPicker && isLastDayOfMonth(date2),
            [styles_css_default106[`last-month-of-year`]]: isMonthPicker && date2.getMonth() === 11
          }) });
        }
        const handlers = {};
        if (isEnabled) {
          handlers.onClick = () => onSelectDate(date2);
          handlers.onFocus = () => onFocusedDateChange(date2);
        }
        let announcement = renderDateAnnouncement({
          date: date2,
          isCurrent,
          locale: locale3,
          granularity
        });
        if (currentAnnouncement) {
          if (isMonthPicker && isThisMonth(date2)) {
            announcement += `. ${currentAnnouncement}`;
          } else if (!isMonthPicker && isToday(date2)) {
            announcement += `. ${currentAnnouncement}`;
          }
        }
        let tabIndex = void 0;
        if (isEnabled || isDisabledWithReason) {
          tabIndex = isFocusable2 ? 0 : -1;
        }
        return import_react266.default.createElement(
          GridCell2,
          Object.assign({ ref: isFocused ? focusedDateRef : void 0, key: itemKey, className: clsx_m_default(baseClasses, {
            [styles_css_default106["in-visible-calendar"]]: true,
            [styles_css_default106[`in-current-${pageName}`]]: isSamePage(date2, baseDate),
            [styles_css_default106.enabled]: isEnabled,
            [styles_css_default106.selected]: isSelected,
            [styles_css_default106["start-date"]]: isStartDate,
            [styles_css_default106["end-date"]]: isEndDate,
            [styles_css_default105["start-date"]]: isStartDate,
            [styles_css_default105["end-date"]]: isEndDate,
            [styles_css_default106["no-range"]]: isSelected && onlyOneSelected,
            [styles_css_default106["in-range"]]: isInRange,
            [styles_css_default106["in-range-border-block-start"]]: isSelectionTop,
            [styles_css_default106["in-range-border-block-end"]]: isSelectionBottom,
            [styles_css_default106["in-range-border-inline-start"]]: isSelectionLeft,
            [styles_css_default106["in-range-border-inline-end"]]: isSelectionRight,
            [styles_css_default106.today]: isCurrentDay,
            [styles_css_default105.today]: isCurrentDay,
            [styles_css_default106["this-month"]]: isCurrentMonth,
            [styles_css_default105["this-month"]]: isCurrentMonth
          }), "aria-selected": isEnabled ? isSelected || isInRange : void 0, "aria-current": isCurrent ? "date" : void 0, "data-date": formatDate(date2, granularity), "aria-disabled": !isEnabled, tabIndex, disabledReason: isDisabledWithReason ? disabledReason : void 0 }, handlers),
          import_react266.default.createElement("span", { className: styles_css_default106[`${granularity}-inner`], "aria-hidden": "true" }, isMonthPicker ? date2.toLocaleString(locale3, { month: "short" }) : date2.getDate()),
          import_react266.default.createElement(ScreenreaderOnly, null, announcement)
        );
      }));
    }))
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/index.js
function isVisible2(date2, baseDate, isSingleGrid, granularity) {
  const isSame = granularity === "day" ? isSameMonth : isSameYear;
  const add3 = granularity === "day" ? addMonths : addYears;
  if (isSingleGrid) {
    return isSame(date2, baseDate);
  }
  const previous = add3(baseDate, -1);
  return isSame(date2, previous) || isSame(date2, baseDate);
}
var Grids = ({ baseDate, selectedStartDate, selectedEndDate, focusedDate, onFocusedDateChange, isDateEnabled, dateDisabledReason, isSingleGrid, onSelectDate, onPageChange, locale: locale3, todayAriaLabel, currentMonthAriaLabel, headingIdPrefix, startOfWeek: startOfWeek2 = 0, granularity = "day" }) => {
  const containerRef = (0, import_react267.useRef)(null);
  const [gridHasFocus, setGridHasFocus] = (0, import_react267.useState)(false);
  const isMonthPicker = granularity === "month";
  const focusedDateRef = (0, import_react267.useRef)(null);
  const addPages = !isMonthPicker ? addMonths : addYears;
  const getBase = !isMonthPicker ? getBaseDay : getBaseMonth;
  const moveDown = isMonthPicker ? moveMonthDown : moveNextWeek;
  const moveLeft = isMonthPicker ? movePrevMonth : movePrevDay;
  const moveRight = isMonthPicker ? moveNextMonth : moveNextDay;
  const moveUp = isMonthPicker ? moveMonthUp : movePrevWeek;
  const dateCache = useDateCache();
  baseDate = dateCache(baseDate);
  focusedDate = focusedDate ? dateCache(focusedDate) : null;
  const isDateFocusable = (0, import_react267.useCallback)((date2) => {
    return isDateEnabled(date2) || !isDateEnabled(date2) && !!dateDisabledReason(date2);
  }, [isDateEnabled, dateDisabledReason]);
  (0, import_react267.useEffect)(() => {
    if (focusedDate && !isVisible2(focusedDate, baseDate, isSingleGrid, granularity)) {
      const direction = isAfter(focusedDate, baseDate) ? -1 : 1;
      const newPage = !isSingleGrid && direction === -1 ? addPages(baseDate, -1) : baseDate;
      const nearestBaseDate = getBase(newPage, isDateFocusable);
      const newFocusedDate = findDateToFocus(focusedDate, nearestBaseDate, isDateFocusable);
      onFocusedDateChange(newFocusedDate);
    }
  }, [baseDate, focusedDate, isSingleGrid, granularity, addPages, isDateFocusable, onFocusedDateChange, getBase]);
  const onGridKeyDownHandler = (event) => {
    let updatedFocusDate = null;
    const keys = [KeyCode.up, KeyCode.down, KeyCode.left, KeyCode.right, KeyCode.space, KeyCode.enter];
    if (focusedDate === null || keys.indexOf(event.keyCode) === -1) {
      return;
    }
    event.preventDefault();
    handleKey(event, {
      onActivate: () => {
        if (!focusedDate || !isDateEnabled(focusedDate)) {
          return;
        }
        onSelectDate(focusedDate);
      },
      onBlockEnd: () => focusedDate && (updatedFocusDate = moveDown(focusedDate, isDateFocusable)),
      onBlockStart: () => focusedDate && (updatedFocusDate = moveUp(focusedDate, isDateFocusable)),
      onInlineStart: () => focusedDate && (updatedFocusDate = moveLeft(focusedDate, isDateFocusable)),
      onInlineEnd: () => focusedDate && (updatedFocusDate = moveRight(focusedDate, isDateFocusable))
    });
    if (!updatedFocusDate) {
      return;
    }
    const updatedDateIsVisible = isVisible2(updatedFocusDate, baseDate, isSingleGrid, granularity);
    if (!updatedDateIsVisible) {
      const newPageIsOnLeftSide = !isSingleGrid && isBefore(updatedFocusDate, baseDate);
      onPageChange(newPageIsOnLeftSide ? addPages(updatedFocusDate, 1) : updatedFocusDate);
    }
    onFocusedDateChange(updatedFocusDate);
  };
  (0, import_react267.useEffect)(() => {
    if (focusedDate !== null && gridHasFocus) {
      if (focusedDateRef.current && focusedDateRef.current !== document.activeElement) {
        focusedDateRef.current.focus();
      }
    }
  }, [focusedDate, gridHasFocus]);
  const onGridBlur = (event) => {
    var _a;
    const newFocusTarget = event.relatedTarget || document.activeElement;
    const newFocusTargetIsInGrid = (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(newFocusTarget);
    if (newFocusTarget && !newFocusTargetIsInGrid && gridHasFocus) {
      setGridHasFocus(false);
    }
  };
  const onGridFocus = () => {
    if (!gridHasFocus) {
      setGridHasFocus(true);
    }
  };
  const isRangeVisible = selectedStartDate && selectedEndDate || gridHasFocus;
  const rangeEnds = [selectedStartDate !== null && selectedStartDate !== void 0 ? selectedStartDate : focusedDate, selectedEndDate !== null && selectedEndDate !== void 0 ? selectedEndDate : focusedDate].filter(hasValue);
  const rangeStartDate = min2(rangeEnds);
  const rangeEndDate = max2(rangeEnds);
  const pageUnit = isMonthPicker ? "year" : "month";
  const sharedGridProps = {
    selectedEndDate,
    selectedStartDate,
    focusedDate,
    focusedDateRef,
    rangeStartDate: isRangeVisible ? rangeStartDate : null,
    rangeEndDate: isRangeVisible ? rangeEndDate : null,
    isDateEnabled,
    dateDisabledReason,
    onSelectDate,
    onGridKeyDownHandler,
    onFocusedDateChange,
    locale: locale3,
    granularity,
    currentMonthAriaLabel,
    startOfWeek: startOfWeek2,
    todayAriaLabel
  };
  return import_react267.default.createElement(
    "div",
    { ref: containerRef, onFocus: onGridFocus, onBlur: onGridBlur },
    import_react267.default.createElement(
      internal_default4,
      { size: "xs", direction: "horizontal" },
      !isSingleGrid && import_react267.default.createElement(Grid2, Object.assign({}, sharedGridProps, { padDates: "before", className: styles_css_default105["first-grid"], baseDate: addPages(baseDate, -1), ariaLabelledby: `${headingIdPrefix}-prev${pageUnit}` })),
      import_react267.default.createElement(Grid2, Object.assign({}, sharedGridProps, { padDates: "after", className: styles_css_default105["second-grid"], baseDate, ariaLabelledby: `${headingIdPrefix}-current${pageUnit}` }))
    )
  );
};

// node_modules/@cloudscape-design/components/date-range-picker/calendar/header/index.js
var import_react269 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/header/header-button.js
var import_react268 = __toESM(require_react());
function PrevPageButton({ ariaLabel, onChangePage }) {
  return import_react268.default.createElement(InternalButton, { iconName: "angle-left", ariaLabel, variant: "icon", onClick: () => onChangePage(-1), formAction: "none", className: clsx_m_default(styles_css_default105[`calendar-prev-page-btn`], styles_css_default105[`calendar-prev-month-btn`]) });
}
function NextPageButton({ ariaLabel, onChangePage }) {
  return import_react268.default.createElement(InternalButton, { iconName: "angle-right", ariaLabel, variant: "icon", onClick: () => onChangePage(1), formAction: "none", className: clsx_m_default(styles_css_default105[`calendar-next-page-btn`], styles_css_default105[`calendar-next-month-btn`]) });
}

// node_modules/@cloudscape-design/components/date-range-picker/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/date-range-picker/styles.scoped.css";
var styles_css_default107 = {
  "calendar": "awsui_calendar_mgja0_1ueys_153",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_mgja0_1ueys_1",
  "root": "awsui_root_mgja0_1ueys_176",
  "wide": "awsui_wide_mgja0_1ueys_207",
  "focus-lock": "awsui_focus-lock_mgja0_1ueys_214",
  "trigger-flexbox": "awsui_trigger-flexbox_mgja0_1ueys_218",
  "calendar-container": "awsui_calendar-container_mgja0_1ueys_222",
  "one-grid": "awsui_one-grid_mgja0_1ueys_225",
  "calendar-header": "awsui_calendar-header_mgja0_1ueys_229",
  "calendar-header-pages-wrapper": "awsui_calendar-header-pages-wrapper_mgja0_1ueys_235",
  "calendar-header-page": "awsui_calendar-header-page_mgja0_1ueys_235",
  "date-and-time-container": "awsui_date-and-time-container_mgja0_1ueys_255",
  "date-and-time-wrapper": "awsui_date-and-time-wrapper_mgja0_1ueys_261",
  "footer": "awsui_footer_mgja0_1ueys_268",
  "has-clear-button": "awsui_has-clear-button_mgja0_1ueys_277",
  "footer-button-wrapper": "awsui_footer-button-wrapper_mgja0_1ueys_286",
  "icon-wrapper": "awsui_icon-wrapper_mgja0_1ueys_293",
  "label": "awsui_label_mgja0_1ueys_298",
  "label-enabled": "awsui_label-enabled_mgja0_1ueys_302",
  "label-text": "awsui_label-text_mgja0_1ueys_306",
  "label-token-nowrap": "awsui_label-token-nowrap_mgja0_1ueys_311",
  "dropdown": "awsui_dropdown_mgja0_1ueys_315",
  "dropdown-content": "awsui_dropdown-content_mgja0_1ueys_337"
};

// node_modules/@cloudscape-design/components/date-range-picker/calendar/header/index.js
function CalendarHeader2({ baseDate, locale: locale3, onChangePage, previousPageLabel, nextPageLabel, isSingleGrid, headingIdPrefix, granularity = "day" }) {
  const i18n = useInternalI18n("date-range-picker");
  const isMonthPicker = granularity === "month";
  const renderLabel = isMonthPicker ? renderYear : renderMonthAndYear;
  const prevPageHeaderLabel = renderLabel(locale3, add(baseDate, granularity === "month" ? { years: -1 } : { months: -1 }));
  const currentPageHeaderLabel = renderLabel(locale3, baseDate);
  const pageUnit = isMonthPicker ? "year" : "month";
  return import_react269.default.createElement(
    import_react269.default.Fragment,
    null,
    import_react269.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default105["calendar-header"], styles_css_default107["calendar-header"]) },
      import_react269.default.createElement(PrevPageButton, { ariaLabel: i18n(isMonthPicker ? "i18nStrings.previousYearAriaLabel" : "i18nStrings.previousMonthAriaLabel", previousPageLabel), onChangePage }),
      import_react269.default.createElement(
        "h2",
        { className: styles_css_default107["calendar-header-pages-wrapper"] },
        !isSingleGrid && import_react269.default.createElement("span", { className: styles_css_default107["calendar-header-page"], id: `${headingIdPrefix}-prev${pageUnit}` }, prevPageHeaderLabel),
        import_react269.default.createElement("span", { className: styles_css_default107["calendar-header-page"], id: `${headingIdPrefix}-current${pageUnit}` }, currentPageHeaderLabel)
      ),
      import_react269.default.createElement(NextPageButton, { ariaLabel: i18n(isMonthPicker ? "i18nStrings.nextYearAriaLabel" : "i18nStrings.nextMonthAriaLabel", nextPageLabel), onChangePage })
    ),
    import_react269.default.createElement(internal_default2, { hidden: true }, isSingleGrid ? currentPageHeaderLabel : `${prevPageHeaderLabel}, ${currentPageHeaderLabel}`)
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/range-inputs.js
var import_react271 = __toESM(require_react());

// node_modules/@cloudscape-design/components/time-input/internal.js
var import_react270 = __toESM(require_react());

// node_modules/@cloudscape-design/components/time-input/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/time-input/styles.scoped.css";
var styles_css_default108 = {
  "root": "awsui_root_l809c_im8v7_5"
};

// node_modules/@cloudscape-design/components/time-input/internal.js
var getMaskArgs = (format3, use24Hour) => {
  const segments = [
    use24Hour ? { min: 0, max: 23, length: 2 } : { min: 1, max: 12, length: 2 },
    { min: 0, max: 59, length: 2 },
    { min: 0, max: 59, length: 2 }
  ];
  return {
    separator: ":",
    segments: segments.slice(0, format3.split(":").length)
  };
};
var InternalTimeInput = import_react270.default.forwardRef((_a, ref) => {
  var { format: format3 = "hh:mm:ss", use24Hour = true, autoComplete = true, __internalRootRef = null } = _a, props2 = __rest(_a, ["format", "use24Hour", "autoComplete", "__internalRootRef"]);
  const inputRef = (0, import_react270.useRef)(null);
  useForwardFocus(ref, inputRef);
  const maskArgs = getMaskArgs(format3, use24Hour);
  return import_react270.default.createElement(masked_input_default, Object.assign({}, props2, { __internalRootRef, ref: inputRef, className: clsx_m_default(styles_css_default108.root, props2.className), autoComplete, disableBrowserAutocorrect: true, mask: maskArgs }));
});
var internal_default23 = InternalTimeInput;

// node_modules/@cloudscape-design/components/date-range-picker/calendar/range-inputs.js
function RangeInputs({ startDate, onChangeStartDate, startTime, onChangeStartTime, endDate, onChangeEndDate, endTime, onChangeEndTime, i18nStrings, dateOnly, timeInputFormat, granularity = "day" }) {
  const i18n = useInternalI18n("date-range-picker");
  const isMonthPicker = granularity === "month";
  const dateInputPlaceholder = isMonthPicker ? "YYYY/MM" : "YYYY/MM/DD";
  const showTimeInput = !dateOnly && !isMonthPicker;
  return import_react271.default.createElement(
    InternalFormField,
    { constraintText: i18n(isMonthPicker ? "i18nStrings.monthConstraintText" : dateOnly ? "i18nStrings.dateConstraintText" : "i18nStrings.dateTimeConstraintText", isMonthPicker ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.monthConstraintText : dateOnly ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dateConstraintText : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dateTimeConstraintText) },
    import_react271.default.createElement(
      "div",
      { className: styles_css_default107["date-and-time-container"] },
      import_react271.default.createElement(
        "div",
        { className: styles_css_default107["date-and-time-wrapper"] },
        import_react271.default.createElement(
          InternalFormField,
          { stretch: true, label: i18n(isMonthPicker ? "i18nStrings.startMonthLabel" : "i18nStrings.startDateLabel", isMonthPicker ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startMonthLabel : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startDateLabel) },
          import_react271.default.createElement(internal_default22, { value: startDate, className: clsx_m_default(styles_css_default105["start-date-input"], isMonthPicker && styles_css_default105["start-month-input"]), onChange: (event) => onChangeStartDate(event.detail.value), placeholder: dateInputPlaceholder, granularity })
        ),
        showTimeInput && import_react271.default.createElement(
          InternalFormField,
          { stretch: true, label: i18n("i18nStrings.startTimeLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startTimeLabel) },
          import_react271.default.createElement(internal_default23, { value: startTime, onChange: (event) => onChangeStartTime(event.detail.value), format: timeInputFormat, placeholder: timeInputFormat, className: styles_css_default105["start-time-input"] })
        )
      ),
      import_react271.default.createElement(
        "div",
        { className: styles_css_default107["date-and-time-wrapper"] },
        import_react271.default.createElement(
          InternalFormField,
          { stretch: true, label: i18n(isMonthPicker ? "i18nStrings.endMonthLabel" : "i18nStrings.endDateLabel", isMonthPicker ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endMonthLabel : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endDateLabel) },
          import_react271.default.createElement(internal_default22, { value: endDate, className: clsx_m_default(styles_css_default105["end-date-input"], isMonthPicker && styles_css_default105["end-month-picker"]), onChange: (event) => onChangeEndDate(event.detail.value), placeholder: dateInputPlaceholder, granularity })
        ),
        showTimeInput && import_react271.default.createElement(
          InternalFormField,
          { label: i18n("i18nStrings.endTimeLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endTimeLabel), stretch: true },
          import_react271.default.createElement(internal_default23, { value: endTime, onChange: (event) => onChangeEndTime(event.detail.value), format: timeInputFormat, placeholder: timeInputFormat, className: styles_css_default105["end-time-input"] })
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/index.js
function DateRangePickerCalendar({ value, setValue, locale: locale3 = "", startOfWeek: startOfWeek2, isDateEnabled = () => true, dateDisabledReason = () => "", i18nStrings, dateOnly = false, timeInputFormat = "hh:mm:ss", customAbsoluteRangeControl, granularity = "day" }) {
  var _a, _b;
  const isSingleGrid = useMobile();
  const isMonthPicker = granularity === "month";
  const hideTime = isMonthPicker || dateOnly;
  const normalizedLocale = normalizeLocale("DateRangePicker", locale3);
  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek2, normalizedLocale);
  const i18n = useInternalI18n("date-range-picker");
  const [announcement, setAnnouncement] = (0, import_react272.useState)("");
  const findPageToDisplay = isMonthPicker ? findYearToDisplay : findMonthToDisplay;
  const isSamePage = isMonthPicker ? isSameYear : isSameMonth;
  const addPage = isMonthPicker ? addYears : addMonths;
  const startOfPage = isMonthPicker ? startOfYear : startOfMonth;
  const findItemToFocus = isMonthPicker ? findMonthToFocus : findDateToFocus;
  const [currentPage, setCurrentPage] = (0, import_react272.useState)(() => findPageToDisplay(value, isSingleGrid));
  const [focusedDate, setFocusedDate] = (0, import_react272.useState)(() => {
    if (value.start.date) {
      const startDate = parseDate2(value.start.date);
      if (isSamePage(startDate, currentPage)) {
        return startDate;
      }
      if (!isSingleGrid && isSamePage(startDate, addPage(currentPage, -1))) {
        return startDate;
      }
    }
    return findItemToFocus(parseDate2(value.start.date), currentPage, isDateEnabled);
  });
  const updateCurrentPage = (startDate) => {
    if (isMonthPicker && startDate.length >= 4 || startDate.length >= 8) {
      const newCurrentPage = startOfPage(parseDate2(startDate));
      setCurrentPage(isSingleGrid ? newCurrentPage : addPage(newCurrentPage, 1));
    }
  };
  const announceStart = (startDate) => {
    return `${i18n("i18nStrings.startDateLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startDateLabel)}, ${getDateLabel(normalizedLocale, startDate)}${hideTime ? "" : `, ${i18n("i18nStrings.startTimeLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startTimeLabel)}, ${renderTimeLabel(normalizedLocale, startDate, timeInputFormat)}`}. `;
  };
  const announceEnd = (endDate) => {
    return `${i18n("i18nStrings.endDateLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endDateLabel)}, ${getDateLabel(normalizedLocale, endDate)}${hideTime ? "" : `, ${i18n("i18nStrings.endTimeLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endTimeLabel)}, ${renderTimeLabel(normalizedLocale, endDate, timeInputFormat)}`}. `;
  };
  const renderSelectedAbsoluteRangeAriaLive = i18n("i18nStrings.renderSelectedAbsoluteRangeAriaLive", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.renderSelectedAbsoluteRangeAriaLive, (format3) => (startDate, endDate) => format3({ startDate, endDate }));
  const announceRange = (startDate, endDate) => {
    if (!renderSelectedAbsoluteRangeAriaLive) {
      return `${getDateLabel(normalizedLocale, startDate)} – ${getDateLabel(normalizedLocale, endDate)}`;
    }
    return renderSelectedAbsoluteRangeAriaLive(getDateLabel(normalizedLocale, startDate), getDateLabel(normalizedLocale, endDate));
  };
  const onSelectDateHandler = (selectedDate) => {
    const { start, end } = value;
    let newStart = void 0;
    let newEnd = void 0;
    let announcement2 = "";
    if (!start.date && !end.date) {
      newStart = startOfDay(selectedDate);
      announcement2 = announceStart(newStart);
    } else if (start.date && end.date) {
      newStart = startOfDay(selectedDate);
      newEnd = null;
      announcement2 = announceStart(newStart);
    } else if (start.date && !end.date) {
      const parsedStartDate = parseDate2(start.date);
      if (isBefore(selectedDate, parsedStartDate)) {
        newStart = startOfDay(selectedDate);
        newEnd = endOfDay(parsedStartDate);
        announcement2 = announceStart(newStart) + announceRange(newStart, newEnd);
      } else {
        newEnd = endOfDay(selectedDate);
        announcement2 = announceEnd(newEnd) + announceRange(parsedStartDate, newEnd);
      }
    } else if (!start.date && end.date) {
      const existingEndDate = parseDate2(end.date);
      if (isAfter(selectedDate, existingEndDate)) {
        newStart = startOfDay(existingEndDate);
        newEnd = endOfDay(selectedDate);
        announcement2 = announceEnd(newEnd) + announceRange(newStart, newEnd);
      } else {
        newStart = startOfDay(selectedDate);
        announcement2 = announceStart(newStart) + announceRange(newStart, existingEndDate);
      }
    }
    const formatValue2 = (date2, previous, includeTime) => {
      if (date2 === null) {
        return { date: "", time: "" };
      } else if (date2 === void 0) {
        return previous;
      }
      if (!includeTime) {
        return {
          date: formatDate(date2),
          time: ""
        };
      }
      return splitDateTime(formatDateTime(date2));
    };
    setValue({
      start: formatValue2(newStart, value.start, !hideTime),
      end: formatValue2(newEnd, value.end, !hideTime)
    });
    setAnnouncement(announcement2);
  };
  const onHeaderChangePageHandler = (amount) => {
    const addPageFn = isMonthPicker ? addYears : addMonths;
    const getBaseFn = isMonthPicker ? getBaseMonth : getBaseDay;
    const newBasePage = addPageFn(currentPage, amount);
    setCurrentPage(newBasePage);
    const newBaseDate = getBaseFn(newBasePage, isDateEnabled);
    setFocusedDate(newBaseDate);
  };
  const onChangeStartDate = (value2) => {
    setValue((oldValue) => Object.assign(Object.assign({}, oldValue), { start: Object.assign(Object.assign({}, oldValue.start), { date: value2 }) }));
    updateCurrentPage(value2);
  };
  const interceptedSetValue = (newValue) => {
    setValue((oldValue) => {
      const updated = typeof newValue === "function" ? newValue(oldValue) : newValue;
      updateCurrentPage(updated.start.date);
      return updated;
    });
  };
  const headingIdPrefix = useUniqueId("date-range-picker-calendar-heading");
  return import_react272.default.createElement(
    import_react272.default.Fragment,
    null,
    import_react272.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default107["calendar-container"], {
        [styles_css_default107["one-grid"]]: isSingleGrid
      }) },
      import_react272.default.createElement(
        internal_default4,
        { size: "s" },
        import_react272.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default107.calendar, {
            [styles_css_default107["one-grid"]]: isSingleGrid
          }) },
          import_react272.default.createElement(CalendarHeader2, { granularity, baseDate: currentPage, locale: normalizedLocale, onChangePage: onHeaderChangePageHandler, previousPageLabel: isMonthPicker ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousYearAriaLabel : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousMonthAriaLabel, nextPageLabel: isMonthPicker ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextYearAriaLabel : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextMonthAriaLabel, isSingleGrid, headingIdPrefix }),
          import_react272.default.createElement(Grids, { granularity, isSingleGrid, locale: normalizedLocale, baseDate: currentPage, focusedDate, onFocusedDateChange: setFocusedDate, isDateEnabled, dateDisabledReason, onSelectDate: onSelectDateHandler, onPageChange: setCurrentPage, startOfWeek: normalizedStartOfWeek, todayAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.todayAriaLabel, currentMonthAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.currentMonthAriaLabel, selectedStartDate: ((_a = value === null || value === void 0 ? void 0 : value.start) === null || _a === void 0 ? void 0 : _a.date) ? parseDate2(value.start.date, !isMonthPicker) : null, selectedEndDate: ((_b = value === null || value === void 0 ? void 0 : value.end) === null || _b === void 0 ? void 0 : _b.date) ? parseDate2(value.end.date, !isMonthPicker) : null, headingIdPrefix })
        ),
        import_react272.default.createElement(RangeInputs, { startDate: value.start.date, onChangeStartDate, startTime: value.start.time, onChangeStartTime: (value2) => setValue((oldValue) => Object.assign(Object.assign({}, oldValue), { start: Object.assign(Object.assign({}, oldValue.start), { time: value2 }) })), endDate: value.end.date, onChangeEndDate: (value2) => setValue((oldValue) => Object.assign(Object.assign({}, oldValue), { end: Object.assign(Object.assign({}, oldValue.end), { date: value2 }) })), endTime: value.end.time, onChangeEndTime: (value2) => setValue((oldValue) => Object.assign(Object.assign({}, oldValue), { end: Object.assign(Object.assign({}, oldValue.end), { time: value2 }) })), i18nStrings, dateOnly, timeInputFormat, granularity }),
        customAbsoluteRangeControl && import_react272.default.createElement("div", null, customAbsoluteRangeControl(value, interceptedSetValue))
      )
    ),
    import_react272.default.createElement(internal_default2, { className: styles_css_default105["calendar-aria-live"], hidden: true, tagName: "span" }, announcement)
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/mode-switcher.js
var import_react276 = __toESM(require_react());

// node_modules/@cloudscape-design/components/segmented-control/internal.js
var import_react275 = __toESM(require_react());

// node_modules/@cloudscape-design/components/segmented-control/internal-segmented-control.js
var import_react274 = __toESM(require_react());

// node_modules/@cloudscape-design/components/segmented-control/segment.js
var import_react273 = __toESM(require_react());

// node_modules/@cloudscape-design/components/segmented-control/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/segmented-control/styles.scoped.css";
var styles_css_default109 = {
  "segment": "awsui_segment_8cbea_rg0r6_161",
  "refresh": "awsui_refresh_8cbea_rg0r6_187",
  "disabled": "awsui_disabled_8cbea_rg0r6_193",
  "selected": "awsui_selected_8cbea_rg0r6_256",
  "icon": "awsui_icon_8cbea_rg0r6_279",
  "with-text": "awsui_with-text_8cbea_rg0r6_283",
  "with-no-text": "awsui_with-no-text_8cbea_rg0r6_289",
  "root": "awsui_root_8cbea_rg0r6_294",
  "segment-part": "awsui_segment-part_8cbea_rg0r6_326",
  "select": "awsui_select_8cbea_rg0r6_256",
  "segment-count-2": "awsui_segment-count-2_8cbea_rg0r6_362",
  "segment-count-3": "awsui_segment-count-3_8cbea_rg0r6_366",
  "segment-count-4": "awsui_segment-count-4_8cbea_rg0r6_370",
  "segment-count-5": "awsui_segment-count-5_8cbea_rg0r6_374",
  "segment-count-6": "awsui_segment-count-6_8cbea_rg0r6_378",
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_8cbea_rg0r6_382"
};

// node_modules/@cloudscape-design/components/segmented-control/segment.js
var Segment = import_react273.default.forwardRef(({ disabled, disabledReason, text, iconName, iconAlt, iconUrl, iconSvg, isActive, onClick, onKeyDown, tabIndex, id }, ref) => {
  const buttonRef = (0, import_react273.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react273.useState)(false);
  const isDisabledWithReason = disabled && !!disabledReason;
  const { targetProps, descriptionEl } = useHiddenDescription(disabledReason);
  const isVisualRefresh = useVisualRefresh();
  return import_react273.default.createElement(
    "button",
    Object.assign({ className: clsx_m_default(styles_css_default109.segment, { [styles_css_default109.disabled]: !!disabled }, { [styles_css_default109.selected]: isActive }, { [styles_css_default109.refresh]: isVisualRefresh }), ref: useMergeRefs(ref, buttonRef), onClick, onKeyDown, disabled: disabled && !disabledReason, "aria-disabled": isDisabledWithReason ? "true" : void 0, type: "button", tabIndex, "aria-pressed": isActive ? "true" : "false", "aria-label": !text ? iconAlt : void 0, onFocus: isDisabledWithReason ? () => setShowTooltip(true) : void 0, onBlur: isDisabledWithReason ? () => setShowTooltip(false) : void 0, onMouseEnter: isDisabledWithReason ? () => setShowTooltip(true) : void 0, onMouseLeave: isDisabledWithReason ? () => setShowTooltip(false) : void 0 }, isDisabledWithReason ? targetProps : {}, { "data-testid": id }),
    (iconName || iconUrl || iconSvg) && import_react273.default.createElement(internal_default, { className: clsx_m_default(styles_css_default109.icon, text ? styles_css_default109["with-text"] : styles_css_default109["with-no-text"]), name: iconName, url: iconUrl, svg: iconSvg, alt: iconAlt, variant: disabled ? "disabled" : "normal" }),
    import_react273.default.createElement("span", null, text),
    isDisabledWithReason && import_react273.default.createElement(
      import_react273.default.Fragment,
      null,
      descriptionEl,
      showTooltip && import_react273.default.createElement(Tooltip, { className: styles_css_default109["disabled-reason-tooltip"], trackRef: buttonRef, value: disabledReason, onDismiss: () => setShowTooltip(false) })
    )
  );
});

// node_modules/@cloudscape-design/components/segmented-control/internal-segmented-control.js
function InternalSegmentedControl({ selectedId, options, label, ariaLabelledby, onChange }) {
  const segmentByIdRef = (0, import_react274.useRef)({});
  const selectedOptions = (options || []).filter((option) => {
    return option.id === selectedId;
  });
  const currentSelectedOption = selectedOptions.length ? selectedOptions[0] : null;
  const focusableSegments = (options || []).filter((option) => !option.disabled || option.disabled && !!option.disabledReason);
  const moveHighlight2 = (event, activeIndex) => {
    var _a;
    if (event.keyCode !== KeyCode.right && event.keyCode !== KeyCode.left) {
      return;
    }
    let nextIndex = activeIndex;
    handleKey(event, {
      onInlineStart: () => nextIndex = activeIndex === 0 ? focusableSegments.length - 1 : activeIndex - 1,
      onInlineEnd: () => nextIndex = activeIndex + 1 === focusableSegments.length ? 0 : activeIndex + 1
    });
    const nextSegmentId = focusableSegments[nextIndex].id;
    (_a = segmentByIdRef.current[nextSegmentId]) === null || _a === void 0 ? void 0 : _a.focus();
  };
  const isVisualRefresh = useVisualRefresh();
  return import_react274.default.createElement("div", { className: clsx_m_default(styles_css_default109["segment-part"], styles_css_default109[`segment-count-${options === null || options === void 0 ? void 0 : options.length}`], {
    [styles_css_default109.refresh]: isVisualRefresh
  }), "aria-label": label, "aria-labelledby": ariaLabelledby, role: "toolbar" }, options && options.map((option, index) => {
    const isActive = selectedId === option.id;
    const focusableSegmentIndex = focusableSegments.indexOf(option);
    let tabIndex = isActive ? 0 : -1;
    if (currentSelectedOption === null && focusableSegmentIndex === 0) {
      tabIndex = 0;
    }
    return import_react274.default.createElement(Segment, { key: index, id: option.id, disabled: !!option.disabled, disabledReason: option.disabledReason, iconName: option.iconName, iconAlt: option.iconAlt, iconUrl: option.iconUrl, iconSvg: option.iconSvg, text: option.text, isActive, tabIndex, ref: (node) => {
      if (node) {
        segmentByIdRef.current[option.id] = node;
      } else {
        delete segmentByIdRef.current[option.id];
      }
    }, onClick: () => {
      if (option.disabled) {
        return;
      }
      if (selectedId !== option.id) {
        fireNonCancelableEvent(onChange, { selectedId: option.id });
      }
    }, onKeyDown: (event) => moveHighlight2(event, focusableSegmentIndex) });
  }));
}

// node_modules/@cloudscape-design/components/segmented-control/internal.js
function InternalSegmentedControl2(_a) {
  var { selectedId, options, label, ariaLabelledby, onChange, __internalRootRef = null } = _a, props2 = __rest(_a, ["selectedId", "options", "label", "ariaLabelledby", "onChange", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  const selectOptions = (options || []).map((option) => {
    const label2 = option.text || option.iconAlt;
    return Object.assign(Object.assign({}, option), { label: label2, value: option.id });
  });
  const selectedOptions = selectOptions.filter((option) => {
    return option.value === selectedId;
  });
  const currentSelectedOption = selectedOptions.length ? selectedOptions[0] : null;
  const selectProps = {
    options: selectOptions,
    selectedOption: currentSelectedOption,
    triggerVariant: "option",
    onChange: (event) => fireNonCancelableEvent(onChange, { selectedId: event.detail.selectedOption.value })
  };
  return import_react275.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default109.root), ref: __internalRootRef }),
    import_react275.default.createElement(InternalSegmentedControl, { selectedId, options, label, ariaLabelledby, onChange }),
    import_react275.default.createElement(
      "div",
      { className: styles_css_default109.select },
      ariaLabelledby && import_react275.default.createElement(internal_default17, Object.assign({}, selectProps, { ariaLabelledby })),
      !ariaLabelledby && label && import_react275.default.createElement(
        InternalFormField,
        { label, stretch: true },
        import_react275.default.createElement(internal_default17, Object.assign({}, selectProps))
      ),
      !ariaLabelledby && !label && import_react275.default.createElement(internal_default17, Object.assign({}, selectProps))
    )
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/mode-switcher.js
function ModeSwitcher({ i18nStrings, mode, onChange }) {
  const i18n = useInternalI18n("date-range-picker");
  return import_react276.default.createElement(InternalSegmentedControl2, { className: styles_css_default105["mode-switch"], selectedId: mode, label: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modeSelectionLabel, options: [
    { id: "relative", text: i18n("i18nStrings.relativeModeTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.relativeModeTitle) },
    { id: "absolute", text: i18n("i18nStrings.absoluteModeTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.absoluteModeTitle) }
  ], onChange: (e3) => onChange(e3.detail.selectedId) });
}

// node_modules/@cloudscape-design/components/date-range-picker/relative-range/index.js
var import_react277 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/relative-range/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/date-range-picker/relative-range/styles.scoped.css";
var styles_css_default110 = {
  "custom-range": "awsui_custom-range_16zmw_25w4q_145",
  "custom-range--no-padding": "awsui_custom-range--no-padding_16zmw_25w4q_151",
  "custom-range-form-controls": "awsui_custom-range-form-controls_16zmw_25w4q_155",
  "custom-range-duration": "awsui_custom-range-duration_16zmw_25w4q_159",
  "custom-range-unit": "awsui_custom-range-unit_16zmw_25w4q_160",
  "vertical": "awsui_vertical_16zmw_25w4q_166"
};

// node_modules/@cloudscape-design/components/date-range-picker/relative-range/index.js
var monthUnits = ["month", "year"];
var dayUnits = ["day", "week", ...monthUnits];
var units = ["second", "minute", "hour", ...dayUnits];
var CUSTOM_OPTION_SELECT_KEY = "awsui-internal-custom-duration-key";
function RelativeRangePicker({ dateOnly, options: clientOptions = [], initialSelection: initialRange, onChange: onChangeRangeSize, i18nStrings, isSingleGrid, customUnits, granularity = "day" }) {
  var _a;
  const i18n = useInternalI18n("date-range-picker");
  const formatRelativeRange = i18n("i18nStrings.formatRelativeRange", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatRelativeRange, (format3) => ({ amount, unit: unit2 }) => format3({ amount, unit: unit2 }));
  const formatUnit = i18n("i18nStrings.formatUnit", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatUnit, (format3) => (unit2, amount) => format3({ amount, unit: unit2 }));
  const radioOptions = clientOptions.map((option) => ({
    value: option.key,
    label: formatRelativeRange === null || formatRelativeRange === void 0 ? void 0 : formatRelativeRange(option)
  }));
  radioOptions.push({
    value: CUSTOM_OPTION_SELECT_KEY,
    label: i18n("i18nStrings.customRelativeRangeOptionLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeOptionLabel),
    description: i18n("i18nStrings.customRelativeRangeOptionDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeOptionDescription)
  });
  const [selectedRadio, setSelectedRadio] = (0, import_react277.useState)(() => {
    var _a2;
    if (initialRange && !initialRange.key) {
      return CUSTOM_OPTION_SELECT_KEY;
    }
    return (_a2 = initialRange === null || initialRange === void 0 ? void 0 : initialRange.key) !== null && _a2 !== void 0 ? _a2 : null;
  });
  const [customDuration, setCustomDuration] = (0, import_react277.useState)(() => {
    if (initialRange) {
      return initialRange.amount;
    }
    return NaN;
  });
  let finalUnits = granularity === "month" ? monthUnits : dateOnly ? dayUnits : units;
  if (customUnits) {
    finalUnits = customUnits.filter((unit2) => {
      if (units.includes(unit2)) {
        return true;
      }
      warnOnce("DateRangePicker", `Invalid unit found in customRelativeRangeUnits: ${unit2}. This entry will be ignored.`);
      return false;
    });
  }
  let initialCustomTimeUnit = granularity === "month" ? "month" : dateOnly ? "day" : "minute";
  if (!finalUnits.includes(initialCustomTimeUnit)) {
    initialCustomTimeUnit = finalUnits[0];
  }
  const [customUnitOfTime, setCustomUnitOfTime] = (0, import_react277.useState)((_a = initialRange === null || initialRange === void 0 ? void 0 : initialRange.unit) !== null && _a !== void 0 ? _a : initialCustomTimeUnit);
  const showRadioControl = clientOptions.length > 0;
  const showCustomControls = clientOptions.length === 0 || selectedRadio === CUSTOM_OPTION_SELECT_KEY;
  return import_react277.default.createElement(
    "div",
    null,
    import_react277.default.createElement(
      internal_default4,
      { size: "xs", direction: "vertical" },
      showRadioControl && import_react277.default.createElement(
        InternalFormField,
        Object.assign({}, {
          label: i18n("i18nStrings.relativeRangeSelectionHeading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.relativeRangeSelectionHeading),
          description: granularity === "month" && i18n("i18nStrings.relativeRangeSelectionMonthlyDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.relativeRangeSelectionMonthlyDescription)
        }),
        import_react277.default.createElement(internal_default20, { className: styles_css_default105["relative-range-radio-group"], onChange: ({ detail }) => {
          setSelectedRadio(detail.value);
          if (detail.value === CUSTOM_OPTION_SELECT_KEY) {
            setCustomDuration(NaN);
            setCustomUnitOfTime(initialCustomTimeUnit);
            onChangeRangeSize({
              amount: NaN,
              unit: initialCustomTimeUnit,
              type: "relative"
            });
          } else {
            const option = clientOptions.filter((o) => o.key === detail.value)[0];
            onChangeRangeSize(option);
          }
        }, value: selectedRadio, items: radioOptions })
      ),
      showCustomControls && import_react277.default.createElement(
        internal_default4,
        { direction: "vertical", size: "xs" },
        !showRadioControl && import_react277.default.createElement(InternalBox, { fontSize: "body-m", color: "text-body-secondary" }, i18n("i18nStrings.customRelativeRangeOptionDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeOptionDescription)),
        import_react277.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default110["custom-range"], {
            [styles_css_default110["custom-range--no-padding"]]: !showRadioControl
          }) },
          import_react277.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default110["custom-range-form-controls"], {
              [styles_css_default110.vertical]: isSingleGrid
            }) },
            import_react277.default.createElement(
              "div",
              { className: styles_css_default110["custom-range-duration"] },
              import_react277.default.createElement(
                InternalFormField,
                { label: i18n("i18nStrings.customRelativeRangeDurationLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeDurationLabel) },
                import_react277.default.createElement(internal_default11, { type: "number", className: styles_css_default105["custom-range-duration-input"], value: isNaN(customDuration) || customDuration === 0 ? "" : customDuration === null || customDuration === void 0 ? void 0 : customDuration.toString(), onChange: (e3) => {
                  const amount = Number(e3.detail.value);
                  setCustomDuration(amount);
                  onChangeRangeSize({ amount, unit: customUnitOfTime, type: "relative" });
                }, placeholder: i18n("i18nStrings.customRelativeRangeDurationPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeDurationPlaceholder), __inheritFormFieldProps: true })
              )
            ),
            import_react277.default.createElement(
              "div",
              { className: styles_css_default110["custom-range-unit"] },
              import_react277.default.createElement(
                InternalFormField,
                { label: i18n("i18nStrings.customRelativeRangeUnitLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeUnitLabel) },
                import_react277.default.createElement(internal_default17, { className: styles_css_default105["custom-range-unit-select"], selectedOption: {
                  value: customUnitOfTime,
                  label: formatUnit === null || formatUnit === void 0 ? void 0 : formatUnit(customUnitOfTime, customDuration)
                }, onChange: (e3) => {
                  const { value: unit2 } = e3.detail.selectedOption;
                  setCustomUnitOfTime(unit2);
                  onChangeRangeSize({ amount: customDuration, unit: unit2, type: "relative" });
                }, options: finalUnits.map((unit2) => ({
                  value: unit2,
                  label: formatUnit === null || formatUnit === void 0 ? void 0 : formatUnit(unit2, customDuration)
                })), renderHighlightedAriaLive: (option) => option.label || option.value || "" })
              )
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/time-offset.js
function setTimeOffset(value, timeOffset) {
  if (!((value === null || value === void 0 ? void 0 : value.type) === "absolute")) {
    return value;
  }
  return {
    type: "absolute",
    startDate: value.startDate + formatTimeOffsetISO(value.startDate, timeOffset.startDate),
    endDate: value.endDate + formatTimeOffsetISO(value.endDate, timeOffset.endDate)
  };
}
function shiftTimeOffset(value, timeOffset) {
  if (!value || value.type !== "absolute") {
    return value;
  }
  const dateTimeRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(:\d{2})?(\.\d{1,3})?(((\+|-)\d{2}(:\d{2})?)|Z)?$/;
  if (!dateTimeRegex.test(value.startDate) || !dateTimeRegex.test(value.endDate)) {
    warnOnce("DateRangePicker", "You have provided a misformatted start or end date. The component will fall back to an empty value. Dates have to be ISO8601-formatted with an optional time zone offset.");
    return null;
  }
  return {
    type: "absolute",
    startDate: shiftTimezoneOffset(value.startDate, timeOffset.startDate),
    endDate: shiftTimezoneOffset(value.endDate, timeOffset.endDate)
  };
}
function normalizeTimeOffset(value, getTimeOffset, timeOffset) {
  if (value && value.type === "absolute") {
    if (getTimeOffset) {
      return {
        startDate: getTimeOffset(parseDateUTC(value.startDate)),
        endDate: getTimeOffset(parseDateUTC(value.endDate))
      };
    } else if (timeOffset !== void 0) {
      return { startDate: timeOffset, endDate: timeOffset };
    }
  }
  return { startDate: void 0, endDate: void 0 };
}
function parseDateUTC(isoDateString) {
  const date2 = new Date(isoDateString);
  return addMinutes(date2, parseTimezoneOffset(isoDateString));
}

// node_modules/@cloudscape-design/components/date-range-picker/utils.js
function isAbsoluteValue(value) {
  return value !== null && (value === null || value === void 0 ? void 0 : value.type) === "absolute";
}
function isEmptyAbsoluteValue(value) {
  return value.type === "absolute" && value.startDate === "" && value.endDate === "";
}
function isDateOrMonthOnly(value, checkFn) {
  return checkFn(value.startDate) && checkFn(value.endDate);
}
function formatValue(value, { timeOffset, monthOnly, dateOnly }) {
  if (!isAbsoluteValue(value) || isEmptyAbsoluteValue(value)) {
    return value;
  }
  if (monthOnly || dateOnly) {
    const [startPart, endPart] = [value.startDate, value.endDate].map((date2) => (
      //strip out time or day+time text from dates
      monthOnly ? date2.split("T")[0].split("-").slice(0, 2).join("-") : date2.split("T")[0]
    ));
    return { type: "absolute", startDate: startPart, endDate: endPart };
  }
  return setTimeOffset(value, timeOffset === null ? {
    startDate: void 0,
    endDate: void 0
  } : timeOffset);
}
function getDefaultMode(value, relativeOptions, rangeSelectorMode) {
  if (value === null || value === void 0 ? void 0 : value.type) {
    return value.type;
  }
  if (rangeSelectorMode === "relative-only") {
    return "relative";
  }
  if (rangeSelectorMode === "absolute-only") {
    return "absolute";
  }
  return relativeOptions.length > 0 ? "relative" : "absolute";
}
function splitAbsoluteValue(value, hideTime = false) {
  if (!value) {
    return { start: { date: "", time: "" }, end: { date: "", time: "" } };
  }
  return {
    start: Object.assign(Object.assign({}, splitDateTime(value.startDate)), hideTime ? { time: "" } : {}),
    end: Object.assign(Object.assign({}, splitDateTime(value.endDate)), hideTime ? { time: "" } : {})
  };
}
function joinAbsoluteValue(value, hideTime = false) {
  const [startTime, endTime] = [value.start.time || "00:00:00", value.end.time || "23:59:59"].map(normalizeTimeString);
  return {
    type: "absolute",
    startDate: hideTime ? value.start.date : joinDateTime(value.start.date, startTime),
    endDate: hideTime ? value.end.date : joinDateTime(value.end.date, endTime)
  };
}
function formatInitialValue(value, dateOnly, monthOnly, normalizedTimeOffset) {
  if (!isAbsoluteValue(value)) {
    return shiftTimeOffset(value, normalizedTimeOffset);
  }
  if (isEmptyAbsoluteValue(value)) {
    return value;
  }
  if (dateOnly || monthOnly) {
    return formatValue(value, { dateOnly, monthOnly, timeOffset: normalizedTimeOffset });
  }
  if (isDateOrMonthOnly(value, isIsoDateOnly) || isDateOrMonthOnly(value, isIsoMonthOnly)) {
    return value;
  }
  return shiftTimeOffset(value, normalizedTimeOffset);
}

// node_modules/@cloudscape-design/components/date-range-picker/dropdown.js
var VALID_RANGE = { valid: true };
function DateRangePickerDropdown({ locale: locale3 = "", startOfWeek: startOfWeek2, isDateEnabled, dateDisabledReason = () => "", isValidRange, value, onClear: clearValue, onApply: applyValue, getTimeOffset, timeOffset, onDropdownClose, relativeOptions, showClearButton, isSingleGrid, i18nStrings, dateOnly, timeInputFormat, rangeSelectorMode, ariaLabelledby, ariaDescribedby, customAbsoluteRangeControl, customRelativeRangeUnits, granularity = "day" }) {
  const i18n = useInternalI18n("date-range-picker");
  const isMonthPicker = granularity === "month";
  const hideTime = dateOnly || isMonthPicker;
  const liveRegionRef = (0, import_react278.useRef)(null);
  const [rangeSelectionMode, setRangeSelectionMode] = (0, import_react278.useState)(getDefaultMode(value, relativeOptions, rangeSelectorMode));
  const [selectedAbsoluteRange, setSelectedAbsoluteRange] = (0, import_react278.useState)(() => splitAbsoluteValue((value === null || value === void 0 ? void 0 : value.type) === "absolute" ? value : null, hideTime));
  const [selectedRelativeRange, setSelectedRelativeRange] = (0, import_react278.useState)((value === null || value === void 0 ? void 0 : value.type) === "relative" ? value : null);
  const scrollableContainerRef = (0, import_react278.useRef)(null);
  const applyButtonRef = (0, import_react278.useRef)(null);
  const [applyClicked, setApplyClicked] = (0, import_react278.useState)(false);
  const [validationResult, setValidationResult] = (0, import_react278.useState)(VALID_RANGE);
  const closeDropdown = () => {
    setApplyClicked(false);
    onDropdownClose();
  };
  const onClear = () => {
    closeDropdown();
    clearValue();
  };
  const onApply = () => {
    var _a;
    const newValue = rangeSelectionMode === "relative" ? selectedRelativeRange : joinAbsoluteValue(selectedAbsoluteRange, hideTime);
    const newValidationResult = applyValue(newValue);
    if (newValidationResult.valid === false) {
      setApplyClicked(true);
      setValidationResult(newValidationResult);
      (_a = liveRegionRef.current) === null || _a === void 0 ? void 0 : _a.reannounce();
    } else {
      setApplyClicked(false);
      closeDropdown();
    }
  };
  (0, import_react278.useEffect)(() => {
    if (applyClicked) {
      const visibleRange = rangeSelectionMode === "relative" ? selectedRelativeRange : joinAbsoluteValue(selectedAbsoluteRange);
      const formattedRange = formatValue(visibleRange, {
        dateOnly,
        monthOnly: isMonthPicker,
        timeOffset: dateOnly || isMonthPicker ? null : normalizeTimeOffset(visibleRange, getTimeOffset, timeOffset)
      });
      const newValidationResult = isValidRange(formattedRange);
      setValidationResult(newValidationResult || VALID_RANGE);
    }
  }, [
    applyClicked,
    isValidRange,
    rangeSelectionMode,
    selectedRelativeRange,
    selectedAbsoluteRange,
    setValidationResult,
    dateOnly,
    isMonthPicker,
    getTimeOffset,
    timeOffset
  ]);
  (0, import_react278.useEffect)(() => {
    var _a;
    return (_a = scrollableContainerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
  }, [scrollableContainerRef]);
  return import_react278.default.createElement(
    import_react278.default.Fragment,
    null,
    import_react278.default.createElement(
      focus_lock_default,
      { className: styles_css_default107["focus-lock"], autoFocus: true },
      import_react278.default.createElement(
        "div",
        { ref: scrollableContainerRef, className: clsx_m_default(styles_css_default107.dropdown, styles_css_default105.dropdown), tabIndex: 0, role: "dialog", "aria-label": i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel, "aria-labelledby": ariaLabelledby !== null && ariaLabelledby !== void 0 ? ariaLabelledby : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabelledby, "aria-describedby": ariaDescribedby !== null && ariaDescribedby !== void 0 ? ariaDescribedby : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaDescribedby },
        import_react278.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default107["dropdown-content"], {
            [styles_css_default107["one-grid"]]: isSingleGrid
          }) },
          import_react278.default.createElement(
            internal_default4,
            { size: "l" },
            import_react278.default.createElement(
              InternalBox,
              { padding: { top: "m", horizontal: "l" } },
              import_react278.default.createElement(
                internal_default4,
                { direction: "vertical", size: "s" },
                rangeSelectorMode === "default" && import_react278.default.createElement(ModeSwitcher, { mode: rangeSelectionMode, onChange: (mode) => {
                  setRangeSelectionMode(mode);
                  setApplyClicked(false);
                  setValidationResult(VALID_RANGE);
                }, i18nStrings }),
                rangeSelectionMode === "absolute" && import_react278.default.createElement(DateRangePickerCalendar, { value: selectedAbsoluteRange, setValue: setSelectedAbsoluteRange, locale: locale3, startOfWeek: startOfWeek2, isDateEnabled, dateDisabledReason, i18nStrings, dateOnly, timeInputFormat, customAbsoluteRangeControl, granularity }),
                rangeSelectionMode === "relative" && import_react278.default.createElement(RelativeRangePicker, { isSingleGrid, options: relativeOptions, dateOnly, initialSelection: selectedRelativeRange, onChange: (range3) => setSelectedRelativeRange(range3), i18nStrings, customUnits: customRelativeRangeUnits, granularity })
              ),
              import_react278.default.createElement(InternalBox, { className: styles_css_default105["validation-section"], margin: !validationResult.valid ? { top: "s" } : void 0 }, !validationResult.valid && import_react278.default.createElement(
                import_react278.default.Fragment,
                null,
                import_react278.default.createElement(
                  internal_default8,
                  { type: "error", statusIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel) },
                  import_react278.default.createElement("span", { className: styles_css_default105["validation-error"] }, validationResult.errorMessage)
                ),
                import_react278.default.createElement(internal_default2, { hidden: true, tagName: "span", ref: liveRegionRef }, validationResult.errorMessage)
              ))
            ),
            import_react278.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default107.footer, {
                [styles_css_default107["one-grid"]]: isSingleGrid,
                [styles_css_default107["has-clear-button"]]: showClearButton
              }) },
              showClearButton && import_react278.default.createElement(
                "div",
                { className: styles_css_default107["footer-button-wrapper"] },
                import_react278.default.createElement(InternalButton, { onClick: onClear, className: styles_css_default105["clear-button"], variant: "link", formAction: "none" }, i18n("i18nStrings.clearButtonLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearButtonLabel))
              ),
              import_react278.default.createElement(
                "div",
                { className: styles_css_default107["footer-button-wrapper"] },
                import_react278.default.createElement(
                  internal_default4,
                  { size: "xs", direction: "horizontal" },
                  import_react278.default.createElement(InternalButton, { onClick: closeDropdown, className: styles_css_default105["cancel-button"], variant: "link", formAction: "none" }, i18n("i18nStrings.cancelButtonLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.cancelButtonLabel)),
                  import_react278.default.createElement(InternalButton, { onClick: onApply, className: styles_css_default105["apply-button"], ref: applyButtonRef, formAction: "none" }, i18n("i18nStrings.applyButtonLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.applyButtonLabel))
                )
              )
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/index.js
function renderDateRange({ locale: locale3, range: range3, placeholder = "", formatRelativeRange, absoluteFormat, hideTimeOffset, timeOffset }) {
  var _a;
  const firstPart = range3 ? range3.type === "relative" ? (_a = formatRelativeRange === null || formatRelativeRange === void 0 ? void 0 : formatRelativeRange(range3)) !== null && _a !== void 0 ? _a : "" : formatDateTimeWithOffset({
    date: range3.startDate,
    timeOffset: timeOffset.startDate,
    hideTimeOffset,
    format: absoluteFormat,
    locale: locale3
  }) : placeholder;
  const secondPart = (range3 === null || range3 === void 0 ? void 0 : range3.type) === "absolute" ? formatDateTimeWithOffset({
    date: range3.endDate,
    timeOffset: timeOffset.endDate,
    hideTimeOffset,
    format: absoluteFormat,
    locale: locale3
  }) : "";
  return import_react279.default.createElement(
    "span",
    { className: !range3 && styles_css_default107["label-text"] || void 0, "aria-disabled": !range3 },
    import_react279.default.createElement("span", { className: (range3 === null || range3 === void 0 ? void 0 : range3.type) === "absolute" ? styles_css_default107["label-token-nowrap"] : void 0 }, firstPart),
    import_react279.default.createElement("span", null, secondPart && " — "),
    import_react279.default.createElement("span", { className: styles_css_default107["label-token-nowrap"] }, secondPart)
  );
}
var DateRangePicker = import_react279.default.forwardRef((_a, ref) => {
  var _b, _c;
  var { locale: locale3 = "", startOfWeek: startOfWeek2, isDateEnabled = () => true, dateDisabledReason, value, placeholder, readOnly = false, disabled = false, onChange, onBlur, onFocus, relativeOptions = [], i18nStrings, isValidRange = () => ({ valid: true }), showClearButton = true, dateOnly = false, timeOffset, getTimeOffset, timeInputFormat = "hh:mm:ss", expandToViewport = false, rangeSelectorMode = "default", customAbsoluteRangeControl, absoluteFormat = "iso", hideTimeOffset, customRelativeRangeUnits, granularity = "day" } = _a, rest = __rest(_a, ["locale", "startOfWeek", "isDateEnabled", "dateDisabledReason", "value", "placeholder", "readOnly", "disabled", "onChange", "onBlur", "onFocus", "relativeOptions", "i18nStrings", "isValidRange", "showClearButton", "dateOnly", "timeOffset", "getTimeOffset", "timeInputFormat", "expandToViewport", "rangeSelectorMode", "customAbsoluteRangeControl", "absoluteFormat", "hideTimeOffset", "customRelativeRangeUnits", "granularity"]);
  const { __internalRootRef } = useBaseComponent("DateRangePicker", {
    props: {
      absoluteFormat,
      dateOnly,
      expandToViewport,
      rangeSelectorMode,
      readOnly,
      showClearButton,
      timeInputFormat,
      hideTimeOffset,
      granularity
    },
    metadata: { hasDisabledReasons: Boolean(dateDisabledReason) }
  });
  const isMonthOnly = granularity === "month";
  const hideTime = dateOnly || isMonthOnly;
  checkControlled("DateRangePicker", "value", value, "onChange", onChange);
  const normalizedTimeOffset = hideTime ? { startDate: void 0, endDate: void 0 } : normalizeTimeOffset(value, getTimeOffset, timeOffset);
  value = formatInitialValue(value, dateOnly, isMonthOnly, normalizedTimeOffset);
  const baseProps = getBaseProps(rest);
  const { invalid, warning, controlId, ariaDescribedby, ariaLabelledby } = useFormFieldContext(Object.assign({ ariaLabelledby: (_b = rest.ariaLabelledby) !== null && _b !== void 0 ? _b : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabelledby, ariaDescribedby: (_c = rest.ariaDescribedby) !== null && _c !== void 0 ? _c : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaDescribedby }, rest));
  const isSingleGrid = useMobile();
  const triggerRef = (0, import_react279.useRef)(null);
  useForwardFocus(ref, triggerRef);
  const rootRef = (0, import_react279.useRef)(null);
  const dropdownId = useUniqueId("date-range-picker-dropdown");
  const triggerContentId = useUniqueId("date-range-picker-trigger");
  useFocusTracker({ rootRef, onBlur, onFocus });
  const [isDropDownOpen, setIsDropDownOpen] = (0, import_react279.useState)(false);
  const normalizedLocale = normalizeLocale("DateRangePicker", locale3);
  const closeDropdown = (focusTrigger = false) => {
    var _a2;
    setIsDropDownOpen(false);
    if (focusTrigger) {
      (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  };
  const onWrapperKeyDownHandler = (event) => {
    if (event.keyCode === KeyCode.escape) {
      if (isDropDownOpen) {
        event.stopPropagation();
      }
      closeDropdown(true);
    }
  };
  const onClear = () => {
    fireNonCancelableEvent(onChange, { value: null });
  };
  const onApply = (newValue) => {
    const formattedValue = formatValue(newValue, {
      dateOnly,
      monthOnly: isMonthOnly,
      timeOffset: hideTime ? { startDate: void 0, endDate: void 0 } : normalizeTimeOffset(newValue, getTimeOffset, timeOffset)
    });
    const validationResult = isValidRange(formattedValue);
    if ((validationResult === null || validationResult === void 0 ? void 0 : validationResult.valid) === false) {
      return validationResult;
    }
    if (isDevelopment2) {
      if ((newValue === null || newValue === void 0 ? void 0 : newValue.type) === "absolute") {
        const [startDateWithoutTime] = newValue.startDate.split("T");
        const [endDateWithoutTime] = newValue.endDate.split("T");
        if (!startDateWithoutTime || !endDateWithoutTime) {
          warnOnce("DateRangePicker", "You have provided an `isValidRange` prop that did not catch a missing start or end date.");
        }
      }
    }
    fireNonCancelableEvent(onChange, { value: formattedValue });
    return validationResult || { valid: true };
  };
  const prevDateOnly = usePrevious(dateOnly);
  (0, import_react279.useEffect)(() => {
    if (prevDateOnly !== void 0 && prevDateOnly !== dateOnly) {
      warnOnce("DateRangePicker", `The provided \`dateOnly\` flag has been changed from "${prevDateOnly}" to "${dateOnly}" which can lead to unexpected value format. Consider using separate components.`);
    }
  }, [prevDateOnly, dateOnly]);
  if (value && value.type !== "absolute" && value.type !== "relative") {
    warnOnce("DateRangePicker", "You provided an invalid value. Reverting back to default.");
    value = null;
  }
  if ((value === null || value === void 0 ? void 0 : value.type) === "absolute" && rangeSelectorMode === "relative-only" || (value === null || value === void 0 ? void 0 : value.type) === "relative" && rangeSelectorMode === "absolute-only") {
    warnOnce("DateRangePicker", "The provided value does not correspond to the current range selector mode. Reverting back to default.");
    value = null;
  }
  const i18n = useInternalI18n("date-range-picker");
  const formatRelativeRange = i18n("i18nStrings.formatRelativeRange", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatRelativeRange, (format3) => ({ amount, unit: unit2 }) => format3({ amount, unit: unit2 }));
  if (isDevelopment2) {
    if (!formatRelativeRange && rangeSelectorMode !== "absolute-only") {
      warnOnce("DateRangePicker", "A function for i18nStrings.formatRelativeRange was not provided. Relative ranges will not be correctly rendered.");
    }
  }
  const formattedDate = renderDateRange({
    locale: normalizedLocale,
    range: value,
    placeholder,
    formatRelativeRange,
    absoluteFormat,
    hideTimeOffset: hideTime || hideTimeOffset,
    timeOffset: normalizedTimeOffset
  });
  const trigger = import_react279.default.createElement(
    button_trigger_default,
    { ref: triggerRef, id: controlId, invalid, warning, ariaLabelledby: joinStrings(ariaLabelledby, triggerContentId), ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel, ariaDescribedby, className: clsx_m_default(styles_css_default105.label, styles_css_default107.label, {
      [styles_css_default107["label-enabled"]]: !readOnly && !disabled
    }), hideCaret: true, onClick: () => {
      setIsDropDownOpen(true);
    }, disabled, readOnly, ariaHasPopup: "dialog" },
    import_react279.default.createElement(
      "span",
      { className: styles_css_default107["trigger-flexbox"] },
      import_react279.default.createElement(
        "span",
        { className: styles_css_default107["icon-wrapper"] },
        import_react279.default.createElement(internal_default, { name: "calendar", variant: disabled || readOnly ? "disabled" : "normal" })
      ),
      import_react279.default.createElement("span", { id: triggerContentId }, formattedDate)
    )
  );
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  return import_react279.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(baseProps.className, styles_css_default107.root, styles_css_default105.root, absoluteFormat === "long-localized" && !dateOnly && !isMonthOnly && styles_css_default107.wide), onKeyDown: onWrapperKeyDownHandler }),
    import_react279.default.createElement(
      dropdown_default,
      { stretchWidth: true, stretchHeight: true, open: isDropDownOpen, onDropdownClose: () => closeDropdown(), trigger, stretchToTriggerWidth: false, expandToViewport, dropdownId },
      import_react279.default.createElement(reset_contexts_for_modal_default, null, isDropDownOpen && import_react279.default.createElement(DateRangePickerDropdown, { startOfWeek: startOfWeek2, locale: normalizedLocale, isSingleGrid, onDropdownClose: () => closeDropdown(true), value, showClearButton, isDateEnabled, dateDisabledReason, i18nStrings, onClear, onApply, getTimeOffset, timeOffset, relativeOptions, isValidRange, dateOnly, timeInputFormat, rangeSelectorMode, ariaLabelledby, ariaDescribedby, customAbsoluteRangeControl, customRelativeRangeUnits, granularity }))
    )
  );
});
applyDisplayName(DateRangePicker, "DateRangePicker");
var date_range_picker_default = DateRangePicker;

// node_modules/@cloudscape-design/components/drawer/index.js
var import_react282 = __toESM(require_react());

// node_modules/@cloudscape-design/components/drawer/implementation.js
var import_react281 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/runtime-drawer/use-runtime-drawer-context.js
var import_react280 = __toESM(require_react());
var useRuntimeDrawerContext = ({ rootRef }) => {
  const [drawerContext, setDrawerContext] = (0, import_react280.useState)(null);
  (0, import_react280.useEffect)(() => {
    var _a, _b;
    if (!(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current)) {
      return;
    }
    const runtimeDrawerWrapper = findUpUntil(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current, (node) => {
      var _a2;
      return !!((_a2 = node === null || node === void 0 ? void 0 : node.dataset) === null || _a2 === void 0 ? void 0 : _a2.awsuiRuntimeDrawerRootId);
    });
    const drawerId = (_a = runtimeDrawerWrapper === null || runtimeDrawerWrapper === void 0 ? void 0 : runtimeDrawerWrapper.dataset) === null || _a === void 0 ? void 0 : _a.awsuiRuntimeDrawerRootId;
    if (!drawerId) {
      return;
    }
    const drawers = awsuiPluginsInternal.appLayout.getDrawersState();
    setDrawerContext((_b = drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === drawerId)) !== null && _b !== void 0 ? _b : null);
    return awsuiPluginsInternal.appLayout.onDrawersUpdated((drawers2) => {
      var _a2;
      setDrawerContext((_a2 = drawers2 === null || drawers2 === void 0 ? void 0 : drawers2.find((drawer) => drawer.id === drawerId)) !== null && _a2 !== void 0 ? _a2 : null);
    });
  }, [rootRef]);
  return drawerContext;
};

// node_modules/@cloudscape-design/components/drawer/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/drawer/styles.scoped.css";
var styles_css_default111 = {
  "drawer": "awsui_drawer_1sxt8_m0rt1_189",
  "header": "awsui_header_1sxt8_m0rt1_222",
  "with-additional-action": "awsui_with-additional-action_1sxt8_m0rt1_238",
  "with-runtime-context": "awsui_with-runtime-context_1sxt8_m0rt1_246",
  "with-toolbar": "awsui_with-toolbar_1sxt8_m0rt1_249",
  "header-actions": "awsui_header-actions_1sxt8_m0rt1_267",
  "content-with-paddings": "awsui_content-with-paddings_1sxt8_m0rt1_273",
  "test-utils-drawer-content": "awsui_test-utils-drawer-content_1sxt8_m0rt1_280"
};

// node_modules/@cloudscape-design/components/drawer/implementation.js
function DrawerImplementation(_a) {
  var { header, children, loading, i18nStrings, disableContentPaddings, __internalRootRef, headerActions } = _a, restProps = __rest(_a, ["header", "children", "loading", "i18nStrings", "disableContentPaddings", "__internalRootRef", "headerActions"]);
  const baseProps = getBaseProps(restProps);
  const isToolbar = useAppLayoutToolbarDesignEnabled();
  const i18n = useInternalI18n("drawer");
  const containerProps = Object.assign(Object.assign({}, baseProps), { className: clsx_m_default(baseProps.className, styles_css_default111.drawer, isToolbar && styles_css_default111["with-toolbar"]) });
  const runtimeDrawerContext = useRuntimeDrawerContext({ rootRef: __internalRootRef });
  const hasAdditioalDrawerAction = !!(runtimeDrawerContext === null || runtimeDrawerContext === void 0 ? void 0 : runtimeDrawerContext.isExpandable);
  return loading ? import_react281.default.createElement(
    "div",
    Object.assign({}, containerProps, { className: clsx_m_default(containerProps.className, styles_css_default111["content-with-paddings"]), ref: __internalRootRef }),
    import_react281.default.createElement(
      StatusIndicator,
      { type: "loading" },
      import_react281.default.createElement(internal_default2, { tagName: "span" }, i18n("i18nStrings.loadingText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.loadingText))
    )
  ) : import_react281.default.createElement(
    "div",
    Object.assign({}, containerProps, { ref: __internalRootRef }),
    header && import_react281.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default111.header, runtimeDrawerContext && styles_css_default111["with-runtime-context"], hasAdditioalDrawerAction && styles_css_default111["with-additional-action"]) },
      header,
      headerActions && import_react281.default.createElement("div", { className: styles_css_default111["header-actions"] }, headerActions)
    ),
    import_react281.default.createElement("div", { className: clsx_m_default(styles_css_default111["test-utils-drawer-content"], !disableContentPaddings && styles_css_default111["content-with-paddings"]) }, children)
  );
}
var createWidgetizedDrawer = createWidgetizedComponent(DrawerImplementation);

// node_modules/@cloudscape-design/components/drawer/internal.js
var InternalDrawer = createWidgetizedDrawer();

// node_modules/@cloudscape-design/components/drawer/index.js
function Drawer2(props2) {
  const internalProps = useBaseComponent("Drawer");
  return import_react282.default.createElement(InternalDrawer, Object.assign({}, internalProps, props2));
}
applyDisplayName(Drawer2, "Drawer");

// node_modules/@cloudscape-design/components/expandable-section/index.js
var import_react283 = __toESM(require_react());
function ExpandableSection(_a) {
  var { variant = "default" } = _a, props2 = __rest(_a, ["variant"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const baseComponentProps = useBaseComponent("ExpandableSection", {
    props: {
      disableContentPaddings: props2.disableContentPaddings,
      headingTagOverride: props2.headingTagOverride,
      variant
    },
    metadata: {
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier),
      hasHeaderActions: Boolean(props2.headerActions)
    }
  }, analyticsMetadata);
  return import_react283.default.createElement(InternalExpandableSection, Object.assign({ variant }, props2, baseComponentProps, { __injectAnalyticsComponentMetadata: true }));
}
applyDisplayName(ExpandableSection, "ExpandableSection");

// node_modules/@cloudscape-design/components/file-dropzone/index.js
var import_react286 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-dropzone/internal.js
var import_react284 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-dropzone/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/file-dropzone/styles.scoped.css";
var styles_css_default112 = {
  "root": "awsui_root_ptw8i_wv87u_181",
  "hovered": "awsui_hovered_ptw8i_wv87u_194",
  "content": "awsui_content_ptw8i_wv87u_201"
};

// node_modules/@cloudscape-design/components/file-dropzone/internal.js
function InternalFileDropzone(_a) {
  var { onChange, children, __internalRootRef = null } = _a, restProps = __rest(_a, ["onChange", "children", "__internalRootRef"]);
  const [isDropzoneHovered, setDropzoneHovered] = (0, import_react284.useState)(false);
  const baseProps = getBaseProps(restProps);
  const onDragOver = (event) => {
    event.preventDefault();
    if (event.dataTransfer) {
      setDropzoneHovered(true);
      event.dataTransfer.dropEffect = "copy";
    }
  };
  const onDragLeave = (event) => {
    event.preventDefault();
    setDropzoneHovered(false);
    if (event.dataTransfer) {
      event.dataTransfer.dropEffect = "none";
    }
  };
  const onDrop = (event) => {
    event.preventDefault();
    setDropzoneHovered(false);
    fireNonCancelableEvent(onChange, { value: Array.from(event.dataTransfer.files) });
  };
  return import_react284.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default112.root, {
      [styles_css_default112.hovered]: isDropzoneHovered
    }), onDragOver, onDragLeave, onDrop }),
    import_react284.default.createElement("div", { className: styles_css_default112.content }, children)
  );
}

// node_modules/@cloudscape-design/components/file-dropzone/use-files-dragging.js
var import_react285 = __toESM(require_react());
function useFilesDragging() {
  const [areFilesDragging, setFilesDragging] = (0, import_react285.useState)(false);
  (0, import_react285.useEffect)(() => {
    let dragTimer = null;
    const onDocumentDragOver = (event) => {
      var _a, _b;
      event.preventDefault();
      let files = 0;
      for (let item = 0; item < (((_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.types.length) || 0); item++) {
        if (((_b = event.dataTransfer) === null || _b === void 0 ? void 0 : _b.types[item]) === "Files") {
          files++;
        }
      }
      if (files > 0) {
        setFilesDragging(true);
        if (dragTimer) {
          clearTimeout(dragTimer);
        }
      }
    };
    const onDocumentDragLeave = (event) => {
      event.preventDefault();
      dragTimer = setTimeout(() => setFilesDragging(false), 25);
    };
    const onDocumentDrop = (event) => {
      event.preventDefault();
      dragTimer = setTimeout(() => setFilesDragging(false), 25);
    };
    const controller = new AbortController();
    document.addEventListener("dragover", onDocumentDragOver, { signal: controller.signal });
    document.addEventListener("dragleave", onDocumentDragLeave, { signal: controller.signal });
    document.addEventListener("drop", onDocumentDrop, { signal: controller.signal });
    return () => {
      if (dragTimer) {
        clearTimeout(dragTimer);
      }
      controller.abort();
    };
  }, []);
  return { areFilesDragging };
}

// node_modules/@cloudscape-design/components/file-dropzone/index.js
function FileDropzone(props2) {
  const baseComponentProps = useBaseComponent("FileDropzone");
  return import_react286.default.createElement(InternalFileDropzone, Object.assign({}, baseComponentProps, props2));
}
applyDisplayName(FileDropzone, "FileDropzone");

// node_modules/@cloudscape-design/components/file-input/index.js
var import_react287 = __toESM(require_react());
var FileInput = import_react287.default.forwardRef((_a, ref) => {
  var { multiple, variant } = _a, props2 = __rest(_a, ["multiple", "variant"]);
  const baseComponentProps = useBaseComponent("FileInput", {
    props: {
      multiple,
      variant
    }
  });
  return import_react287.default.createElement(internal_default15, Object.assign({ multiple, variant }, props2, baseComponentProps, { ref, __injectAnalyticsComponentMetadata: true }));
});
applyDisplayName(FileInput, "FileInput");
var file_input_default = FileInput;

// node_modules/@cloudscape-design/components/file-token-group/index.js
var import_react291 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-token-group/internal.js
var import_react290 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-token-group/file-token.js
var import_react289 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-token-group/default-formatters.js
var KB = 1e3;
var MB = Math.pow(1e3, 2);
var GB = Math.pow(1e3, 3);
var TB = Math.pow(1e3, 4);
function formatFileSize(size) {
  if (size < MB) {
    return `${(size / KB).toFixed(2)} KB`;
  }
  if (size < GB) {
    return `${(size / MB).toFixed(2)} MB`;
  }
  if (size < TB) {
    return `${(size / GB).toFixed(2)} GB`;
  }
  return `${(size / TB).toFixed(2)} TB`;
}
function formatFileLastModified(date2) {
  return formatDateTime(date2);
}

// node_modules/@cloudscape-design/components/file-token-group/thumbnail.js
var import_react288 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-token-group/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/file-token-group/styles.scoped.css";
var styles_css_default113 = {
  "root": "awsui_root_39ths_1hg4x_209",
  "file-loading-overlay": "awsui_file-loading-overlay_39ths_1hg4x_241",
  "file-loading-overlay-single-row": "awsui_file-loading-overlay-single-row_39ths_1hg4x_246",
  "file-option-name": "awsui_file-option-name_39ths_1hg4x_250",
  "file-option-size": "awsui_file-option-size_39ths_1hg4x_251",
  "file-option-last-modified": "awsui_file-option-last-modified_39ths_1hg4x_252",
  "file-option": "awsui_file-option_39ths_1hg4x_250",
  "file-option-thumbnail": "awsui_file-option-thumbnail_39ths_1hg4x_265",
  "file-option-thumbnail-image": "awsui_file-option-thumbnail-image_39ths_1hg4x_269",
  "file-option-metadata": "awsui_file-option-metadata_39ths_1hg4x_282",
  "with-image": "awsui_with-image_39ths_1hg4x_285",
  "single-row-loading": "awsui_single-row-loading_39ths_1hg4x_288",
  "token": "awsui_token_39ths_1hg4x_292",
  "token-grid": "awsui_token-grid_39ths_1hg4x_299",
  "token-contains-image": "awsui_token-contains-image_39ths_1hg4x_308",
  "token-box": "awsui_token-box_39ths_1hg4x_312",
  "horizontal": "awsui_horizontal_39ths_1hg4x_331",
  "error": "awsui_error_39ths_1hg4x_339",
  "dismiss-button": "awsui_dismiss-button_39ths_1hg4x_343",
  "warning": "awsui_warning_39ths_1hg4x_349",
  "read-only": "awsui_read-only_39ths_1hg4x_359",
  "loading": "awsui_loading_39ths_1hg4x_372"
};

// node_modules/@cloudscape-design/components/file-token-group/thumbnail.js
function FileOptionThumbnail({ file }) {
  const [imageSrc, setImageSrc] = (0, import_react288.useState)("");
  (0, import_react288.useEffect)(() => {
    if (URL.createObjectURL) {
      const src = URL.createObjectURL(file);
      setImageSrc(src);
      return () => {
        URL.revokeObjectURL(src);
      };
    }
  }, [file]);
  return import_react288.default.createElement(
    "div",
    { className: styles_css_default113["file-option-thumbnail"], "aria-hidden": true },
    import_react288.default.createElement("img", { className: styles_css_default113["file-option-thumbnail-image"], alt: file.name, src: imageSrc })
  );
}

// node_modules/@cloudscape-design/components/file-token-group/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/file-token-group/test-classes/styles.scoped.css";
var styles_css_default114 = {
  "root": "awsui_root_polq8_6ggi7_5",
  "file-option-thumbnail": "awsui_file-option-thumbnail_polq8_6ggi7_6",
  "file-option-name": "awsui_file-option-name_polq8_6ggi7_7",
  "file-option-size": "awsui_file-option-size_polq8_6ggi7_8",
  "file-option-last-modified": "awsui_file-option-last-modified_polq8_6ggi7_9",
  "ellipsis-active": "awsui_ellipsis-active_polq8_6ggi7_10"
};

// node_modules/@cloudscape-design/components/file-token-group/file-token.js
function InternalFileToken({ file, showFileLastModified, showFileSize, showFileThumbnail, i18nStrings, onDismiss, errorText, warningText, readOnly, loading, alignment, groupContainsImage, isImage, index }) {
  var _a, _b;
  const formatFileSize2 = (_a = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatFileSize) !== null && _a !== void 0 ? _a : formatFileSize;
  const formatFileLastModified2 = (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatFileLastModified) !== null && _b !== void 0 ? _b : formatFileLastModified;
  const errorId = useUniqueId("error");
  const warningId = useUniqueId("warning");
  const showWarning = warningText && !errorText;
  const containerRef = (0, import_react289.useRef)(null);
  const fileNameRef = (0, import_react289.useRef)(null);
  const fileNameContainerRef = (0, import_react289.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react289.useState)(false);
  const getDismissLabel = (fileIndex) => {
    var _a2;
    return (_a2 = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeFileAriaLabel) === null || _a2 === void 0 ? void 0 : _a2.call(i18nStrings, fileIndex);
  };
  function isEllipsisActive() {
    const span = fileNameRef.current;
    const container = fileNameContainerRef.current;
    if (span && container) {
      return span.offsetWidth >= container.offsetWidth;
    }
    return false;
  }
  const fileIsSingleRow = !showFileLastModified && !showFileSize && (!groupContainsImage || groupContainsImage && !showFileThumbnail);
  return import_react289.default.createElement(
    "div",
    { ref: containerRef, className: clsx_m_default(styles_css_default113.token, {
      [styles_css_default113["token-grid"]]: alignment === "horizontal",
      [styles_css_default113["token-contains-image"]]: groupContainsImage && showFileThumbnail
    }), role: "group", "aria-label": file.name, "aria-describedby": errorText ? errorId : warningText ? warningId : void 0, "aria-disabled": loading, "data-index": index },
    import_react289.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default113["token-box"], {
        [styles_css_default113.loading]: loading,
        [styles_css_default113.error]: errorText,
        [styles_css_default113.warning]: showWarning,
        [styles_css_default113.horizontal]: alignment === "horizontal",
        [styles_css_default113["read-only"]]: readOnly
      }) },
      loading && import_react289.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default113["file-loading-overlay"], {
          [styles_css_default113["file-loading-overlay-single-row"]]: loading && fileIsSingleRow
        }) },
        import_react289.default.createElement(InternalSpinner, { variant: "disabled", size: "normal" })
      ),
      import_react289.default.createElement(
        InternalBox,
        { className: styles_css_default113["file-option"] },
        showFileThumbnail && isImage && import_react289.default.createElement(FileOptionThumbnail, { file }),
        import_react289.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default113["file-option-metadata"], {
            [styles_css_default113["with-image"]]: showFileThumbnail && isImage,
            [styles_css_default113["single-row-loading"]]: loading && fileIsSingleRow
          }) },
          import_react289.default.createElement(
            internal_default4,
            { direction: "vertical", size: "xxxs" },
            import_react289.default.createElement(
              "div",
              { onMouseOver: () => setShowTooltip(true), onMouseOut: () => setShowTooltip(false), ref: fileNameContainerRef },
              import_react289.default.createElement(
                InternalBox,
                { fontWeight: "normal", className: clsx_m_default(styles_css_default113["file-option-name"], styles_css_default114["file-option-name"], {
                  [styles_css_default114["ellipsis-active"]]: isEllipsisActive()
                }) },
                import_react289.default.createElement("span", { ref: fileNameRef }, file.name)
              )
            ),
            showFileSize && file.size ? import_react289.default.createElement(InternalBox, { fontSize: "body-s", color: "text-body-secondary", className: clsx_m_default(styles_css_default113["file-option-size"], styles_css_default114["file-option-size"]) }, formatFileSize2(file.size)) : null,
            showFileLastModified && file.lastModified ? import_react289.default.createElement(InternalBox, { fontSize: "body-s", color: "text-body-secondary", className: clsx_m_default(styles_css_default113["file-option-last-modified"], styles_css_default114["file-option-last-modified"]) }, formatFileLastModified2(new Date(file.lastModified))) : null
          )
        )
      ),
      onDismiss && !readOnly && import_react289.default.createElement(dismiss_button_default, { dismissLabel: getDismissLabel(index), onDismiss })
    ),
    errorText && import_react289.default.createElement(FormFieldError, { id: errorId, errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel }, errorText),
    showWarning && import_react289.default.createElement(FormFieldWarning, { id: warningId, warningIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel }, warningText),
    showTooltip && isEllipsisActive() && import_react289.default.createElement(Tooltip, { trackRef: containerRef, trackKey: file.name, value: import_react289.default.createElement(InternalBox, { fontWeight: "normal" }, file.name), onDismiss: () => setShowTooltip(false) })
  );
}
var file_token_default = InternalFileToken;

// node_modules/@cloudscape-design/components/file-token-group/internal.js
function InternalFileTokenGroup(_a) {
  var { items, showFileLastModified, showFileSize, showFileThumbnail, i18nStrings, onDismiss, limit, readOnly, alignment = "vertical", __internalRootRef } = _a, restProps = __rest(_a, ["items", "showFileLastModified", "showFileSize", "showFileThumbnail", "i18nStrings", "onDismiss", "limit", "readOnly", "alignment", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  const [nextFocusIndex, setNextFocusIndex] = (0, import_react290.useState)(null);
  const tokenListRef = useListFocusController({
    nextFocusIndex,
    onFocusMoved: (target) => {
      target.focus();
      setNextFocusIndex(null);
    },
    listItemSelector: `.${styles_css_default68["list-item"]}`,
    showMoreSelector: `.${styles_css_default68.toggle}`
  });
  const mergedRef = useMergeRefs(__internalRootRef, tokenListRef);
  const isImage = (file) => file.type.startsWith("image/");
  const groupContainsImage = items.filter((item) => isImage(item.file)).length > 0;
  const i18n = useInternalI18n("file-token-group");
  return import_react290.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(baseProps.className, styles_css_default113.root, styles_css_default114.root) }),
    import_react290.default.createElement(TokenList, { alignment: alignment === "horizontal" ? "horizontal-grid" : alignment, items, renderItem: (file, fileIndex) => import_react290.default.createElement(file_token_default, { file: file.file, showFileLastModified, showFileSize, showFileThumbnail, onDismiss: () => {
      fireNonCancelableEvent(onDismiss, { fileIndex });
      setNextFocusIndex(fileIndex);
    }, errorText: file.errorText, warningText: file.warningText, i18nStrings: {
      removeFileAriaLabel: i18n("i18nStrings.removeFileAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeFileAriaLabel, (format3) => (fileIndex2) => format3({ fileIndex: fileIndex2 + 1 })),
      errorIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel),
      warningIconAriaLabel: i18n("i18nStrings.warningIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel),
      formatFileSize: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatFileSize,
      formatFileLastModified: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatFileLastModified
    }, loading: file.loading, readOnly, alignment, groupContainsImage, isImage: isImage(file.file), index: fileIndex }), limit, i18nStrings: {
      limitShowFewer: i18n("i18nStrings.limitShowFewer", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.limitShowFewer),
      limitShowMore: i18n("i18nStrings.limitShowMore", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.limitShowMore)
    } })
  );
}
var internal_default24 = InternalFileTokenGroup;

// node_modules/@cloudscape-design/components/file-token-group/index.js
var FileTokenGroup = (_a) => {
  var { showFileLastModified, showFileSize, showFileThumbnail, alignment, limit } = _a, props2 = __rest(_a, ["showFileLastModified", "showFileSize", "showFileThumbnail", "alignment", "limit"]);
  const baseComponentProps = useBaseComponent("FileTokenGroup", {
    props: {
      showFileLastModified,
      showFileSize,
      showFileThumbnail,
      alignment,
      limit
    }
  });
  return import_react291.default.createElement(internal_default24, Object.assign({ showFileLastModified, showFileSize, showFileThumbnail, alignment, limit }, props2, baseComponentProps));
};
applyDisplayName(FileTokenGroup, "FileTokenGroup");
var file_token_group_default = FileTokenGroup;

// node_modules/@cloudscape-design/components/file-upload/index.js
var import_react293 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-upload/internal.js
var import_react292 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-upload/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/file-upload/styles.scoped.css";
var styles_css_default115 = {
  "root": "awsui_root_1ubbm_139m0_9",
  "hints": "awsui_hints_1ubbm_139m0_10"
};

// node_modules/@cloudscape-design/components/file-upload/internal.js
var internal_default25 = import_react292.default.forwardRef(InternalFileUpload);
function InternalFileUpload(_a, externalRef) {
  var _b, _c, _d;
  var { accept, ariaRequired, multiple = false, onChange, value, tokenLimit, showFileSize, showFileLastModified, showFileThumbnail, i18nStrings, __internalRootRef = null, constraintText, errorText, warningText, fileErrors, fileWarnings, fileTokenAlignment = "vertical" } = _a, restProps = __rest(_a, ["accept", "ariaRequired", "multiple", "onChange", "value", "tokenLimit", "showFileSize", "showFileLastModified", "showFileThumbnail", "i18nStrings", "__internalRootRef", "constraintText", "errorText", "warningText", "fileErrors", "fileWarnings", "fileTokenAlignment"]);
  const [nextFocusIndex, setNextFocusIndex] = (0, import_react292.useState)(null);
  const tokenListRef = useListFocusController({
    nextFocusIndex,
    onFocusMoved: (target) => {
      target.focus();
      setNextFocusIndex(null);
    },
    listItemSelector: `.${styles_css_default68["list-item"]}`,
    showMoreSelector: `.${styles_css_default68.toggle}`,
    fallbackSelector: `.${styles_css_default79["file-input"]}`
  });
  const i18n = useInternalI18n("file-upload");
  const baseProps = getBaseProps(restProps);
  const metadata = { showFileSize, showFileLastModified, showFileThumbnail };
  const errorId = useUniqueId("error-");
  const warningId = useUniqueId("warning-");
  const constraintTextId = useUniqueId("constraint-text-");
  const fileInputRef = (0, import_react292.useRef)(null);
  const ref = useMergeRefs(fileInputRef, externalRef);
  checkControlled("FileUpload", "value", value, "onChange", onChange);
  if (!multiple && value.length > 1) {
    warnOnce("FileUpload", "Value must be an array of size 0 or 1 when `multiple=false`.");
  }
  const handleFilesChange = (newFiles) => {
    const newValue = multiple ? [...value, ...newFiles] : newFiles[0] ? newFiles.slice(0, 1) : [...value];
    fireNonCancelableEvent(onChange, { value: newValue });
  };
  const onFileRemove = (removeFileIndex) => {
    const newValue = value.filter((_, fileIndex) => fileIndex !== removeFileIndex);
    fireNonCancelableEvent(onChange, { value: newValue });
    setNextFocusIndex(removeFileIndex);
  };
  const { areFilesDragging } = useFilesDragging();
  const showWarning = warningText && !errorText;
  if (warningText && errorText) {
    warnOnce("FileUpload", "Both `errorText` and `warningText` exist. `warningText` will not be shown.");
  }
  const formFieldContext = useFormFieldContext(restProps);
  const ariaDescribedBy = joinStrings((_b = restProps.ariaDescribedby) !== null && _b !== void 0 ? _b : formFieldContext.ariaDescribedby, errorText ? errorId : void 0, showWarning ? warningId : void 0, constraintText ? constraintTextId : void 0);
  const hasError = Boolean(errorText || (fileErrors === null || fileErrors === void 0 ? void 0 : fileErrors.filter(Boolean).length));
  const invalid = restProps.invalid || formFieldContext.invalid || hasError;
  return import_react292.default.createElement(
    internal_default4,
    Object.assign({}, baseProps, { size: "xs", className: clsx_m_default(baseProps.className, styles_css_default115.root), __internalRootRef, ref: tokenListRef }),
    import_react292.default.createElement(
      InternalBox,
      null,
      areFilesDragging ? import_react292.default.createElement(InternalFileDropzone, { onChange: (event) => handleFilesChange(event.detail.value) }, i18n("i18nStrings.dropzoneText", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dropzoneText) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, multiple), (format3) => format3({ multiple: `${multiple}` }))) : import_react292.default.createElement(internal_default15, { ref, accept, ariaRequired, multiple, onChange: (event) => handleFilesChange(event.detail.value), value, ariaLabelledby: restProps.ariaLabelledby, controlId: restProps.controlId, ariaDescribedby: ariaDescribedBy, invalid }, i18n("i18nStrings.uploadButtonText", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.uploadButtonText) === null || _d === void 0 ? void 0 : _d.call(i18nStrings, multiple), (format3) => format3({ multiple: `${multiple}` }))),
      (constraintText || errorText || warningText) && import_react292.default.createElement(
        "div",
        { className: styles_css_default115.hints },
        errorText && import_react292.default.createElement(FormFieldError, { id: errorId, errorIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel) }, errorText),
        showWarning && import_react292.default.createElement(FormFieldWarning, { id: warningId, warningIconAriaLabel: i18n("i18nStrings.warningIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel) }, warningText),
        constraintText && import_react292.default.createElement(ConstraintText, { id: constraintTextId, hasValidationText: !!errorText || !!warningText }, constraintText)
      )
    ),
    value.length > 0 ? import_react292.default.createElement(internal_default24, { limit: tokenLimit, alignment: fileTokenAlignment, items: value.map((file, fileIndex) => ({
      file,
      errorText: fileErrors === null || fileErrors === void 0 ? void 0 : fileErrors[fileIndex],
      warningText: fileWarnings === null || fileWarnings === void 0 ? void 0 : fileWarnings[fileIndex]
    })), showFileLastModified: metadata.showFileLastModified, showFileSize: metadata.showFileSize, showFileThumbnail: metadata.showFileThumbnail, i18nStrings: {
      removeFileAriaLabel: i18n("i18nStrings.removeFileAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeFileAriaLabel, (format3) => (fileIndex) => format3({ fileIndex: fileIndex + 1 })),
      limitShowFewer: i18n("i18nStrings.limitShowFewer", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.limitShowFewer),
      limitShowMore: i18n("i18nStrings.limitShowMore", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.limitShowMore),
      formatFileSize: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatFileSize,
      formatFileLastModified: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatFileLastModified,
      errorIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel),
      warningIconAriaLabel: i18n("i18nStrings.warningIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel)
    }, onDismiss: (event) => onFileRemove(event.detail.fileIndex) }) : null
  );
}

// node_modules/@cloudscape-design/components/file-upload/index.js
var FileUpload = import_react293.default.forwardRef((_a, ref) => {
  var { multiple, showFileSize, showFileLastModified, showFileThumbnail } = _a, restProps = __rest(_a, ["multiple", "showFileSize", "showFileLastModified", "showFileThumbnail"]);
  const baseComponentProps = useBaseComponent("FileUpload", {
    props: { multiple, showFileLastModified, showFileSize, showFileThumbnail, tokenLimit: restProps.tokenLimit }
  });
  const externalProps = getExternalProps(restProps);
  return import_react293.default.createElement(internal_default25, Object.assign({ ref, multiple, showFileSize, showFileLastModified, showFileThumbnail }, externalProps, baseComponentProps));
});
applyDisplayName(FileUpload, "FileUpload");
var file_upload_default = FileUpload;

// node_modules/@cloudscape-design/components/flashbar/index.js
var import_react299 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/internal-do-not-use-core.js
var import_react298 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/collapsible-flashbar.js
var import_react296 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/animate.js
function getDOMRects(elements) {
  const rects = {};
  for (const id in elements) {
    const element = elements[id];
    if (element) {
      rects[id] = element.getBoundingClientRect();
    }
  }
  return rects;
}
function animate({ oldState, elements, onTransitionsEnd, newElementInitialState }) {
  for (const id in elements) {
    const element = elements[id];
    const oldRect = oldState[id];
    if (element) {
      const newRect = element.getBoundingClientRect();
      const noOpTransform = { scale: 1, x: 0, y: 0 };
      const calculatedInverseTransform = oldRect ? {
        scale: oldRect.width / newRect.width,
        x: (oldRect.left + oldRect.right) / 2 - (newRect.left + newRect.right) / 2,
        y: (oldRect.top + oldRect.bottom) / 2 - (newRect.top + newRect.bottom) / 2
      } : newElementInitialState ? newElementInitialState(newRect) : {};
      const inverseTransform2 = Object.assign(Object.assign({}, noOpTransform), calculatedInverseTransform);
      element.style.transitionProperty = "none";
      element.style.transform = `scale(${inverseTransform2.scale}) translate(${inverseTransform2.x}px, ${inverseTransform2.y}px)`;
      if (!oldRect) {
        element.style.opacity = "0";
      }
    }
  }
  requestAnimationFrame(() => {
    const ongoingAnimations = /* @__PURE__ */ new Set();
    for (const id in elements) {
      const element = elements[id];
      if (element) {
        const oldRect = oldState[id];
        if (oldRect) {
          element.style.transitionProperty = `transform`;
          element.style.transform = "";
        } else {
          element.style.transitionProperty = `transform, opacity`;
          element.style.transform = "";
          element.style.opacity = "";
        }
        const onTransitionStart = (event) => {
          if (event.target === element) {
            ongoingAnimations.add(id);
            element.removeEventListener("transitionstart", onTransitionStart);
          }
        };
        const onTransitionEnd = (event) => {
          if (event.target === element) {
            element.style.transitionProperty = "";
            element.removeEventListener("transitionend", onTransitionEnd);
            if (onTransitionsEnd) {
              ongoingAnimations.delete(id);
              if (ongoingAnimations.size === 0) {
                onTransitionsEnd();
              }
            }
          }
        };
        element.addEventListener("transitionstart", onTransitionStart);
        element.addEventListener("transitionend", onTransitionEnd);
      }
    }
  });
}

// node_modules/@cloudscape-design/components/flashbar/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/flashbar/analytics-metadata/styles.scoped.css";
var styles_css_default116 = {
  "flash-header": "awsui_flash-header_4c95g_vov7p_5"
};

// node_modules/@cloudscape-design/components/flashbar/analytics-metadata/utils.js
var getComponentsAnalyticsMetadata = (itemsCount, stackItems, expanded) => {
  const metadata = {
    component: {
      name: "awsui.Flashbar",
      label: stackItems ? { root: "self", selector: "ul" } : { root: "self" },
      properties: {
        itemsCount: `${itemsCount}`,
        stackItems: `${stackItems}`
      }
    }
  };
  if (expanded !== void 0) {
    metadata.component.properties.expanded = `${expanded}`;
  }
  return metadata;
};
var getItemAnalyticsMetadata = (position, type, id) => {
  const baseMetadata = {
    itemLabel: `.${styles_css_default116["flash-header"]}`,
    itemPosition: `${position}`,
    itemType: type
  };
  if (id) {
    baseMetadata.itemId = id;
  }
  return {
    component: { innerContext: baseMetadata }
  };
};

// node_modules/@cloudscape-design/components/flashbar/common.js
var import_react295 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/flash.js
var import_react294 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/style.js
function getCollapsibleFlashStyles(style, type = "info") {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
  if (SYSTEM !== "core" || !style) {
    return void 0;
  }
  const background = ((_b = (_a = style === null || style === void 0 ? void 0 : style.item) === null || _a === void 0 ? void 0 : _a.root) === null || _b === void 0 ? void 0 : _b.background) && (type === "in-progress" ? (_d = (_c = style === null || style === void 0 ? void 0 : style.item) === null || _c === void 0 ? void 0 : _c.root) === null || _d === void 0 ? void 0 : _d.background.inProgress : (_f = (_e = style === null || style === void 0 ? void 0 : style.item) === null || _e === void 0 ? void 0 : _e.root) === null || _f === void 0 ? void 0 : _f.background[type]);
  const borderColor = ((_h = (_g = style === null || style === void 0 ? void 0 : style.item) === null || _g === void 0 ? void 0 : _g.root) === null || _h === void 0 ? void 0 : _h.borderColor) && (type === "in-progress" ? (_k = (_j = style === null || style === void 0 ? void 0 : style.item) === null || _j === void 0 ? void 0 : _j.root) === null || _k === void 0 ? void 0 : _k.borderColor.inProgress : (_m = (_l = style === null || style === void 0 ? void 0 : style.item) === null || _l === void 0 ? void 0 : _l.root) === null || _m === void 0 ? void 0 : _m.borderColor[type]);
  const borderRadius = (_p = (_o = style === null || style === void 0 ? void 0 : style.item) === null || _o === void 0 ? void 0 : _o.root) === null || _p === void 0 ? void 0 : _p.borderRadius;
  const borderWidth = (_r = (_q = style === null || style === void 0 ? void 0 : style.item) === null || _q === void 0 ? void 0 : _q.root) === null || _r === void 0 ? void 0 : _r.borderWidth;
  const borderStyle = ((_t = (_s = style === null || style === void 0 ? void 0 : style.item) === null || _s === void 0 ? void 0 : _s.root) === null || _t === void 0 ? void 0 : _t.borderWidth) && "solid";
  const color2 = ((_v = (_u = style === null || style === void 0 ? void 0 : style.item) === null || _u === void 0 ? void 0 : _u.root) === null || _v === void 0 ? void 0 : _v.color) && (type === "in-progress" ? (_x = (_w = style === null || style === void 0 ? void 0 : style.item) === null || _w === void 0 ? void 0 : _w.root) === null || _x === void 0 ? void 0 : _x.color.inProgress : (_z = (_y = style === null || style === void 0 ? void 0 : style.item) === null || _y === void 0 ? void 0 : _y.root) === null || _z === void 0 ? void 0 : _z.color[type]);
  return {
    background,
    borderColor,
    borderRadius,
    borderStyle,
    borderWidth,
    color: color2
  };
}
function getFlashStyles(style, type = "info") {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
  if (SYSTEM !== "core" || !style) {
    return void 0;
  }
  const focusRingBorderColor = ((_c = (_b = (_a = style === null || style === void 0 ? void 0 : style.item) === null || _a === void 0 ? void 0 : _a.root) === null || _b === void 0 ? void 0 : _b.focusRing) === null || _c === void 0 ? void 0 : _c.borderColor) && (type === "in-progress" ? style.item.root.focusRing.borderColor.inProgress : style.item.root.focusRing.borderColor[type]);
  return Object.assign(Object.assign(Object.assign({}, getCollapsibleFlashStyles(style, type)), ((_e = (_d = style === null || style === void 0 ? void 0 : style.item) === null || _d === void 0 ? void 0 : _d.root) === null || _e === void 0 ? void 0 : _e.focusRing) && {
    [custom_css_properties_default.styleFocusRingBorderColor]: focusRingBorderColor,
    [custom_css_properties_default.styleFocusRingBorderRadius]: (_f = style.item.root.focusRing) === null || _f === void 0 ? void 0 : _f.borderRadius,
    [custom_css_properties_default.styleFocusRingBorderWidth]: (_g = style.item.root.focusRing) === null || _g === void 0 ? void 0 : _g.borderWidth
  }), ((_k = (_j = (_h = style === null || style === void 0 ? void 0 : style.item) === null || _h === void 0 ? void 0 : _h.root) === null || _j === void 0 ? void 0 : _j.focusRing) === null || _k === void 0 ? void 0 : _k.borderRadius) && {
    [custom_css_properties_default.styleFocusRingBorderRadius]: style.item.root.focusRing.borderRadius
  });
}
function getDismissButtonStyles(style, type = "info") {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
  if (SYSTEM !== "core" || !style) {
    return void 0;
  }
  const activeColor = ((_c = (_b = (_a = style === null || style === void 0 ? void 0 : style.item) === null || _a === void 0 ? void 0 : _a.dismissButton) === null || _b === void 0 ? void 0 : _b.color) === null || _c === void 0 ? void 0 : _c.active) && (type === "in-progress" ? style.item.dismissButton.color.active.inProgress : style.item.dismissButton.color.active[type]);
  const defaultColor = ((_f = (_e = (_d = style === null || style === void 0 ? void 0 : style.item) === null || _d === void 0 ? void 0 : _d.dismissButton) === null || _e === void 0 ? void 0 : _e.color) === null || _f === void 0 ? void 0 : _f.default) && (type === "in-progress" ? style.item.dismissButton.color.default.inProgress : style.item.dismissButton.color.default[type]);
  const hoverColor = ((_j = (_h = (_g = style === null || style === void 0 ? void 0 : style.item) === null || _g === void 0 ? void 0 : _g.dismissButton) === null || _h === void 0 ? void 0 : _h.color) === null || _j === void 0 ? void 0 : _j.hover) && (type === "in-progress" ? style.item.dismissButton.color.hover.inProgress : style.item.dismissButton.color.hover[type]);
  const focusRingBorderColor = ((_m = (_l = (_k = style === null || style === void 0 ? void 0 : style.item) === null || _k === void 0 ? void 0 : _k.dismissButton) === null || _l === void 0 ? void 0 : _l.focusRing) === null || _m === void 0 ? void 0 : _m.borderColor) && (type === "in-progress" ? style.item.dismissButton.focusRing.borderColor.inProgress : style.item.dismissButton.focusRing.borderColor[type]);
  return {
    root: {
      color: {
        active: activeColor,
        default: defaultColor,
        hover: hoverColor
      },
      focusRing: {
        borderColor: focusRingBorderColor,
        borderRadius: (_q = (_p = (_o = style === null || style === void 0 ? void 0 : style.item) === null || _o === void 0 ? void 0 : _o.dismissButton) === null || _p === void 0 ? void 0 : _p.focusRing) === null || _q === void 0 ? void 0 : _q.borderRadius,
        borderWidth: (_t = (_s = (_r = style === null || style === void 0 ? void 0 : style.item) === null || _r === void 0 ? void 0 : _r.dismissButton) === null || _s === void 0 ? void 0 : _s.focusRing) === null || _t === void 0 ? void 0 : _t.borderWidth
      }
    }
  };
}
function getNotificationBarStyles(style) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20;
  if (SYSTEM !== "core" || !style) {
    return void 0;
  }
  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ borderRadius: (_b = (_a = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _a === void 0 ? void 0 : _a.root) === null || _b === void 0 ? void 0 : _b.borderRadius, borderWidth: (_d = (_c = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _c === void 0 ? void 0 : _c.root) === null || _d === void 0 ? void 0 : _d.borderWidth }, ((_g = (_f = (_e = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _e === void 0 ? void 0 : _e.root) === null || _f === void 0 ? void 0 : _f.background) === null || _g === void 0 ? void 0 : _g.active) && {
    [custom_css_properties_default.styleBackgroundActive]: style.notificationBar.root.background.active
  }), ((_k = (_j = (_h = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _h === void 0 ? void 0 : _h.root) === null || _j === void 0 ? void 0 : _j.background) === null || _k === void 0 ? void 0 : _k.default) && {
    [custom_css_properties_default.styleBackgroundDefault]: style.notificationBar.root.background.default
  }), ((_o = (_m = (_l = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _l === void 0 ? void 0 : _l.root) === null || _m === void 0 ? void 0 : _m.background) === null || _o === void 0 ? void 0 : _o.hover) && {
    [custom_css_properties_default.styleBackgroundHover]: style.notificationBar.root.background.hover
  }), ((_r = (_q = (_p = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _p === void 0 ? void 0 : _p.root) === null || _q === void 0 ? void 0 : _q.borderColor) === null || _r === void 0 ? void 0 : _r.active) && {
    [custom_css_properties_default.styleBorderColorActive]: style.notificationBar.root.borderColor.active
  }), ((_u = (_t = (_s = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _s === void 0 ? void 0 : _s.root) === null || _t === void 0 ? void 0 : _t.borderColor) === null || _u === void 0 ? void 0 : _u.default) && {
    [custom_css_properties_default.styleBorderColorDefault]: style.notificationBar.root.borderColor.default
  }), ((_x = (_w = (_v = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _v === void 0 ? void 0 : _v.root) === null || _w === void 0 ? void 0 : _w.borderColor) === null || _x === void 0 ? void 0 : _x.hover) && {
    [custom_css_properties_default.styleBorderColorHover]: style.notificationBar.root.borderColor.hover
  }), ((_0 = (_z = (_y = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _y === void 0 ? void 0 : _y.root) === null || _z === void 0 ? void 0 : _z.color) === null || _0 === void 0 ? void 0 : _0.active) && {
    [custom_css_properties_default.styleColorActive]: style.notificationBar.root.color.active
  }), ((_3 = (_2 = (_1 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _1 === void 0 ? void 0 : _1.root) === null || _2 === void 0 ? void 0 : _2.color) === null || _3 === void 0 ? void 0 : _3.default) && {
    [custom_css_properties_default.styleColorDefault]: style.notificationBar.root.color.default
  }), ((_6 = (_5 = (_4 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _4 === void 0 ? void 0 : _4.root) === null || _5 === void 0 ? void 0 : _5.color) === null || _6 === void 0 ? void 0 : _6.hover) && {
    [custom_css_properties_default.styleColorHover]: style.notificationBar.root.color.hover
  }), ((_8 = (_7 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _7 === void 0 ? void 0 : _7.expandButton) === null || _8 === void 0 ? void 0 : _8.focusRing) && {
    [custom_css_properties_default.styleFocusRingBorderColor]: (_11 = (_10 = (_9 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _9 === void 0 ? void 0 : _9.expandButton) === null || _10 === void 0 ? void 0 : _10.focusRing) === null || _11 === void 0 ? void 0 : _11.borderColor,
    [custom_css_properties_default.styleFocusRingBorderRadius]: (_14 = (_13 = (_12 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _12 === void 0 ? void 0 : _12.expandButton) === null || _13 === void 0 ? void 0 : _13.focusRing) === null || _14 === void 0 ? void 0 : _14.borderRadius,
    [custom_css_properties_default.styleFocusRingBorderWidth]: (_17 = (_16 = (_15 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _15 === void 0 ? void 0 : _15.expandButton) === null || _16 === void 0 ? void 0 : _16.focusRing) === null || _17 === void 0 ? void 0 : _17.borderWidth
  }), ((_20 = (_19 = (_18 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _18 === void 0 ? void 0 : _18.expandButton) === null || _19 === void 0 ? void 0 : _19.focusRing) === null || _20 === void 0 ? void 0 : _20.borderRadius) && {
    [custom_css_properties_default.styleFocusRingBorderRadius]: style.notificationBar.expandButton.focusRing.borderRadius
  });
}

// node_modules/@cloudscape-design/components/flashbar/utils.js
var FOCUS_THROTTLE_DELAY = 2e3;
var typesToColors = {
  error: "red",
  info: "blue",
  "in-progress": "blue",
  success: "green",
  warning: "yellow"
};
function getColorFromType(type) {
  const defaultColor = "blue";
  return type ? typesToColors[type] || defaultColor : defaultColor;
}
function getItemType(item) {
  if (item.loading) {
    return "in-progress";
  } else {
    return item.type || "info";
  }
}
function getItemColor(item) {
  return getColorFromType(getItemType(item));
}
function getVisibleCollapsedItems(items, desiredLength) {
  const itemsOnTop = [];
  const itemsToPromote = [];
  const addedColors = /* @__PURE__ */ new Set();
  const allPossibleColors = Object.keys(typesToColors).length;
  const finalLength = Math.min(items.length, desiredLength);
  for (let i2 = 0; i2 < items.length; i2++) {
    const item = items[i2];
    const color2 = getItemColor(item);
    const isColorRepeated = addedColors.has(color2);
    if (i2 < finalLength) {
      itemsOnTop.push({ item: Object.assign(Object.assign({}, item), { expandedIndex: i2 }), isColorRepeated });
    } else {
      if (addedColors.size === allPossibleColors) {
        break;
      } else if (!isColorRepeated) {
        itemsToPromote.push(Object.assign(Object.assign({}, item), { expandedIndex: i2 }));
      }
    }
    addedColors.add(color2);
  }
  const reversedInitialSelection = [];
  let slotsReservedForPromotions = 0;
  for (let j = itemsOnTop.length - 1; j >= 0; j--) {
    const item = itemsOnTop[j];
    if (item.isColorRepeated && slotsReservedForPromotions < itemsToPromote.length) {
      slotsReservedForPromotions += 1;
    } else {
      reversedInitialSelection.push(item.item);
    }
  }
  const selectedItems = reversedInitialSelection.reverse();
  for (let k3 = 0; selectedItems.length < desiredLength; k3++) {
    selectedItems.push(itemsToPromote[k3]);
  }
  return selectedItems;
}
function getFlashTypeCount(items) {
  const count = { error: 0, info: 0, "in-progress": 0, success: 0, warning: 0 };
  for (const item of items) {
    const type = getItemType(item);
    count[type] += 1;
  }
  return count;
}
var counterTypes = [
  { type: "error", labelName: "errorIconAriaLabel", iconName: "status-negative" },
  { type: "warning", labelName: "warningIconAriaLabel", iconName: "status-warning" },
  { type: "success", labelName: "successIconAriaLabel", iconName: "status-positive" },
  { type: "info", labelName: "infoIconAriaLabel", iconName: "status-info" },
  { type: "in-progress", labelName: "inProgressIconAriaLabel", iconName: "status-in-progress" }
];

// node_modules/@cloudscape-design/components/flashbar/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/flashbar/styles.scoped.css";
var styles_css_default117 = {
  "flash-with-motion": "awsui_flash-with-motion_1q84n_1iiuy_157",
  "enter": "awsui_enter_1q84n_1iiuy_157",
  "flash-body": "awsui_flash-body_1q84n_1iiuy_171",
  "flash-message": "awsui_flash-message_1q84n_1iiuy_171",
  "flash-header": "awsui_flash-header_1q84n_1iiuy_171",
  "flash-content": "awsui_flash-content_1q84n_1iiuy_172",
  "action-button-wrapper": "awsui_action-button-wrapper_1q84n_1iiuy_173",
  "dismiss-button-wrapper": "awsui_dismiss-button-wrapper_1q84n_1iiuy_174",
  "flash-icon": "awsui_flash-icon_1q84n_1iiuy_197",
  "entering": "awsui_entering_1q84n_1iiuy_210",
  "entered": "awsui_entered_1q84n_1iiuy_231",
  "exiting": "awsui_exiting_1q84n_1iiuy_336",
  "stack": "awsui_stack_1q84n_1iiuy_370",
  "animation-running": "awsui_animation-running_1q84n_1iiuy_370",
  "item": "awsui_item_1q84n_1iiuy_370",
  "flash-list-item": "awsui_flash-list-item_1q84n_1iiuy_371",
  "notification-bar": "awsui_notification-bar_1q84n_1iiuy_372",
  "collapsed": "awsui_collapsed_1q84n_1iiuy_392",
  "animation-ready": "awsui_animation-ready_1q84n_1iiuy_392",
  "expanded-only": "awsui_expanded-only_1q84n_1iiuy_392",
  "expanded": "awsui_expanded_1q84n_1iiuy_392",
  "flash": "awsui_flash_1q84n_1iiuy_157",
  "collapsible": "awsui_collapsible_1q84n_1iiuy_448",
  "short-list": "awsui_short-list_1q84n_1iiuy_454",
  "visual-refresh": "awsui_visual-refresh_1q84n_1iiuy_454",
  "status": "awsui_status_1q84n_1iiuy_601",
  "header": "awsui_header_1q84n_1iiuy_601",
  "item-count": "awsui_item-count_1q84n_1iiuy_602",
  "button": "awsui_button_1q84n_1iiuy_603",
  "type-count": "awsui_type-count_1q84n_1iiuy_636",
  "count-number": "awsui_count-number_1q84n_1iiuy_636",
  "icon": "awsui_icon_1q84n_1iiuy_674",
  "floating": "awsui_floating_1q84n_1iiuy_715",
  "flashbar": "awsui_flashbar_1q84n_1iiuy_719",
  "initial-hidden": "awsui_initial-hidden_1q84n_1iiuy_778",
  "flash-list": "awsui_flash-list_1q84n_1iiuy_371",
  "flash-focus-container": "awsui_flash-focus-container_1q84n_1iiuy_802",
  "flash-text": "awsui_flash-text_1q84n_1iiuy_832",
  "hidden": "awsui_hidden_1q84n_1iiuy_851",
  "header-replacement": "awsui_header-replacement_1q84n_1iiuy_856",
  "content-replacement": "awsui_content-replacement_1q84n_1iiuy_861",
  "dismiss-button": "awsui_dismiss-button_1q84n_1iiuy_174",
  "action-wrapped": "awsui_action-wrapped_1q84n_1iiuy_879",
  "action-button": "awsui_action-button_1q84n_1iiuy_173",
  "action-slot": "awsui_action-slot_1q84n_1iiuy_886",
  "flash-type-success": "awsui_flash-type-success_1q84n_1iiuy_890",
  "flash-type-error": "awsui_flash-type-error_1q84n_1iiuy_894",
  "flash-type-info": "awsui_flash-type-info_1q84n_1iiuy_898",
  "flash-type-in-progress": "awsui_flash-type-in-progress_1q84n_1iiuy_899",
  "flash-type-warning": "awsui_flash-type-warning_1q84n_1iiuy_903"
};

// node_modules/@cloudscape-design/components/flashbar/flash.js
var ICON_TYPES = {
  success: "status-positive",
  warning: "status-warning",
  info: "status-info",
  error: "status-negative",
  "in-progress": "status-in-progress"
};
var useDiscoveredAction2 = createUseDiscoveredAction(awsuiPluginsInternal.flashbar.onActionRegistered);
var useDiscoveredContent2 = createUseDiscoveredContent("flash", awsuiPluginsInternal.flashContent);
function dismissButton(dismissLabel, onDismiss, style, type) {
  return import_react294.default.createElement(
    "div",
    Object.assign({ className: styles_css_default117["dismiss-button-wrapper"] }, getAnalyticsMetadataAttribute({
      action: "dismiss"
    })),
    import_react294.default.createElement(InternalButton, { onClick: onDismiss, className: styles_css_default117["dismiss-button"], variant: "flashbar-icon", iconName: "close", formAction: "none", ariaLabel: dismissLabel, style: getDismissButtonStyles(style, type) })
  );
}
var focusFlashById = throttle((element, itemId) => {
  var _a;
  const selector = `[data-itemid="${CSS.escape(itemId)}"] .${styles_css_default117["flash-focus-container"]}`;
  (_a = element === null || element === void 0 ? void 0 : element.querySelector(selector)) === null || _a === void 0 ? void 0 : _a.focus();
}, FOCUS_THROTTLE_DELAY, { trailing: false });
var Flash = import_react294.default.forwardRef((_a, ref) => {
  var { id, header, content, dismissible, dismissLabel, loading, action, buttonText, onButtonClick, onDismiss, className: className2, transitionState, ariaRole, i18nStrings, type = "info", analyticsMetadata, style } = _a, props2 = __rest(_a, ["id", "header", "content", "dismissible", "dismissLabel", "loading", "action", "buttonText", "onButtonClick", "onDismiss", "className", "transitionState", "ariaRole", "i18nStrings", "type", "analyticsMetadata", "style"]);
  if (isDevelopment2) {
    if (buttonText && !onButtonClick) {
      warnOnce("Flashbar", `You provided a \`buttonText\` prop without an \`onButtonClick\` handler. This will render a non-interactive action button.`);
    }
    if (dismissible && !onDismiss) {
      warnOnce("Flashbar", `You have set the \`dismissible\` prop without an \`onDismiss\` handler. This will render a non-interactive dismiss button.`);
    }
  }
  const [containerWidth, containerMeasureRef] = useContainerWidth();
  const elementRef = useComponentMetadata("Flash", PACKAGE_VERSION, analyticsMetadata);
  const mergedRef = useMergeRefs(ref, elementRef, containerMeasureRef);
  const flashIconId = useUniqueId("flash-icon");
  const flashMessageId = useUniqueId("flash-message");
  const headerRefObject = (0, import_react294.useRef)(null);
  const contentRefObject = (0, import_react294.useRef)(null);
  const { discoveredActions, headerRef: headerRefAction, contentRef: contentRefAction } = useDiscoveredAction2(type);
  const { initialHidden, headerReplacementType, contentReplacementType, headerRef: headerRefContent, contentRef: contentRefContent, replacementHeaderRef, replacementContentRef } = useDiscoveredContent2({ type, header, children: content });
  const headerRef = useMergeRefs(headerRefAction, headerRefContent, headerRefObject);
  const contentRef = useMergeRefs(contentRefAction, contentRefContent, contentRefObject);
  const statusIconAriaLabel = props2.statusIconAriaLabel || (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings[`${loading || type === "in-progress" ? "inProgress" : type}IconAriaLabel`]);
  const iconType = ICON_TYPES[type];
  const icon = loading ? import_react294.default.createElement(
    "span",
    { role: "img", "aria-label": statusIconAriaLabel },
    import_react294.default.createElement(InternalSpinner, null)
  ) : import_react294.default.createElement(internal_default, { name: iconType, ariaLabel: statusIconAriaLabel });
  const effectiveType = loading ? "info" : type;
  const analyticsAttributes = {
    [DATA_ATTR_ANALYTICS_FLASHBAR]: effectiveType
  };
  if (analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.suppressFlowMetricEvents) {
    analyticsAttributes[DATA_ATTR_ANALYTICS_SUPPRESS_FLOW_EVENTS] = "true";
  }
  return (
    // We're not using "polite" or "assertive" here, just turning default behavior off.
    // eslint-disable-next-line @cloudscape-design/components/prefer-live-region
    import_react294.default.createElement(
      "div",
      Object.assign({ ref: mergedRef, role: ariaRole, "aria-live": ariaRole ? "off" : void 0, "data-itemid": id, className: clsx_m_default(styles_css_default117.flash, styles_css_default117[`flash-type-${effectiveType}`], className2, transitionState && {
        [styles_css_default117.enter]: transitionState === "enter",
        [styles_css_default117.entering]: transitionState === "entering",
        [styles_css_default117.entered]: transitionState === "entered",
        [styles_css_default117.exit]: transitionState === "exit",
        [styles_css_default117.exiting]: transitionState === "exiting",
        [styles_css_default117.exited]: transitionState === "exited"
      }, getVisualContextClassname(type === "warning" && !loading ? "flashbar-warning" : "flashbar"), initialHidden && styles_css_default117["initial-hidden"]), style: getFlashStyles(style, effectiveType) }, analyticsAttributes),
      import_react294.default.createElement(
        "div",
        { className: styles_css_default117["flash-body"] },
        import_react294.default.createElement(
          "div",
          { className: styles_css_default117["flash-focus-container"], tabIndex: -1, role: "group", "aria-labelledby": `${flashIconId} ${flashMessageId}` },
          import_react294.default.createElement("div", { className: clsx_m_default(styles_css_default117["flash-icon"], styles_css_default117["flash-text"]), id: flashIconId }, icon),
          import_react294.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default117["flash-message"], styles_css_default117["flash-text"]), id: flashMessageId },
            import_react294.default.createElement("div", { className: clsx_m_default(styles_css_default117["flash-header"], headerReplacementType !== "original" ? styles_css_default117.hidden : styles_css_default116["flash-header"]), ref: headerRef }, header),
            import_react294.default.createElement("div", { className: clsx_m_default(styles_css_default117["header-replacement"], headerReplacementType !== "replaced" && styles_css_default117.hidden), ref: replacementHeaderRef }),
            import_react294.default.createElement("div", { className: clsx_m_default(styles_css_default117["flash-content"], contentReplacementType !== "original" ? styles_css_default117.hidden : styles_css_default116["flash-header"]), ref: contentRef }, content),
            import_react294.default.createElement("div", { className: clsx_m_default(styles_css_default117["content-replacement"], contentReplacementType !== "replaced" && styles_css_default117.hidden), ref: replacementContentRef })
          )
        ),
        import_react294.default.createElement(ActionsWrapper, { className: styles_css_default117["action-button-wrapper"], testUtilClasses: {
          actionSlot: styles_css_default117["action-slot"],
          actionButton: styles_css_default117["action-button"]
        }, action, discoveredActions, buttonText, onButtonClick, containerWidth, wrappedClass: styles_css_default117["action-wrapped"] })
      ),
      dismissible && dismissButton(dismissLabel, onDismiss, style, effectiveType),
      ariaRole === "status" && import_react294.default.createElement(internal_default2, { sources: [statusIconAriaLabel, headerRefObject, contentRefObject] })
    )
  );
});

// node_modules/@cloudscape-design/components/flashbar/common.js
function useFlashbar(_a) {
  var { items, onItemsAdded, onItemsChanged, onItemsRemoved } = _a, restProps = __rest(_a, ["items", "onItemsAdded", "onItemsChanged", "onItemsRemoved"]);
  const { __internalRootRef } = useBaseComponent("Flashbar", {
    props: { stackItems: restProps.stackItems }
  });
  const allItemsHaveId = (0, import_react295.useMemo)(() => items.every((item) => "id" in item), [items]);
  const baseProps = getBaseProps(restProps);
  const ref = (0, import_react295.useRef)(null);
  const mergedRef = useMergeRefs(ref, __internalRootRef);
  const isReducedMotion = useReducedMotion(ref);
  const isVisualRefresh = useVisualRefresh();
  const [previousItems, setPreviousItems] = (0, import_react295.useState)(items);
  const [nextFocusId, setNextFocusId] = (0, import_react295.useState)(null);
  if (isDevelopment2) {
    if (items === null || items === void 0 ? void 0 : items.some((item) => item.ariaRole === "alert" && !item.id)) {
      warnOnce("Flashbar", `You provided \`ariaRole="alert"\` for a flashbar item without providing an \`id\`. Focus will not be moved to the newly added flash message.`);
    }
  }
  if (items) {
    const newItems = items.filter(({ id }) => id && !previousItems.some((item) => item.id === id));
    const removedItems = previousItems.filter(({ id }) => id && !items.some((item) => item.id === id));
    if (newItems.length > 0 || removedItems.length > 0) {
      setPreviousItems(items);
      onItemsAdded === null || onItemsAdded === void 0 ? void 0 : onItemsAdded(newItems);
      onItemsRemoved === null || onItemsRemoved === void 0 ? void 0 : onItemsRemoved(removedItems);
      onItemsChanged === null || onItemsChanged === void 0 ? void 0 : onItemsChanged({ allItemsHaveId, isReducedMotion });
      const newFocusItems = newItems.filter(({ ariaRole }) => ariaRole === "alert");
      if (newFocusItems.length > 0) {
        setNextFocusId(newFocusItems[0].id);
      }
    }
  }
  (0, import_react295.useEffect)(() => {
    if (nextFocusId) {
      focusFlashById(ref.current, nextFocusId);
    }
  }, [nextFocusId, ref]);
  return {
    allItemsHaveId,
    baseProps,
    isReducedMotion,
    isVisualRefresh,
    mergedRef,
    ref
  };
}

// node_modules/@cloudscape-design/components/flashbar/collapsible-flashbar.js
var maxNonCollapsibleItems = 1;
var resizeListenerThrottleDelay = 100;
function CollapsibleFlashbar(_a) {
  var { items, style } = _a, restProps = __rest(_a, ["items", "style"]);
  const [enteringItems, setEnteringItems] = (0, import_react296.useState)([]);
  const [exitingItems, setExitingItems] = (0, import_react296.useState)([]);
  const [isFlashbarStackExpanded, setIsFlashbarStackExpanded] = (0, import_react296.useState)(false);
  const getElementsToAnimate = (0, import_react296.useCallback)(() => {
    const flashElements = isFlashbarStackExpanded ? expandedItemRefs.current : collapsedItemRefs.current;
    return Object.assign(Object.assign({}, flashElements), { notificationBar: notificationBarRef.current });
  }, [isFlashbarStackExpanded]);
  const prepareAnimations = (0, import_react296.useCallback)(() => {
    const rects = getDOMRects(getElementsToAnimate());
    setInitialAnimationState(rects);
  }, [getElementsToAnimate]);
  const { baseProps, isReducedMotion, isVisualRefresh, mergedRef, ref } = useFlashbar(Object.assign(Object.assign({ items }, restProps), { onItemsAdded: (newItems) => {
    setEnteringItems([...enteringItems, ...newItems]);
  }, onItemsChanged: (options) => {
    if ((options === null || options === void 0 ? void 0 : options.allItemsHaveId) && !(options === null || options === void 0 ? void 0 : options.isReducedMotion)) {
      prepareAnimations();
    }
  }, onItemsRemoved: (removedItems) => {
    setExitingItems([...exitingItems, ...removedItems]);
  } }));
  const collapsedItemRefs = (0, import_react296.useRef)({});
  const expandedItemRefs = (0, import_react296.useRef)({});
  const [initialAnimationState, setInitialAnimationState] = (0, import_react296.useState)(null);
  const listElementRef = (0, import_react296.useRef)(null);
  const notificationBarRef = (0, import_react296.useRef)(null);
  const [transitioning, setTransitioning] = (0, import_react296.useState)(false);
  const flashbarElementId = useUniqueId("flashbar");
  const itemCountElementId = useUniqueId("item-count");
  if (items.length <= maxNonCollapsibleItems && isFlashbarStackExpanded) {
    setIsFlashbarStackExpanded(false);
  }
  const animateFlash = !isReducedMotion;
  function toggleCollapseExpand() {
    if (!isReducedMotion) {
      prepareAnimations();
    }
    setIsFlashbarStackExpanded((prev) => !prev);
  }
  (0, import_react296.useLayoutEffect)(() => {
    if (isFlashbarStackExpanded && (items === null || items === void 0 ? void 0 : items.length)) {
      const mostRecentItem = items[0];
      if (mostRecentItem.id !== void 0) {
        focusFlashById(ref.current, mostRecentItem.id);
      }
    }
  }, [isFlashbarStackExpanded]);
  useEffectOnUpdate(() => {
    if (!isFlashbarStackExpanded && notificationBarRef.current) {
      scrollElementIntoView(notificationBarRef.current);
    }
  }, [isFlashbarStackExpanded]);
  const updateBottomSpacing = (0, import_react296.useMemo)(() => throttle(() => {
    const listElement = listElementRef === null || listElementRef === void 0 ? void 0 : listElementRef.current;
    const flashbar = listElement === null || listElement === void 0 ? void 0 : listElement.parentElement;
    if (listElement && flashbar) {
      flashbar.classList.remove(styles_css_default117.floating);
      const windowHeight = window.innerHeight;
      const outerElement = findUpUntil(flashbar, (element) => element.getAttribute("role") === "region") || flashbar;
      const applySpacing = isFlashbarStackExpanded && Math.ceil(outerElement.getBoundingClientRect().bottom) >= windowHeight;
      if (!applySpacing) {
        flashbar.classList.add(styles_css_default117.floating);
      }
    }
  }, resizeListenerThrottleDelay), [isFlashbarStackExpanded]);
  (0, import_react296.useLayoutEffect)(() => {
    window.addEventListener("resize", updateBottomSpacing);
    return () => {
      window.removeEventListener("resize", updateBottomSpacing);
      updateBottomSpacing.cancel();
    };
  }, [updateBottomSpacing]);
  const { i18nStrings } = restProps;
  const i18n = useInternalI18n("flashbar");
  const ariaLabel = i18n("i18nStrings.ariaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel);
  const notificationBarText = i18n("i18nStrings.notificationBarText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.notificationBarText);
  const notificationBarAriaLabel = i18n("i18nStrings.notificationBarAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.notificationBarAriaLabel);
  const iconAriaLabels = {
    errorIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel),
    inProgressIconAriaLabel: i18n("i18nStrings.inProgressIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inProgressIconAriaLabel),
    infoIconAriaLabel: i18n("i18nStrings.infoIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.infoIconAriaLabel),
    successIconAriaLabel: i18n("i18nStrings.successIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.successIconAriaLabel),
    warningIconAriaLabel: i18n("i18nStrings.warningIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel)
  };
  (0, import_react296.useLayoutEffect)(() => {
    if (initialAnimationState) {
      updateBottomSpacing();
      animate({
        elements: getElementsToAnimate(),
        oldState: initialAnimationState,
        newElementInitialState: ({ top }) => ({ scale: 0.9, y: -0.2 * top }),
        onTransitionsEnd: () => setTransitioning(false)
      });
      setTransitioning(true);
      setInitialAnimationState(null);
    }
  }, [updateBottomSpacing, getElementsToAnimate, initialAnimationState, isFlashbarStackExpanded]);
  const isCollapsible = items.length > maxNonCollapsibleItems;
  const countByType = getFlashTypeCount(items);
  const numberOfColorsInStack = new Set(items.map(getItemColor)).size;
  const maxSlots = Math.max(numberOfColorsInStack, 3);
  const stackDepth = Math.min(maxSlots, items.length);
  const itemsToShow = isFlashbarStackExpanded ? items.map((item, index) => Object.assign(Object.assign({}, item), { expandedIndex: index })) : getVisibleCollapsedItems(items, stackDepth).map((item, index) => Object.assign(Object.assign({}, item), { collapsedIndex: index }));
  const getItemId = (item) => {
    var _a2, _b;
    return (_b = (_a2 = item.id) !== null && _a2 !== void 0 ? _a2 : item.expandedIndex) !== null && _b !== void 0 ? _b : 0;
  };
  const hasEntered = (item) => enteringItems.some((_item) => _item.id && _item.id === item.id);
  const hasLeft = (item) => !("expandedIndex" in item);
  const hasEnteredOrLeft = (item) => hasEntered(item) || hasLeft(item);
  const showInnerContent = (item) => isFlashbarStackExpanded || hasLeft(item) || "expandedIndex" in item && item.expandedIndex === 0;
  const shouldUseStandardAnimation = (item, index) => index === 0 && hasEnteredOrLeft(item);
  const getAnimationElementId = (item) => `flash-${getItemId(item)}`;
  const renderList = () => import_react296.default.createElement(
    "ul",
    { ref: listElementRef, className: clsx_m_default(styles_css_default117["flash-list"], isFlashbarStackExpanded ? styles_css_default117.expanded : styles_css_default117.collapsed, transitioning && styles_css_default117["animation-running"], initialAnimationState && styles_css_default117["animation-ready"], isVisualRefresh && styles_css_default117["visual-refresh"]), id: flashbarElementId, "aria-label": ariaLabel, "aria-describedby": isCollapsible ? itemCountElementId : void 0, style: !isFlashbarStackExpanded || transitioning ? {
      [custom_css_properties_default.flashbarStackDepth]: stackDepth
    } : void 0 },
    import_react296.default.createElement(ListWrapper, { withMotion: !isReducedMotion }, itemsToShow.map((item, index) => import_react296.default.createElement(Transition, { key: getItemId(item), in: !hasLeft(item), onStatusChange: (status) => {
      if (status === "entered") {
        setEnteringItems([]);
      } else if (status === "exited") {
        setExitingItems([]);
      }
    } }, (state, transitionRootElement) => {
      var _a2, _b, _c;
      return import_react296.default.createElement("li", Object.assign({ "aria-hidden": !showInnerContent(item), className: showInnerContent(item) ? clsx_m_default(styles_css_default117["flash-list-item"], !isFlashbarStackExpanded && styles_css_default117.item, !collapsedItemRefs.current[getAnimationElementId(item)] && styles_css_default117["expanded-only"]) : clsx_m_default(styles_css_default117.flash, styles_css_default117[`flash-type-${(_a2 = item.type) !== null && _a2 !== void 0 ? _a2 : "info"}`], styles_css_default117.item), ref: (element) => {
        if (isFlashbarStackExpanded) {
          expandedItemRefs.current[getAnimationElementId(item)] = element;
        } else {
          collapsedItemRefs.current[getAnimationElementId(item)] = element;
        }
      }, style: Object.assign(Object.assign({}, index > 0 && !isFlashbarStackExpanded && getCollapsibleFlashStyles(style, item.type)), (!isFlashbarStackExpanded || transitioning) && {
        [custom_css_properties_default.flashbarStackIndex]: (_c = (_b = item.collapsedIndex) !== null && _b !== void 0 ? _b : item.expandedIndex) !== null && _c !== void 0 ? _c : index
      }), key: getItemId(item) }, getAnalyticsMetadataAttribute(getItemAnalyticsMetadata(index + 1, item.type || "info", item.id))), showInnerContent(item) && import_react296.default.createElement(Flash, Object.assign({ className: clsx_m_default(animateFlash && styles_css_default117["flash-with-motion"], isVisualRefresh && styles_css_default117["flash-refresh"]), key: getItemId(item), ref: shouldUseStandardAnimation(item, index) ? transitionRootElement : void 0, transitionState: shouldUseStandardAnimation(item, index) ? state : void 0, i18nStrings: iconAriaLabels, style }, item)));
    })))
  );
  return import_react296.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default117.flashbar, styles_css_default117.stack, isCollapsible && styles_css_default117.collapsible, items.length === 2 && styles_css_default117["short-list"], isFlashbarStackExpanded && styles_css_default117.expanded, isVisualRefresh && styles_css_default117["visual-refresh"]), ref: mergedRef }, getAnalyticsMetadataAttribute(getComponentsAnalyticsMetadata(items.length, true, isFlashbarStackExpanded))),
    isFlashbarStackExpanded && renderList(),
    isCollapsible && import_react296.default.createElement(
      "div",
      Object.assign({ className: clsx_m_default(
        styles_css_default117["notification-bar"],
        isVisualRefresh && styles_css_default117["visual-refresh"],
        isFlashbarStackExpanded ? styles_css_default117.expanded : styles_css_default117.collapsed,
        transitioning && styles_css_default117["animation-running"],
        items.length === 2 && styles_css_default117["short-list"],
        getVisualContextClassname("flashbar")
        // Visual context is needed for focus ring to be white
      ), onClick: toggleCollapseExpand, ref: notificationBarRef, style: getNotificationBarStyles(style) }, getAnalyticsMetadataAttribute({
        action: !isFlashbarStackExpanded ? "expand" : "collapse",
        detail: {
          label: "h2"
        }
      })),
      import_react296.default.createElement(
        "span",
        { "aria-live": "polite", className: styles_css_default117.status, role: "status", id: itemCountElementId },
        notificationBarText && import_react296.default.createElement("h2", { className: styles_css_default117.header }, notificationBarText),
        import_react296.default.createElement("span", { className: styles_css_default117["item-count"] }, counterTypes.map(({ type, labelName, iconName }) => import_react296.default.createElement(NotificationTypeCount, { key: type, iconName, label: iconAriaLabels[labelName], count: countByType[type] })))
      ),
      import_react296.default.createElement(
        "button",
        { "aria-controls": flashbarElementId, "aria-describedby": itemCountElementId, "aria-expanded": isFlashbarStackExpanded, "aria-label": notificationBarAriaLabel, className: clsx_m_default(styles_css_default117.button, isFlashbarStackExpanded && styles_css_default117.expanded) },
        import_react296.default.createElement(internal_default, { className: styles_css_default117.icon, size: "normal", name: "angle-down" })
      )
    ),
    !isFlashbarStackExpanded && renderList()
  );
}
var NotificationTypeCount = ({ iconName, label, count }) => {
  return import_react296.default.createElement(
    "span",
    { className: styles_css_default117["type-count"] },
    import_react296.default.createElement(
      "span",
      { title: label },
      import_react296.default.createElement(internal_default, { name: iconName, ariaLabel: label })
    ),
    import_react296.default.createElement("span", { className: styles_css_default117["count-number"] }, count)
  );
};
var ListWrapper = ({ children, withMotion }) => withMotion ? import_react296.default.createElement(TransitionGroup_default, { component: null }, children) : import_react296.default.createElement(import_react296.default.Fragment, null, children);

// node_modules/@cloudscape-design/components/flashbar/non-collapsible-flashbar.js
var import_react297 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/constant.js
var TIMEOUT_FOR_ENTERING_ANIMATION = 115;

// node_modules/@cloudscape-design/components/flashbar/non-collapsible-flashbar.js
function NonCollapsibleFlashbar(_a) {
  var { items, i18nStrings, style } = _a, restProps = __rest(_a, ["items", "i18nStrings", "style"]);
  const { allItemsHaveId, baseProps, isReducedMotion, isVisualRefresh, mergedRef } = useFlashbar(Object.assign({ items }, restProps));
  const i18n = useInternalI18n("flashbar");
  const ariaLabel = i18n("i18nStrings.ariaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel);
  const iconAriaLabels = {
    errorIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel),
    inProgressIconAriaLabel: i18n("i18nStrings.inProgressIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inProgressIconAriaLabel),
    infoIconAriaLabel: i18n("i18nStrings.infoIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.infoIconAriaLabel),
    successIconAriaLabel: i18n("i18nStrings.successIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.successIconAriaLabel),
    warningIconAriaLabel: i18n("i18nStrings.warningIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel)
  };
  const motionDisabled = isReducedMotion || !isVisualRefresh || !allItemsHaveId;
  const animateFlash = !isReducedMotion && isVisualRefresh;
  function renderFlatItemsWithTransitions() {
    if (motionDisabled || !items) {
      return;
    }
    return (
      // This is a proxy for <ul>, so we're not applying a class to another actual component.
      import_react297.default.createElement(TransitionGroup_default, { component: "ul", className: styles_css_default117["flash-list"], "aria-label": ariaLabel }, items.map((item, index) => {
        var _a2;
        return import_react297.default.createElement(Transition, { transitionChangeDelay: { entering: TIMEOUT_FOR_ENTERING_ANIMATION }, key: (_a2 = item.id) !== null && _a2 !== void 0 ? _a2 : index, in: true }, (state, transitionRootElement) => {
          var _a3;
          return import_react297.default.createElement("li", { className: styles_css_default117["flash-list-item"] }, renderItem(item, (_a3 = item.id) !== null && _a3 !== void 0 ? _a3 : index, transitionRootElement, state));
        });
      }))
    );
  }
  function renderFlatItemsWithoutTransitions() {
    if (!motionDisabled || !items) {
      return;
    }
    return import_react297.default.createElement("ul", Object.assign({ className: styles_css_default117["flash-list"], "aria-label": ariaLabel }, getAnalyticsMetadataAttribute(getComponentsAnalyticsMetadata(items.length, false))), items.map((item, index) => {
      var _a2, _b;
      return import_react297.default.createElement("li", Object.assign({ key: (_a2 = item.id) !== null && _a2 !== void 0 ? _a2 : index, className: styles_css_default117["flash-list-item"] }, getAnalyticsMetadataAttribute(getItemAnalyticsMetadata(index + 1, item.type || "info", item.id))), renderItem(item, (_b = item.id) !== null && _b !== void 0 ? _b : index));
    }));
  }
  function renderItem(item, key2, transitionRootElement, transitionState) {
    return import_react297.default.createElement(Flash, Object.assign({ className: clsx_m_default(animateFlash && styles_css_default117["flash-with-motion"], isVisualRefresh && styles_css_default117["flash-refresh"]), key: key2, ref: transitionRootElement, transitionState, i18nStrings: iconAriaLabels, style }, item));
  }
  return import_react297.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default117.flashbar), ref: mergedRef }),
    renderFlatItemsWithTransitions(),
    renderFlatItemsWithoutTransitions()
  );
}

// node_modules/@cloudscape-design/components/flashbar/internal-do-not-use-core.js
function Flashbar(props2) {
  if (props2.stackItems) {
    return import_react298.default.createElement(CollapsibleFlashbar, Object.assign({}, props2));
  } else {
    return import_react298.default.createElement(NonCollapsibleFlashbar, Object.assign({}, props2));
  }
}
applyDisplayName(Flashbar, "Flashbar");

// node_modules/@cloudscape-design/components/flashbar/index.js
var Flashbar2 = (props2) => {
  validateProps("Flashbar", props2, ["style"], {});
  return import_react299.default.createElement(Flashbar, props2);
};
applyDisplayName(Flashbar2, "Flashbar");
var flashbar_default = Flashbar2;

// node_modules/@cloudscape-design/components/form/index.js
var import_react301 = __toESM(require_react());

// node_modules/@cloudscape-design/components/form/internal.js
var import_react300 = __toESM(require_react());

// node_modules/@cloudscape-design/components/form/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/form/analytics-metadata/styles.scoped.css";
var styles_css_default118 = {
  "header": "awsui_header_6xiez_1ns0c_5"
};

// node_modules/@cloudscape-design/components/form/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/form/styles.scoped.css";
var styles_css_default119 = {
  "root": "awsui_root_1i0s3_sdppn_145",
  "header": "awsui_header_1i0s3_sdppn_177",
  "content": "awsui_content_1i0s3_sdppn_181",
  "error": "awsui_error_1i0s3_sdppn_185",
  "footer": "awsui_footer_1i0s3_sdppn_189",
  "actions-section": "awsui_actions-section_1i0s3_sdppn_193",
  "secondary-actions": "awsui_secondary-actions_1i0s3_sdppn_202",
  "actions": "awsui_actions_1i0s3_sdppn_193"
};

// node_modules/@cloudscape-design/components/form/internal.js
function InternalForm(_a) {
  var { children, header, errorText, errorIconAriaLabel: errorIconAriaLabelOverride, actions, secondaryActions, __internalRootRef, __injectAnalyticsComponentMetadata, __errorSlotId } = _a, props2 = __rest(_a, ["children", "header", "errorText", "errorIconAriaLabel", "actions", "secondaryActions", "__internalRootRef", "__injectAnalyticsComponentMetadata", "__errorSlotId"]);
  const baseProps = getBaseProps(props2);
  const i18n = useInternalI18n("form");
  const errorIconAriaLabel = i18n("errorIconAriaLabel", errorIconAriaLabelOverride);
  const analyticsComponentMetadata = {
    component: {
      name: "awsui.Form",
      label: {
        selector: ["h1", "h2", "h3"].map((heading) => `.${styles_css_default118.header} ${heading}`)
      }
    }
  };
  return import_react300.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(styles_css_default119.root, baseProps.className) }, __injectAnalyticsComponentMetadata ? getAnalyticsMetadataAttribute(analyticsComponentMetadata) : {}),
    header && import_react300.default.createElement("div", { className: clsx_m_default(styles_css_default119.header, styles_css_default118.header) }, header),
    children && import_react300.default.createElement("div", { className: styles_css_default119.content }, children),
    errorText && import_react300.default.createElement(
      InternalBox,
      { margin: { top: "l" } },
      import_react300.default.createElement(
        internal_default8,
        { type: "error", statusIconAriaLabel: errorIconAriaLabel },
        import_react300.default.createElement("div", { className: styles_css_default119.error, id: __errorSlotId }, errorText)
      )
    ),
    (actions || secondaryActions) && import_react300.default.createElement(
      "div",
      { className: styles_css_default119.footer },
      import_react300.default.createElement(
        "div",
        { className: styles_css_default119["actions-section"] },
        actions && import_react300.default.createElement("div", { className: styles_css_default119.actions }, actions),
        secondaryActions && import_react300.default.createElement("div", { className: styles_css_default119["secondary-actions"] }, secondaryActions)
      )
    ),
    errorText && import_react300.default.createElement(
      internal_default2,
      { hidden: true, tagName: "span", assertive: true },
      errorIconAriaLabel,
      ", ",
      errorText
    )
  );
}

// node_modules/@cloudscape-design/components/form/index.js
var FormWithAnalytics = (_a) => {
  var { variant = "full-page", actions, errorText, __internalRootRef } = _a, props2 = __rest(_a, ["variant", "actions", "errorText", "__internalRootRef"]);
  const { funnelIdentifier, funnelInteractionId, funnelProps, funnelSubmit, funnelNextOrSubmitAttempt, errorCount, submissionAttempt, funnelErrorContext } = useFunnel();
  const funnelStepInfo = useFunnelStepRef();
  const handleActionButtonClick = ({ variant: variant2 }) => {
    if (variant2 === "primary") {
      funnelNextOrSubmitAttempt();
      funnelSubmit();
    }
  };
  const errorSlotId = useUniqueId("form-error-");
  (0, import_react301.useEffect)(() => {
    var _a2, _b;
    if (funnelInteractionId && errorText) {
      errorCount.current++;
      const stepName = getTextFromSelector(funnelStepInfo.current.stepNameSelector);
      FunnelMetrics.funnelStepError({
        funnelInteractionId,
        stepNumber: funnelStepInfo.current.stepNumber,
        stepNameSelector: funnelStepInfo.current.stepNameSelector,
        stepName,
        stepIdentifier: funnelStepInfo.current.stepIdentifier,
        currentDocument: (_a2 = __internalRootRef.current) === null || _a2 === void 0 ? void 0 : _a2.ownerDocument,
        totalSubSteps: funnelStepInfo.current.subStepCount.current,
        funnelIdentifier,
        subStepAllSelector: getSubStepAllSelector(),
        errorContext: funnelStepInfo.current.stepErrorContext,
        subStepConfiguration: (_b = funnelStepInfo.current.subStepConfiguration.current) === null || _b === void 0 ? void 0 : _b.get(funnelStepInfo.current.stepNumber),
        stepErrorSelector: "#" + errorSlotId
      });
      return () => {
        errorCount.current--;
      };
    }
  }, [
    funnelInteractionId,
    funnelIdentifier,
    errorText,
    submissionAttempt,
    errorCount,
    funnelErrorContext,
    errorSlotId,
    __internalRootRef,
    funnelStepInfo
  ]);
  return import_react301.default.createElement(
    ButtonContext.Provider,
    { value: { onClick: handleActionButtonClick } },
    import_react301.default.createElement(InternalForm, Object.assign({ variant, actions, errorText, __errorSlotId: errorSlotId }, props2, funnelProps, funnelStepInfo.current.funnelStepProps, { __internalRootRef, __injectAnalyticsComponentMetadata: true }))
  );
};
function Form(_a) {
  var { variant = "full-page" } = _a, props2 = __rest(_a, ["variant"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const baseComponentProps = useBaseComponent("Form", {
    props: {
      variant,
      flowType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.flowType
    },
    metadata: {
      hasResourceType: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType),
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier)
    }
  }, analyticsMetadata);
  const inheritedFunnelNameSelector = useFunnelNameSelector();
  const funnelNameSelector = inheritedFunnelNameSelector || `.${styles_css_default118.header} .${styles_css_default2["heading-text"]}`;
  return import_react301.default.createElement(
    AnalyticsFunnel,
    { funnelIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, funnelFlowType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.flowType, funnelErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, funnelResourceType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType, funnelType: "single-page", optionalStepNumbers: [], totalFunnelSteps: 1, funnelNameSelectors: () => [funnelNameSelector, `.${styles_css_default118.header}`] },
    import_react301.default.createElement(
      AnalyticsFunnelStep,
      { stepIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, stepErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, stepNumber: 1 },
      import_react301.default.createElement(FormWithAnalytics, Object.assign({ variant }, props2, baseComponentProps))
    )
  );
}
applyDisplayName(Form, "Form");

// node_modules/@cloudscape-design/components/form-field/index.js
var import_react302 = __toESM(require_react());
function FormField(_a) {
  var { stretch = false } = _a, props2 = __rest(_a, ["stretch"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const baseComponentProps = useBaseComponent("FormField", {
    props: {
      stretch
    },
    metadata: {
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier),
      hasErrorContext: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext)
    }
  }, analyticsMetadata);
  return import_react302.default.createElement(InternalFormField, Object.assign({ stretch }, props2, { __hideLabel: false, __analyticsMetadata: analyticsMetadata }, baseComponentProps, getAnalyticsMetadataAttribute({
    component: {
      name: "awsui.FormField",
      label: `.${styles_css_default3.label}`
    }
  })));
}
applyDisplayName(FormField, "FormField");

// node_modules/@cloudscape-design/components/grid/index.js
var import_react303 = __toESM(require_react());
function Grid3(_a) {
  var { gridDefinition = [], disableGutters = false, children } = _a, restProps = __rest(_a, ["gridDefinition", "disableGutters", "children"]);
  const baseComponentProps = useBaseComponent("Grid", {
    props: { disableGutters }
  });
  const baseProps = getBaseProps(restProps);
  const [breakpoint, ref] = useContainerBreakpoints(void 0);
  return import_react303.default.createElement(internal_default5, Object.assign({}, baseProps, baseComponentProps, { ref, __breakpoint: breakpoint, gridDefinition, disableGutters }), children);
}
applyDisplayName(Grid3, "Grid");

// node_modules/@cloudscape-design/components/help-panel/index.js
var import_react305 = __toESM(require_react());

// node_modules/@cloudscape-design/components/help-panel/implementation.js
var import_react304 = __toESM(require_react());

// node_modules/@cloudscape-design/components/help-panel/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/help-panel/styles.scoped.css";
var styles_css_default120 = {
  "help-panel": "awsui_help-panel_1d237_1m7i7_181",
  "loading": "awsui_loading_1d237_1m7i7_348",
  "header": "awsui_header_1d237_1m7i7_353",
  "with-toolbar": "awsui_with-toolbar_1d237_1m7i7_370",
  "content": "awsui_content_1d237_1m7i7_388",
  "footer": "awsui_footer_1d237_1m7i7_439"
};

// node_modules/@cloudscape-design/components/help-panel/implementation.js
function HelpPanelImplementation(_a) {
  var { header, footer, children, loading, loadingText, __internalRootRef } = _a, restProps = __rest(_a, ["header", "footer", "children", "loading", "loadingText", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  const isToolbar = useAppLayoutToolbarDesignEnabled();
  const i18n = useInternalI18n("help-panel");
  const containerProps = Object.assign(Object.assign({}, baseProps), { className: clsx_m_default(baseProps.className, styles_css_default120["help-panel"], isToolbar && styles_css_default120["with-toolbar"], loading && styles_css_default120.loading) });
  return loading ? import_react304.default.createElement(
    "div",
    Object.assign({}, containerProps, { ref: __internalRootRef }),
    import_react304.default.createElement(
      StatusIndicator,
      { type: "loading" },
      import_react304.default.createElement(internal_default2, { tagName: "span" }, i18n("loadingText", loadingText))
    )
  ) : import_react304.default.createElement(
    "div",
    Object.assign({}, containerProps, { ref: __internalRootRef }),
    header && import_react304.default.createElement("div", { className: clsx_m_default(styles_css_default120.header) }, header),
    import_react304.default.createElement(
      LinkDefaultVariantContext.Provider,
      { value: { defaultVariant: "primary" } },
      import_react304.default.createElement("div", { className: styles_css_default120.content }, children)
    ),
    footer && import_react304.default.createElement(
      "div",
      { className: styles_css_default120.footer },
      import_react304.default.createElement("hr", { role: "presentation" }),
      footer
    )
  );
}
var createWidgetizedHelpPanel = createWidgetizedComponent(HelpPanelImplementation);

// node_modules/@cloudscape-design/components/help-panel/internal.js
var InternalHelpPanel = createWidgetizedHelpPanel();

// node_modules/@cloudscape-design/components/help-panel/index.js
function HelpPanel(props2) {
  const internalProps = useBaseComponent("HelpPanel");
  return import_react305.default.createElement(InternalHelpPanel, Object.assign({}, props2, internalProps));
}
applyDisplayName(HelpPanel, "HelpPanel");

// node_modules/@cloudscape-design/components/hotspot/index.js
var import_react306 = __toESM(require_react());

// node_modules/@cloudscape-design/components/hotspot/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/hotspot/styles.scoped.css";
var styles_css_default121 = {
  "root": "awsui_root_cqcqk_1oy1w_181",
  "wrapper": "awsui_wrapper_cqcqk_1oy1w_185",
  "elementWrapper": "awsui_elementWrapper_cqcqk_1oy1w_189",
  "markerWrapper": "awsui_markerWrapper_cqcqk_1oy1w_193",
  "placement-right": "awsui_placement-right_cqcqk_1oy1w_198",
  "placement-left": "awsui_placement-left_cqcqk_1oy1w_203",
  "inlineWrapper": "awsui_inlineWrapper_cqcqk_1oy1w_208"
};

// node_modules/@cloudscape-design/components/hotspot/index.js
function Hotspot(_a) {
  var { children, hotspotId, side = "right", direction = "top" } = _a, restProps = __rest(_a, ["children", "hotspotId", "side", "direction"]);
  const { __internalRootRef } = useBaseComponent("Hotspot", { props: { direction, side } });
  const baseProps = getBaseProps(restProps);
  const hotspotContext2 = (0, import_react306.useContext)(hotspotContext);
  const content = hotspotContext2.getContentForId(hotspotId, direction);
  const { unregisterHotspot, registerHotspot } = hotspotContext2;
  (0, import_react306.useEffect)(() => {
    registerHotspot(hotspotId);
    return () => unregisterHotspot(hotspotId);
  }, [hotspotId, unregisterHotspot, registerHotspot]);
  if (children) {
    return import_react306.default.createElement(
      "div",
      Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default121.root, styles_css_default121.wrapper), ref: __internalRootRef }),
      import_react306.default.createElement("div", { className: styles_css_default121.elementWrapper }, children),
      import_react306.default.createElement("div", { className: clsx_m_default(styles_css_default121.markerWrapper, styles_css_default121[`placement-${side}`]), onClick: (e3) => e3.stopPropagation() }, content)
    );
  }
  return import_react306.default.createElement("span", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default121.root, styles_css_default121.inlineWrapper), ref: __internalRootRef, onClick: (e3) => e3.stopPropagation() }), content);
}
applyDisplayName(Hotspot, "Hotspot");

// node_modules/@cloudscape-design/components/icon/index.js
var import_react307 = __toESM(require_react());
function Icon(_a) {
  var { size = "normal", variant = "normal" } = _a, props2 = __rest(_a, ["size", "variant"]);
  const baseComponentProps = useBaseComponent("Icon", { props: { name: props2.name, size, variant } });
  return import_react307.default.createElement(internal_default, Object.assign({ size, variant }, props2, baseComponentProps));
}
applyDisplayName(Icon, "Icon");

// node_modules/@cloudscape-design/components/input/index.js
var import_react308 = __toESM(require_react());
var Input = import_react308.default.forwardRef((_a, ref) => {
  var { value, type = "text", step: step2, inputMode, autoComplete = true, spellcheck, disabled, readOnly, disableBrowserAutocorrect, onKeyDown, onKeyUp, onChange, onBlur, onFocus, ariaRequired, name, placeholder, autoFocus, ariaLabel, ariaLabelledby, ariaDescribedby, invalid, warning, controlId, clearAriaLabel } = _a, rest = __rest(_a, ["value", "type", "step", "inputMode", "autoComplete", "spellcheck", "disabled", "readOnly", "disableBrowserAutocorrect", "onKeyDown", "onKeyUp", "onChange", "onBlur", "onFocus", "ariaRequired", "name", "placeholder", "autoFocus", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "invalid", "warning", "controlId", "clearAriaLabel"]);
  const baseComponentProps = useBaseComponent("Input", {
    props: { autoComplete, autoFocus, disableBrowserAutocorrect, inputMode, readOnly, spellcheck, type }
  });
  const baseProps = getBaseProps(rest);
  const inputRef = (0, import_react308.useRef)(null);
  (0, import_react308.useImperativeHandle)(ref, () => ({
    focus(...args) {
      var _a2;
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus(...args);
    },
    select() {
      var _a2;
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.select();
    }
  }), [inputRef]);
  return import_react308.default.createElement(internal_default11, Object.assign({ ref: inputRef }, Object.assign(Object.assign(Object.assign({}, baseProps), baseComponentProps), {
    autoComplete,
    ariaLabel,
    ariaRequired,
    autoFocus,
    disabled,
    disableBrowserAutocorrect,
    name,
    onKeyDown,
    onKeyUp,
    onChange,
    onBlur,
    onFocus,
    placeholder,
    readOnly,
    type,
    step: step2,
    inputMode,
    spellcheck,
    value,
    ariaDescribedby,
    ariaLabelledby,
    invalid,
    warning,
    controlId,
    clearAriaLabel
  }), { className: clsx_m_default(styles_css_default60.root, baseProps.className), __inheritFormFieldProps: true }));
});
applyDisplayName(Input, "Input");
var input_default = Input;

// node_modules/@cloudscape-design/components/key-value-pairs/index.js
var import_react310 = __toESM(require_react());

// node_modules/@cloudscape-design/components/key-value-pairs/internal.js
var import_react309 = __toESM(require_react());

// node_modules/@cloudscape-design/components/key-value-pairs/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/key-value-pairs/styles.scoped.css";
var styles_css_default122 = {
  "key-value-pairs": "awsui_key-value-pairs_1y9fy_iaqvg_145",
  "group-title": "awsui_group-title_1y9fy_iaqvg_177",
  "group-list": "awsui_group-list_1y9fy_iaqvg_181",
  "group-list-item": "awsui_group-list-item_1y9fy_iaqvg_191",
  "term": "awsui_term_1y9fy_iaqvg_195",
  "key-label": "awsui_key-label_1y9fy_iaqvg_203",
  "detail": "awsui_detail_1y9fy_iaqvg_212",
  "info": "awsui_info_1y9fy_iaqvg_247"
};

// node_modules/@cloudscape-design/components/key-value-pairs/internal.js
var InternalKeyValuePair = ({ label, info, value, id }) => {
  const kvPairId = useUniqueId("kv-pair-");
  return import_react309.default.createElement(
    import_react309.default.Fragment,
    null,
    import_react309.default.createElement(
      "dt",
      { className: styles_css_default122.term },
      import_react309.default.createElement("label", { className: styles_css_default122["key-label"], id: id || kvPairId }, label),
      import_react309.default.createElement(InfoLinkLabelContext.Provider, { value: id || kvPairId }, info && import_react309.default.createElement("span", { className: styles_css_default122.info }, info))
    ),
    import_react309.default.createElement("dd", { className: styles_css_default122.detail }, value)
  );
};
var InternalKeyValuePairGroup = ({ label, value }) => import_react309.default.createElement(
  import_react309.default.Fragment,
  null,
  label && import_react309.default.createElement("dt", { className: styles_css_default122["group-title"] }, label),
  import_react309.default.createElement("dd", { className: styles_css_default122.detail }, value)
);
var InternalKeyValuePairs = import_react309.default.forwardRef((_a, ref) => {
  var { columns, items, className: className2, ariaLabel, ariaLabelledby, minColumnWidth } = _a, rest = __rest(_a, ["columns", "items", "className", "ariaLabel", "ariaLabelledby", "minColumnWidth"]);
  const MAX_COLUMNS = 4;
  if (columns > MAX_COLUMNS) {
    warnOnce("Key-value pairs", `\`columns\` (${columns}) must be <= ${MAX_COLUMNS}. Using ${MAX_COLUMNS} as default.`);
  }
  return import_react309.default.createElement(
    LinkDefaultVariantContext.Provider,
    { value: { defaultVariant: "primary" } },
    import_react309.default.createElement(
      "div",
      Object.assign({}, rest, { className: clsx_m_default(styles_css_default122["key-value-pairs"], className2), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, ref }),
      import_react309.default.createElement(ColumnLayout, { __tagOverride: "dl", columns: Math.min(columns, MAX_COLUMNS), variant: "text-grid", minColumnWidth }, items.map((pair, index) => {
        if (pair.type === "group") {
          return (
            /* InternalKeyValuePairGroup tells react to treat the dt-dd pair as an individual layout item.
             * Otherwise, without this component, they will be rendered as a list, which ruins the html structure.
             * InternalKeyValuePairGroup is not wrapped by div tag, because it ruins a11y compatibility for dl -> dt/dd
             *  */
            import_react309.default.createElement(InternalKeyValuePairGroup, { key: index, label: pair.title && import_react309.default.createElement(InternalBox, { variant: "h3", padding: "n" }, pair.title), value: import_react309.default.createElement("dl", { className: styles_css_default122["group-list"] }, pair.items.map((item, itemIndex) => import_react309.default.createElement(
              "div",
              { key: itemIndex, className: styles_css_default122["group-list-item"] },
              import_react309.default.createElement(InternalKeyValuePair, Object.assign({}, item))
            ))) })
          );
        }
        return import_react309.default.createElement(InternalKeyValuePair, Object.assign({ key: index }, pair));
      }))
    )
  );
});
var internal_default26 = InternalKeyValuePairs;

// node_modules/@cloudscape-design/components/key-value-pairs/index.js
function KeyValuePairs(_a) {
  var { columns = 1, items, ariaLabel, ariaLabelledby, minColumnWidth = 150 } = _a, rest = __rest(_a, ["columns", "items", "ariaLabel", "ariaLabelledby", "minColumnWidth"]);
  const { __internalRootRef } = useBaseComponent("KeyValuePairs", {
    props: { columns }
  });
  const baseProps = getBaseProps(rest);
  return import_react310.default.createElement(internal_default26, Object.assign({ columns, items, ariaLabel, ariaLabelledby, minColumnWidth }, baseProps, { ref: __internalRootRef }));
}
applyDisplayName(KeyValuePairs, "KeyValuePairs");

// node_modules/@cloudscape-design/components/line-chart/index.js
var import_react311 = __toESM(require_react());

// node_modules/@cloudscape-design/components/line-chart/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/line-chart/styles.scoped.css";
var styles_css_default123 = {
  "root": "awsui_root_g9v3m_im8v7_5"
};

// node_modules/@cloudscape-design/components/line-chart/index.js
function LineChart(_a) {
  var { series = [], height = 500, xScaleType = "linear", yScaleType = "linear", detailPopoverSize = "medium", statusType = "finished", emphasizeBaselineAxis = true } = _a, props2 = __rest(_a, ["series", "height", "xScaleType", "yScaleType", "detailPopoverSize", "statusType", "emphasizeBaselineAxis"]);
  const baseComponentProps = useBaseComponent("LineChart", {
    props: {
      detailPopoverSize,
      emphasizeBaselineAxis,
      fitHeight: props2.fitHeight,
      hideFilter: props2.hideFilter,
      hideLegend: props2.hideLegend,
      xScaleType,
      yScaleType
    }
  });
  const baseProps = getBaseProps(props2);
  const className2 = clsx_m_default(baseProps.className, styles_css_default123.root);
  return import_react311.default.createElement(InternalMixedLineBarChart, Object.assign({}, props2, baseComponentProps, { className: className2, height, xScaleType, yScaleType, stackedBars: false, horizontalBars: false, series, detailPopoverSize, statusType, emphasizeBaselineAxis }));
}
applyDisplayName(LineChart, "LineChart");
var line_chart_default = LineChart;

// node_modules/@cloudscape-design/components/link/index.js
var import_react312 = __toESM(require_react());
var Link = import_react312.default.forwardRef((_a, ref) => {
  var { fontSize = "body-m", color: color2 = "normal", external = false } = _a, props2 = __rest(_a, ["fontSize", "color", "external"]);
  const baseComponentProps = useBaseComponent("Link", {
    props: { color: color2, external, fontSize, rel: props2.rel, target: props2.target, variant: props2.variant }
  });
  const analyticsMetadata = {
    action: "click",
    detail: {
      label: { root: "self" },
      external: `${external}`
    },
    component: {
      name: "awsui.Link",
      label: { root: "self" },
      properties: { variant: props2.variant || "secondary" }
    }
  };
  if (props2.href) {
    analyticsMetadata.detail.href = props2.href;
  }
  return import_react312.default.createElement(internal_default10, Object.assign({ fontSize, color: color2, external }, props2, baseComponentProps, { ref }, getAnalyticsMetadataAttribute(analyticsMetadata)));
});
applyDisplayName(Link, "Link");
var link_default = Link;

// node_modules/@cloudscape-design/components/list/index.js
var import_react313 = __toESM(require_react());
function List(props2) {
  const baseComponentProps = useBaseComponent("List");
  return import_react313.default.createElement(InternalList, Object.assign({}, baseComponentProps, props2));
}
applyDisplayName(List, "List");

// node_modules/@cloudscape-design/components/live-region/index.js
var import_react314 = __toESM(require_react());
function LiveRegion2(_a) {
  var { assertive = false, hidden = false, tagName = "div" } = _a, restProps = __rest(_a, ["assertive", "hidden", "tagName"]);
  const baseComponentProps = useBaseComponent("LiveRegion", { props: { assertive, hidden } });
  return import_react314.default.createElement(internal_default2, Object.assign({ assertive, hidden, tagName }, baseComponentProps, restProps));
}
applyDisplayName(LiveRegion2, "LiveRegion");
var live_region_default = LiveRegion2;

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/index.js
var import_react315 = __toESM(require_react());
function MixedLineBarChart(_a) {
  var { series = [], height = 500, xScaleType = "linear", yScaleType = "linear", stackedBars = false, horizontalBars = false, statusType = "finished", detailPopoverSize = "medium", emphasizeBaselineAxis = true } = _a, props2 = __rest(_a, ["series", "height", "xScaleType", "yScaleType", "stackedBars", "horizontalBars", "statusType", "detailPopoverSize", "emphasizeBaselineAxis"]);
  const baseComponentProps = useBaseComponent("MixedLineBarChart", {
    props: {
      detailPopoverSize,
      emphasizeBaselineAxis,
      fitHeight: props2.fitHeight,
      hideFilter: props2.hideFilter,
      hideLegend: props2.hideLegend,
      horizontalBars,
      stackedBars,
      xScaleType,
      yScaleType
    }
  });
  return import_react315.default.createElement(InternalMixedLineBarChart, Object.assign({ series, height, xScaleType, yScaleType, stackedBars, horizontalBars, statusType, detailPopoverSize, emphasizeBaselineAxis }, props2, baseComponentProps));
}
applyDisplayName(MixedLineBarChart, "MixedLineBarChart");
var mixed_line_bar_chart_default = MixedLineBarChart;

// node_modules/@cloudscape-design/components/multiselect/index.js
var import_react316 = __toESM(require_react());
var Multiselect = import_react316.default.forwardRef((_a, ref) => {
  var { options = [], filteringType = "none", statusType = "finished", selectedOptions = [], keepOpen = true, hideTokens = false } = _a, restProps = __rest(_a, ["options", "filteringType", "statusType", "selectedOptions", "keepOpen", "hideTokens"]);
  const baseComponentProps = useBaseComponent("Multiselect", {
    props: {
      inlineTokens: restProps.inlineTokens,
      autoFocus: restProps.autoFocus,
      expandToViewport: restProps.expandToViewport,
      filteringType,
      hideTokens,
      keepOpen,
      tokenLimit: restProps.tokenLimit,
      virtualScroll: restProps.virtualScroll,
      readOnly: restProps.readOnly,
      enableSelectAll: restProps.enableSelectAll
    },
    metadata: {
      hasDisabledReasons: options.some((option) => Boolean(option.disabledReason))
    }
  });
  const componentAnalyticsMetadata2 = {
    name: "awsui.Multiselect",
    label: `.${styles_css_default66["button-trigger"]}`,
    properties: {
      disabled: `${!!restProps.disabled}`,
      selectedOptionsCount: `${selectedOptions.length}`
    }
  };
  return import_react316.default.createElement(internal_default12, Object.assign({ options, filteringType, statusType, selectedOptions, keepOpen, hideTokens }, restProps, baseComponentProps, { ref }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })));
});
applyDisplayName(Multiselect, "Multiselect");
var multiselect_default = Multiselect;

// node_modules/@cloudscape-design/components/pagination/index.js
var import_react318 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pagination/internal.js
var import_react317 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pagination/utils.js
function range2(from, to) {
  const result = [];
  for (let i2 = from; i2 <= to; i2++) {
    result.push(i2);
  }
  return result;
}
function getPaginationState(currentPageIndex, totalPagesCount, isOpenEnd) {
  const numberOfControls = 7;
  const leftDelta = Math.floor(numberOfControls / 2);
  let rightDelta = leftDelta;
  const lowerLimit = 2;
  let upperLimit = totalPagesCount - 1;
  if (isOpenEnd) {
    rightDelta++;
    upperLimit = totalPagesCount + 1;
  }
  let leftIndex = currentPageIndex - leftDelta;
  let rightIndex = currentPageIndex + rightDelta;
  if (leftIndex < lowerLimit) {
    rightIndex += lowerLimit - leftIndex;
    leftIndex = lowerLimit;
  }
  if (rightIndex > upperLimit) {
    leftIndex -= rightIndex - upperLimit;
    rightIndex = upperLimit;
  }
  leftIndex = Math.max(leftIndex, 2);
  rightIndex = Math.min(rightIndex, upperLimit);
  const leftDots = leftIndex > 2;
  const rightDots = isOpenEnd || rightIndex < upperLimit;
  if (leftDots) {
    leftIndex++;
  }
  if (rightDots) {
    rightIndex--;
  }
  return { leftDots, rightDots, leftIndex, rightIndex };
}

// node_modules/@cloudscape-design/components/pagination/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/pagination/styles.scoped.css";
var styles_css_default124 = {
  "root": "awsui_root_fvjdu_1toqn_145",
  "button": "awsui_button_fvjdu_1toqn_185",
  "dots": "awsui_dots_fvjdu_1toqn_186",
  "button-disabled": "awsui_button-disabled_fvjdu_1toqn_214",
  "arrow": "awsui_arrow_fvjdu_1toqn_219",
  "page-number": "awsui_page-number_fvjdu_1toqn_229",
  "button-current": "awsui_button-current_fvjdu_1toqn_235",
  "page-item": "awsui_page-item_fvjdu_1toqn_252",
  "root-disabled": "awsui_root-disabled_fvjdu_1toqn_270"
};

// node_modules/@cloudscape-design/components/pagination/internal.js
var defaultAriaLabels = {
  nextPageLabel: "",
  paginationLabel: "",
  previousPageLabel: "",
  pageLabel: (pageNumber) => `${pageNumber}`
};
function PageButton(_a) {
  var { className: className2, ariaLabel, disabled, pageIndex, isCurrent = false, children, onClick } = _a, rest = __rest(_a, ["className", "ariaLabel", "disabled", "pageIndex", "isCurrent", "children", "onClick"]);
  function handleClick(event) {
    event.preventDefault();
    onClick(pageIndex);
  }
  return import_react317.default.createElement(
    "li",
    Object.assign({ className: styles_css_default124["page-item"] }, copyAnalyticsMetadataAttribute(rest)),
    import_react317.default.createElement("button", Object.assign({ className: clsx_m_default(className2, styles_css_default124.button, disabled && styles_css_default124["button-disabled"], isCurrent && styles_css_default124["button-current"]), type: "button", "aria-label": ariaLabel, disabled, onClick: handleClick, "aria-current": isCurrent }, disabled ? {} : getAnalyticsMetadataAttribute({
      action: "click",
      detail: {
        label: { root: "self" }
      }
    })), children)
  );
}
function PageNumber(_a) {
  var { pageIndex } = _a, rest = __rest(_a, ["pageIndex"]);
  return import_react317.default.createElement(PageButton, Object.assign({ className: styles_css_default124["page-number"], pageIndex }, rest, rest.disabled ? {} : getAnalyticsMetadataAttribute({
    detail: {
      position: `${pageIndex}`
    }
  })), pageIndex);
}
function InternalPagination(_a) {
  var _b, _c, _d, _e;
  var { openEnd, currentPageIndex, ariaLabels, pagesCount, disabled, onChange, onNextPageClick, onPreviousPageClick, __internalRootRef = null } = _a, rest = __rest(_a, ["openEnd", "currentPageIndex", "ariaLabels", "pagesCount", "disabled", "onChange", "onNextPageClick", "onPreviousPageClick", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const { leftDots, leftIndex, rightIndex, rightDots } = getPaginationState(currentPageIndex, pagesCount, openEnd);
  const i18n = useInternalI18n("pagination");
  const paginationLabel = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.paginationLabel;
  const nextPageLabel = (_b = i18n("ariaLabels.nextPageLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.nextPageLabel)) !== null && _b !== void 0 ? _b : defaultAriaLabels.nextPageLabel;
  const previousPageLabel = (_c = i18n("ariaLabels.previousPageLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.previousPageLabel)) !== null && _c !== void 0 ? _c : defaultAriaLabels.previousPageLabel;
  const pageNumberLabelFn = (_d = i18n("ariaLabels.pageLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.pageLabel, (format3) => (pageNumber) => format3({ pageNumber }))) !== null && _d !== void 0 ? _d : defaultAriaLabels.pageLabel;
  function handlePrevPageClick(requestedPageIndex) {
    handlePageClick(requestedPageIndex);
    fireNonCancelableEvent(onPreviousPageClick, {
      requestedPageAvailable: true,
      requestedPageIndex
    });
  }
  function handleNextPageClick(requestedPageIndex) {
    handlePageClick(requestedPageIndex);
    fireNonCancelableEvent(onNextPageClick, {
      requestedPageAvailable: currentPageIndex < pagesCount,
      requestedPageIndex
    });
  }
  function handlePageClick(requestedPageIndex) {
    fireNonCancelableEvent(onChange, { currentPageIndex: requestedPageIndex });
  }
  const previousButtonDisabled = disabled || currentPageIndex === 1;
  const nextButtonDisabled = disabled || !openEnd && (pagesCount === 0 || currentPageIndex === pagesCount);
  const tableComponentContext = useTableComponentsContext();
  if ((_e = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.paginationRef) === null || _e === void 0 ? void 0 : _e.current) {
    tableComponentContext.paginationRef.current.currentPageIndex = currentPageIndex;
    tableComponentContext.paginationRef.current.totalPageCount = pagesCount;
    tableComponentContext.paginationRef.current.openEnd = openEnd;
  }
  return import_react317.default.createElement(
    "ul",
    Object.assign({ "aria-label": paginationLabel }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default124.root, disabled && styles_css_default124["root-disabled"]), ref: __internalRootRef }),
    import_react317.default.createElement(
      PageButton,
      Object.assign({ className: styles_css_default124.arrow, pageIndex: currentPageIndex - 1, ariaLabel: previousPageLabel !== null && previousPageLabel !== void 0 ? previousPageLabel : defaultAriaLabels.nextPageLabel, disabled: previousButtonDisabled, onClick: handlePrevPageClick }, previousButtonDisabled ? {} : getAnalyticsMetadataAttribute({
        detail: {
          position: "prev"
        }
      })),
      import_react317.default.createElement(internal_default, { name: "angle-left", variant: disabled ? "disabled" : "normal" })
    ),
    import_react317.default.createElement(PageNumber, { pageIndex: 1, isCurrent: currentPageIndex === 1, disabled, ariaLabel: pageNumberLabelFn(1), onClick: handlePageClick }),
    leftDots && import_react317.default.createElement("li", { className: styles_css_default124.dots }, "..."),
    range2(leftIndex, rightIndex).map((pageIndex) => import_react317.default.createElement(PageNumber, { key: pageIndex, isCurrent: currentPageIndex === pageIndex, pageIndex, disabled, ariaLabel: pageNumberLabelFn(pageIndex), onClick: handlePageClick })),
    rightDots && import_react317.default.createElement("li", { className: styles_css_default124.dots }, "..."),
    !openEnd && pagesCount > 1 && import_react317.default.createElement(PageNumber, { isCurrent: currentPageIndex === pagesCount, pageIndex: pagesCount, disabled, ariaLabel: pageNumberLabelFn(pagesCount), onClick: handlePageClick }),
    import_react317.default.createElement(
      PageButton,
      Object.assign({ className: styles_css_default124.arrow, pageIndex: currentPageIndex + 1, ariaLabel: nextPageLabel !== null && nextPageLabel !== void 0 ? nextPageLabel : defaultAriaLabels.nextPageLabel, disabled: nextButtonDisabled, onClick: handleNextPageClick }, nextButtonDisabled ? {} : getAnalyticsMetadataAttribute({
        detail: {
          position: "next"
        }
      })),
      import_react317.default.createElement(internal_default, { name: "angle-right", variant: disabled ? "disabled" : "normal" })
    )
  );
}

// node_modules/@cloudscape-design/components/pagination/index.js
function Pagination(props2) {
  const baseComponentProps = useBaseComponent("Pagination", { props: { openEnd: props2.openEnd } });
  return import_react318.default.createElement(InternalPagination, Object.assign({}, props2, baseComponentProps, getAnalyticsMetadataAttribute({
    component: {
      name: "awsui.Pagination",
      label: { root: "self" },
      properties: {
        openEnd: `${!!props2.openEnd}`,
        pagesCount: `${props2.pagesCount || ""}`,
        currentPageIndex: `${props2.currentPageIndex}`
      }
    }
  })));
}
applyDisplayName(Pagination, "Pagination");

// node_modules/@cloudscape-design/components/pie-chart/index.js
var import_react323 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pie-chart/pie-chart.js
var import_react322 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pie-chart/labels.js
var import_react320 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pie-chart/responsive-text.js
var import_react319 = __toESM(require_react());
var responsive_text_default2 = (0, import_react319.memo)(ResponsiveText2);
function ResponsiveText2({ x: x3, y: y4, rightSide, className: className2, children, containerBoundaries }) {
  const actualRef = (0, import_react319.useRef)(null);
  const virtualRef = (0, import_react319.useRef)(null);
  const isRtl = actualRef.current ? getIsRtl(actualRef.current) : false;
  rightSide = !isRtl ? rightSide : !rightSide;
  (0, import_react319.useEffect)(() => {
    const timeoutId = setTimeout(() => {
      const isRtl2 = getIsRtl(virtualRef.current);
      const groupRect = virtualRef.current.getBoundingClientRect();
      const visibleWidth = containerBoundaries ? getVisibleWidth(groupRect, containerBoundaries) : 0;
      renderTextContent(actualRef.current, children, visibleWidth, isRtl2);
    }, 25);
    return () => clearTimeout(timeoutId);
  });
  return import_react319.default.createElement(
    import_react319.default.Fragment,
    null,
    import_react319.default.createElement("text", { ref: virtualRef, x: x3, y: y4, style: { textAnchor: rightSide ? "start" : "end", visibility: "hidden" }, "aria-hidden": "true", className: className2 }, children),
    import_react319.default.createElement("text", { ref: actualRef, x: x3, y: y4, style: { textAnchor: rightSide ? "start" : "end" }, className: className2 }, children)
  );
}
function getVisibleWidth(element, container) {
  if (element.left < container.left) {
    return element.right - container.left;
  } else if (element.right > container.right) {
    return container.right - element.left;
  } else {
    return container.right - container.left;
  }
}

// node_modules/@cloudscape-design/components/pie-chart/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/pie-chart/styles.scoped.css";
var styles_css_default125 = {
  "segment__path": "awsui_segment__path_1edmh_e6tkd_161",
  "segment": "awsui_segment_1edmh_e6tkd_161",
  "segment__hover": "awsui_segment__hover_1edmh_e6tkd_188",
  "label": "awsui_label_1edmh_e6tkd_202",
  "root": "awsui_root_1edmh_e6tkd_216",
  "content": "awsui_content_1edmh_e6tkd_220",
  "content--small": "awsui_content--small_1edmh_e6tkd_220",
  "content--fit-height": "awsui_content--fit-height_1edmh_e6tkd_223",
  "content--without-labels": "awsui_content--without-labels_1edmh_e6tkd_226",
  "content--medium": "awsui_content--medium_1edmh_e6tkd_232",
  "content--large": "awsui_content--large_1edmh_e6tkd_244",
  "status-container": "awsui_status-container_1edmh_e6tkd_261",
  "chart-container": "awsui_chart-container_1edmh_e6tkd_265",
  "chart-container--fit-height": "awsui_chart-container--fit-height_1edmh_e6tkd_269",
  "chart-container-chart-plot": "awsui_chart-container-chart-plot_1edmh_e6tkd_274",
  "chart-container-chart-plot--fit-height": "awsui_chart-container-chart-plot--fit-height_1edmh_e6tkd_277",
  "inner-content": "awsui_inner-content_1edmh_e6tkd_283",
  "segment__highlight": "awsui_segment__highlight_1edmh_e6tkd_294",
  "segment--dimmed": "awsui_segment--dimmed_1edmh_e6tkd_309",
  "segment--highlighted": "awsui_segment--highlighted_1edmh_e6tkd_312",
  "label--dimmed": "awsui_label--dimmed_1edmh_e6tkd_329",
  "label--align-right": "awsui_label--align-right_1edmh_e6tkd_332",
  "label-text": "awsui_label-text_1edmh_e6tkd_340",
  "label__description": "awsui_label__description_1edmh_e6tkd_348",
  "label-line": "awsui_label-line_1edmh_e6tkd_355",
  "label--highlighted": "awsui_label--highlighted_1edmh_e6tkd_359",
  "popover-header": "awsui_popover-header_1edmh_e6tkd_363"
};

// node_modules/@cloudscape-design/components/pie-chart/utils.js
var minRadius = 30;
var paddingLabels = 44;
var defaultPadding = 12;
var smallPadding = 8;
var minLabelLineAngularPadding = Math.PI / 20;
var dimensionsBySize = {
  small: {
    innerRadius: 33,
    outerRadius: 50,
    innerLabelPadding: smallPadding,
    padding: smallPadding,
    paddingLabels
  },
  medium: {
    innerRadius: 66,
    outerRadius: 100,
    innerLabelPadding: defaultPadding,
    padding: defaultPadding,
    paddingLabels
  },
  large: {
    innerRadius: 93,
    outerRadius: 140,
    innerLabelPadding: defaultPadding,
    padding: defaultPadding,
    paddingLabels
  }
};
var refreshDimensionsBySize = {
  small: Object.assign(Object.assign({}, dimensionsBySize.small), { innerRadius: 38, cornerRadius: 3 }),
  medium: Object.assign(Object.assign({}, dimensionsBySize.medium), { innerRadius: 75, cornerRadius: 4 }),
  large: Object.assign(Object.assign({}, dimensionsBySize.large), { innerRadius: 105, cornerRadius: 5 })
};
function getDimensionsBySize({ size, hasLabels, visualRefresh }) {
  if (typeof size === "string") {
    const dimensions = visualRefresh ? refreshDimensionsBySize[size] : dimensionsBySize[size];
    return Object.assign(Object.assign({}, dimensions), { size });
  }
  const sizeSpec = visualRefresh ? refreshDimensionsBySize : dimensionsBySize;
  const getPixelSize = (d3) => d3.outerRadius * 2 + d3.padding * 2 + (hasLabels ? d3.paddingLabels : 0) * 2;
  let matchedSize = "small";
  if (size > getPixelSize(sizeSpec.medium)) {
    matchedSize = "medium";
  }
  if (size > getPixelSize(sizeSpec.large)) {
    matchedSize = "large";
  }
  const padding = sizeSpec[matchedSize].padding;
  const paddingLabels2 = hasLabels ? sizeSpec[matchedSize].paddingLabels : 0;
  const radiiRatio = sizeSpec[matchedSize].outerRadius / sizeSpec[matchedSize].innerRadius;
  const outerRadius = Math.max(minRadius, (size - 2 * paddingLabels2 - 2 * padding) / 2);
  const innerRadius = outerRadius / radiiRatio;
  return Object.assign(Object.assign({}, sizeSpec[matchedSize]), { outerRadius, innerRadius, size: matchedSize });
}
var defaultDetails = (i18n, i18nStrings) => (datum, dataSum) => [
  { key: i18n("i18nStrings.detailsValue", i18nStrings.detailsValue) || "", value: datum.value },
  {
    key: i18n("i18nStrings.detailsPercentage", i18nStrings.detailsPercentage) || "",
    value: `${(datum.value * 100 / dataSum).toFixed(0)}%`
  }
];
var balanceLabelNodes = (nodes, markers, leftSide, radius) => {
  var _a;
  const MARGIN = 10;
  let previousBBox = null;
  let i2 = leftSide ? nodes.length - 1 : 0;
  while (leftSide && i2 >= 0 || !leftSide && i2 < nodes.length) {
    const node = nodes[i2];
    const x3 = parseFloat(node.getAttribute("data-x") || "0");
    const y4 = parseFloat(node.getAttribute("data-y") || "0");
    const box = {
      x: x3,
      y: y4,
      height: node.getBoundingClientRect().height
    };
    const marker = markers[i2];
    if (leftSide) {
      i2--;
    } else {
      i2++;
    }
    if (!previousBBox) {
      previousBBox = box;
      node.setAttribute("transform", "");
      continue;
    }
    if (!leftSide && box.x < 0 || leftSide && box.x >= 0) {
      break;
    }
    node.setAttribute("transform", "");
    const yOffset = previousBBox.y + previousBBox.height + MARGIN - box.y;
    if (yOffset > 0) {
      const xOffset = computeXOffset(box, yOffset, radius) * (leftSide ? -1 : 1);
      node.setAttribute("transform", `translate(${xOffset} ${yOffset})`);
      const lineNode = (_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.querySelector(`.${styles_css_default125["label-line"]}`);
      if (lineNode) {
        const { endY, endX } = marker;
        lineNode.setAttribute("y2", "" + (endY + yOffset));
        lineNode.setAttribute("x2", "" + (endX + xOffset));
      }
      box.y += yOffset;
      box.x += xOffset;
    }
    previousBBox = box;
  }
};
var squareDistance = (edge) => Math.pow(edge[0], 2) + Math.pow(edge[1], 2);
var computeXOffset = (box, yOffset, radius) => {
  const upperEdge = [box.x, box.y + yOffset];
  const lowerEdge = [box.x, box.y + box.height + yOffset];
  const closestEdge = squareDistance(upperEdge) < squareDistance(lowerEdge) ? upperEdge : lowerEdge;
  if (squareDistance(closestEdge) < Math.pow(radius, 2)) {
    return Math.sqrt(Math.pow(radius, 2) - Math.pow(closestEdge[1], 2)) - Math.abs(closestEdge[0]);
  }
  return 0;
};
var computeSmartAngle = (startAngle, endAngle, optimize = false) => {
  if (!optimize || endAngle - startAngle < 2 * minLabelLineAngularPadding) {
    return (endAngle + startAngle) / 2;
  }
  const paddedStartAngle = startAngle + minLabelLineAngularPadding;
  const paddedEndAngle = endAngle - minLabelLineAngularPadding;
  if (paddedStartAngle < 0 && paddedEndAngle > 0) {
    return 0;
  }
  if (paddedStartAngle < Math.PI && paddedEndAngle > Math.PI) {
    return Math.PI;
  }
  const endAngleMinDistance = Math.min(paddedEndAngle, Math.abs(Math.PI - paddedEndAngle), 2 * Math.PI - paddedEndAngle);
  const startAngleMinDistance = Math.min(paddedStartAngle, Math.abs(Math.PI - paddedStartAngle), 2 * Math.PI - paddedStartAngle);
  if (endAngleMinDistance < startAngleMinDistance) {
    return paddedEndAngle;
  }
  return paddedStartAngle;
};

// node_modules/@cloudscape-design/components/pie-chart/labels.js
function LabelElement({ x: x3, y: y4, hideTitles, hideDescriptions, rightSide, title, description, containerBoundaries }) {
  return import_react320.default.createElement(
    "g",
    { className: styles_css_default125["label-text"], transform: "", "data-x": x3, "data-y": y4 },
    !hideTitles && import_react320.default.createElement(responsive_text_default2, { x: x3, y: y4, rightSide, containerBoundaries }, title),
    !hideDescriptions && description && import_react320.default.createElement(responsive_text_default2, { x: x3, y: y4 + (hideTitles ? 0 : 18), rightSide, className: styles_css_default125.label__description, containerBoundaries }, description)
  );
}
var labels_default = ({ pieData, dimensions, highlightedSegment, segmentDescription, visibleDataSum, hideTitles, hideDescriptions, containerRef }) => {
  const containerBoundaries = useElementBoundaries(containerRef);
  const shouldOptimizeLabels = containerBoundaries.right - containerBoundaries.left - (dimensions.outerRadius + dimensions.innerLabelPadding) * 2 < 300;
  const markers = (0, import_react320.useMemo)(() => {
    const { outerRadius: radius, innerLabelPadding } = dimensions;
    const arcMarkerStart = arc_default().innerRadius(radius - 1).outerRadius(radius - 1);
    const arcMarkerBreak = arc_default().innerRadius(radius + innerLabelPadding).outerRadius(radius + innerLabelPadding);
    return pieData.map((datum, i2) => {
      const labelDatum = pieData[i2];
      const smartAngle = computeSmartAngle(labelDatum.startAngle, labelDatum.endAngle, shouldOptimizeLabels);
      const lineExtension = 0.5 * Math.cos(2 * smartAngle) + 0.5;
      arcMarkerBreak.outerRadius(radius + 20 * lineExtension);
      arcMarkerBreak.innerRadius(radius + 20 * lineExtension);
      const [startX, startY] = arcMarkerStart.centroid(Object.assign(Object.assign({}, datum), { startAngle: smartAngle, endAngle: smartAngle }));
      const [breakX, breakY] = arcMarkerBreak.centroid(Object.assign(Object.assign({}, datum), { startAngle: smartAngle, endAngle: smartAngle }));
      const rightSide = smartAngle < Math.PI;
      const endX = shouldOptimizeLabels ? breakX + 20 * (rightSide ? 1 : -1) : (radius + 20) * (rightSide ? 1 : -1);
      const textX = endX + 5 * (rightSide ? 1 : -1);
      return {
        startX,
        startY,
        breakX,
        breakY,
        endX,
        endY: breakY,
        textX,
        textY: breakY,
        rightSide,
        datum
      };
    });
  }, [pieData, dimensions, shouldOptimizeLabels]);
  const rootRef = (0, import_react320.useRef)(null);
  (0, import_react320.useLayoutEffect)(() => {
    if (!rootRef.current) {
      return;
    }
    const labelNodes = rootRef.current.querySelectorAll(`.${styles_css_default125["label-text"]}`);
    balanceLabelNodes(labelNodes, markers, false, dimensions.outerRadius + dimensions.innerLabelPadding);
    balanceLabelNodes(labelNodes, markers, true, dimensions.outerRadius + dimensions.innerLabelPadding);
  }, [markers, pieData, dimensions]);
  return import_react320.default.createElement("g", { className: styles_css_default125.markers, "aria-hidden": "true", ref: rootRef }, markers.map(({ startX, startY, breakX, breakY, endX, endY, textX, textY, rightSide, datum }) => {
    const segment = datum.data.datum;
    const description = segmentDescription === null || segmentDescription === void 0 ? void 0 : segmentDescription(segment, visibleDataSum);
    if (hideTitles && !description || hideDescriptions && !segment.title) {
      return null;
    }
    return import_react320.default.createElement(
      "g",
      { key: datum.data.index, className: clsx_m_default(styles_css_default125.label, {
        [styles_css_default125["label--highlighted"]]: highlightedSegment === segment,
        [styles_css_default125["label--dimmed"]]: highlightedSegment !== null && highlightedSegment !== segment,
        [styles_css_default125["label--align-right"]]: !rightSide
      }) },
      import_react320.default.createElement("line", { x1: startX, y1: startY, x2: breakX, y2: breakY }),
      import_react320.default.createElement("line", { x1: breakX, y1: breakY, x2: endX, y2: endY, className: styles_css_default125["label-line"] }),
      import_react320.default.createElement(LabelElement, { x: textX, y: textY, rightSide, title: segment.title, description, hideTitles, hideDescriptions, containerBoundaries })
    );
  }));
};
function useElementBoundaries(ref) {
  const [state, setState] = (0, import_react320.useState)({ left: 0, right: 0 });
  useResizeObserver(ref, (entry) => {
    const elementRect = entry.target.getBoundingClientRect();
    setState({ left: elementRect.left, right: elementRect.right });
  });
  return state;
}

// node_modules/@cloudscape-design/components/pie-chart/segments.js
var import_react321 = __toESM(require_react());
function Segments({ pieData, highlightedSegment, dimensions, variant, focusedSegmentRef, popoverTrackRef, segmentAriaRoleDescription, onMouseDown, onMouseOver, onTouchStart }) {
  const i18n = useInternalI18n("pie-chart");
  const { arcFactory, highlightedArcFactory } = (0, import_react321.useMemo)(() => {
    const radius = dimensions.outerRadius;
    const innerRadius = variant === "pie" ? 0 : dimensions.innerRadius;
    const cornerRadius = dimensions.cornerRadius || 0;
    const arcFactory2 = arc_default().innerRadius(innerRadius).outerRadius(radius).cornerRadius(cornerRadius);
    const highlightedArcFactory2 = arc_default().innerRadius(radius + 4).outerRadius(radius + 6);
    return {
      arcFactory: arcFactory2,
      highlightedArcFactory: highlightedArcFactory2
    };
  }, [dimensions, variant]);
  const centroid = (0, import_react321.useMemo)(() => {
    for (const datum of pieData) {
      if (datum.data.datum === highlightedSegment) {
        const [centroidLeft, centroidTop] = arcFactory.centroid(datum);
        return { cx: centroidLeft, cy: centroidTop };
      }
    }
    return null;
  }, [highlightedSegment, pieData, arcFactory]);
  return import_react321.default.createElement(
    "g",
    null,
    pieData.map((datum) => {
      const isHighlighted = highlightedSegment === datum.data.datum;
      const isDimmed = highlightedSegment !== null && !isHighlighted;
      const arcPath = arcFactory(datum) || void 0;
      const highlightedPath = highlightedArcFactory(datum) || void 0;
      return import_react321.default.createElement(
        "g",
        { key: datum.data.index, onTouchStart: () => onTouchStart(), onMouseDown: (e3) => {
          onMouseDown(datum.data);
          e3.preventDefault();
        }, onMouseOver: () => onMouseOver(datum.data), className: clsx_m_default(styles_css_default125.segment, {
          [styles_css_default125["segment--highlighted"]]: isHighlighted,
          [styles_css_default125["segment--dimmed"]]: isDimmed
        }), ref: isHighlighted ? focusedSegmentRef : void 0, "aria-label": `${datum.data.datum.title} (${datum.data.datum.value})`, role: "button", "aria-roledescription": i18n("i18nStrings.segmentAriaRoleDescription", segmentAriaRoleDescription) },
        import_react321.default.createElement("path", { d: arcPath, fill: datum.data.color, className: styles_css_default125.segment__path, "aria-hidden": "true" }),
        import_react321.default.createElement("path", { d: highlightedPath, fill: datum.data.color, className: clsx_m_default(styles_css_default125.segment__path, styles_css_default125.segment__highlight), "aria-hidden": "true" })
      );
    }),
    import_react321.default.createElement("circle", Object.assign({}, centroid, { ref: popoverTrackRef, r: "1", opacity: "0", "aria-hidden": "true" }))
  );
}

// node_modules/@cloudscape-design/components/pie-chart/pie-chart.js
var pie_chart_default = ({ fitHeight, height: explicitHeight, variant, size, width, i18nStrings, ariaLabel, ariaLabelledby, ariaDescription, innerMetricValue, innerMetricDescription, hideTitles, hideDescriptions, detailPopoverContent, detailPopoverSize, detailPopoverFooter, segmentDescription, highlightedSegment, onHighlightChange, legendSegment, pieData, dataSum }) => {
  var _a, _b;
  const [pinnedSegment, setPinnedSegment] = (0, import_react322.useState)(null);
  const plotRef = (0, import_react322.useRef)(null);
  const containerRef = (0, import_react322.useRef)(null);
  const focusedSegmentRef = (0, import_react322.useRef)(null);
  const popoverTrackRef = (0, import_react322.useRef)(null);
  const popoverRef = (0, import_react322.useRef)(null);
  const hasLabels = !(hideTitles && hideDescriptions);
  const isRefresh = useVisualRefresh();
  const height = (_a = useHeightMeasure(() => {
    var _a2, _b2;
    return (_b2 = (_a2 = plotRef.current) === null || _a2 === void 0 ? void 0 : _a2.svg) !== null && _b2 !== void 0 ? _b2 : null;
  }, !fitHeight)) !== null && _a !== void 0 ? _a : explicitHeight;
  const dimensions = (0, import_react322.useMemo)(() => getDimensionsBySize({ size: fitHeight ? Math.min(height, width) : size, hasLabels, visualRefresh: isRefresh }), [fitHeight, height, width, size, hasLabels, isRefresh]);
  const hasInnerContent = variant === "donut" && (innerMetricValue || innerMetricDescription && dimensions.size !== "small");
  const innerMetricId = useUniqueId("awsui-pie-chart__inner");
  const [isPopoverOpen, setPopoverOpen] = (0, import_react322.useState)(false);
  const [popoverData, setPopoverData] = (0, import_react322.useState)();
  const highlightedSegmentIndex = (0, import_react322.useMemo)(() => {
    for (let index = 0; index < pieData.length; index++) {
      if (pieData[index].data.datum === highlightedSegment) {
        return index;
      }
    }
    return null;
  }, [pieData, highlightedSegment]);
  const detailPopoverFooterContent = (0, import_react322.useMemo)(() => detailPopoverFooter && highlightedSegment ? detailPopoverFooter(highlightedSegment) : null, [detailPopoverFooter, highlightedSegment]);
  const i18n = useInternalI18n("pie-chart");
  const detailFunction = detailPopoverContent || defaultDetails(i18n, i18nStrings);
  const details = popoverData ? detailFunction(popoverData.datum, dataSum) : [];
  const popoverContentRef = (0, import_react322.useRef)(null);
  const popoverContent = popoverData && import_react322.default.createElement(chart_series_details_default, { details, compactList: true, ref: popoverContentRef });
  const popoverDismissedRecently = (0, import_react322.useRef)(false);
  const escapePressed = (0, import_react322.useRef)(false);
  const duringTouch = (0, import_react322.useRef)(false);
  const highlightSegment = (0, import_react322.useCallback)((internalDatum) => {
    const segment = internalDatum.datum;
    if (segment !== highlightedSegment) {
      onHighlightChange(segment);
    }
    if (popoverTrackRef.current) {
      setPopoverData({
        datum: internalDatum.datum,
        series: {
          color: internalDatum.color,
          index: internalDatum.index,
          label: internalDatum.datum.title,
          markerType: "rectangle"
        },
        trackRef: popoverTrackRef
      });
      setPopoverOpen(true);
    }
  }, [highlightedSegment, setPopoverOpen, onHighlightChange]);
  const clearHighlightedSegment = (0, import_react322.useCallback)(() => {
    setPopoverOpen(false);
    onHighlightChange(null);
  }, [onHighlightChange, setPopoverOpen]);
  const checkMouseLeave = (event) => {
    if (pinnedSegment !== null) {
      return;
    }
    if (nodeContains(popoverRef.current, event.relatedTarget) || nodeContains(focusedSegmentRef.current, event.relatedTarget)) {
      return;
    }
    clearHighlightedSegment();
  };
  (0, import_react322.useEffect)(() => {
    const onKeyDown2 = (event) => {
      if (event.key === "Escape") {
        clearHighlightedSegment();
        escapePressed.current = true;
      }
    };
    document.addEventListener("keydown", onKeyDown2);
    return () => document.removeEventListener("keydown", onKeyDown2);
  }, [clearHighlightedSegment]);
  const onMouseDown = (0, import_react322.useCallback)((internalDatum) => {
    if (pinnedSegment === internalDatum.datum) {
      setPinnedSegment(null);
      clearHighlightedSegment();
    } else {
      setPinnedSegment(internalDatum.datum);
      highlightSegment(internalDatum);
    }
  }, [pinnedSegment, clearHighlightedSegment, setPinnedSegment, highlightSegment]);
  const onMouseOver = (0, import_react322.useCallback)((internalDatum) => {
    if (escapePressed.current) {
      escapePressed.current = false;
      return;
    }
    if (duringTouch.current) {
      duringTouch.current = false;
      return;
    }
    if (pinnedSegment !== null) {
      return;
    }
    highlightSegment(internalDatum);
  }, [pinnedSegment, highlightSegment]);
  const onTouchStart = (0, import_react322.useCallback)(() => {
    duringTouch.current = true;
  }, []);
  const onKeyDown = (0, import_react322.useCallback)((event) => {
    const keyCode = event.keyCode;
    if (keyCode !== KeyCode.right && keyCode !== KeyCode.left && keyCode !== KeyCode.enter && keyCode !== KeyCode.space) {
      return;
    }
    event.preventDefault();
    let nextIndex = highlightedSegmentIndex || 0;
    const MAX = pieData.length - 1;
    if (keyCode === KeyCode.right) {
      nextIndex++;
      if (nextIndex > MAX) {
        nextIndex = 0;
      }
    } else if (keyCode === KeyCode.left) {
      nextIndex--;
      if (nextIndex < 0) {
        nextIndex = MAX;
      }
    }
    if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {
      setPinnedSegment(pieData[nextIndex].data.datum);
    }
    highlightSegment(pieData[nextIndex].data);
  }, [setPinnedSegment, highlightSegment, pieData, highlightedSegmentIndex]);
  const onApplicationFocus = (0, import_react322.useCallback)((_event, target) => {
    if (pinnedSegment !== null || popoverDismissedRecently.current || target === "mouse") {
      return;
    }
    const segment = highlightedSegment || legendSegment || pieData[0].data.datum;
    const matched = pieData.filter((d3) => d3.data.datum === segment);
    highlightSegment(matched[0].data);
  }, [pinnedSegment, pieData, highlightSegment, highlightedSegment, legendSegment]);
  const onApplicationBlur = (0, import_react322.useCallback)((event) => {
    const blurTarget = event.relatedTarget || event.target;
    if (blurTarget === null || !(blurTarget instanceof Element) || !nodeBelongs(containerRef.current, blurTarget)) {
      setPopoverOpen(false);
      setPinnedSegment(null);
    }
  }, [setPinnedSegment]);
  const onPopoverDismiss = (outsideClick) => {
    setPopoverOpen(false);
    setPinnedSegment(null);
    if (!outsideClick) {
      setTimeout(() => {
        popoverDismissedRecently.current = true;
        plotRef.current.focusApplication();
        popoverDismissedRecently.current = false;
      }, 0);
    } else {
      onHighlightChange(null);
    }
  };
  return import_react322.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default125["chart-container"], fitHeight && styles_css_default125["chart-container--fit-height"]), ref: containerRef },
    import_react322.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default125["chart-container-chart-plot"], fitHeight && styles_css_default125["chart-container-chart-plot--fit-height"]) },
      import_react322.default.createElement(
        chart_plot_default,
        { ref: plotRef, width: "100%", height: fitHeight ? "100%" : height, transform: `translate(${width / 2} ${height / 2})`, isPrecise: true, isClickable: !isPopoverOpen, ariaLabel, ariaLabelledby, ariaDescription, ariaDescribedby: hasInnerContent ? innerMetricId : void 0, ariaRoleDescription: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.chartAriaRoleDescription, activeElementRef: focusedSegmentRef, activeElementKey: highlightedSegmentIndex === null || highlightedSegmentIndex === void 0 ? void 0 : highlightedSegmentIndex.toString(), onApplicationFocus, onApplicationBlur, onKeyDown, onMouseOut: checkMouseLeave },
        import_react322.default.createElement(Segments, { pieData, dimensions, variant, focusedSegmentRef, popoverTrackRef, highlightedSegment, segmentAriaRoleDescription: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.segmentAriaRoleDescription, onMouseDown, onMouseOver, onTouchStart }),
        hasLabels && import_react322.default.createElement(labels_default, { pieData, dimensions, segmentDescription, visibleDataSum: dataSum, hideTitles, hideDescriptions, highlightedSegment, containerRef })
      )
    ),
    hasInnerContent && import_react322.default.createElement(
      "div",
      { className: styles_css_default125["inner-content"], id: innerMetricId },
      innerMetricValue && import_react322.default.createElement(InternalBox, { variant: dimensions.size === "small" ? "h3" : "h1", tagOverride: "div", color: "inherit", padding: "n" }, innerMetricValue),
      innerMetricDescription && dimensions.size !== "small" && import_react322.default.createElement(InternalBox, { variant: "h3", color: "text-body-secondary", tagOverride: "div", padding: "n" }, innerMetricDescription)
    ),
    isPopoverOpen && popoverData && import_react322.default.createElement(chart_popover_default, { ref: popoverRef, title: popoverData.series && import_react322.default.createElement(
      InternalBox,
      { className: styles_css_default125["popover-header"], variant: "strong" },
      import_react322.default.createElement(chart_series_marker_default, { color: popoverData.series.color, type: popoverData.series.markerType }),
      " ",
      popoverData.series.label
    ), trackRef: popoverData.trackRef, trackKey: popoverData.series.index, dismissButton: pinnedSegment !== null, dismissAriaLabel: i18nStrings.detailPopoverDismissAriaLabel, onDismiss: onPopoverDismiss, container: ((_b = plotRef.current) === null || _b === void 0 ? void 0 : _b.svg) || null, size: detailPopoverSize, onMouseLeave: checkMouseLeave, onBlur: onApplicationBlur, footer: detailPopoverFooterContent }, popoverContent),
    import_react322.default.createElement(internal_default2, { sources: [popoverContentRef] })
  );
};

// node_modules/@cloudscape-design/components/pie-chart/index.js
var PieChart = function PieChart2(_a) {
  var { fitHeight, variant = "pie", size = "medium", hideTitles = false, hideDescriptions = false, hideLegend = false, hideFilter = false, statusType = "finished", data: externalData = [], i18nStrings = {}, highlightedSegment: controlledHighlightedSegment, visibleSegments: controlledVisibleSegments, onHighlightChange: controlledOnHighlightChange, onFilterChange, additionalFilters, legendTitle, detailPopoverSize = "medium" } = _a, props2 = __rest(_a, ["fitHeight", "variant", "size", "hideTitles", "hideDescriptions", "hideLegend", "hideFilter", "statusType", "data", "i18nStrings", "highlightedSegment", "visibleSegments", "onHighlightChange", "onFilterChange", "additionalFilters", "legendTitle", "detailPopoverSize"]);
  const { __internalRootRef = null } = useBaseComponent("PieChart", {
    props: {
      fitHeight,
      variant,
      size,
      hideTitles,
      hideDescriptions,
      hideLegend,
      hideFilter,
      detailPopoverSize
    }
  });
  const baseProps = getBaseProps(props2);
  const containerRef = (0, import_react323.useRef)(null);
  const [containerWidth, measureRef] = useContainerWidth();
  const data = (0, import_react323.useMemo)(() => {
    const colors = createCategoryColorScale(externalData, void 0, (it) => it.color || null);
    return externalData.map((datum, i2) => ({
      index: i2,
      color: colors[i2],
      datum
    }));
  }, [externalData]);
  const [highlightedSegment = null, setHighlightedSegment] = useControllable(controlledHighlightedSegment, controlledOnHighlightChange, null, {
    componentName: "PieChart",
    controlledProp: "highlightedSegment",
    changeHandler: "onHighlightChange"
  });
  const [legendSegment, setLegendSegment] = (0, import_react323.useState)(highlightedSegment);
  (0, import_react323.useEffect)(() => {
    setLegendSegment(controlledHighlightedSegment || null);
  }, [controlledHighlightedSegment]);
  const [visibleSegments, setVisibleSegments] = useControllable(controlledVisibleSegments, onFilterChange, externalData, {
    componentName: "PieChart",
    controlledProp: "visibleSegments",
    changeHandler: "onFilterChange"
  });
  const visibleData = (0, import_react323.useMemo)(() => data.filter((d3) => (visibleSegments === null || visibleSegments === void 0 ? void 0 : visibleSegments.indexOf(d3.datum)) !== -1), [data, visibleSegments]);
  const filterItems = data === null || data === void 0 ? void 0 : data.map((data2) => ({
    label: data2.datum.title,
    marker: import_react323.default.createElement(chart_series_marker_default, { color: data2.color, type: "rectangle" }),
    datum: data2.datum
  }));
  const legendItems = filterItems.filter((d3) => (visibleSegments === null || visibleSegments === void 0 ? void 0 : visibleSegments.indexOf(d3.datum)) !== -1);
  const filterChange = (0, import_react323.useCallback)((selectedSeries) => {
    setVisibleSegments(selectedSeries);
    fireNonCancelableEvent(onFilterChange, {
      visibleSegments: selectedSeries
    });
  }, [setVisibleSegments, onFilterChange]);
  const onHighlightChange = (0, import_react323.useCallback)((segment) => {
    setLegendSegment(segment);
    setHighlightedSegment(segment);
    fireNonCancelableEvent(controlledOnHighlightChange, { highlightedSegment: segment });
  }, [controlledOnHighlightChange, setHighlightedSegment]);
  const onBlur = (event) => {
    if (event.relatedTarget && !nodeBelongs(containerRef.current, event.relatedTarget)) {
      if (highlightedSegment) {
        onHighlightChange(null);
      }
      setLegendSegment(null);
    }
  };
  const mergedRef = useMergeRefs(containerRef, measureRef, __internalRootRef);
  const { pieData, dataSum } = (0, import_react323.useMemo)(() => {
    const dataSum2 = visibleData.reduce((sum2, d3) => sum2 + d3.datum.value, 0);
    const pieFactory = pie_default().value((d3) => d3.datum.value < dataSum2 / 100 ? dataSum2 / 100 : d3.datum.value).sort(null);
    const pieData2 = pieFactory(visibleData.filter((d3) => d3.datum.value > 0));
    return { pieData: pieData2, dataSum: dataSum2 };
  }, [visibleData]);
  const hasNoData = !externalData || externalData.length === 0;
  const { isEmpty, showChart } = getChartStatus({ externalData: data, visibleData: pieData, statusType });
  const isNoMatch = isEmpty && visibleData.length !== data.length;
  const showFilters = statusType === "finished" && !hasNoData && (additionalFilters || !hideFilter);
  const reserveLegendSpace = !showChart && !hideLegend;
  const reserveFilterSpace = statusType !== "finished" && !isNoMatch && (!hideFilter || additionalFilters);
  const hasLabels = !(hideTitles && hideDescriptions);
  const isRefresh = useVisualRefresh();
  const defaultDimensions = getDimensionsBySize({ size, hasLabels, visualRefresh: isRefresh });
  const radius = defaultDimensions.outerRadius;
  const height = 2 * (radius + defaultDimensions.padding + (hasLabels ? defaultDimensions.paddingLabels : 0));
  return import_react323.default.createElement(ChartWrapper, Object.assign({ ref: mergedRef, fitHeight: !!fitHeight }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default125.root), contentClassName: clsx_m_default(styles_css_default125.content, styles_css_default125[`content--${defaultDimensions.size}`], {
    [styles_css_default125["content--without-labels"]]: !hasLabels,
    [styles_css_default125["content--fit-height"]]: fitHeight
  }), defaultFilter: showFilters && !hideFilter ? import_react323.default.createElement(chart_filter_default, { series: filterItems, onChange: filterChange, selectedSeries: visibleSegments, i18nStrings }) : null, additionalFilters: showFilters ? additionalFilters : null, reserveFilterSpace: !!reserveFilterSpace, reserveLegendSpace: !!reserveLegendSpace, chartStatus: import_react323.default.createElement(ChartStatusContainer, { isEmpty, isNoMatch, showChart, statusType, empty: props2.empty, noMatch: props2.noMatch, loadingText: props2.loadingText, errorText: props2.errorText, recoveryText: props2.recoveryText, onRecoveryClick: props2.onRecoveryClick }), chart: showChart ? import_react323.default.createElement(pie_chart_default, Object.assign({}, props2, { variant, size, height, fitHeight, data: externalData, width: containerWidth, hideTitles, hideDescriptions, i18nStrings, onHighlightChange, highlightedSegment, legendSegment, detailPopoverSize, pieData, dataSum })) : null, legend: !hideLegend && !hasNoData && statusType === "finished" && import_react323.default.createElement(chart_legend_default, { series: legendItems, highlightedSeries: legendSegment, legendTitle, ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel, onHighlightChange, plotContainerRef: containerRef }), onBlur }));
};
applyDisplayName(PieChart, "PieChart");
var pie_chart_default2 = PieChart;

// node_modules/@cloudscape-design/components/popover/index.js
var import_react324 = __toESM(require_react());
var Popover = import_react324.default.forwardRef((_a, ref) => {
  var { position = "right", size = "medium", fixedWidth = false, triggerType = "text", dismissButton: dismissButton3 = true, renderWithPortal = false, wrapTriggerText = true, header } = _a, rest = __rest(_a, ["position", "size", "fixedWidth", "triggerType", "dismissButton", "renderWithPortal", "wrapTriggerText", "header"]);
  if (isDevelopment2) {
    if (dismissButton3 && !header) {
      warnOnce("Popover", `You should provide a \`header\` when \`dismissButton\` is true.`);
    }
  }
  const baseComponentProps = useBaseComponent("Popover", {
    props: { dismissButton: dismissButton3, fixedWidth, position, renderWithPortal, size, triggerType }
  });
  const externalProps = getExternalProps(rest);
  return import_react324.default.createElement(internal_default21, Object.assign({ ref, header, position, size, fixedWidth, triggerType, dismissButton: dismissButton3, renderWithPortal, wrapTriggerText }, externalProps, baseComponentProps));
});
applyDisplayName(Popover, "Popover");
var popover_default = Popover;

// node_modules/@cloudscape-design/components/progress-bar/index.js
var import_react326 = __toESM(require_react());

// node_modules/@cloudscape-design/components/progress-bar/internal.js
var import_react325 = __toESM(require_react());

// node_modules/@cloudscape-design/components/progress-bar/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/progress-bar/styles.scoped.css";
var styles_css_default126 = {
  "progress": "awsui_progress_11huc_19vty_189",
  "result-state": "awsui_result-state_11huc_19vty_203",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_11huc_19vty_1",
  "root": "awsui_root_11huc_19vty_225",
  "with-result-button": "awsui_with-result-button_11huc_19vty_257",
  "result-text": "awsui_result-text_11huc_19vty_261",
  "result-container-error": "awsui_result-container-error_11huc_19vty_265",
  "result-container-success": "awsui_result-container-success_11huc_19vty_265",
  "result-button": "awsui_result-button_11huc_19vty_269",
  "word-wrap": "awsui_word-wrap_11huc_19vty_275",
  "label-flash": "awsui_label-flash_11huc_19vty_280",
  "label-key-value": "awsui_label-key-value_11huc_19vty_284",
  "flash": "awsui_flash_11huc_19vty_292",
  "progress-container": "awsui_progress-container_11huc_19vty_296",
  "percentage-container": "awsui_percentage-container_11huc_19vty_303",
  "percentage": "awsui_percentage_11huc_19vty_303",
  "complete": "awsui_complete_11huc_19vty_349",
  "progress-in-flash": "awsui_progress-in-flash_11huc_19vty_362",
  "additional-info": "awsui_additional-info_11huc_19vty_375"
};

// node_modules/@cloudscape-design/components/progress-bar/internal.js
var MAX_VALUE = 100;
var clamp2 = (value, lowerLimit, upperLimit) => {
  return Math.max(Math.min(value, upperLimit), lowerLimit);
};
var Progress = ({ value, isInFlash, ariaLabel, ariaLabelledby, ariaDescribedby }) => {
  const roundedValue = Math.round(value);
  const progressValue = clamp2(roundedValue, 0, MAX_VALUE);
  return import_react325.default.createElement(
    "div",
    { className: styles_css_default126["progress-container"] },
    import_react325.default.createElement("progress", { className: clsx_m_default(styles_css_default126.progress, progressValue >= MAX_VALUE && styles_css_default126.complete, isInFlash && styles_css_default126["progress-in-flash"]), max: MAX_VALUE, value: progressValue, "aria-label": ariaLabel, "aria-labelledby": !ariaLabel ? ariaLabelledby : void 0, "aria-describedby": ariaDescribedby }),
    import_react325.default.createElement(
      "span",
      { "aria-hidden": "true", className: styles_css_default126["percentage-container"] },
      import_react325.default.createElement(InternalBox, { className: styles_css_default126.percentage, variant: "small", color: isInFlash ? "inherit" : void 0 }, `${progressValue}%`)
    )
  );
};
var SmallText = ({ color: color2, children, className: className2, id }) => {
  return import_react325.default.createElement(InternalBox, { className: clsx_m_default(styles_css_default126["word-wrap"], className2), variant: "small", display: "block", color: color2, id }, children);
};
var ResultButton = ({ onClick, children }) => {
  return import_react325.default.createElement(
    "div",
    { className: styles_css_default126["result-button"] },
    import_react325.default.createElement(InternalButton, { formAction: "none", onClick }, children)
  );
};
var ResultState = ({ isInFlash, resultText, resultButtonText, status, onClick }) => {
  const hasResultButton = !!resultButtonText;
  if (isInFlash) {
    return import_react325.default.createElement(
      "div",
      { className: styles_css_default126[`result-container-${status}`] },
      import_react325.default.createElement("span", { className: styles_css_default126["result-text"] }, resultText)
    );
  }
  return import_react325.default.createElement(
    "div",
    { className: styles_css_default126[`result-container-${status}`] },
    import_react325.default.createElement(
      "span",
      { className: clsx_m_default(hasResultButton && styles_css_default126["with-result-button"]) },
      import_react325.default.createElement(
        StatusIndicator,
        { type: status === "success" ? "success" : "error" },
        import_react325.default.createElement("span", { className: styles_css_default126["result-text"] }, resultText)
      )
    ),
    hasResultButton && import_react325.default.createElement(ResultButton, { onClick }, resultButtonText)
  );
};

// node_modules/@cloudscape-design/components/progress-bar/index.js
var ASSERTION_FREQUENCY = 5e3;
function ProgressBar(_a) {
  var { value = 0, status = "in-progress", variant = "standalone", resultButtonText, label, ariaLabel, ariaLabelledby, ariaDescribedby, description, additionalInfo, resultText, onResultButtonClick } = _a, rest = __rest(_a, ["value", "status", "variant", "resultButtonText", "label", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "description", "additionalInfo", "resultText", "onResultButtonClick"]);
  const { __internalRootRef } = useBaseComponent("ProgressBar", {
    props: { variant }
  });
  const baseProps = getBaseProps(rest);
  const generatedName = useUniqueId("awsui-progress-bar-");
  const labelId = `${generatedName}-label`;
  const isInFlash = variant === "flash";
  const isInProgressState = status === "in-progress";
  const descriptionId = useUniqueId("progressbar-description-");
  const additionalInfoId = useUniqueId("progressbar-additional-info-");
  const [announcedValue, setAnnouncedValue] = (0, import_react326.useState)("");
  const throttledAssertion = (0, import_react326.useMemo)(() => {
    return throttle((value2) => {
      setAnnouncedValue(`${value2}%`);
    }, ASSERTION_FREQUENCY);
  }, []);
  (0, import_react326.useEffect)(() => {
    throttledAssertion(value);
  }, [throttledAssertion, value]);
  if (isInFlash && resultButtonText) {
    warnOnce("ProgressBar", 'The `resultButtonText` is ignored if you set `variant="flash"`, and the result button is not displayed. Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item in which the progress bar component is embedded.');
  }
  return import_react326.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default126.root, variant && styles_css_default126[variant]), ref: __internalRootRef }),
    import_react326.default.createElement(
      "div",
      { className: isInFlash ? styles_css_default126["flash-container"] : void 0 },
      import_react326.default.createElement("div", { className: clsx_m_default(styles_css_default126["word-wrap"], styles_css_default126[`label-${variant}`]), id: labelId }, label),
      description && import_react326.default.createElement(SmallText, { color: isInFlash ? "inherit" : void 0, id: descriptionId }, description),
      import_react326.default.createElement("div", null, isInProgressState ? import_react326.default.createElement(
        import_react326.default.Fragment,
        null,
        import_react326.default.createElement(Progress, { value, ariaLabel, ariaLabelledby: joinStrings(labelId, ariaLabelledby), ariaDescribedby: joinStrings(description ? descriptionId : void 0, additionalInfo ? additionalInfoId : void 0, ariaDescribedby), isInFlash }),
        import_react326.default.createElement(
          internal_default2,
          { hidden: true, tagName: "span", delay: 0 },
          label,
          label ? ": " : null,
          announcedValue
        )
      ) : import_react326.default.createElement(
        internal_default2,
        { hidden: false, tagName: "span", delay: 0 },
        import_react326.default.createElement(ResultState, { resultText, isInFlash, resultButtonText, status, onClick: () => {
          fireNonCancelableEvent(onResultButtonClick);
        } })
      ))
    ),
    additionalInfo && import_react326.default.createElement(SmallText, { className: styles_css_default126["additional-info"], color: isInFlash ? "inherit" : void 0, id: additionalInfoId }, additionalInfo)
  );
}
applyDisplayName(ProgressBar, "ProgressBar");

// node_modules/@cloudscape-design/components/prompt-input/index.js
var import_react328 = __toESM(require_react());

// node_modules/@cloudscape-design/components/prompt-input/internal.js
var import_react327 = __toESM(require_react());

// node_modules/@cloudscape-design/components/prompt-input/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/prompt-input/styles.scoped.css";
var styles_css_default127 = {
  "root": "awsui_root_55fkh_25oqf_146",
  "textarea-readonly": "awsui_textarea-readonly_55fkh_25oqf_185",
  "disabled": "awsui_disabled_55fkh_25oqf_190",
  "textarea-invalid": "awsui_textarea-invalid_55fkh_25oqf_198",
  "textarea-warning": "awsui_textarea-warning_55fkh_25oqf_223",
  "textarea": "awsui_textarea_55fkh_25oqf_185",
  "invalid": "awsui_invalid_55fkh_25oqf_323",
  "warning": "awsui_warning_55fkh_25oqf_323",
  "textarea-wrapper": "awsui_textarea-wrapper_55fkh_25oqf_342",
  "button": "awsui_button_55fkh_25oqf_346",
  "action-button": "awsui_action-button_55fkh_25oqf_351",
  "secondary-content": "awsui_secondary-content_55fkh_25oqf_376",
  "with-paddings": "awsui_with-paddings_55fkh_25oqf_411",
  "secondary-actions": "awsui_secondary-actions_55fkh_25oqf_421",
  "buffer": "awsui_buffer_55fkh_25oqf_474"
};

// node_modules/@cloudscape-design/components/prompt-input/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/prompt-input/test-classes/styles.scoped.css";
var styles_css_default128 = {
  "root": "awsui_root_nr3gs_n93je_5",
  "textarea": "awsui_textarea_nr3gs_n93je_9",
  "action-button": "awsui_action-button_nr3gs_n93je_13",
  "secondary-actions": "awsui_secondary-actions_nr3gs_n93je_17",
  "secondary-content": "awsui_secondary-content_nr3gs_n93je_21"
};

// node_modules/@cloudscape-design/components/prompt-input/internal.js
var InternalPromptInput = import_react327.default.forwardRef((_a, ref) => {
  var { value, actionButtonAriaLabel, actionButtonIconName, actionButtonIconUrl, actionButtonIconSvg, actionButtonIconAlt, ariaLabel, autoComplete, autoFocus, disableActionButton, disableBrowserAutocorrect, disabled, maxRows, minRows, name, onAction, onBlur, onChange, onFocus, onKeyDown, onKeyUp, placeholder, readOnly, spellcheck, secondaryActions, secondaryContent, disableSecondaryActionsPaddings, disableSecondaryContentPaddings, __internalRootRef = null } = _a, rest = __rest(_a, ["value", "actionButtonAriaLabel", "actionButtonIconName", "actionButtonIconUrl", "actionButtonIconSvg", "actionButtonIconAlt", "ariaLabel", "autoComplete", "autoFocus", "disableActionButton", "disableBrowserAutocorrect", "disabled", "maxRows", "minRows", "name", "onAction", "onBlur", "onChange", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "spellcheck", "secondaryActions", "secondaryContent", "disableSecondaryActionsPaddings", "disableSecondaryContentPaddings", "__internalRootRef"]);
  const { ariaLabelledby, ariaDescribedby, controlId, invalid, warning } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const textareaRef = (0, import_react327.useRef)(null);
  const isRefresh = useVisualRefresh();
  const isCompactMode = useDensityMode(textareaRef) === "compact";
  const PADDING = isRefresh ? spaceXxs : spaceXxxs;
  const LINE_HEIGHT = lineHeightBodyM;
  const DEFAULT_MAX_ROWS = 3;
  (0, import_react327.useImperativeHandle)(ref, () => ({
    focus(...args) {
      var _a2;
      (_a2 = textareaRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus(...args);
    },
    select() {
      var _a2;
      (_a2 = textareaRef.current) === null || _a2 === void 0 ? void 0 : _a2.select();
    },
    setSelectionRange(...args) {
      var _a2;
      (_a2 = textareaRef.current) === null || _a2 === void 0 ? void 0 : _a2.setSelectionRange(...args);
    }
  }), [textareaRef]);
  const handleKeyDown = (event) => {
    fireKeyboardEvent(onKeyDown, event);
    if (event.key === "Enter" && !event.shiftKey && !event.nativeEvent.isComposing) {
      if (event.currentTarget.form && !event.isDefaultPrevented()) {
        event.currentTarget.form.requestSubmit();
      }
      event.preventDefault();
      fireNonCancelableEvent(onAction, { value });
    }
  };
  const handleChange = (event) => {
    fireNonCancelableEvent(onChange, { value: event.target.value });
    adjustTextareaHeight();
  };
  const hasActionButton = actionButtonIconName || actionButtonIconSvg || actionButtonIconUrl;
  const adjustTextareaHeight = (0, import_react327.useCallback)(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      const minTextareaHeight = `calc(${LINE_HEIGHT} +  ${spaceScaledXxs} * 2)`;
      if (maxRows === -1) {
        const scrollHeight = `calc(${textareaRef.current.scrollHeight}px)`;
        textareaRef.current.style.height = `max(${scrollHeight}, ${minTextareaHeight})`;
      } else {
        const maxRowsHeight = `calc(${maxRows <= 0 ? DEFAULT_MAX_ROWS : maxRows} * (${LINE_HEIGHT} + ${PADDING} / 2) + ${PADDING})`;
        const scrollHeight = `calc(${textareaRef.current.scrollHeight}px)`;
        textareaRef.current.style.height = `min(max(${scrollHeight}, ${minTextareaHeight}), ${maxRowsHeight})`;
      }
    }
  }, [maxRows, LINE_HEIGHT, PADDING]);
  (0, import_react327.useEffect)(() => {
    const handleResize = () => {
      adjustTextareaHeight();
    };
    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, [adjustTextareaHeight]);
  (0, import_react327.useEffect)(() => {
    adjustTextareaHeight();
  }, [value, adjustTextareaHeight, maxRows, isCompactMode]);
  const attributes = {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    "aria-invalid": invalid ? "true" : void 0,
    name,
    placeholder,
    autoFocus,
    className: clsx_m_default(styles_css_default127.textarea, styles_css_default128.textarea, {
      [styles_css_default127.invalid]: invalid,
      [styles_css_default127.warning]: warning
    }),
    autoComplete: convertAutoComplete(autoComplete),
    spellCheck: spellcheck,
    disabled,
    readOnly: readOnly ? true : void 0,
    rows: minRows,
    onKeyDown: handleKeyDown,
    onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)),
    // We set a default value on the component in order to force it into the controlled mode.
    value: value || "",
    onChange: handleChange,
    onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),
    onFocus: onFocus && (() => fireNonCancelableEvent(onFocus))
  };
  if (disableBrowserAutocorrect) {
    attributes.autoCorrect = "off";
    attributes.autoCapitalize = "off";
  }
  const action = import_react327.default.createElement(
    "div",
    { className: styles_css_default127.button },
    import_react327.default.createElement(internal_default3, { className: clsx_m_default(styles_css_default127["action-button"], styles_css_default128["action-button"]), ariaLabel: actionButtonAriaLabel, disabled: disabled || readOnly || disableActionButton, __focusable: readOnly, iconName: actionButtonIconName, iconUrl: actionButtonIconUrl, iconSvg: actionButtonIconSvg, iconAlt: actionButtonIconAlt, onClick: () => fireNonCancelableEvent(onAction, { value }), variant: "icon" })
  );
  return import_react327.default.createElement(
    "div",
    Object.assign({}, baseProps, { "aria-label": ariaLabel, className: clsx_m_default(styles_css_default127.root, styles_css_default128.root, baseProps.className, {
      [styles_css_default127["textarea-readonly"]]: readOnly,
      [styles_css_default127["textarea-invalid"]]: invalid,
      [styles_css_default127["textarea-warning"]]: warning && !invalid,
      [styles_css_default127.disabled]: disabled
    }), ref: __internalRootRef, role: "region" }),
    secondaryContent && import_react327.default.createElement("div", { className: clsx_m_default(styles_css_default127["secondary-content"], styles_css_default128["secondary-content"], {
      [styles_css_default127["with-paddings"]]: !disableSecondaryContentPaddings,
      [styles_css_default127.invalid]: invalid,
      [styles_css_default127.warning]: warning
    }) }, secondaryContent),
    import_react327.default.createElement(
      "div",
      { className: styles_css_default127["textarea-wrapper"] },
      import_react327.default.createElement("textarea", Object.assign({ ref: textareaRef, id: controlId }, attributes)),
      hasActionButton && !secondaryActions && action
    ),
    secondaryActions && import_react327.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default127["secondary-actions"], styles_css_default128["secondary-actions"], {
        [styles_css_default127["with-paddings"]]: !disableSecondaryActionsPaddings,
        [styles_css_default127.invalid]: invalid,
        [styles_css_default127.warning]: warning
      }) },
      secondaryActions,
      import_react327.default.createElement("div", { className: styles_css_default127.buffer, onClick: () => {
        var _a2;
        return (_a2 = textareaRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      } }),
      hasActionButton && action
    )
  );
});
var internal_default27 = InternalPromptInput;

// node_modules/@cloudscape-design/components/prompt-input/index.js
var PromptInput = import_react328.default.forwardRef((_a, ref) => {
  var { autoComplete, autoFocus, disableBrowserAutocorrect, disableActionButton, spellcheck, readOnly, actionButtonIconName, minRows = 1, maxRows = 3 } = _a, props2 = __rest(_a, ["autoComplete", "autoFocus", "disableBrowserAutocorrect", "disableActionButton", "spellcheck", "readOnly", "actionButtonIconName", "minRows", "maxRows"]);
  const baseComponentProps = useBaseComponent("PromptInput", {
    props: {
      readOnly,
      autoComplete,
      autoFocus,
      disableBrowserAutocorrect,
      disableActionButton,
      spellcheck,
      actionButtonIconName,
      minRows,
      maxRows
    }
  });
  return import_react328.default.createElement(internal_default27, Object.assign({ readOnly, autoComplete, autoFocus, disableBrowserAutocorrect, disableActionButton, spellcheck, actionButtonIconName, minRows, maxRows }, props2, baseComponentProps, { ref }));
});
applyDisplayName(PromptInput, "PromptInput");
var prompt_input_default = PromptInput;

// node_modules/@cloudscape-design/components/property-filter/index.js
var import_react338 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/internal.js
var import_react337 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/utils.js
function matchFilteringProperty(filteringProperties, filteringText) {
  let maxLength = 0;
  let matchedProperty = null;
  for (const property of filteringProperties) {
    if (property.propertyLabel.length >= maxLength && startsWith(filteringText, property.propertyLabel) || property.propertyLabel.length > maxLength && startsWith(filteringText.toLowerCase(), property.propertyLabel.toLowerCase())) {
      maxLength = property.propertyLabel.length;
      matchedProperty = property;
    }
  }
  return matchedProperty;
}
function matchOperator(allowedOperators, filteringText) {
  filteringText = filteringText.toLowerCase();
  let maxLength = 0;
  let matchedOperator = null;
  for (const operator of allowedOperators) {
    if (operator.length > maxLength && startsWith(filteringText, operator.toLowerCase())) {
      maxLength = operator.length;
      matchedOperator = operator;
    }
  }
  return matchedOperator;
}
function matchOperatorPrefix(allowedOperators, filteringText) {
  if (filteringText.trim().length === 0) {
    return "";
  }
  for (const operator of allowedOperators) {
    if (startsWith(operator.toLowerCase(), filteringText.toLowerCase())) {
      return filteringText;
    }
  }
  return null;
}
function matchTokenValue({ property, operator, value }, filteringOptions) {
  var _a, _b;
  const tokenType = property === null || property === void 0 ? void 0 : property.getTokenType(operator);
  const propertyOptions = filteringOptions.filter((option) => option.property === property);
  const castValue = (value2) => {
    if (value2 === null) {
      return tokenType === "enum" ? [] : null;
    }
    return tokenType === "enum" && !Array.isArray(value2) ? [value2] : value2;
  };
  const bestMatch = { propertyKey: property === null || property === void 0 ? void 0 : property.propertyKey, operator, value: castValue(value) };
  for (const option of propertyOptions) {
    if (option.label && option.label === value || !option.label && option.value === value) {
      return { propertyKey: property === null || property === void 0 ? void 0 : property.propertyKey, operator, value: castValue(option.value) };
    }
    if (typeof value === "string" && value.toLowerCase() === ((_b = (_a = option.label) !== null && _a !== void 0 ? _a : option.value) !== null && _b !== void 0 ? _b : "").toLowerCase()) {
      bestMatch.value = castValue(option.value);
    }
  }
  return bestMatch;
}
function trimStart(source) {
  let spacesLength = 0;
  for (let i2 = 0; i2 < source.length; i2++) {
    if (source[i2] === " ") {
      spacesLength++;
    } else {
      break;
    }
  }
  return source.slice(spacesLength);
}
function trimFirstSpace(source) {
  return source[0] === " " ? source.slice(1) : source;
}
function removeOperator(source, operator) {
  const operatorLastIndex = source.indexOf(operator) + operator.length;
  const textWithoutOperator = source.slice(operatorLastIndex);
  return trimFirstSpace(textWithoutOperator);
}
function startsWith(source, target) {
  return source.indexOf(target) === 0;
}
function tokenGroupToTokens(tokenGroups) {
  const tokens = [];
  for (const tokenOrGroup of tokenGroups) {
    if ("operator" in tokenOrGroup) {
      tokens.push(tokenOrGroup);
    } else {
      for (const nestedTokenOrGroup of tokenOrGroup.tokens) {
        if ("operator" in nestedTokenOrGroup) {
          tokens.push(nestedTokenOrGroup);
        } else {
        }
      }
    }
  }
  return tokens;
}

// node_modules/@cloudscape-design/components/property-filter/i18n-utils.js
function usePropertyFilterI18n(def = {}) {
  var _a;
  const i18n = useInternalI18n("property-filter");
  const allPropertiesLabel = i18n("i18nStrings.allPropertiesLabel", def === null || def === void 0 ? void 0 : def.allPropertiesLabel);
  const operationAndText = i18n("i18nStrings.operationAndText", def === null || def === void 0 ? void 0 : def.operationAndText);
  const operationOrText = i18n("i18nStrings.operationOrText", def === null || def === void 0 ? void 0 : def.operationOrText);
  const formatToken = (_a = i18n("i18nStrings.formatToken", def.formatToken, (format3) => (token) => format3({
    token__propertyLabel: token.propertyLabel,
    token__operator: getOperatorI18nString(token.operator),
    token__value: token.value
  }))) !== null && _a !== void 0 ? _a : (token) => `${token.propertyLabel} ${token.operator} ${token.value}`;
  function toFormatted(token) {
    var _a2, _b, _c;
    let valueFormatter = (_a2 = token.property) === null || _a2 === void 0 ? void 0 : _a2.getValueFormatter(token.operator);
    if (!valueFormatter && ((_b = token.property) === null || _b === void 0 ? void 0 : _b.getTokenType(token.operator)) === "enum") {
      valueFormatter = (value) => Array.isArray(value) ? value.join(", ") : value;
    }
    const propertyLabel = token.property ? token.property.propertyLabel : allPropertiesLabel !== null && allPropertiesLabel !== void 0 ? allPropertiesLabel : "";
    const tokenValue = valueFormatter ? valueFormatter(token.value) : token.value;
    return { propertyKey: (_c = token.property) === null || _c === void 0 ? void 0 : _c.propertyKey, propertyLabel, operator: token.operator, value: tokenValue };
  }
  return Object.assign(Object.assign({}, def), {
    allPropertiesLabel,
    operationAndText,
    operationOrText,
    applyActionText: i18n("i18nStrings.applyActionText", def === null || def === void 0 ? void 0 : def.applyActionText),
    cancelActionText: i18n("i18nStrings.cancelActionText", def === null || def === void 0 ? void 0 : def.cancelActionText),
    clearFiltersText: i18n("i18nStrings.clearFiltersText", def === null || def === void 0 ? void 0 : def.clearFiltersText),
    editTokenHeader: i18n("i18nStrings.editTokenHeader", def === null || def === void 0 ? void 0 : def.editTokenHeader),
    groupPropertiesText: i18n("i18nStrings.groupPropertiesText", def === null || def === void 0 ? void 0 : def.groupPropertiesText),
    groupValuesText: i18n("i18nStrings.groupValuesText", def === null || def === void 0 ? void 0 : def.groupValuesText),
    operatorContainsText: i18n("i18nStrings.operatorContainsText", def === null || def === void 0 ? void 0 : def.operatorContainsText),
    operatorDoesNotContainText: i18n("i18nStrings.operatorDoesNotContainText", def === null || def === void 0 ? void 0 : def.operatorDoesNotContainText),
    operatorDoesNotEqualText: i18n("i18nStrings.operatorDoesNotEqualText", def === null || def === void 0 ? void 0 : def.operatorDoesNotEqualText),
    operatorEqualsText: i18n("i18nStrings.operatorEqualsText", def === null || def === void 0 ? void 0 : def.operatorEqualsText),
    operatorGreaterOrEqualText: i18n("i18nStrings.operatorGreaterOrEqualText", def === null || def === void 0 ? void 0 : def.operatorGreaterOrEqualText),
    operatorGreaterText: i18n("i18nStrings.operatorGreaterText", def === null || def === void 0 ? void 0 : def.operatorGreaterText),
    operatorLessOrEqualText: i18n("i18nStrings.operatorLessOrEqualText", def === null || def === void 0 ? void 0 : def.operatorLessOrEqualText),
    operatorLessText: i18n("i18nStrings.operatorLessText", def === null || def === void 0 ? void 0 : def.operatorLessText),
    operatorStartsWithText: i18n("i18nStrings.operatorStartsWithText", def === null || def === void 0 ? void 0 : def.operatorStartsWithText),
    operatorDoesNotStartWithText: i18n("i18nStrings.operatorDoesNotStartWithText", def === null || def === void 0 ? void 0 : def.operatorDoesNotStartWithText),
    operatorText: i18n("i18nStrings.operatorText", def === null || def === void 0 ? void 0 : def.operatorText),
    operatorsText: i18n("i18nStrings.operatorsText", def === null || def === void 0 ? void 0 : def.operatorsText),
    propertyText: i18n("i18nStrings.propertyText", def === null || def === void 0 ? void 0 : def.propertyText),
    tokenLimitShowFewer: i18n("i18nStrings.tokenLimitShowFewer", def === null || def === void 0 ? void 0 : def.tokenLimitShowFewer),
    tokenLimitShowMore: i18n("i18nStrings.tokenLimitShowMore", def === null || def === void 0 ? void 0 : def.tokenLimitShowMore),
    valueText: i18n("i18nStrings.valueText", def === null || def === void 0 ? void 0 : def.valueText),
    tokenEditorTokenRemoveLabel: i18n("i18nStrings.tokenEditorTokenRemoveLabel", def === null || def === void 0 ? void 0 : def.tokenEditorTokenRemoveLabel),
    tokenEditorTokenRemoveFromGroupLabel: i18n("i18nStrings.tokenEditorTokenRemoveFromGroupLabel", def === null || def === void 0 ? void 0 : def.tokenEditorTokenRemoveFromGroupLabel),
    tokenEditorAddNewTokenLabel: i18n("i18nStrings.tokenEditorAddNewTokenLabel", def === null || def === void 0 ? void 0 : def.tokenEditorAddNewTokenLabel),
    tokenEditorAddTokenActionsAriaLabel: i18n("i18nStrings.tokenEditorAddTokenActionsAriaLabel", def === null || def === void 0 ? void 0 : def.tokenEditorAddTokenActionsAriaLabel),
    formatToken: (token) => {
      const formattedToken = toFormatted(token);
      return Object.assign(Object.assign({}, formattedToken), { formattedText: formatToken(toFormatted(token)) });
    },
    groupAriaLabel: (group) => {
      var _a2;
      const tokens = tokenGroupToTokens(group.tokens).map(toFormatted);
      const groupOperationLabel = (_a2 = group.operation === "and" ? operationAndText : operationOrText) !== null && _a2 !== void 0 ? _a2 : "";
      return tokens.map((token) => formatToken(token)).join(` ${groupOperationLabel} `);
    },
    groupEditAriaLabel: (group) => {
      var _a2, _b;
      const tokens = tokenGroupToTokens(group.tokens).map((token) => toFormatted(token));
      const operation = group.operation;
      const operationLabel = (_a2 = operation === "and" ? operationAndText : operationOrText) !== null && _a2 !== void 0 ? _a2 : "";
      const formatter = i18n("i18nStrings.groupEditAriaLabel", def.groupEditAriaLabel, (format3) => () => format3({
        group__operationLabel: operationLabel,
        group__formattedTokens__length: tokens.length.toString(),
        group__formattedTokens0__formattedText: tokens[0] ? formatToken(tokens[0]) : "",
        group__formattedTokens1__formattedText: tokens[1] ? formatToken(tokens[1]) : "",
        group__formattedTokens2__formattedText: tokens[2] ? formatToken(tokens[2]) : "",
        group__formattedTokens3__formattedText: tokens[3] ? formatToken(tokens[3]) : ""
      }));
      return (_b = formatter === null || formatter === void 0 ? void 0 : formatter({ operation, operationLabel, tokens })) !== null && _b !== void 0 ? _b : "";
    },
    removeTokenButtonAriaLabel: (token) => {
      var _a2;
      const formatter = i18n("i18nStrings.removeTokenButtonAriaLabel", def.removeTokenButtonAriaLabel, (format3) => () => format3({ token__formattedText: formatToken(toFormatted(token)) }));
      return (_a2 = formatter === null || formatter === void 0 ? void 0 : formatter(toFormatted(token))) !== null && _a2 !== void 0 ? _a2 : "";
    },
    tokenEditorTokenActionsAriaLabel: (token) => {
      var _a2;
      const formatter = i18n("i18nStrings.tokenEditorTokenActionsAriaLabel", def.tokenEditorTokenActionsAriaLabel, (format3) => () => format3({ token__formattedText: formatToken(toFormatted(token)) }));
      return (_a2 = formatter === null || formatter === void 0 ? void 0 : formatter(toFormatted(token))) !== null && _a2 !== void 0 ? _a2 : "";
    },
    tokenEditorTokenRemoveAriaLabel: (token) => {
      var _a2;
      const formatter = i18n("i18nStrings.tokenEditorTokenRemoveAriaLabel", def.tokenEditorTokenRemoveAriaLabel, (format3) => () => format3({ token__formattedText: formatToken(toFormatted(token)) }));
      return (_a2 = formatter === null || formatter === void 0 ? void 0 : formatter(toFormatted(token))) !== null && _a2 !== void 0 ? _a2 : "";
    },
    tokenEditorAddExistingTokenAriaLabel: (token) => {
      var _a2;
      const formatter = i18n("i18nStrings.tokenEditorAddExistingTokenAriaLabel", def.tokenEditorAddExistingTokenAriaLabel, (format3) => () => format3({ token__formattedText: formatToken(toFormatted(token)) }));
      return (_a2 = formatter === null || formatter === void 0 ? void 0 : formatter(toFormatted(token))) !== null && _a2 !== void 0 ? _a2 : "";
    },
    tokenEditorAddExistingTokenLabel: (token) => {
      var _a2;
      const formattedToken = toFormatted(token);
      const formatter = i18n("i18nStrings.tokenEditorAddExistingTokenLabel", def.tokenEditorAddExistingTokenLabel, (format3) => () => format3({
        token__propertyLabel: formattedToken.propertyLabel,
        token__operator: formattedToken.operator,
        token__value: formattedToken.value
      }));
      return (_a2 = formatter === null || formatter === void 0 ? void 0 : formatter(toFormatted(token))) !== null && _a2 !== void 0 ? _a2 : "";
    }
  });
}
function operatorToDescription(operator, i18nStrings) {
  switch (operator) {
    case "<":
      return i18nStrings.operatorLessText;
    case "<=":
      return i18nStrings.operatorLessOrEqualText;
    case ">":
      return i18nStrings.operatorGreaterText;
    case ">=":
      return i18nStrings.operatorGreaterOrEqualText;
    case ":":
      return i18nStrings.operatorContainsText;
    case "!:":
      return i18nStrings.operatorDoesNotContainText;
    case "=":
      return i18nStrings.operatorEqualsText;
    case "!=":
      return i18nStrings.operatorDoesNotEqualText;
    case "^":
      return i18nStrings.operatorStartsWithText;
    case "!^":
      return i18nStrings.operatorDoesNotStartWithText;
    default:
      return "";
  }
}
function getOperatorI18nString(operator) {
  switch (operator) {
    case "=":
      return "equals";
    case "!=":
      return "not_equals";
    case ">":
      return "greater_than";
    case ">=":
      return "greater_than_equal";
    case "<":
      return "less_than";
    case "<=":
      return "less_than_equal";
    case ":":
      return "contains";
    case "!:":
      return "not_contains";
    case "^":
      return "starts_with";
    case "!^":
      return "not_starts_with";
    default:
      return operator;
  }
}

// node_modules/@cloudscape-design/components/property-filter/controller.js
var getQueryActions = ({ query, onChange, filteringOptions, enableTokenGroups }) => {
  const setQuery = (query2) => {
    function transformToken(token) {
      if ("operator" in token) {
        return matchTokenValue(token, filteringOptions);
      }
      return Object.assign(Object.assign({}, token), { tokens: token.tokens.map(transformToken) });
    }
    const tokens = query2.tokens.map(transformToken);
    if (enableTokenGroups) {
      fireNonCancelableEvent(onChange, { tokens: [], operation: query2.operation, tokenGroups: tokens });
    } else {
      fireNonCancelableEvent(onChange, { tokens: tokenGroupToTokens(tokens), operation: query2.operation });
    }
  };
  const addToken = (token) => {
    setQuery(Object.assign(Object.assign({}, query), { tokens: [...query.tokens, token] }));
  };
  const updateToken = (updateIndex, updatedToken, releasedTokens) => {
    const nestedTokens = tokenGroupToTokens([updatedToken]);
    const capturedTokenIndices = nestedTokens.map((token) => token.standaloneIndex).filter((index) => index !== void 0);
    const tokens = query.tokens.map((token, index) => index === updateIndex ? updatedToken : token).filter((_, index) => index === updateIndex || !capturedTokenIndices.includes(index));
    tokens.push(...releasedTokens);
    setQuery(Object.assign(Object.assign({}, query), { tokens }));
  };
  const removeToken = (removeIndex) => {
    setQuery(Object.assign(Object.assign({}, query), { tokens: query.tokens.filter((_, index) => index !== removeIndex) }));
  };
  const removeAllTokens = () => {
    setQuery(Object.assign(Object.assign({}, query), { tokens: [] }));
  };
  const updateOperation = (operation) => {
    setQuery(Object.assign(Object.assign({}, query), { operation }));
  };
  return { addToken, updateToken, updateOperation, removeToken, removeAllTokens };
};
var getAllowedOperators = (property) => {
  const { operators = [], defaultOperator } = property;
  const operatorOrder = ["=", "!=", ":", "!:", "^", "!^", ">=", "<=", "<", ">"];
  const operatorSet = /* @__PURE__ */ new Set([defaultOperator, ...operators]);
  return operatorOrder.filter((op) => operatorSet.has(op));
};
var parseText = (filteringText, filteringProperties, freeTextFiltering) => {
  const property = matchFilteringProperty(filteringProperties, filteringText);
  if (!property) {
    if (!freeTextFiltering.disabled) {
      const freeTextOperators = freeTextFiltering.operators.indexOf("!:") >= 0 ? ["!", ...freeTextFiltering.operators] : freeTextFiltering.operators;
      const operator2 = matchOperator(freeTextOperators, filteringText);
      if (operator2) {
        return {
          step: "free-text",
          operator: operator2 === "!" ? "!:" : operator2,
          value: removeOperator(filteringText, operator2)
        };
      }
    }
    return {
      step: "free-text",
      value: filteringText
    };
  }
  const allowedOps = getAllowedOperators(property);
  const textWithoutProperty = filteringText.substring(property.propertyLabel.length);
  const operator = matchOperator(allowedOps, trimStart(textWithoutProperty));
  if (operator) {
    return {
      step: "property",
      property,
      operator,
      value: removeOperator(textWithoutProperty, operator)
    };
  }
  const operatorPrefix = matchOperatorPrefix(allowedOps, trimStart(textWithoutProperty));
  if (operatorPrefix !== null) {
    return { step: "operator", property, operatorPrefix };
  }
  return {
    step: "free-text",
    value: filteringText
  };
};
var getAllValueSuggestions = (filteringOptions, operator = "=", i18nStrings, customGroupsText) => {
  var _a;
  const defaultGroup = {
    label: (_a = i18nStrings.groupValuesText) !== null && _a !== void 0 ? _a : "",
    options: []
  };
  const customGroups = {};
  filteringOptions.forEach((filteringOption) => {
    const property = filteringOption.property;
    if (!property) {
      return;
    }
    if (getAllowedOperators(property).indexOf(operator) === -1) {
      return;
    }
    if (property.propertyGroup && !customGroups[property.propertyGroup]) {
      const label = customGroupsText.reduce((acc, customGroup) => customGroup.group === property.propertyGroup ? customGroup.values : acc, "");
      customGroups[property.propertyGroup] = {
        label,
        options: []
      };
    }
    const propertyGroup = property.propertyGroup ? customGroups[property.propertyGroup] : defaultGroup;
    propertyGroup.options.push({
      value: property.propertyLabel + " " + (operator || "=") + " " + filteringOption.value,
      label: filteringOption.label,
      __labelPrefix: property.propertyLabel + " " + (operator || "=")
    });
  });
  return [defaultGroup, ...Object.keys(customGroups).map((group) => customGroups[group])];
};
var filteringPropertyToAutosuggestOption = (filteringProperty) => ({
  value: filteringProperty.propertyLabel,
  label: filteringProperty.propertyLabel,
  keepOpenOnSelect: true
});
function getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, filteringPropertyToOption) {
  var _a;
  const defaultGroup = {
    label: (_a = i18nStrings.groupPropertiesText) !== null && _a !== void 0 ? _a : "",
    options: []
  };
  const customGroups = {};
  filteringProperties.forEach((filteringProperty) => {
    const { propertyGroup } = filteringProperty;
    let optionsGroup = defaultGroup;
    if (propertyGroup) {
      if (!customGroups[propertyGroup]) {
        const label = customGroupsText.reduce((acc, customGroup) => customGroup.group === propertyGroup ? customGroup.properties : acc, "");
        customGroups[propertyGroup] = { options: [], label };
      }
      optionsGroup = customGroups[propertyGroup];
    }
    optionsGroup.options.push(filteringPropertyToOption(filteringProperty));
  });
  const defaultGroupArray = defaultGroup.options.length ? [defaultGroup] : [];
  const customGroupsArray = Object.keys(customGroups).map((groupKey) => customGroups[groupKey]);
  return [...defaultGroupArray, ...customGroupsArray];
}
var getAutosuggestOptions = (parsedText, filteringProperties, filteringOptions, customGroupsText, i18nStrings) => {
  switch (parsedText.step) {
    case "property": {
      const { propertyLabel, groupValuesLabel } = parsedText.property;
      const options = filteringOptions.filter((o) => o.property === parsedText.property);
      return {
        filterText: parsedText.value,
        options: [
          {
            options: options.map(({ label, value }) => ({
              value: propertyLabel + " " + parsedText.operator + " " + value,
              label,
              __labelPrefix: propertyLabel + " " + parsedText.operator
            })),
            label: groupValuesLabel
          }
        ]
      };
    }
    case "operator": {
      return {
        filterText: parsedText.property.propertyLabel + " " + parsedText.operatorPrefix,
        options: [
          ...getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, filteringPropertyToAutosuggestOption),
          {
            options: getAllowedOperators(parsedText.property).map((value) => ({
              value: parsedText.property.propertyLabel + " " + value + " ",
              label: parsedText.property.propertyLabel + " " + value,
              description: operatorToDescription(value, i18nStrings),
              keepOpenOnSelect: true
            })),
            label: i18nStrings.operatorsText
          }
        ]
      };
    }
    case "free-text": {
      const needsValueSuggestions = !!parsedText.value;
      const needsPropertySuggestions = !(parsedText.step === "free-text" && parsedText.operator === "!:");
      return {
        filterText: parsedText.value,
        options: [
          ...needsPropertySuggestions ? getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, filteringPropertyToAutosuggestOption) : [],
          ...needsValueSuggestions ? getAllValueSuggestions(filteringOptions, parsedText.operator, i18nStrings, customGroupsText) : []
        ]
      };
    }
  }
};

// node_modules/@cloudscape-design/components/property-filter/property-editor.js
var import_react331 = __toESM(require_react());

// node_modules/@cloudscape-design/components/multiselect/embedded.js
var import_react329 = __toESM(require_react());
var EmbeddedMultiselect = import_react329.default.forwardRef((_a, externalRef) => {
  var { options, filteringType, ariaLabel, selectedOptions, deselectAriaLabel, virtualScroll, filteringText = "" } = _a, restProps = __rest(_a, ["options", "filteringType", "ariaLabel", "selectedOptions", "deselectAriaLabel", "virtualScroll", "filteringText"]);
  const formFieldContext = useFormFieldContext(restProps);
  const ariaLabelId = useUniqueId("multiselect-ariaLabel-");
  const footerId = useUniqueId("multiselect-footer-");
  const multiselectProps = useMultiselect(Object.assign({
    options,
    selectedOptions,
    filteringType,
    disabled: false,
    deselectAriaLabel,
    controlId: formFieldContext.controlId,
    ariaLabelId,
    footerId,
    filteringValue: filteringText,
    externalRef,
    keepOpen: true,
    embedded: true
  }, restProps));
  const ListComponent = virtualScroll ? virtual_list_default : plain_list_default;
  const status = multiselectProps.dropdownStatus;
  return import_react329.default.createElement(
    "div",
    { className: styles_css_default70.embedded },
    import_react329.default.createElement(ListComponent, { menuProps: multiselectProps.getMenuProps(), getOptionProps: multiselectProps.getOptionProps, filteredOptions: multiselectProps.filteredOptions, filteringValue: filteringText, ref: multiselectProps.scrollToIndex, hasDropdownStatus: status.content !== null, checkboxes: true, useInteractiveGroups: true, screenReaderContent: multiselectProps.announcement, highlightType: multiselectProps.highlightType }),
    status.content && import_react329.default.createElement(dropdown_footer_default, { content: status.content, id: footerId }),
    import_react329.default.createElement(ScreenreaderOnly, { id: ariaLabelId }, ariaLabel)
  );
});
var embedded_default = EmbeddedMultiselect;

// node_modules/@cloudscape-design/components/property-filter/filter-options.js
function filterOptions3(options, searchText = "") {
  if (!searchText) {
    return options;
  }
  const filtered = [];
  for (const option of options) {
    if (isGroup4(option)) {
      const childOptions = filterOptions3(option.options, searchText);
      if (childOptions.length > 0) {
        filtered.push(Object.assign(Object.assign({}, option), { options: childOptions }));
      }
    } else if (matchSingleOption2(option, searchText)) {
      filtered.push(option);
    }
  }
  return filtered;
}
function isGroup4(optionOrGroup) {
  return "options" in optionOrGroup;
}
function matchSingleOption2(option, searchText) {
  var _a, _b;
  searchText = searchText.toLowerCase();
  const label = ((_a = option.label) !== null && _a !== void 0 ? _a : "").toLowerCase();
  const labelPrefix = (_b = option.__labelPrefix) !== null && _b !== void 0 ? _b : "";
  const value = (option.value ? option.value.slice(labelPrefix.length) : "").toLowerCase();
  return label.indexOf(searchText) !== -1 || value.indexOf(searchText) !== -1;
}

// node_modules/@cloudscape-design/components/property-filter/use-load-items.js
var import_react330 = __toESM(require_react());
var useLoadItems2 = (onLoadItems, focusFilteringText, currentFilteringProperty, currentFilteringText, currentFilteringOperator) => {
  const focusIn = (0, import_react330.useRef)(false);
  const handleBlur = () => {
    focusIn.current = true;
  };
  const fireLoadItems = (detail) => {
    var _a;
    fireNonCancelableEvent(onLoadItems, Object.assign(Object.assign({}, detail), { filteringText: (_a = currentFilteringText !== null && currentFilteringText !== void 0 ? currentFilteringText : detail.filteringText) !== null && _a !== void 0 ? _a : "", filteringProperty: currentFilteringProperty, filteringOperator: currentFilteringOperator }));
    focusIn.current = false;
  };
  const handleFocus = () => {
    if (focusIn.current) {
      fireLoadItems({ firstPage: true, samePage: false, filteringText: focusFilteringText });
    }
  };
  const handleLoadItems = ({ detail }) => fireLoadItems(detail);
  return {
    onBlur: handleBlur,
    onFocus: handleFocus,
    onLoadItems: handleLoadItems
  };
};

// node_modules/@cloudscape-design/components/property-filter/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/property-filter/styles.scoped.css";
var styles_css_default129 = {
  "root": "awsui_root_1wzqe_1jgzn_145",
  "search-field": "awsui_search-field_1wzqe_1jgzn_177",
  "input-wrapper": "awsui_input-wrapper_1wzqe_1jgzn_184",
  "add-token": "awsui_add-token_1wzqe_1jgzn_191",
  "tokens": "awsui_tokens_1wzqe_1jgzn_198",
  "token-operator": "awsui_token-operator_1wzqe_1jgzn_203",
  "property-editor": "awsui_property-editor_1wzqe_1jgzn_207",
  "property-editor-header": "awsui_property-editor-header_1wzqe_1jgzn_210",
  "property-editor-header-enum": "awsui_property-editor-header-enum_1wzqe_1jgzn_223",
  "property-editor-form": "awsui_property-editor-form_1wzqe_1jgzn_238",
  "property-editor-cancel": "awsui_property-editor-cancel_1wzqe_1jgzn_243",
  "property-editor-actions": "awsui_property-editor-actions_1wzqe_1jgzn_246",
  "property-editor-enum": "awsui_property-editor-enum_1wzqe_1jgzn_254",
  "token-editor": "awsui_token-editor_1wzqe_1jgzn_259",
  "token-editor-form": "awsui_token-editor-form_1wzqe_1jgzn_266",
  "token-editor-field-property": "awsui_token-editor-field-property_1wzqe_1jgzn_269",
  "token-editor-field-operator": "awsui_token-editor-field-operator_1wzqe_1jgzn_272",
  "token-editor-field-value": "awsui_token-editor-field-value_1wzqe_1jgzn_275",
  "token-editor-multiselect-wrapper": "awsui_token-editor-multiselect-wrapper_1wzqe_1jgzn_278",
  "token-editor-multiselect-wrapper-inner": "awsui_token-editor-multiselect-wrapper-inner_1wzqe_1jgzn_283",
  "token-editor-cancel": "awsui_token-editor-cancel_1wzqe_1jgzn_287",
  "token-editor-submit": "awsui_token-editor-submit_1wzqe_1jgzn_290",
  "token-editor-actions": "awsui_token-editor-actions_1wzqe_1jgzn_293",
  "token-editor-grid": "awsui_token-editor-grid_1wzqe_1jgzn_302",
  "token-editor-grid-group": "awsui_token-editor-grid-group_1wzqe_1jgzn_336",
  "token-editor-narrow": "awsui_token-editor-narrow_1wzqe_1jgzn_339",
  "token-editor-supports-groups": "awsui_token-editor-supports-groups_1wzqe_1jgzn_348",
  "token-editor-grid-header": "awsui_token-editor-grid-header_1wzqe_1jgzn_352",
  "token-editor-grid-cell": "awsui_token-editor-grid-cell_1wzqe_1jgzn_358",
  "token-editor-add-token": "awsui_token-editor-add-token_1wzqe_1jgzn_367",
  "custom-content-wrapper": "awsui_custom-content-wrapper_1wzqe_1jgzn_371",
  "custom-control": "awsui_custom-control_1wzqe_1jgzn_375",
  "input": "awsui_input_1wzqe_1jgzn_184",
  "results": "awsui_results_1wzqe_1jgzn_383",
  "token-trigger": "awsui_token-trigger_1wzqe_1jgzn_388",
  "remove-all": "awsui_remove-all_1wzqe_1jgzn_393",
  "join-operation": "awsui_join-operation_1wzqe_1jgzn_394",
  "custom-filter-actions": "awsui_custom-filter-actions_1wzqe_1jgzn_395",
  "constraint": "awsui_constraint_1wzqe_1jgzn_399"
};

// node_modules/@cloudscape-design/components/property-filter/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/property-filter/test-classes/styles.scoped.css";
var styles_css_default130 = {
  "filtering-token": "awsui_filtering-token_1heb1_1ayd6_5",
  "filtering-token-dismiss-button": "awsui_filtering-token-dismiss-button_1heb1_1ayd6_9",
  "filtering-token-select": "awsui_filtering-token-select_1heb1_1ayd6_13",
  "filtering-token-content": "awsui_filtering-token-content_1heb1_1ayd6_17",
  "filtering-token-inner": "awsui_filtering-token-inner_1heb1_1ayd6_21",
  "filtering-token-inner-dismiss-button": "awsui_filtering-token-inner-dismiss-button_1heb1_1ayd6_25",
  "filtering-token-inner-select": "awsui_filtering-token-inner-select_1heb1_1ayd6_29",
  "filtering-token-inner-content": "awsui_filtering-token-inner-content_1heb1_1ayd6_33",
  "filtering-token-edit-button": "awsui_filtering-token-edit-button_1heb1_1ayd6_37",
  "token-editor-field-property": "awsui_token-editor-field-property_1heb1_1ayd6_41",
  "token-editor-field-operator": "awsui_token-editor-field-operator_1heb1_1ayd6_45",
  "token-editor-field-value": "awsui_token-editor-field-value_1heb1_1ayd6_49",
  "token-editor-token-remove-actions": "awsui_token-editor-token-remove-actions_1heb1_1ayd6_53",
  "token-editor-token-add-actions": "awsui_token-editor-token-add-actions_1heb1_1ayd6_57",
  "token-editor-cancel": "awsui_token-editor-cancel_1heb1_1ayd6_61",
  "token-editor-submit": "awsui_token-editor-submit_1heb1_1ayd6_65",
  "property-editor-cancel": "awsui_property-editor-cancel_1heb1_1ayd6_69",
  "property-editor-submit": "awsui_property-editor-submit_1heb1_1ayd6_73"
};

// node_modules/@cloudscape-design/components/property-filter/property-editor.js
function PropertyEditorContentCustom({ property, operator, filter, value, onChange, operatorForm }) {
  const labelId = useUniqueId();
  return import_react331.default.createElement(
    "div",
    { className: styles_css_default129["property-editor"] },
    import_react331.default.createElement("div", { className: styles_css_default129["property-editor-header"], id: labelId }, property.groupValuesLabel),
    import_react331.default.createElement(
      "div",
      { className: styles_css_default129["property-editor-form"] },
      import_react331.default.createElement(FormFieldContext.Provider, { value: { ariaLabelledby: labelId } }, operatorForm({ value, onChange, operator, filter }))
    )
  );
}
function PropertyEditorContentEnum({ property, filter, value: unknownValue, onChange, asyncProps, filteringOptions, onLoadItems }) {
  const valueOptions = filteringOptions.filter((option) => {
    var _a;
    return ((_a = option.property) === null || _a === void 0 ? void 0 : _a.propertyKey) === property.propertyKey;
  }).map(({ label, value: value2 }) => ({ label, value: value2 }));
  const valueHandlers = useLoadItems2(onLoadItems, "", property.externalProperty);
  const value = !unknownValue ? [] : Array.isArray(unknownValue) ? unknownValue : [unknownValue];
  const selectedOptions = valueOptions.filter((option) => value.includes(option.value));
  const filteredOptions = filterOptions3(valueOptions, filter);
  return import_react331.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default129["property-editor"], styles_css_default129["property-editor-enum"]) },
    filteredOptions.length === 0 && import_react331.default.createElement(
      "div",
      { className: styles_css_default129["property-editor-header-enum"] },
      import_react331.default.createElement(internal_default6, { checked: false, readOnly: true }),
      property.groupValuesLabel
    ),
    import_react331.default.createElement(embedded_default, Object.assign({ filteringType: "manual", selectedOptions, onChange: (e3) => onChange(e3.detail.selectedOptions.map((o) => o.value)), options: filteredOptions.length > 0 ? [{ options: filteredOptions, label: property.groupValuesLabel }] : [], filteringText: filter, ariaLabel: property.groupValuesLabel, statusType: "finished", noMatch: asyncProps.empty }, valueHandlers, asyncProps))
  );
}
function PropertyEditorFooter({ property, operator, value, onCancel, onSubmit, i18nStrings }) {
  const submitToken = () => onSubmit({ property, operator, value });
  return import_react331.default.createElement(
    "div",
    { className: styles_css_default129["property-editor-actions"] },
    import_react331.default.createElement(internal_default3, { variant: "link", className: clsx_m_default(styles_css_default129["property-editor-cancel"], styles_css_default130["property-editor-cancel"]), onClick: onCancel }, i18nStrings.cancelActionText),
    import_react331.default.createElement(internal_default3, { className: styles_css_default130["property-editor-submit"], onClick: submitToken }, i18nStrings.applyActionText)
  );
}

// node_modules/@cloudscape-design/components/property-filter/property-filter-autosuggest.js
var import_react332 = __toESM(require_react());
var DROPDOWN_WIDTH_OPTIONS_LIST = 300;
var DROPDOWN_WIDTH_CUSTOM_FORM = 200;
var PropertyFilterAutosuggest = import_react332.default.forwardRef((props2, ref) => {
  var _a;
  const { value, onChange, onFocus, onBlur, onLoadItems, options, statusType = "finished", placeholder, disabled, ariaLabel, enteredTextLabel, onKeyDown, virtualScroll, expandToViewport, customForm, filterText, onOptionClick, hideEnteredTextOption, searchResultsId, onCloseDropdown } = props2, rest = __rest(props2, ["value", "onChange", "onFocus", "onBlur", "onLoadItems", "options", "statusType", "placeholder", "disabled", "ariaLabel", "enteredTextLabel", "onKeyDown", "virtualScroll", "expandToViewport", "customForm", "filterText", "onOptionClick", "hideEnteredTextOption", "searchResultsId", "onCloseDropdown"]);
  const highlightText = filterText === void 0 ? value : filterText;
  const customFormRef = (0, import_react332.useRef)(null);
  const autosuggestInputRef = (0, import_react332.useRef)(null);
  const mergedRef = useMergeRefs(autosuggestInputRef, ref);
  const filteredOptions = (0, import_react332.useMemo)(() => filterOptions3(options || [], highlightText), [options, highlightText]);
  const [autosuggestItemsState, autosuggestItemsHandlers] = useAutosuggestItems({
    options: filteredOptions,
    filterValue: value,
    filterText: highlightText,
    filteringType: "manual",
    enteredTextLabel,
    hideEnteredTextLabel: hideEnteredTextOption,
    onSelectItem: (option) => {
      var _a2;
      const value2 = option.value || "";
      fireNonCancelableEvent(onChange, { value: value2 });
      const selectedCancelled = fireCancelableEvent(onOptionClick, option);
      if (!selectedCancelled) {
        (_a2 = autosuggestInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.close();
      } else {
        autosuggestItemsHandlers.resetHighlightWithKeyboard();
      }
    }
  });
  const autosuggestLoadMoreHandlers = useAutosuggestLoadMore({
    options,
    statusType,
    onLoadItems: (detail) => fireNonCancelableEvent(onLoadItems, detail)
  });
  const handleChange = (event) => {
    autosuggestItemsHandlers.resetHighlightWithKeyboard();
    fireNonCancelableEvent(onChange, event.detail);
  };
  const handleDelayedInput = (event) => {
    autosuggestLoadMoreHandlers.fireLoadMoreOnInputChange(event.detail.value);
  };
  const handleFocus = () => {
    autosuggestLoadMoreHandlers.fireLoadMoreOnInputFocus();
    fireCancelableEvent(onFocus, null);
  };
  const handleBlur = () => {
    fireCancelableEvent(onBlur, null);
  };
  const handleKeyDown = (e3) => {
    fireCancelableEvent(onKeyDown, e3.detail);
  };
  const handlePressArrowDown = () => {
    var _a2;
    autosuggestItemsHandlers.moveHighlightWithKeyboard(1);
    if (customFormRef.current) {
      (_a2 = getFirstFocusable(customFormRef.current)) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  };
  const handlePressArrowUp = () => {
    autosuggestItemsHandlers.moveHighlightWithKeyboard(-1);
  };
  const handlePressEnter = () => {
    return autosuggestItemsHandlers.selectHighlightedOptionWithKeyboard();
  };
  const handleCloseDropdown = () => {
    autosuggestItemsHandlers.resetHighlightWithKeyboard();
    onCloseDropdown === null || onCloseDropdown === void 0 ? void 0 : onCloseDropdown();
  };
  const handleRecoveryClick = () => {
    var _a2;
    autosuggestLoadMoreHandlers.fireLoadMoreOnRecoveryClick();
    (_a2 = autosuggestInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  };
  const selfControlId = useUniqueId("input");
  const controlId = (_a = rest.controlId) !== null && _a !== void 0 ? _a : selfControlId;
  const listId = useUniqueId("list");
  const footerId = useUniqueId("footer");
  const highlightedOptionIdSource = useUniqueId();
  const highlightedOptionId = autosuggestItemsState.highlightedOption ? highlightedOptionIdSource : void 0;
  const isEmpty = !autosuggestItemsState.items.length;
  const dropdownStatus = useDropdownStatus(Object.assign(Object.assign({}, props2), { isEmpty, onRecoveryClick: handleRecoveryClick, hasRecoveryCallback: !!onLoadItems }));
  let content = null;
  if (customForm) {
    content = import_react332.default.createElement("div", { ref: customFormRef, className: styles_css_default129["custom-content-wrapper"] }, customForm.content);
  } else {
    content = import_react332.default.createElement(AutosuggestOptionsList, { statusType, autosuggestItemsState, autosuggestItemsHandlers, highlightedOptionId, highlightText, listId, controlId, handleLoadMore: autosuggestLoadMoreHandlers.fireLoadMoreOnScroll, hasDropdownStatus: dropdownStatus.content !== null, virtualScroll, listBottom: !dropdownStatus.isSticky ? import_react332.default.createElement(dropdown_footer_default, { content: dropdownStatus.content, id: footerId }) : null, ariaDescribedby: dropdownStatus.content ? footerId : void 0 });
  }
  return import_react332.default.createElement(autosuggest_input_default, Object.assign({ ref: mergedRef }, rest, { className: clsx_m_default(styles_css_default75.root, styles_css_default129.input), value, onChange: handleChange, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown, controlId, placeholder, disabled, ariaLabel, expandToViewport, ariaControls: listId, ariaActivedescendant: highlightedOptionId, ariaDescribedby: joinStrings(searchResultsId, rest.ariaDescribedby), dropdownExpanded: autosuggestItemsState.items.length > 1 || dropdownStatus.content !== null || !!customForm, dropdownContentKey: customForm ? "custom" : "options", dropdownContent: content, dropdownFooter: dropdownStatus.isSticky && dropdownStatus.content && !customForm ? import_react332.default.createElement(dropdown_footer_default, { content: dropdownStatus.content, hasItems: autosuggestItemsState.items.length >= 1, id: footerId }) : customForm ? customForm.footer : null, dropdownWidth: customForm ? DROPDOWN_WIDTH_CUSTOM_FORM : DROPDOWN_WIDTH_OPTIONS_LIST, dropdownContentFocusable: !!customForm, onCloseDropdown: handleCloseDropdown, onDelayedInput: handleDelayedInput, onPressArrowDown: handlePressArrowDown, onPressArrowUp: handlePressArrowUp, onPressEnter: handlePressEnter, loopFocus: !!customForm || dropdownStatus.hasRecoveryButton }));
});
var property_filter_autosuggest_default = PropertyFilterAutosuggest;

// node_modules/@cloudscape-design/components/property-filter/token.js
var import_react336 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/filtering-token/index.js
var import_react333 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/filtering-token/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/property-filter/filtering-token/styles.scoped.css";
var styles_css_default131 = {
  "root": "awsui_root_19bso_1ex8z_153",
  "inner-root": "awsui_inner-root_19bso_1ex8z_154",
  "has-groups": "awsui_has-groups_19bso_1ex8z_187",
  "compact-mode": "awsui_compact-mode_19bso_1ex8z_191",
  "token": "awsui_token_19bso_1ex8z_200",
  "inner-token": "awsui_inner-token_19bso_1ex8z_201",
  "grouped": "awsui_grouped_19bso_1ex8z_214",
  "list": "awsui_list_19bso_1ex8z_226",
  "show-operation": "awsui_show-operation_19bso_1ex8z_237",
  "select": "awsui_select_19bso_1ex8z_243",
  "inner-select": "awsui_inner-select_19bso_1ex8z_244",
  "token-content": "awsui_token-content_19bso_1ex8z_248",
  "token-content-grouped": "awsui_token-content-grouped_19bso_1ex8z_254",
  "inner-token-content": "awsui_inner-token-content_19bso_1ex8z_259",
  "edit-button": "awsui_edit-button_19bso_1ex8z_264",
  "dismiss-button": "awsui_dismiss-button_19bso_1ex8z_265",
  "inner-dismiss-button": "awsui_inner-dismiss-button_19bso_1ex8z_266",
  "token-disabled": "awsui_token-disabled_19bso_1ex8z_324"
};

// node_modules/@cloudscape-design/components/property-filter/filtering-token/index.js
var FilteringToken = (0, import_react333.forwardRef)((_a, ref) => {
  var { tokens, showOperation, readOnlyOperations, operation, groupOperation, andText, orText, groupAriaLabel, operationAriaLabel, groupEditAriaLabel, disabled = false, onChangeOperation, onChangeGroupOperation, onDismissToken, editorContent, editorHeader, editorDismissAriaLabel, editorExpandToViewport, onEditorOpen, hasGroups, popoverSize } = _a, rest = __rest(_a, ["tokens", "showOperation", "readOnlyOperations", "operation", "groupOperation", "andText", "orText", "groupAriaLabel", "operationAriaLabel", "groupEditAriaLabel", "disabled", "onChangeOperation", "onChangeGroupOperation", "onDismissToken", "editorContent", "editorHeader", "editorDismissAriaLabel", "editorExpandToViewport", "onEditorOpen", "hasGroups", "popoverSize"]);
  const [nextFocusIndex, setNextFocusIndex] = (0, import_react333.useState)(null);
  const tokenListRef = useListFocusController({
    nextFocusIndex,
    onFocusMoved: (target) => {
      target.focus();
      setNextFocusIndex(null);
    },
    listItemSelector: `.${styles_css_default131["inner-root"]}`,
    fallbackSelector: `.${styles_css_default131.root}`
  });
  const popoverRef = (0, import_react333.useRef)(null);
  const popoverProps = {
    content: editorContent,
    triggerType: "text",
    header: editorHeader,
    size: popoverSize,
    position: "bottom",
    dismissAriaLabel: editorDismissAriaLabel,
    renderWithPortal: editorExpandToViewport,
    __onOpen: onEditorOpen,
    __closeAnalyticsAction: "editClose"
  };
  (0, import_react333.useImperativeHandle)(ref, () => ({ closeEditor: () => {
    var _a2;
    return (_a2 = popoverRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  } }));
  return import_react333.default.createElement(TokenGroup, Object.assign({ ref: tokenListRef, ariaLabel: tokens.length === 1 ? tokens[0].ariaLabel : groupAriaLabel, operation: showOperation && import_react333.default.createElement(OperationSelector, { operation, onChange: onChangeOperation, ariaLabel: operationAriaLabel, andText, orText, parent: true, readOnlyOperations, disabled }), tokenAction: tokens.length === 1 ? import_react333.default.createElement(TokenDismissButton, { ariaLabel: tokens[0].dismissAriaLabel, onClick: () => onDismissToken(0), parent: true, disabled }) : import_react333.default.createElement(
    internal_default21,
    Object.assign({ ref: popoverRef }, popoverProps, { triggerType: "filtering-token" }),
    import_react333.default.createElement(TokenEditButton, { ariaLabel: groupEditAriaLabel, disabled })
  ), parent: true, grouped: tokens.length > 1, disabled, hasGroups }, copyAnalyticsMetadataAttribute(rest)), tokens.length === 1 ? import_react333.default.createElement(
    internal_default21,
    Object.assign({ ref: popoverRef }, popoverProps),
    import_react333.default.createElement("span", Object.assign({}, getAnalyticsMetadataAttribute({
      action: "editStart"
    })), tokens[0].content)
  ) : import_react333.default.createElement("ul", { className: styles_css_default131.list }, tokens.map((token, index) => import_react333.default.createElement(
    "li",
    { key: index },
    import_react333.default.createElement(TokenGroup, { ariaLabel: token.ariaLabel, operation: index !== 0 && import_react333.default.createElement(OperationSelector, { operation: groupOperation, onChange: onChangeGroupOperation, ariaLabel: operationAriaLabel, andText, orText, parent: false, readOnlyOperations, disabled }), tokenAction: import_react333.default.createElement(TokenDismissButton, { ariaLabel: token.dismissAriaLabel, onClick: () => {
      onDismissToken(index);
      setNextFocusIndex(index);
    }, parent: false, disabled }), parent: false, grouped: false, disabled, hasGroups: false }, token.content)
  ))));
});
var filtering_token_default = FilteringToken;
var TokenGroup = (0, import_react333.forwardRef)((_a, ref) => {
  var { ariaLabel, children, operation, tokenAction, parent, grouped, disabled, hasGroups } = _a, rest = __rest(_a, ["ariaLabel", "children", "operation", "tokenAction", "parent", "grouped", "disabled", "hasGroups"]);
  const groupRef = (0, import_react333.useRef)(null);
  const mergedRef = useMergeRefs(ref, groupRef);
  const isCompactMode = useDensityMode(groupRef) === "compact";
  return import_react333.default.createElement(
    "div",
    Object.assign({ ref: mergedRef, className: clsx_m_default(parent ? clsx_m_default(styles_css_default131.root, styles_css_default130["filtering-token"]) : clsx_m_default(styles_css_default131["inner-root"], styles_css_default130["filtering-token-inner"]), hasGroups && styles_css_default131["has-groups"], isCompactMode && styles_css_default131["compact-mode"]), role: "group", "aria-label": ariaLabel }, copyAnalyticsMetadataAttribute(rest)),
    operation,
    import_react333.default.createElement(
      "div",
      { className: clsx_m_default(parent ? styles_css_default131.token : styles_css_default131["inner-token"], !!operation && styles_css_default131["show-operation"], grouped && styles_css_default131.grouped, disabled && styles_css_default131["token-disabled"]), "aria-disabled": disabled },
      import_react333.default.createElement("div", { className: clsx_m_default(parent ? clsx_m_default(styles_css_default131["token-content"], styles_css_default130["filtering-token-content"]) : clsx_m_default(styles_css_default131["inner-token-content"], styles_css_default130["filtering-token-inner-content"]), grouped && styles_css_default131["token-content-grouped"]) }, children),
      tokenAction
    )
  );
});
function OperationSelector({ operation, onChange, ariaLabel, andText, orText, parent, readOnlyOperations, disabled }) {
  return import_react333.default.createElement(internal_default17, { __inFilteringToken: parent ? "root" : "nested", className: clsx_m_default(parent ? clsx_m_default(styles_css_default131.select, styles_css_default130["filtering-token-select"]) : clsx_m_default(styles_css_default131["inner-select"], styles_css_default130["filtering-token-inner-select"])), options: [
    { value: "and", label: andText },
    { value: "or", label: orText }
  ], selectedOption: { value: operation, label: operation === "and" ? andText : orText }, onChange: (e3) => onChange(e3.detail.selectedOption.value), disabled, readOnly: readOnlyOperations, ariaLabel });
}
function TokenDismissButton({ ariaLabel, onClick, parent, disabled }) {
  return import_react333.default.createElement(
    "button",
    Object.assign({ type: "button", className: clsx_m_default(parent ? clsx_m_default(styles_css_default131["dismiss-button"], styles_css_default130["filtering-token-dismiss-button"]) : clsx_m_default(styles_css_default131["inner-dismiss-button"], styles_css_default130["filtering-token-inner-dismiss-button"])), "aria-label": ariaLabel, onClick, disabled }, getAnalyticsMetadataAttribute({ action: "dismiss" })),
    import_react333.default.createElement(internal_default, { name: "close" })
  );
}
function TokenEditButton({ ariaLabel, disabled }) {
  return import_react333.default.createElement(
    "button",
    { type: "button", className: clsx_m_default(styles_css_default131["edit-button"], styles_css_default130["filtering-token-edit-button"]), "aria-label": ariaLabel, disabled },
    import_react333.default.createElement(internal_default, { name: "edit" })
  );
}

// node_modules/@cloudscape-design/components/property-filter/token-editor.js
var import_react335 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/token-editor-inputs.js
var import_react334 = __toESM(require_react());
function PropertyInput({ property, onChangePropertyKey, asyncProps, filteringProperties, onLoadItems, customGroupsText, i18nStrings, freeTextFiltering }) {
  var _a;
  const propertySelectHandlers = useLoadItems2(onLoadItems);
  const asyncPropertySelectProps = asyncProps ? Object.assign(Object.assign({}, asyncProps), propertySelectHandlers) : {};
  const propertyOptions = getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, ({ propertyKey, propertyLabel }) => ({
    value: propertyKey,
    label: propertyLabel,
    dontCloseOnSelect: true
  }));
  const allPropertiesOption = {
    label: i18nStrings.allPropertiesLabel,
    value: void 0
  };
  if (!freeTextFiltering.disabled) {
    propertyOptions.unshift(allPropertiesOption);
  }
  return import_react334.default.createElement(internal_default17, Object.assign({ options: propertyOptions, selectedOption: property ? {
    value: (_a = property.propertyKey) !== null && _a !== void 0 ? _a : void 0,
    label: property.propertyLabel
  } : allPropertiesOption, onChange: (e3) => onChangePropertyKey(e3.detail.selectedOption.value) }, asyncPropertySelectProps));
}
function OperatorInput({ property, operator, onChangeOperator, i18nStrings, freeTextFiltering, triggerVariant }) {
  const operatorOptions = (property ? getAllowedOperators(property) : freeTextFiltering.operators).map((operator2) => ({
    value: operator2,
    label: operator2,
    description: operatorToDescription(operator2, i18nStrings)
  }));
  return import_react334.default.createElement(internal_default17, { options: operatorOptions, triggerVariant, selectedOption: operator ? {
    value: operator,
    label: operator,
    description: operatorToDescription(operator, i18nStrings)
  } : null, onChange: (e3) => onChangeOperator(e3.detail.selectedOption.value) });
}
function ValueInput(props2) {
  const { property, operator, value, onChangeValue } = props2;
  const OperatorForm = (property === null || property === void 0 ? void 0 : property.propertyKey) && operator && (property === null || property === void 0 ? void 0 : property.getValueFormRenderer(operator));
  if (OperatorForm) {
    return import_react334.default.createElement(OperatorForm, { value, onChange: onChangeValue, operator });
  }
  if (property && operator && property.getTokenType(operator) === "enum") {
    return import_react334.default.createElement(ValueInputEnum, Object.assign({}, props2, { property, operator }));
  }
  return import_react334.default.createElement(ValueInputAuto, Object.assign({}, props2));
}
function ValueInputAuto({ property, operator, value: unknownValue, onChangeValue, asyncProps, filteringOptions, onLoadItems, i18nStrings }) {
  var _a;
  const value = (unknownValue !== null && unknownValue !== void 0 ? unknownValue : "") + "";
  const valueOptions = property ? filteringOptions.filter((option) => {
    var _a2;
    return ((_a2 = option.property) === null || _a2 === void 0 ? void 0 : _a2.propertyKey) === property.propertyKey;
  }).map(({ label, value: value2 }) => ({ label, value: value2 })) : [];
  const valueAutosuggestHandlers = useLoadItems2(onLoadItems, "", property === null || property === void 0 ? void 0 : property.externalProperty, value, operator);
  const asyncValueAutosuggestProps = (property === null || property === void 0 ? void 0 : property.propertyKey) ? Object.assign(Object.assign({}, valueAutosuggestHandlers), asyncProps) : { empty: asyncProps.empty };
  const [matchedOption] = valueOptions.filter((option) => option.value === value);
  return import_react334.default.createElement(internal_default14, Object.assign({ enteredTextLabel: i18nStrings.enteredTextLabel, value: (_a = matchedOption === null || matchedOption === void 0 ? void 0 : matchedOption.label) !== null && _a !== void 0 ? _a : value, clearAriaLabel: i18nStrings.clearAriaLabel, onChange: (e3) => onChangeValue(e3.detail.value), disabled: !operator, options: valueOptions }, asyncValueAutosuggestProps, { virtualScroll: true }));
}
function ValueInputEnum({ property, operator, value: unknownValue, onChangeValue, asyncProps, filteringOptions, onLoadItems }) {
  const valueOptions = filteringOptions.filter((option) => {
    var _a;
    return ((_a = option.property) === null || _a === void 0 ? void 0 : _a.propertyKey) === property.propertyKey;
  }).map(({ label, value: value2 }) => ({ label, value: value2 }));
  const valueAutosuggestHandlers = useLoadItems2(onLoadItems, "", property.externalProperty, void 0, operator);
  const asyncValueAutosuggestProps = Object.assign(Object.assign({ statusType: "finished" }, valueAutosuggestHandlers), asyncProps);
  const value = !unknownValue ? [] : Array.isArray(unknownValue) ? unknownValue : [unknownValue];
  const selectedOptions = valueOptions.filter((option) => value.includes(option.value));
  return import_react334.default.createElement(
    "div",
    { className: styles_css_default129["token-editor-multiselect-wrapper"] },
    import_react334.default.createElement(
      "div",
      { className: styles_css_default129["token-editor-multiselect-wrapper-inner"] },
      import_react334.default.createElement(internal_default12, Object.assign({ filteringType: "auto", selectedOptions, onChange: (e3) => onChangeValue(e3.detail.selectedOptions.map((o) => o.value)), options: valueOptions.length > 0 ? [{ options: valueOptions, label: property.groupValuesLabel }] : [] }, asyncValueAutosuggestProps, { inlineTokens: true, hideTokens: true, keepOpen: true }))
    )
  );
}

// node_modules/@cloudscape-design/components/property-filter/token-editor.js
function TokenEditor({ supportsGroups, asyncProperties, asyncProps, customGroupsText, freeTextFiltering, filteringProperties, filteringOptions, i18nStrings, onLoadItems, onSubmit, onDismiss, tokensToCapture, onTokenCapture, onTokenRelease, tempGroup, onChangeTempGroup }) {
  var _a;
  const [nextFocusIndex, setNextFocusIndex] = (0, import_react335.useState)(null);
  const tokenListRef = useListFocusController({
    nextFocusIndex,
    onFocusMoved: (target) => {
      target.focus();
      setNextFocusIndex(null);
    },
    listItemSelector: `.${styles_css_default129["token-editor-field-property"]}`,
    fallbackSelector: `.${styles_css_default129["token-editor-add-token"]}`
  });
  const groups = tempGroup.map((temporaryToken, index) => {
    const setTemporaryToken = (newToken) => {
      var _a2;
      const copy2 = [...tempGroup];
      copy2[index] = newToken;
      if (((_a2 = newToken.property) === null || _a2 === void 0 ? void 0 : _a2.getTokenType(newToken.operator)) === "enum" && newToken.value === null) {
        newToken.value = [];
      }
      onChangeTempGroup(copy2);
    };
    const property = temporaryToken.property;
    const onChangePropertyKey = (newPropertyKey) => {
      var _a2;
      const filteringProperty = filteringProperties.reduce((acc, property2) => property2.propertyKey === newPropertyKey ? property2 : acc, void 0);
      const allowedOperators = filteringProperty ? getAllowedOperators(filteringProperty) : freeTextFiltering.operators;
      const operator2 = temporaryToken.operator && allowedOperators.indexOf(temporaryToken.operator) !== -1 ? temporaryToken.operator : allowedOperators[0];
      const matchedProperty = (_a2 = filteringProperties.find((property2) => property2.propertyKey === newPropertyKey)) !== null && _a2 !== void 0 ? _a2 : null;
      setTemporaryToken(Object.assign(Object.assign({}, temporaryToken), { property: matchedProperty, operator: operator2, value: null }));
    };
    const operator = temporaryToken.operator;
    const onChangeOperator = (newOperator) => {
      const currentOperatorTokenType = property === null || property === void 0 ? void 0 : property.getTokenType(operator);
      const newOperatorTokenType = property === null || property === void 0 ? void 0 : property.getTokenType(newOperator);
      const shouldClearValue = currentOperatorTokenType !== newOperatorTokenType;
      const value2 = shouldClearValue ? null : temporaryToken.value;
      setTemporaryToken(Object.assign(Object.assign({}, temporaryToken), { operator: newOperator, value: value2 }));
    };
    const value = temporaryToken.value;
    const onChangeValue = (newValue) => {
      setTemporaryToken(Object.assign(Object.assign({}, temporaryToken), { value: newValue }));
    };
    return { token: temporaryToken, property, onChangePropertyKey, operator, onChangeOperator, value, onChangeValue };
  });
  return import_react335.default.createElement(
    "div",
    { className: styles_css_default129["token-editor"], ref: tokenListRef },
    import_react335.default.createElement(TokenEditorFields, { supportsGroups, tokens: groups.map((group) => group.token), onRemove: (index) => {
      const updated = tempGroup.filter((_, existingIndex) => existingIndex !== index);
      onChangeTempGroup(updated);
      setNextFocusIndex(index);
    }, onRemoveFromGroup: (index) => {
      const releasedToken = tempGroup[index];
      const updated = tempGroup.filter((_, existingIndex) => existingIndex !== index);
      onChangeTempGroup(updated);
      onTokenRelease(releasedToken);
      setNextFocusIndex(index);
    }, onSubmit, renderProperty: (index) => import_react335.default.createElement(PropertyInput, { property: groups[index].property, onChangePropertyKey: groups[index].onChangePropertyKey, asyncProps: asyncProperties ? asyncProps : null, filteringProperties, onLoadItems, customGroupsText, i18nStrings, freeTextFiltering }), renderOperator: (index) => import_react335.default.createElement(OperatorInput, { property: groups[index].property, operator: groups[index].operator, onChangeOperator: groups[index].onChangeOperator, i18nStrings, freeTextFiltering, triggerVariant: supportsGroups ? "label" : "option" }), renderValue: (index) => import_react335.default.createElement(ValueInput, { property: groups[index].property, operator: groups[index].operator, value: groups[index].value, onChangeValue: groups[index].onChangeValue, asyncProps, filteringOptions, onLoadItems, i18nStrings }), i18nStrings }),
    supportsGroups && import_react335.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default129["token-editor-add-token"], styles_css_default130["token-editor-token-add-actions"]) },
      import_react335.default.createElement(internal_default9, { variant: "normal", ariaLabel: i18nStrings.tokenEditorAddTokenActionsAriaLabel, items: tokensToCapture.map((token, index) => {
        var _a2, _b, _c, _d;
        return {
          id: index.toString(),
          text: (_b = (_a2 = i18nStrings.tokenEditorAddExistingTokenLabel) === null || _a2 === void 0 ? void 0 : _a2.call(i18nStrings, token)) !== null && _b !== void 0 ? _b : "",
          ariaLabel: (_d = (_c = i18nStrings.tokenEditorAddExistingTokenAriaLabel) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, token)) !== null && _d !== void 0 ? _d : ""
        };
      }), onItemClick: ({ detail }) => {
        const index = parseInt(detail.id);
        if (!isNaN(index) && tokensToCapture[index]) {
          onChangeTempGroup([...tempGroup, Object.assign({}, tokensToCapture[index])]);
          setNextFocusIndex(groups.length);
          onTokenCapture(tokensToCapture[index]);
        }
      }, disabled: tokensToCapture.length === 0, showMainActionOnly: tokensToCapture.length === 0, mainAction: {
        text: (_a = i18nStrings.tokenEditorAddNewTokenLabel) !== null && _a !== void 0 ? _a : "",
        onClick: () => {
          var _a2;
          const lastTokenInGroup = tempGroup[tempGroup.length - 1];
          const property = lastTokenInGroup ? lastTokenInGroup.property : null;
          const operator = (_a2 = property === null || property === void 0 ? void 0 : property.defaultOperator) !== null && _a2 !== void 0 ? _a2 : ":";
          onChangeTempGroup([...tempGroup, { property, operator, value: null }]);
          setNextFocusIndex(groups.length);
        }
      } })
    ),
    import_react335.default.createElement(
      "div",
      { className: styles_css_default129["token-editor-actions"] },
      import_react335.default.createElement(
        "span",
        Object.assign({}, getAnalyticsMetadataAttribute({
          action: "editCancel"
        })),
        import_react335.default.createElement(internal_default3, { formAction: "none", variant: "link", className: clsx_m_default(styles_css_default129["token-editor-cancel"], styles_css_default130["token-editor-cancel"]), onClick: onDismiss }, i18nStrings.cancelActionText)
      ),
      import_react335.default.createElement(
        "span",
        Object.assign({}, getAnalyticsMetadataAttribute({
          action: "editConfirm"
        })),
        import_react335.default.createElement(internal_default3, { className: clsx_m_default(styles_css_default129["token-editor-submit"], styles_css_default130["token-editor-submit"]), formAction: "none", onClick: onSubmit }, i18nStrings.applyActionText)
      )
    )
  );
}
function TokenEditorFields({ tokens, supportsGroups, onRemove, onRemoveFromGroup, onSubmit, renderProperty, renderOperator, renderValue, i18nStrings }) {
  const isMobile = useMobile();
  const isNarrow = isMobile || !supportsGroups;
  const propertyLabelId = useUniqueId();
  const operatorLabelId = useUniqueId();
  const valueLabelId = useUniqueId();
  const headers = import_react335.default.createElement(
    "div",
    { className: styles_css_default129["token-editor-grid-group"] },
    import_react335.default.createElement("div", { id: propertyLabelId, className: styles_css_default129["token-editor-grid-header"] }, i18nStrings.propertyText),
    import_react335.default.createElement("div", { id: operatorLabelId, className: styles_css_default129["token-editor-grid-header"] }, i18nStrings.operatorText),
    import_react335.default.createElement("div", { id: valueLabelId, className: styles_css_default129["token-editor-grid-header"] }, i18nStrings.valueText),
    import_react335.default.createElement("div", { className: styles_css_default129["token-editor-grid-header"] })
  );
  return import_react335.default.createElement(
    "form",
    { className: clsx_m_default(styles_css_default129["token-editor-grid"], isNarrow && styles_css_default129["token-editor-narrow"], styles_css_default129["token-editor-form"]), onSubmit: (event) => {
      event.preventDefault();
      onSubmit();
    } },
    !isNarrow && headers,
    tokens.map((token, index) => {
      var _a, _b, _c, _d, _e, _f;
      return import_react335.default.createElement(
        "div",
        { key: index, role: "group", "aria-label": i18nStrings.formatToken(token).formattedText, className: clsx_m_default(styles_css_default129["token-editor-grid-group"], supportsGroups && styles_css_default129["token-editor-supports-groups"]) },
        import_react335.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default129["token-editor-grid-cell"], isNarrow && styles_css_default129["token-editor-narrow"]) },
          import_react335.default.createElement(TokenEditorField, { isNarrow, label: i18nStrings.propertyText, labelId: propertyLabelId, className: clsx_m_default(styles_css_default129["token-editor-field-property"], styles_css_default130["token-editor-field-property"]), index }, renderProperty(index))
        ),
        import_react335.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default129["token-editor-grid-cell"], isNarrow && styles_css_default129["token-editor-narrow"]) },
          import_react335.default.createElement(TokenEditorField, { isNarrow, label: i18nStrings.operatorText, labelId: operatorLabelId, className: clsx_m_default(styles_css_default129["token-editor-field-operator"], styles_css_default130["token-editor-field-operator"]), index }, renderOperator(index))
        ),
        import_react335.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default129["token-editor-grid-cell"], isNarrow && styles_css_default129["token-editor-narrow"]) },
          import_react335.default.createElement(TokenEditorField, { isNarrow, label: i18nStrings.valueText, labelId: valueLabelId, className: clsx_m_default(styles_css_default129["token-editor-field-value"], styles_css_default130["token-editor-field-value"]), index }, renderValue(index))
        ),
        supportsGroups && import_react335.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default129["token-editor-grid-cell"], isNarrow && styles_css_default129["token-editor-narrow"]) },
          import_react335.default.createElement(
            "div",
            { className: styles_css_default129["token-editor-remove-token"] },
            import_react335.default.createElement(TokenEditorRemoveActions, { isNarrow, ariaLabel: (_b = (_a = i18nStrings.tokenEditorTokenActionsAriaLabel) === null || _a === void 0 ? void 0 : _a.call(i18nStrings, token)) !== null && _b !== void 0 ? _b : "", mainActionAriaLabel: (_d = (_c = i18nStrings.tokenEditorTokenRemoveAriaLabel) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, token)) !== null && _d !== void 0 ? _d : "", disabled: tokens.length === 1, items: [
              {
                id: "remove",
                text: (_e = i18nStrings.tokenEditorTokenRemoveLabel) !== null && _e !== void 0 ? _e : "",
                disabled: token.standaloneIndex !== void 0
              },
              { id: "remove-from-group", text: (_f = i18nStrings.tokenEditorTokenRemoveFromGroupLabel) !== null && _f !== void 0 ? _f : "" }
            ], onItemClick: (itemId) => {
              switch (itemId) {
                case "remove":
                  return onRemove(index);
                case "remove-from-group":
                  return onRemoveFromGroup(index);
              }
            }, index })
          )
        )
      );
    })
  );
}
function TokenEditorField({ isNarrow, label, labelId, children, className: className2, index }) {
  return isNarrow ? import_react335.default.createElement(InternalFormField, { label, className: className2, stretch: true, "data-testindex": index }, children) : import_react335.default.createElement(
    FormFieldContext.Provider,
    { value: { ariaLabelledby: labelId } },
    import_react335.default.createElement(InternalFormField, { className: className2, "data-testindex": index }, children)
  );
}
function TokenEditorRemoveActions({ isNarrow, ariaLabel, mainActionAriaLabel, disabled, items, onItemClick, index }) {
  return isNarrow ? import_react335.default.createElement(internal_default9, { variant: "normal", ariaLabel, items: items.slice(1), onItemClick: ({ detail }) => onItemClick(detail.id), disabled, mainAction: {
    text: items[0].text,
    onClick: () => onItemClick(items[0].id),
    disabled,
    ariaLabel: mainActionAriaLabel
  }, className: styles_css_default130["token-editor-token-remove-actions"], "data-testindex": index }) : import_react335.default.createElement(internal_default9, { variant: "icon", ariaLabel, items, onItemClick: ({ detail }) => onItemClick(detail.id), disabled, className: styles_css_default130["token-editor-token-remove-actions"], "data-testindex": index });
}

// node_modules/@cloudscape-design/components/property-filter/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/property-filter/analytics-metadata/styles.scoped.css";
var styles_css_default132 = {
  "token-trigger": "awsui_token-trigger_1b6uy_xiape_5",
  "search-field": "awsui_search-field_1b6uy_xiape_6"
};

// node_modules/@cloudscape-design/components/property-filter/token.js
var TokenButton = ({ query, onUpdateToken, onUpdateOperation, onRemoveToken, tokenIndex, filteringProperties, filteringOptions, asyncProps, onLoadItems, i18nStrings, asyncProperties, hideOperations, readOnlyOperations, customGroupsText, disabled, freeTextFiltering, expandToViewport, enableTokenGroups }) => {
  var _a, _b, _c, _d;
  const tokenRef = (0, import_react336.useRef)(null);
  const hasGroups = query.tokens.some((tokenOrGroup2) => "operation" in tokenOrGroup2);
  const first = tokenIndex === 0;
  const tokenOrGroup = query.tokens[tokenIndex];
  const tokens = tokenGroupToTokens([tokenOrGroup]).map((t2) => Object.assign(Object.assign({}, t2), { standaloneIndex: void 0 }));
  const operation = query.operation;
  const groupOperation = "operation" in tokenOrGroup ? tokenOrGroup.operation : operation === "and" ? "or" : "and";
  const [tempTokens, setTempTokens] = (0, import_react336.useState)(tokens);
  const capturedTokenIndices = tempTokens.map((token) => token.standaloneIndex).filter((index) => index !== void 0);
  const tokensToCapture = [];
  for (let index = 0; index < query.tokens.length; index++) {
    const token = query.tokens[index];
    if ("operator" in token && token !== tokenOrGroup && !capturedTokenIndices.includes(index)) {
      tokensToCapture.push(token);
    }
  }
  const [tempReleasedTokens, setTempReleasedTokens] = (0, import_react336.useState)([]);
  tokensToCapture.push(...tempReleasedTokens);
  return import_react336.default.createElement(filtering_token_default, Object.assign({ ref: tokenRef, tokens: tokens.map((token) => {
    const formattedToken = i18nStrings.formatToken(token);
    return {
      content: import_react336.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default129["token-trigger"], styles_css_default132["token-trigger"]) },
        import_react336.default.createElement(TokenTrigger, { token: formattedToken, allProperties: token.property === null })
      ),
      ariaLabel: formattedToken.formattedText,
      dismissAriaLabel: i18nStrings.removeTokenButtonAriaLabel(token)
    };
  }), showOperation: !first && !hideOperations, readOnlyOperations: !!readOnlyOperations, operation, andText: (_a = i18nStrings.operationAndText) !== null && _a !== void 0 ? _a : "", orText: (_b = i18nStrings.operationOrText) !== null && _b !== void 0 ? _b : "", operationAriaLabel: (_c = i18nStrings.tokenOperatorAriaLabel) !== null && _c !== void 0 ? _c : "", onChangeOperation: onUpdateOperation, onDismissToken: (removeIndex) => {
    if (tokens.length === 1) {
      onRemoveToken();
    } else {
      const newTokens = tokens.filter((_, index) => index !== removeIndex);
      const updatedToken = newTokens.length === 1 ? newTokens[0] : { operation: groupOperation, tokens: newTokens };
      onUpdateToken(updatedToken, []);
    }
  }, disabled, editorContent: import_react336.default.createElement(TokenEditor, { supportsGroups: enableTokenGroups, filteringProperties, filteringOptions, tempGroup: tempTokens, onChangeTempGroup: setTempTokens, tokensToCapture, onTokenCapture: (capturedToken) => setTempReleasedTokens((prev) => prev.filter((token) => token !== capturedToken)), onTokenRelease: (releasedToken) => {
    if (releasedToken.standaloneIndex === void 0) {
      setTempReleasedTokens((prev) => [...prev, releasedToken]);
    }
  }, asyncProps, onLoadItems, i18nStrings, asyncProperties, customGroupsText, freeTextFiltering, onDismiss: () => {
    var _a2;
    (_a2 = tokenRef.current) === null || _a2 === void 0 ? void 0 : _a2.closeEditor();
  }, onSubmit: () => {
    var _a2;
    const updatedToken = tempTokens.length === 1 ? tempTokens[0] : { operation: groupOperation, tokens: tempTokens };
    onUpdateToken(updatedToken, tempReleasedTokens);
    (_a2 = tokenRef.current) === null || _a2 === void 0 ? void 0 : _a2.closeEditor();
  } }), editorHeader: (_d = i18nStrings.editTokenHeader) !== null && _d !== void 0 ? _d : "", editorDismissAriaLabel: i18nStrings.dismissAriaLabel, editorExpandToViewport: !!expandToViewport, onEditorOpen: () => {
    setTempTokens(tokens);
    setTempReleasedTokens([]);
  }, groupOperation, onChangeGroupOperation: (operation2) => onUpdateToken({ operation: operation2, tokens }, []), groupAriaLabel: i18nStrings.groupAriaLabel({ operation: groupOperation, tokens }), groupEditAriaLabel: i18nStrings.groupEditAriaLabel({ operation: groupOperation, tokens }), hasGroups, popoverSize: enableTokenGroups ? "content" : "large" }, getAnalyticsMetadataAttribute({
    detail: {
      tokenPosition: `${tokenIndex + 1}`,
      tokenLabel: `.${styles_css_default132["token-trigger"]}`
    }
  })));
};
var TokenTrigger = ({ token: { propertyLabel, operator, value }, allProperties }) => {
  if (propertyLabel) {
    propertyLabel += " ";
  }
  const freeTextContainsToken = operator === ":" && allProperties;
  const operatorText = freeTextContainsToken ? "" : operator + " ";
  return import_react336.default.createElement(
    import_react336.default.Fragment,
    null,
    allProperties ? "" : propertyLabel,
    import_react336.default.createElement("span", { className: styles_css_default129["token-operator"] }, operatorText),
    value
  );
};

// node_modules/@cloudscape-design/components/property-filter/internal.js
var PropertyFilterInternal = import_react337.default.forwardRef((_a, ref) => {
  var _b;
  var { disabled, countText, query, hideOperations, readOnlyOperations, onChange, filteringProperties, filteringOptions, customGroupsText, disableFreeTextFiltering, freeTextFiltering, onLoadItems, virtualScroll, customControl, customFilterActions, filteringPlaceholder, filteringAriaLabel, filteringEmpty, filteringLoadingText, filteringFinishedText, filteringErrorText, filteringRecoveryText, filteringConstraintText, filteringStatusType, asyncProperties, tokenLimit, expandToViewport, tokenLimitShowFewerAriaLabel, tokenLimitShowMoreAriaLabel, enableTokenGroups, loading = false, __internalRootRef } = _a, rest = __rest(_a, ["disabled", "countText", "query", "hideOperations", "readOnlyOperations", "onChange", "filteringProperties", "filteringOptions", "customGroupsText", "disableFreeTextFiltering", "freeTextFiltering", "onLoadItems", "virtualScroll", "customControl", "customFilterActions", "filteringPlaceholder", "filteringAriaLabel", "filteringEmpty", "filteringLoadingText", "filteringFinishedText", "filteringErrorText", "filteringRecoveryText", "filteringConstraintText", "filteringStatusType", "asyncProperties", "tokenLimit", "expandToViewport", "tokenLimitShowFewerAriaLabel", "tokenLimitShowMoreAriaLabel", "enableTokenGroups", "loading", "__internalRootRef"]);
  const [nextFocusIndex, setNextFocusIndex] = (0, import_react337.useState)(null);
  const tokenListRef = useListFocusController({
    nextFocusIndex,
    onFocusMoved: (target, targetType) => {
      var _a2;
      if (targetType === "fallback") {
        (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus({ preventDropdown: true });
      } else {
        target.focus();
      }
      setNextFocusIndex(null);
    },
    listItemSelector: `.${styles_css_default68["list-item"]}`,
    showMoreSelector: `.${styles_css_default68.toggle}`,
    fallbackSelector: `.${styles_css_default129.input}`
  });
  const mergedRef = useMergeRefs(tokenListRef, __internalRootRef);
  const inputRef = (0, import_react337.useRef)(null);
  const searchResultsRef = (0, import_react337.useRef)(null);
  const baseProps = getBaseProps(rest);
  const i18nStrings = usePropertyFilterI18n(rest.i18nStrings);
  (0, import_react337.useImperativeHandle)(ref, () => ({ focus: () => {
    var _a2;
    return (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  } }), []);
  const [filteringText, setFilteringText] = (0, import_react337.useState)("");
  const { internalProperties, internalOptions, internalQuery, internalFreeText } = (() => {
    var _a2, _b2;
    const propertyByKey = filteringProperties.reduce((acc, property) => {
      var _a3, _b3, _c, _d, _e;
      const extendedOperators = ((_a3 = property === null || property === void 0 ? void 0 : property.operators) !== null && _a3 !== void 0 ? _a3 : []).reduce((acc2, operator) => typeof operator === "object" ? acc2.set(operator.operator, operator) : acc2, /* @__PURE__ */ new Map());
      acc.set(property.key, {
        propertyKey: property.key,
        propertyLabel: (_b3 = property === null || property === void 0 ? void 0 : property.propertyLabel) !== null && _b3 !== void 0 ? _b3 : "",
        groupValuesLabel: (_c = property === null || property === void 0 ? void 0 : property.groupValuesLabel) !== null && _c !== void 0 ? _c : "",
        propertyGroup: property === null || property === void 0 ? void 0 : property.group,
        operators: ((_d = property === null || property === void 0 ? void 0 : property.operators) !== null && _d !== void 0 ? _d : []).map((op) => typeof op === "string" ? op : op.operator),
        defaultOperator: (_e = property === null || property === void 0 ? void 0 : property.defaultOperator) !== null && _e !== void 0 ? _e : "=",
        getTokenType: (operator) => {
          var _a4, _b4;
          return operator ? (_b4 = (_a4 = extendedOperators.get(operator)) === null || _a4 === void 0 ? void 0 : _a4.tokenType) !== null && _b4 !== void 0 ? _b4 : "value" : "value";
        },
        getValueFormatter: (operator) => {
          var _a4, _b4;
          return operator ? (_b4 = (_a4 = extendedOperators.get(operator)) === null || _a4 === void 0 ? void 0 : _a4.format) !== null && _b4 !== void 0 ? _b4 : null : null;
        },
        getValueFormRenderer: (operator) => {
          var _a4, _b4;
          return operator ? (_b4 = (_a4 = extendedOperators.get(operator)) === null || _a4 === void 0 ? void 0 : _a4.form) !== null && _b4 !== void 0 ? _b4 : null : null;
        },
        externalProperty: property
      });
      return acc;
    }, /* @__PURE__ */ new Map());
    const getProperty = (propertyKey) => {
      var _a3;
      return (_a3 = propertyByKey.get(propertyKey)) !== null && _a3 !== void 0 ? _a3 : null;
    };
    const internalOptions2 = filteringOptions.map((option) => {
      var _a3, _b3;
      return {
        property: getProperty(option.propertyKey),
        value: option.value,
        label: (_b3 = (_a3 = option.label) !== null && _a3 !== void 0 ? _a3 : option.value) !== null && _b3 !== void 0 ? _b3 : ""
      };
    });
    function transformToken(tokenOrGroup, standaloneIndex) {
      return "operation" in tokenOrGroup ? {
        operation: tokenOrGroup.operation,
        tokens: tokenOrGroup.tokens.map((token) => transformToken(token))
      } : {
        standaloneIndex,
        property: tokenOrGroup.propertyKey ? getProperty(tokenOrGroup.propertyKey) : null,
        operator: tokenOrGroup.operator,
        value: tokenOrGroup.value
      };
    }
    const internalQuery2 = {
      operation: query.operation,
      tokens: (enableTokenGroups && query.tokenGroups ? query.tokenGroups : query.tokens).map(transformToken)
    };
    const internalFreeText2 = {
      disabled: disableFreeTextFiltering,
      operators: (_a2 = freeTextFiltering === null || freeTextFiltering === void 0 ? void 0 : freeTextFiltering.operators) !== null && _a2 !== void 0 ? _a2 : [":", "!:"],
      defaultOperator: (_b2 = freeTextFiltering === null || freeTextFiltering === void 0 ? void 0 : freeTextFiltering.defaultOperator) !== null && _b2 !== void 0 ? _b2 : ":"
    };
    return { internalProperties: [...propertyByKey.values()], internalOptions: internalOptions2, internalQuery: internalQuery2, internalFreeText: internalFreeText2 };
  })();
  const countValue = (0, import_react337.useMemo)(() => {
    if (!countText || typeof countText !== "string") {
      return void 0;
    }
    const m3 = countText.match(/\d+/);
    return m3 ? parseInt(m3[0]) : void 0;
  }, [countText]);
  const tableComponentContext = useTableComponentsContext();
  (0, import_react337.useEffect)(() => {
    var _a2;
    if ((_a2 = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.filterRef) === null || _a2 === void 0 ? void 0 : _a2.current) {
      const groupedTokens = tokenGroupToTokens(internalQuery.tokens);
      const filteredBy = groupedTokens.map((token) => {
        var _a3;
        return (_a3 = token.property) === null || _a3 === void 0 ? void 0 : _a3.propertyKey;
      }).filter((propertyKey) => typeof propertyKey === "string");
      tableComponentContext.filterRef.current.filterCount = countValue;
      tableComponentContext.filterRef.current.filteredBy = filteredBy;
      tableComponentContext.filterRef.current.filtered = groupedTokens.length > 0;
      return () => {
        var _a3, _b2, _c;
        (_a3 = tableComponentContext.filterRef.current) === null || _a3 === void 0 ? true : delete _a3.filterCount;
        (_b2 = tableComponentContext.filterRef.current) === null || _b2 === void 0 ? true : delete _b2.filteredBy;
        (_c = tableComponentContext.filterRef.current) === null || _c === void 0 ? true : delete _c.filtered;
      };
    }
  }, [tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.filterRef, countValue, internalQuery.tokens]);
  const { addToken, updateToken, updateOperation, removeToken, removeAllTokens } = getQueryActions({
    query: internalQuery,
    filteringOptions: internalOptions,
    onChange,
    enableTokenGroups
  });
  const parsedText = parseText(filteringText, internalProperties, internalFreeText);
  const autosuggestOptions = getAutosuggestOptions(parsedText, internalProperties, internalOptions, customGroupsText, i18nStrings);
  const createToken = (currentText) => {
    const parsedText2 = parseText(currentText, internalProperties, internalFreeText);
    let newToken;
    switch (parsedText2.step) {
      case "property": {
        newToken = {
          property: parsedText2.property,
          operator: parsedText2.operator,
          value: parsedText2.value
        };
        break;
      }
      case "free-text": {
        newToken = {
          property: null,
          operator: parsedText2.operator || internalFreeText.defaultOperator,
          value: parsedText2.value
        };
        break;
      }
      case "operator": {
        newToken = {
          property: null,
          operator: internalFreeText.defaultOperator,
          value: currentText
        };
        break;
      }
    }
    if (internalFreeText.disabled && !newToken.property) {
      return;
    }
    addToken(newToken);
    setFilteringText("");
  };
  const getLoadMoreDetail = (parsedText2, filteringText2) => {
    const loadMoreDetail2 = {
      filteringProperty: void 0,
      filteringText: filteringText2,
      filteringOperator: void 0
    };
    if (parsedText2.step === "property") {
      loadMoreDetail2.filteringProperty = parsedText2.property.externalProperty;
      loadMoreDetail2.filteringText = parsedText2.value;
      loadMoreDetail2.filteringOperator = parsedText2.operator;
    }
    return loadMoreDetail2;
  };
  const loadMoreDetail = getLoadMoreDetail(parsedText, filteringText);
  const inputLoadItemsHandlers = useLoadItems2(onLoadItems, loadMoreDetail.filteringText, loadMoreDetail.filteringProperty, loadMoreDetail.filteringText, loadMoreDetail.filteringOperator);
  const asyncProps = {
    empty: filteringEmpty,
    loadingText: filteringLoadingText,
    finishedText: filteringFinishedText,
    errorText: filteringErrorText,
    recoveryText: filteringRecoveryText,
    statusType: filteringStatusType
  };
  const asyncAutosuggestProps = !!filteringText.length || asyncProperties ? Object.assign(Object.assign({}, inputLoadItemsHandlers), asyncProps) : {};
  const handleSelected = (event) => {
    var _a2;
    const { detail: option } = event;
    const value = option.value || "";
    if (!value) {
      return;
    }
    if (!("keepOpenOnSelect" in option)) {
      createToken(value);
      return;
    }
    event.preventDefault();
    const parsedText2 = parseText(value, internalProperties, internalFreeText);
    const loadMoreDetail2 = getLoadMoreDetail(parsedText2, value);
    if (parsedText2.step === "operator") {
      const operators = getAllowedOperators(parsedText2.property);
      if (value.trim() === parsedText2.property.propertyLabel && operators.length === 1) {
        loadMoreDetail2.filteringProperty = (_a2 = parsedText2.property.externalProperty) !== null && _a2 !== void 0 ? _a2 : void 0;
        loadMoreDetail2.filteringOperator = operators[0];
        loadMoreDetail2.filteringText = "";
        setFilteringText(parsedText2.property.propertyLabel + " " + operators[0] + " ");
      }
    }
    fireNonCancelableEvent(onLoadItems, Object.assign(Object.assign({}, loadMoreDetail2), { firstPage: true, samePage: false }));
  };
  useDebounceSearchResultCallback({
    searchQuery: query,
    countText,
    loading,
    announceCallback: () => {
      var _a2;
      (_a2 = searchResultsRef.current) === null || _a2 === void 0 ? void 0 : _a2.reannounce();
    }
  });
  const propertyStep = parsedText.step === "property" ? parsedText : null;
  const customValueKey = propertyStep ? propertyStep.property.propertyKey + ":" + propertyStep.operator : "";
  const [customFormValueRecord, setCustomFormValueRecord] = (0, import_react337.useState)({});
  const customFormValue = customValueKey in customFormValueRecord ? customFormValueRecord[customValueKey] : null;
  const setCustomFormValue = (value) => setCustomFormValueRecord({ [customValueKey]: value });
  const operatorForm = propertyStep && propertyStep.property.getValueFormRenderer(propertyStep.operator);
  const isEnumValue = (propertyStep === null || propertyStep === void 0 ? void 0 : propertyStep.property.getTokenType(propertyStep.operator)) === "enum";
  const searchResultsId = useUniqueId("property-filter-search-results");
  const constraintTextId = useUniqueId("property-filter-constraint");
  const textboxAriaDescribedBy = filteringConstraintText ? joinStrings(rest.ariaDescribedby, constraintTextId) : rest.ariaDescribedby;
  const showResults = !!((_b = internalQuery.tokens) === null || _b === void 0 ? void 0 : _b.length) && !disabled && !!countText;
  return import_react337.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default129.root), ref: mergedRef }),
    import_react337.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default129["search-field"], styles_css_default132["search-field"]) },
      customControl && import_react337.default.createElement("div", { className: styles_css_default129["custom-control"] }, customControl),
      import_react337.default.createElement(
        "div",
        { className: styles_css_default129["input-wrapper"] },
        import_react337.default.createElement(property_filter_autosuggest_default, Object.assign({ ref: inputRef, virtualScroll, enteredTextLabel: i18nStrings.enteredTextLabel, ariaLabel: filteringAriaLabel !== null && filteringAriaLabel !== void 0 ? filteringAriaLabel : i18nStrings.filteringAriaLabel, placeholder: filteringPlaceholder !== null && filteringPlaceholder !== void 0 ? filteringPlaceholder : i18nStrings.filteringPlaceholder, ariaLabelledby: rest.ariaLabelledby, ariaDescribedby: textboxAriaDescribedBy, controlId: rest.controlId, value: filteringText, disabled }, autosuggestOptions, { onChange: (event) => setFilteringText(event.detail.value), empty: filteringEmpty }, asyncAutosuggestProps, { expandToViewport, onOptionClick: handleSelected, customForm: operatorForm || isEnumValue ? {
          content: operatorForm ? import_react337.default.createElement(PropertyEditorContentCustom, { key: customValueKey, property: propertyStep.property, operator: propertyStep.operator, filter: propertyStep.value, operatorForm, value: customFormValue, onChange: setCustomFormValue }) : import_react337.default.createElement(PropertyEditorContentEnum, { key: customValueKey, property: propertyStep.property, filter: propertyStep.value, value: customFormValue, onChange: setCustomFormValue, asyncProps, filteringOptions: internalOptions, onLoadItems: inputLoadItemsHandlers.onLoadItems }),
          footer: import_react337.default.createElement(PropertyEditorFooter, { key: customValueKey, property: propertyStep.property, operator: propertyStep.operator, value: customFormValue, i18nStrings, onCancel: () => {
            var _a2, _b2;
            setFilteringText("");
            (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.close();
            (_b2 = inputRef.current) === null || _b2 === void 0 ? void 0 : _b2.focus({ preventDropdown: true });
          }, onSubmit: (token) => {
            var _a2, _b2;
            addToken(token);
            setFilteringText("");
            (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus({ preventDropdown: true });
            (_b2 = inputRef.current) === null || _b2 === void 0 ? void 0 : _b2.close();
          } })
        } : void 0, onCloseDropdown: () => setCustomFormValueRecord({}), hideEnteredTextOption: internalFreeText.disabled && parsedText.step !== "property", clearAriaLabel: i18nStrings.clearAriaLabel, searchResultsId: showResults ? searchResultsId : void 0 })),
        showResults ? import_react337.default.createElement(
          "div",
          { className: styles_css_default129.results },
          import_react337.default.createElement(SearchResults, { id: searchResultsId, renderLiveRegion: !loading, ref: searchResultsRef }, countText)
        ) : null
      )
    ),
    filteringConstraintText && import_react337.default.createElement("div", { id: constraintTextId, className: styles_css_default129.constraint }, filteringConstraintText),
    internalQuery.tokens && internalQuery.tokens.length > 0 && import_react337.default.createElement(
      "div",
      { className: styles_css_default129.tokens },
      import_react337.default.createElement(
        internal_default4,
        { size: "xs", direction: "horizontal" },
        import_react337.default.createElement(TokenList, { alignment: "inline", limit: tokenLimit, items: internalQuery.tokens, limitShowFewerAriaLabel: tokenLimitShowFewerAriaLabel, limitShowMoreAriaLabel: tokenLimitShowMoreAriaLabel, renderItem: (_, tokenIndex) => import_react337.default.createElement(TokenButton, { query: internalQuery, tokenIndex, onUpdateToken: (token, releasedTokens) => {
          updateToken(tokenIndex, token, releasedTokens);
        }, onUpdateOperation: updateOperation, onRemoveToken: () => {
          removeToken(tokenIndex);
          setNextFocusIndex(tokenIndex);
        }, filteringProperties: internalProperties, filteringOptions: internalOptions, asyncProps, onLoadItems, i18nStrings, asyncProperties, hideOperations, readOnlyOperations, customGroupsText, freeTextFiltering: internalFreeText, disabled, expandToViewport, enableTokenGroups }), i18nStrings: {
          limitShowFewer: i18nStrings.tokenLimitShowFewer,
          limitShowMore: i18nStrings.tokenLimitShowMore
        }, after: customFilterActions ? import_react337.default.createElement("div", { className: styles_css_default129["custom-filter-actions"] }, customFilterActions) : import_react337.default.createElement(
          "span",
          Object.assign({}, getAnalyticsMetadataAttribute({
            action: "clearFilters"
          })),
          import_react337.default.createElement(InternalButton, { formAction: "none", onClick: () => {
            var _a2;
            removeAllTokens();
            (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus({ preventDropdown: true });
          }, className: styles_css_default129["remove-all"], disabled }, i18nStrings.clearFiltersText)
        ) })
      )
    )
  );
});
var internal_default28 = PropertyFilterInternal;

// node_modules/@cloudscape-design/components/property-filter/index.js
var PropertyFilter = import_react338.default.forwardRef((_a, ref) => {
  var _b;
  var { filteringProperties, filteringOptions = [], customGroupsText = [], enableTokenGroups = false, disableFreeTextFiltering = false, asyncProperties, expandToViewport, hideOperations = false, readOnlyOperations = false, tokenLimit, virtualScroll } = _a, rest = __rest(_a, ["filteringProperties", "filteringOptions", "customGroupsText", "enableTokenGroups", "disableFreeTextFiltering", "asyncProperties", "expandToViewport", "hideOperations", "readOnlyOperations", "tokenLimit", "virtualScroll"]);
  let hasCustomForms = false;
  let hasEnumTokens = false;
  let hasCustomFormatters = false;
  for (const property of filteringProperties) {
    for (const operator of (_b = property.operators) !== null && _b !== void 0 ? _b : []) {
      if (typeof operator === "object") {
        hasCustomForms = hasCustomForms || !!operator.form;
        hasEnumTokens = hasEnumTokens || operator.tokenType === "enum";
        hasCustomFormatters = hasCustomFormatters || !!operator.format;
      }
    }
  }
  const baseComponentProps = useBaseComponent("PropertyFilter", {
    props: {
      asyncProperties,
      disableFreeTextFiltering,
      enableTokenGroups,
      expandToViewport,
      hideOperations,
      readOnlyOperations,
      tokenLimit,
      virtualScroll
    },
    metadata: {
      hasCustomForms,
      hasEnumTokens,
      hasCustomFormatters
    }
  });
  const componentAnalyticsMetadata2 = {
    name: "awsui.PropertyFilter",
    label: `.${styles_css_default132["search-field"]} input`,
    properties: {
      disabled: `${!!rest.disabled}`,
      queryTokensCount: `${rest.query && rest.query.tokens ? rest.query.tokens.length : 0}`
    }
  };
  if (hideOperations && enableTokenGroups) {
    warnOnce("PropertyFilter", "Operations cannot be hidden when token groups are enabled.");
    hideOperations = false;
  }
  return import_react338.default.createElement(internal_default28, Object.assign({ ref }, baseComponentProps, { filteringProperties, filteringOptions, customGroupsText, enableTokenGroups, disableFreeTextFiltering, asyncProperties, expandToViewport, hideOperations, readOnlyOperations, tokenLimit, virtualScroll }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 }), rest));
});
applyDisplayName(PropertyFilter, "PropertyFilter");
var property_filter_default = PropertyFilter;

// node_modules/@cloudscape-design/components/radio-group/index.js
var import_react339 = __toESM(require_react());
var RadioGroup = import_react339.default.forwardRef((props2, ref) => {
  const baseComponentProps = useBaseComponent("RadioGroup", { props: { readOnly: props2.readOnly } });
  return import_react339.default.createElement(internal_default20, Object.assign({ ref }, props2, baseComponentProps, getAnalyticsMetadataAttribute({
    component: {
      name: "awsui.RadioGroup",
      label: { root: "self" }
    }
  })));
});
applyDisplayName(RadioGroup, "RadioGroup");
var radio_group_default = RadioGroup;

// node_modules/@cloudscape-design/components/s3-resource-selector/index.js
var import_react351 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/index.js
var import_react342 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/search-input.js
var import_react340 = __toESM(require_react());
var SearchInput = import_react340.default.forwardRef((props2, ref) => {
  const formFieldContext = useFormFieldContext(props2);
  return import_react340.default.createElement(internal_default11, Object.assign({ type: "search" }, props2, formFieldContext, { ref }));
});

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/use-versions-fetch.js
var import_react341 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/promises.js
var PromiseCancelledSignal = class {
};
function makeCancellable(promise) {
  let cancelled = false;
  const wrapped = promise.then((value) => {
    if (cancelled) {
      throw new PromiseCancelledSignal();
    }
    return value;
  }, (err) => {
    if (cancelled) {
      throw new PromiseCancelledSignal();
    }
    throw err;
  });
  return {
    promise: wrapped,
    cancel: () => {
      cancelled = true;
    },
    isCancelled: () => cancelled
  };
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/validation.js
var SCHEME = "s3://";
var BUCKET_FIRST_CHAR = /^[a-z0-9]{1}/;
var CAPITAL_LETTER = /[A-Z]/;
var DNS_NAME = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;
function checkBucketNameLength(bucketName) {
  return 3 <= bucketName.length && bucketName.length <= 63;
}
function extractBucketName(uri) {
  const [bucketName, ...rest] = uri.replace(SCHEME, "").split("/");
  return [bucketName, rest.join("/")];
}
function validate(uri) {
  if (uri === "") {
    return void 0;
  }
  if (uri.slice(0, SCHEME.length) !== SCHEME) {
    return "validationPathMustBegin";
  }
  const [bucketName] = extractBucketName(uri);
  if (!BUCKET_FIRST_CHAR.test(bucketName)) {
    return "validationBucketLowerCase";
  }
  if (CAPITAL_LETTER.test(bucketName)) {
    return "validationBucketMustNotContain";
  }
  if (!checkBucketNameLength(bucketName)) {
    return "validationBucketLength";
  }
  if (!DNS_NAME.test(bucketName)) {
    return "validationBucketMustComplyDns";
  }
  return void 0;
}
function getErrorText(i18n, i18nStrings, errorCode) {
  return errorCode ? i18n(`i18nStrings.${errorCode}`, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings[errorCode]) : void 0;
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/use-versions-fetch.js
function useVersionsFetch(fetchVersions) {
  const [loading, setLoading] = (0, import_react341.useState)(false);
  const [lastFetchedValue, setLastFetched] = (0, import_react341.useState)("");
  const [versions, setVersions] = (0, import_react341.useState)([]);
  const loadVersions = (uri) => {
    if (uri === lastFetchedValue) {
      return;
    }
    setLastFetched(uri);
    const errorCode = validate(uri);
    const [bucketName, prefix] = extractBucketName(uri);
    if (errorCode || !bucketName || !prefix || prefix.slice(-1) === "/") {
      return;
    }
    setLoading(true);
    const result = makeCancellable(fetchVersions(bucketName, prefix));
    result.promise.then((versions2) => {
      setLoading(false);
      setVersions(versions2.map((version) => ({
        value: version.VersionId,
        label: version.LastModified
      })));
    }, (err) => {
      if (!(err instanceof PromiseCancelledSignal)) {
        setLoading(false);
      }
    });
    return result;
  };
  return {
    loading,
    versions,
    resetVersions: () => setVersions([]),
    // this function is a dependency of useEffect
    loadVersions: useStableCallback(loadVersions)
  };
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/styles.scoped.css";
var styles_css_default133 = {
  "root": "awsui_root_1vtzr_1qv0p_9",
  "view-button": "awsui_view-button_1vtzr_1qv0p_13",
  "browse-button": "awsui_browse-button_1vtzr_1qv0p_17",
  "layout": "awsui_layout_1vtzr_1qv0p_21",
  "layout-uri": "awsui_layout-uri_1vtzr_1qv0p_33",
  "layout-version": "awsui_layout-version_1vtzr_1qv0p_37",
  "layout-divider": "awsui_layout-divider_1vtzr_1qv0p_42"
};

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/index.js
var S3InContext = import_react342.default.forwardRef(({ i18nStrings, inputPlaceholder, resource, viewHref, invalid, inputAriaDescribedby, selectableItemsTypes, fetchVersions, onChange, onBrowse }, ref) => {
  const i18n = useInternalI18n("s3-resource-selector");
  const isInputBlurredRef = (0, import_react342.useRef)(true);
  const [isInputTouched, setInputTouched] = (0, import_react342.useState)(false);
  const { versions, loading, loadVersions, resetVersions } = useVersionsFetch(fetchVersions);
  const inputRef = (0, import_react342.useRef)(null);
  useForwardFocus(ref, inputRef);
  const uri = resource.uri;
  const supportsVersions = selectableItemsTypes && selectableItemsTypes.indexOf("versions") > -1;
  const selectedVersion = versions.filter((version) => version.value === resource.versionId)[0] || null;
  function handleUriChange(event) {
    const uri2 = event.detail.value;
    const errorCode = isInputTouched ? validate(uri2) : void 0;
    resetVersions();
    onChange({ uri: uri2 }, getErrorText(i18n, i18nStrings, errorCode));
  }
  function handleUriBlur() {
    isInputBlurredRef.current = true;
    setInputTouched(true);
    const errorCode = validate(resource.uri);
    onChange(resource, getErrorText(i18n, i18nStrings, errorCode));
    if (supportsVersions) {
      loadVersions(resource.uri);
    }
  }
  (0, import_react342.useEffect)(() => {
    var _a;
    if (!isInputBlurredRef.current || !supportsVersions) {
      return;
    }
    const { cancel } = (_a = loadVersions(uri)) !== null && _a !== void 0 ? _a : {};
    return cancel;
  }, [uri, supportsVersions, loadVersions]);
  return import_react342.default.createElement(
    "div",
    { className: styles_css_default133.root },
    import_react342.default.createElement(
      "div",
      { className: styles_css_default133.layout },
      import_react342.default.createElement(
        InternalFormField,
        { className: styles_css_default133["layout-uri"], label: i18n("i18nStrings.inContextUriLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextUriLabel), stretch: true },
        import_react342.default.createElement(SearchInput, { ref: inputRef, value: uri, ariaDescribedby: inputAriaDescribedby, clearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextInputClearAriaLabel, placeholder: inputPlaceholder !== null && inputPlaceholder !== void 0 ? inputPlaceholder : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextInputPlaceholder, onChange: handleUriChange, invalid, onFocus: () => isInputBlurredRef.current = false, onBlur: handleUriBlur })
      ),
      supportsVersions && import_react342.default.createElement(
        InternalFormField,
        { className: styles_css_default133["layout-version"], label: i18n("i18nStrings.inContextVersionSelectLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextVersionSelectLabel), stretch: true },
        import_react342.default.createElement(internal_default17, { selectedOption: selectedVersion, placeholder: i18n("i18nStrings.inContextSelectPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextSelectPlaceholder), disabled: versions.length === 0, options: versions, onChange: (event) => onChange(Object.assign(Object.assign({}, resource), { versionId: event.detail.selectedOption.value }), void 0), invalid: false })
      ),
      import_react342.default.createElement(
        "div",
        null,
        import_react342.default.createElement(InternalButton, { className: styles_css_default133["view-button"], disabled: !viewHref, href: viewHref, target: "_blank", iconName: "external", iconAlign: "right", formAction: "none", ariaLabel: i18n("i18nStrings.inContextViewButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextViewButtonAriaLabel) }, i18n("i18nStrings.inContextViewButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextViewButton))
      ),
      import_react342.default.createElement("div", { className: styles_css_default133["layout-divider"] }),
      import_react342.default.createElement(
        "div",
        null,
        import_react342.default.createElement(InternalButton, { className: styles_css_default133["browse-button"], disabled: loading, formAction: "none", onClick: onBrowse }, i18n("i18nStrings.inContextBrowseButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextBrowseButton))
      )
    ),
    import_react342.default.createElement(internal_default2, { assertive: true }, loading && import_react342.default.createElement(
      InternalBox,
      { margin: { top: "s" } },
      import_react342.default.createElement(StatusIndicator, { type: "loading" }, i18n("i18nStrings.inContextLoadingText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextLoadingText))
    ))
  );
});

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/index.js
var import_react350 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/utils.js
function joinObjectPath(segments) {
  return segments.reduce((prev, next) => {
    if (prev && prev[prev.length - 1] !== "/") {
      prev = prev + "/";
    }
    return prev + next;
  }, "");
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/buckets-table.js
var import_react347 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/basic-table.js
var import_react346 = __toESM(require_react());

// node_modules/@cloudscape-design/collection-hooks/mjs/use-collection.js
var import_react344 = __toESM(require_react(), 1);

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/filter.js
function defaultFilteringFunction(item, filteringText, filteringFields) {
  if (filteringText.length === 0) {
    return true;
  }
  filteringFields = filteringFields || Object.keys(item);
  const lowFilteringText = filteringText.toLowerCase();
  return filteringFields.some((key2) => {
    const value = item[key2];
    if (value && typeof value === "object") {
      return false;
    }
    return String(value).toLowerCase().indexOf(lowFilteringText) > -1;
  });
}
function createFilterPredicate(filtering, filteringText = "") {
  var _a;
  if (!filtering) {
    return null;
  }
  const filteringFunction = (_a = filtering.filteringFunction) !== null && _a !== void 0 ? _a : defaultFilteringFunction;
  return (item) => filteringFunction(item, filteringText, filtering.fields);
}

// node_modules/@cloudscape-design/collection-hooks/mjs/date-utils/parse-iso-date.js
function parseIsoDate(isoDate) {
  if (typeof isoDate === "string") {
    if (isoDate.includes("T")) {
      return new Date(isoDate);
    } else {
      return /* @__PURE__ */ new Date(isoDate + "T00:00:00");
    }
  }
  return /* @__PURE__ */ new Date(NaN);
}

// node_modules/@cloudscape-design/collection-hooks/mjs/date-utils/compare-dates.js
function compareDates(date2, dateToCompare) {
  if (date2 instanceof Date && typeof dateToCompare === "string") {
    return startOfDay2(date2).getTime() - startOfDay2(parseIsoDate(dateToCompare)).getTime();
  }
  return NaN;
}
function compareTimestamps(date2, dateToCompare) {
  if (date2 instanceof Date && typeof dateToCompare === "string") {
    return date2.getTime() - parseIsoDate(dateToCompare).getTime();
  }
  return NaN;
}
function startOfDay2(date2) {
  const copy2 = new Date(date2.getTime());
  copy2.setHours(0, 0, 0, 0);
  return copy2;
}

// node_modules/@cloudscape-design/collection-hooks/mjs/logging.js
var isDevelopment3 = true;
var messageCache = /* @__PURE__ */ new Set();
function warnOnce2(message) {
  if (isDevelopment3) {
    const warning = `[AwsUi] collection-hooks ${message}`;
    if (!messageCache.has(warning)) {
      messageCache.add(warning);
      console.warn(warning);
    }
  }
}

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/property-filter.js
var filterUsingOperator = (itemValue, { tokenValue, operator: { operator, match: match2, tokenType } }) => {
  if (match2 === "date" || match2 === "datetime") {
    return matchDateValue({ tokenValue, itemValue, operator, match: match2 });
  } else if (typeof match2 === "function") {
    return match2(itemValue, tokenValue);
  } else if (match2) {
    throw new Error("Unsupported `operator.match` type given.");
  }
  return matchPrimitiveValue({ tokenValue, itemValue, operator, tokenType });
};
function matchDateValue({ tokenValue, itemValue, operator, match: match2 }) {
  const comparator = match2 === "date" ? compareDates : compareTimestamps;
  const comparisonResult = comparator(itemValue, tokenValue);
  switch (operator) {
    case "<":
      return comparisonResult < 0;
    case "<=":
      return comparisonResult <= 0;
    case ">":
      return comparisonResult > 0;
    case ">=":
      return comparisonResult >= 0;
    case "=":
      return comparisonResult === 0;
    case "!=":
      return comparisonResult !== 0;
    default:
      warnOnce2(`Unsupported operator "${operator}" given for match="${match2}".`);
      return false;
  }
}
function matchPrimitiveValue({ tokenValue, itemValue, operator, tokenType }) {
  if (tokenType === "enum") {
    if (!tokenValue || !Array.isArray(tokenValue)) {
      warnOnce2('The token value must be an array when tokenType=="enum".');
      return false;
    }
    switch (operator) {
      case "=":
        return tokenValue && tokenValue.includes(itemValue);
      case "!=":
        return !tokenValue || !tokenValue.includes(itemValue);
      default:
        warnOnce2(`Unsupported operator "${operator}" given for tokenType=="enum".`);
        return false;
    }
  }
  switch (operator) {
    case "<":
      return itemValue < tokenValue;
    case "<=":
      return itemValue <= tokenValue;
    case ">":
      return itemValue > tokenValue;
    case ">=":
      return itemValue >= tokenValue;
    case "=":
      return itemValue == tokenValue;
    case "!=":
      return itemValue != tokenValue;
    case ":":
      return (itemValue + "").toLowerCase().indexOf((tokenValue + "").toLowerCase()) > -1;
    case "!:":
      return (itemValue + "").toLowerCase().indexOf((tokenValue + "").toLowerCase()) === -1;
    case "^":
      return (itemValue + "").toLowerCase().startsWith((tokenValue + "").toLowerCase());
    case "!^":
      return !(itemValue + "").toLowerCase().startsWith((tokenValue + "").toLowerCase());
    default:
      throw new Error("Unsupported operator given.");
  }
}
function freeTextFilter(tokenValue, item, operator, filteringPropertiesMap) {
  const isNegation = operator.startsWith("!");
  return Object.keys(filteringPropertiesMap)[isNegation ? "every" : "some"]((propertyKey) => {
    const { operators } = filteringPropertiesMap[propertyKey];
    const propertyOperator = operators[operator];
    if (!propertyOperator) {
      return isNegation;
    }
    return filterUsingOperator(item[propertyKey], { tokenValue, operator: propertyOperator });
  });
}
function filterByToken(token, item, filteringPropertiesMap) {
  if (token.propertyKey) {
    if (!(token.propertyKey in filteringPropertiesMap) || !(token.operator in filteringPropertiesMap[token.propertyKey].operators)) {
      return false;
    }
    const property = filteringPropertiesMap[token.propertyKey];
    const operator = property.operators[token.operator];
    const itemValue = (operator === null || operator === void 0 ? void 0 : operator.match) ? item[token.propertyKey] : fixupFalsyValues(item[token.propertyKey]);
    return filterUsingOperator(itemValue, {
      tokenValue: token.value,
      operator: operator !== null && operator !== void 0 ? operator : { operator: token.operator }
    });
  }
  return freeTextFilter(token.value, item, token.operator, filteringPropertiesMap);
}
function defaultFilteringFunction2(filteringPropertiesMap) {
  return (item, query) => {
    var _a;
    function evaluate(tokenOrGroup) {
      if ("operation" in tokenOrGroup) {
        let result = tokenOrGroup.operation === "and" ? true : !tokenOrGroup.tokens.length;
        for (const group of tokenOrGroup.tokens) {
          result = tokenOrGroup.operation === "and" ? result && evaluate(group) : result || evaluate(group);
        }
        return result;
      } else {
        return filterByToken(tokenOrGroup, item, filteringPropertiesMap);
      }
    }
    return evaluate({
      operation: query.operation,
      tokens: (_a = query.tokenGroups) !== null && _a !== void 0 ? _a : query.tokens
    });
  };
}
function createPropertyFilterPredicate(propertyFiltering, query = { tokens: [], operation: "and" }) {
  if (!propertyFiltering) {
    return null;
  }
  const filteringPropertiesMap = propertyFiltering.filteringProperties.reduce((acc, { key: key2, operators, defaultOperator }) => {
    const operatorMap = { [defaultOperator !== null && defaultOperator !== void 0 ? defaultOperator : "="]: { operator: defaultOperator !== null && defaultOperator !== void 0 ? defaultOperator : "=" } };
    operators === null || operators === void 0 ? void 0 : operators.forEach((op) => {
      if (typeof op === "string") {
        operatorMap[op] = { operator: op };
      } else {
        operatorMap[op.operator] = { operator: op.operator, match: op.match, tokenType: op.tokenType };
      }
    });
    acc[key2] = { operators: operatorMap };
    return acc;
  }, {});
  const filteringFunction = propertyFiltering.filteringFunction || defaultFilteringFunction2(filteringPropertiesMap);
  return (item) => filteringFunction(item, query);
}
var fixupFalsyValues = (value) => {
  if (typeof value === "boolean") {
    return value + "";
  }
  if (value || value === 0) {
    return value;
  }
  return "";
};

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/sort.js
function getSorter(sortingField) {
  if (!sortingField) {
    return null;
  }
  return (row1, row2) => {
    var _a, _b;
    const value1 = (_a = row1[sortingField]) !== null && _a !== void 0 ? _a : "";
    const value2 = (_b = row2[sortingField]) !== null && _b !== void 0 ? _b : "";
    if (typeof value1 === "string" && typeof value2 === "string") {
      return value1.localeCompare(value2);
    }
    return value1 < value2 ? -1 : value1 == value2 ? 0 : 1;
  };
}
function createComparator(sorting, state) {
  var _a;
  if (!sorting || !state) {
    return null;
  }
  const direction = state.isDescending ? -1 : 1;
  const comparator = (_a = state.sortingColumn.sortingComparator) !== null && _a !== void 0 ? _a : getSorter(state.sortingColumn.sortingField);
  return comparator ? (a4, b2) => comparator(a4, b2) * direction : null;
}

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/pagination.js
var DEFAULT_PAGE_SIZE = 10;
function createPageProps(pagination, currentPageIndex, items) {
  var _a;
  if (!pagination) {
    return null;
  }
  const pageSize = (_a = pagination.pageSize) !== null && _a !== void 0 ? _a : DEFAULT_PAGE_SIZE;
  const pagesCount = Math.ceil(items.length / pageSize);
  let pageIndex = currentPageIndex !== null && currentPageIndex !== void 0 ? currentPageIndex : 1;
  if (pageIndex < 1 || pageIndex > pagesCount && !pagination.allowPageOutOfRange || Number.isNaN(pageIndex)) {
    pageIndex = 1;
  }
  return { pageSize, pagesCount, pageIndex };
}

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/items-tree.js
var ItemsTree = class {
  constructor(items, treeProps) {
    var _a;
    this.size = 0;
    this.hasNesting = false;
    this.roots = new Array();
    this.idToChildren = /* @__PURE__ */ new Map();
    this.filter = (predicate) => {
      if (!this.hasNesting) {
        this.items = this.items.filter(predicate);
        this.size = this.items.length;
      } else {
        this.filterTree(predicate);
      }
      return this;
    };
    this.sort = (comparator) => {
      if (!this.hasNesting) {
        this.items = this.items.slice().sort(comparator);
      } else {
        this.sortTree(comparator);
      }
      return this;
    };
    this.getChildren = (item) => {
      var _a2;
      return (_a2 = this.treeProps && this.idToChildren.get(this.treeProps.getId(item))) !== null && _a2 !== void 0 ? _a2 : [];
    };
    this.getItems = () => {
      if (this.hasNesting) {
        return this.roots;
      }
      return this.items;
    };
    this.getSize = () => {
      return this.size;
    };
    this.filterTree = (predicate) => {
      const filterNode = (item) => {
        const children = this.getChildren(item);
        const filteredChildren = children.filter(filterNode);
        this.size -= children.length - filteredChildren.length;
        this.setChildren(item, filteredChildren);
        return predicate(item) || filteredChildren.length > 0;
      };
      const roots = this.roots;
      this.roots = this.roots.filter(filterNode);
      this.size -= roots.length - this.roots.length;
    };
    this.sortTree = (comparator) => {
      const sortLevel = (items2) => {
        items2.sort(comparator);
        for (const item of items2) {
          sortLevel(this.getChildren(item));
        }
      };
      sortLevel(this.roots);
    };
    this.size = items.length;
    this.items = items;
    this.treeProps = treeProps;
    if (!treeProps) {
      return;
    }
    for (const item of items) {
      const parentId = treeProps.getParentId(item);
      if (parentId === null) {
        this.roots.push(item);
      } else {
        const children = (_a = this.idToChildren.get(parentId)) !== null && _a !== void 0 ? _a : [];
        children.push(item);
        this.idToChildren.set(parentId, children);
        this.hasNesting = true;
      }
    }
    const traverse = (item, level = 1) => {
      var _a2;
      for (const child of (_a2 = this.idToChildren.get(treeProps.getId(item))) !== null && _a2 !== void 0 ? _a2 : []) {
        traverse(child, level + 1);
      }
    };
    this.roots.forEach((root) => traverse(root));
  }
  setChildren(item, children) {
    if (this.treeProps) {
      this.idToChildren.set(this.treeProps.getId(item), children);
    }
  }
};

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/compose-filters.js
function composeFilters(...predicates) {
  return predicates.some(Boolean) ? (item) => {
    for (const predicate of predicates) {
      if (predicate && !predicate(item)) {
        return false;
      }
    }
    return true;
  } : null;
}

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/index.js
function processItems(items, { filteringText, sortingState, currentPageIndex, propertyFilteringQuery }, { filtering, sorting, pagination, propertyFiltering, expandableRows }) {
  const itemsTree = new ItemsTree(items, expandableRows);
  const filterPredicate = composeFilters(createPropertyFilterPredicate(propertyFiltering, propertyFilteringQuery), createFilterPredicate(filtering, filteringText));
  if (filterPredicate) {
    itemsTree.filter(filterPredicate);
  }
  const comparator = createComparator(sorting, sortingState);
  if (comparator) {
    itemsTree.sort(comparator);
  }
  const allPageItems = itemsTree.getItems();
  const filteredItemsCount = filterPredicate ? itemsTree.getSize() : void 0;
  const pageProps = createPageProps(pagination, currentPageIndex, allPageItems);
  if (pageProps) {
    return {
      items: allPageItems.slice((pageProps.pageIndex - 1) * pageProps.pageSize, pageProps.pageIndex * pageProps.pageSize),
      allPageItems,
      filteredItemsCount,
      pagesCount: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pagesCount,
      actualPageIndex: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pageIndex,
      itemsTree
    };
  }
  return {
    items: allPageItems,
    allPageItems,
    filteredItemsCount,
    pagesCount: void 0,
    actualPageIndex: void 0,
    itemsTree
  };
}
var getTrackableValue = (trackBy, item) => {
  if (!trackBy) {
    return item;
  }
  if (typeof trackBy === "function") {
    return trackBy(item);
  }
  return item[trackBy];
};
var processSelectedItems = (items, selectedItems, trackBy) => {
  const selectedSet = /* @__PURE__ */ new Set();
  selectedItems.forEach((item) => selectedSet.add(getTrackableValue(trackBy, item)));
  return items.filter((item) => selectedSet.has(getTrackableValue(trackBy, item)));
};
var itemsAreEqual = (items1, items2, trackBy) => {
  if (items1.length !== items2.length) {
    return false;
  }
  const set1 = /* @__PURE__ */ new Set();
  items1.forEach((item) => set1.add(getTrackableValue(trackBy, item)));
  return items2.every((item) => set1.has(getTrackableValue(trackBy, item)));
};

// node_modules/@cloudscape-design/collection-hooks/mjs/utils.js
function collectionReducer(state, action) {
  const newState = Object.assign({}, state);
  switch (action.type) {
    case "selection":
      newState.selectedItems = action.selectedItems;
      break;
    case "expansion":
      newState.expandedItems = action.expandedItems;
      break;
    case "filtering":
      newState.currentPageIndex = 1;
      newState.filteringText = action.filteringText;
      break;
    case "sorting":
      newState.currentPageIndex = 1;
      newState.sortingState = action.sortingState;
      break;
    case "pagination":
      newState.currentPageIndex = action.pageIndex;
      break;
    case "property-filtering":
      newState.currentPageIndex = 1;
      newState.propertyFilteringQuery = action.query;
      break;
  }
  return newState;
}
function createActions({ dispatch, collectionRef }) {
  return {
    setFiltering(filteringText) {
      var _a;
      dispatch({ type: "filtering", filteringText });
      (_a = collectionRef.current) === null || _a === void 0 ? void 0 : _a.scrollToTop();
    },
    setSorting(state) {
      var _a;
      dispatch({ type: "sorting", sortingState: state });
      (_a = collectionRef.current) === null || _a === void 0 ? void 0 : _a.scrollToTop();
    },
    setCurrentPage(pageIndex) {
      var _a;
      dispatch({ type: "pagination", pageIndex });
      (_a = collectionRef.current) === null || _a === void 0 ? void 0 : _a.scrollToTop();
    },
    setSelectedItems(selectedItems) {
      dispatch({ type: "selection", selectedItems });
    },
    setPropertyFiltering(query) {
      var _a;
      dispatch({ type: "property-filtering", query });
      (_a = collectionRef.current) === null || _a === void 0 ? void 0 : _a.scrollToTop();
    },
    setExpandedItems(expandedItems) {
      dispatch({ type: "expansion", expandedItems });
    }
  };
}
function createSyncProps(options, { filteringText, sortingState, selectedItems, expandedItems, currentPageIndex, propertyFilteringQuery }, actions, collectionRef, { pagesCount, actualPageIndex, allItems, allPageItems, itemsTree }) {
  var _a, _b, _c, _d, _e;
  let empty = options.filtering ? allItems.length ? options.filtering.noMatch : options.filtering.empty : null;
  empty = options.propertyFiltering ? allItems.length ? options.propertyFiltering.noMatch : options.propertyFiltering.empty : empty;
  const filteringOptions = options.propertyFiltering ? options.propertyFiltering.filteringProperties.reduce((acc, property) => {
    Object.keys(allItems.reduce((acc2, item) => {
      acc2["" + fixupFalsyValues(item[property.key])] = true;
      return acc2;
    }, {})).forEach((value) => {
      if (value !== "") {
        acc.push({
          propertyKey: property.key,
          value
        });
      }
    });
    return acc;
  }, []) : [];
  return {
    collectionProps: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ empty }, options.sorting ? {
      onSortingChange: ({ detail }) => {
        actions.setSorting(detail);
      },
      sortingColumn: sortingState === null || sortingState === void 0 ? void 0 : sortingState.sortingColumn,
      sortingDescending: sortingState === null || sortingState === void 0 ? void 0 : sortingState.isDescending
    } : {}), options.expandableRows ? {
      expandableRows: {
        getItemChildren(item) {
          return itemsTree.getChildren(item);
        },
        isItemExpandable(item) {
          return itemsTree.getChildren(item).length > 0;
        },
        expandedItems,
        onExpandableItemToggle: ({ detail: { item, expanded } }) => {
          const getId = options.expandableRows.getId;
          if (expanded) {
            for (const stateItem of expandedItems) {
              if (getId(stateItem) === getId(item)) {
                return;
              }
            }
            actions.setExpandedItems([...expandedItems, item]);
          } else {
            actions.setExpandedItems(expandedItems.filter((stateItem) => getId(stateItem) !== getId(item)));
          }
        }
      },
      // The trackBy property is used to match expanded items by ID and not by object reference.
      // The property can be overridden by the explicitly provided selection.trackBy.
      // If that is the case, we assume both selection.trackBy and expandableRows.getId have the same result.
      // If not, the expandable state won't be matched correctly by the table.
      trackBy: options.expandableRows.getId
    } : {}), options.selection ? {
      onSelectionChange: ({ detail: { selectedItems: selectedItems2 } }) => {
        actions.setSelectedItems(selectedItems2);
      },
      selectedItems,
      trackBy: (_a = options.selection.trackBy) !== null && _a !== void 0 ? _a : (_b = options.expandableRows) === null || _b === void 0 ? void 0 : _b.getId
    } : {}), { ref: collectionRef, firstIndex: 1, totalItemsCount: allPageItems.length }), ((_c = options.pagination) === null || _c === void 0 ? void 0 : _c.pageSize) ? {
      firstIndex: ((actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex) - 1) * options.pagination.pageSize + 1
    } : {}),
    filterProps: {
      filteringText,
      onChange: ({ detail: { filteringText: filteringText2 } }) => {
        actions.setFiltering(filteringText2);
      }
    },
    propertyFilterProps: {
      query: propertyFilteringQuery,
      onChange: ({ detail: query }) => {
        actions.setPropertyFiltering(query);
      },
      filteringProperties: ((_d = options.propertyFiltering) === null || _d === void 0 ? void 0 : _d.filteringProperties) || [],
      filteringOptions,
      freeTextFiltering: (_e = options.propertyFiltering) === null || _e === void 0 ? void 0 : _e.freeTextFiltering
    },
    paginationProps: {
      currentPageIndex: actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex,
      // pagesCount is always calculated when options.pagination is present
      pagesCount,
      onChange: ({ detail: { currentPageIndex: currentPageIndex2 } }) => {
        actions.setCurrentPage(currentPageIndex2);
      }
    }
  };
}

// node_modules/@cloudscape-design/collection-hooks/mjs/use-collection-state.js
var import_react343 = __toESM(require_react(), 1);
function useCollectionState(options, collectionRef) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
  const [state, dispatch] = (0, import_react343.useReducer)(collectionReducer, {
    selectedItems: (_b = (_a = options.selection) === null || _a === void 0 ? void 0 : _a.defaultSelectedItems) !== null && _b !== void 0 ? _b : [],
    expandedItems: (_d = (_c = options.expandableRows) === null || _c === void 0 ? void 0 : _c.defaultExpandedItems) !== null && _d !== void 0 ? _d : [],
    sortingState: (_e = options.sorting) === null || _e === void 0 ? void 0 : _e.defaultState,
    currentPageIndex: (_g = (_f = options.pagination) === null || _f === void 0 ? void 0 : _f.defaultPage) !== null && _g !== void 0 ? _g : 1,
    filteringText: (_j = (_h = options.filtering) === null || _h === void 0 ? void 0 : _h.defaultFilteringText) !== null && _j !== void 0 ? _j : "",
    propertyFilteringQuery: (_l = (_k = options.propertyFiltering) === null || _k === void 0 ? void 0 : _k.defaultQuery) !== null && _l !== void 0 ? _l : { tokens: [], operation: "and" }
  });
  const actions = (0, import_react343.useMemo)(() => createActions({ dispatch, collectionRef }), [dispatch, collectionRef]);
  return [state, actions];
}

// node_modules/@cloudscape-design/collection-hooks/mjs/use-collection.js
function useCollection(allItems, options) {
  const collectionRef = (0, import_react344.useRef)(null);
  const [state, actions] = useCollectionState(options, collectionRef);
  const { items, allPageItems, pagesCount, filteredItemsCount, actualPageIndex, itemsTree } = processItems(allItems, state, options);
  const expandedItemsSet = /* @__PURE__ */ new Set();
  if (options.expandableRows) {
    for (const item of state.expandedItems) {
      expandedItemsSet.add(options.expandableRows.getId(item));
    }
  }
  let visibleItems = items;
  if (options.expandableRows) {
    const flatItems = new Array();
    const getId = options.expandableRows.getId;
    const traverse = (items2) => {
      for (const item of items2) {
        flatItems.push(item);
        if (expandedItemsSet.has(getId(item))) {
          traverse(itemsTree.getChildren(item));
        }
      }
    };
    traverse(items);
    visibleItems = flatItems;
  }
  if (options.selection && !options.selection.keepSelection) {
    const newSelectedItems = processSelectedItems(visibleItems, state.selectedItems, options.selection.trackBy);
    if (!itemsAreEqual(newSelectedItems, state.selectedItems, options.selection.trackBy)) {
      actions.setSelectedItems(newSelectedItems);
    }
  }
  if (options.expandableRows) {
    const newExpandedItems = visibleItems.filter((item) => expandedItemsSet.has(options.expandableRows.getId(item)));
    if (!itemsAreEqual(newExpandedItems, state.expandedItems, options.expandableRows.getId)) {
      actions.setExpandedItems(newExpandedItems);
    }
  }
  return Object.assign({
    items,
    allPageItems,
    filteredItemsCount,
    actions
  }, createSyncProps(options, state, actions, collectionRef, {
    actualPageIndex,
    pagesCount,
    allItems,
    allPageItems,
    itemsTree
  }));
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/empty-state.js
var import_react345 = __toESM(require_react());
function EmptyState({ title, subtitle, action }) {
  return import_react345.default.createElement(
    InternalBox,
    { textAlign: "center", color: "inherit" },
    import_react345.default.createElement(InternalBox, { variant: "strong", textAlign: "center", color: "inherit" }, title),
    import_react345.default.createElement(InternalBox, { variant: "p", padding: { bottom: "s" }, color: "inherit" }, subtitle),
    action
  );
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/styles.scoped.css";
var styles_css_default134 = {
  "modal-actions": "awsui_modal-actions_12hyz_163me_181",
  "submit-button": "awsui_submit-button_12hyz_163me_185",
  "last-updated-caption": "awsui_last-updated-caption_12hyz_163me_189"
};

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/basic-table.js
function getSharedI18Strings(i18n, i18nStrings) {
  return {
    filteringCounterText: i18n("i18nStrings.filteringCounterText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringCounterText, (format3) => (count) => format3({ count })),
    labelRefresh: i18n("i18nStrings.labelRefresh", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelRefresh),
    labelsPagination: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsPagination,
    noMatchTitle: i18n("i18nStrings.filteringNoMatches", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringNoMatches),
    noMatchSubtitle: i18n("i18nStrings.filteringCantFindMatch", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringCantFindMatch),
    clearFilterButtonText: i18n("i18nStrings.clearFilterButtonText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearFilterButtonText),
    filteringClearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelClearFilter,
    lastUpdatedText: i18n("i18nStrings.modalLastUpdatedText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalLastUpdatedText)
  };
}
function BasicS3Table({ forwardFocusRef, columnDefinitions, fetchData, trackBy, i18nStrings = {}, isVisualRefresh, visibleColumns, isItemDisabled, onSelect }) {
  var _a;
  const [loading, setLoading] = (0, import_react346.useState)(false);
  const [allItems, setAllItems] = (0, import_react346.useState)([]);
  const [lastUpdated, setLastUpdated] = (0, import_react346.useState)();
  const textFilterRef = (0, import_react346.useRef)(null);
  const onSelectLatest = useStableCallback(onSelect);
  function loadData() {
    setLoading(true);
    return fetchData().then((items2) => {
      setAllItems(items2);
      setLoading(false);
    }).catch(() => {
      setLoading(false);
    });
  }
  function reloadData() {
    return __awaiter(this, void 0, void 0, function* () {
      yield loadData();
      setLastUpdated(/* @__PURE__ */ new Date());
    });
  }
  (0, import_react346.useEffect)(() => {
    loadData();
  }, []);
  useForwardFocus(forwardFocusRef, textFilterRef);
  const { items, filteredItemsCount, collectionProps, filterProps, paginationProps, actions } = useCollection(allItems, {
    selection: { trackBy },
    filtering: {
      empty: i18nStrings.emptyText,
      noMatch: import_react346.default.createElement(EmptyState, { title: i18nStrings.noMatchTitle, subtitle: i18nStrings.noMatchSubtitle, action: import_react346.default.createElement(InternalButton, { onClick: () => actions.setFiltering("") }, i18nStrings.clearFilterButtonText) })
    },
    pagination: {},
    sorting: {}
  });
  const selectedItem = (_a = collectionProps.selectedItems) === null || _a === void 0 ? void 0 : _a[0];
  (0, import_react346.useEffect)(() => {
    onSelectLatest(selectedItem);
  }, [selectedItem, onSelectLatest]);
  return import_react346.default.createElement(internal_default7, Object.assign({ variant: isVisualRefresh ? "borderless" : "container" }, collectionProps, { header: import_react346.default.createElement(InternalHeader, { variant: isVisualRefresh ? "h3" : "h2", headingTagOverride: "h3", actions: import_react346.default.createElement(InternalHeaderActions, { reloadData, i18nStrings, lastUpdated }), counter: selectedItem ? `(1/${allItems.length})` : `(${allItems.length})` }, i18nStrings.header), trackBy, filter: import_react346.default.createElement(internal_default18, Object.assign({}, filterProps, { ref: textFilterRef, filteringAriaLabel: i18nStrings.filteringAriaLabel, filteringClearAriaLabel: i18nStrings.filteringClearAriaLabel, filteringPlaceholder: i18nStrings.filteringPlaceholder, countText: i18nStrings.filteringCounterText ? i18nStrings.filteringCounterText(filteredItemsCount) : "" })), pagination: import_react346.default.createElement(InternalPagination, Object.assign({}, paginationProps, { ariaLabels: i18nStrings.labelsPagination })), selectionType: "single", ariaLabels: i18nStrings.selectionLabels, loading, loadingText: i18nStrings.loadingText, items, visibleColumns, isItemDisabled, columnDefinitions, enableKeyboardNavigation: true }));
}
function InternalHeaderActions({ i18nStrings, reloadData, lastUpdated }) {
  function getLastUpdated() {
    if (!lastUpdated || !i18nStrings.lastUpdatedText) {
      return null;
    }
    const formattedDate = formatDateLocalized({
      date: lastUpdated.toString(),
      isDateOnly: false,
      isMonthOnly: false
    });
    return import_react346.default.createElement(
      "div",
      { className: styles_css_default134["last-updated-caption"] },
      i18nStrings.lastUpdatedText,
      import_react346.default.createElement("br", null),
      formattedDate,
      import_react346.default.createElement(internal_default2, { tagName: "span", sources: [i18nStrings.lastUpdatedText, formattedDate] })
    );
  }
  return import_react346.default.createElement(
    internal_default4,
    { size: "s", direction: "horizontal", alignItems: "center" },
    getLastUpdated(),
    import_react346.default.createElement(InternalButton, { iconName: "refresh", ariaLabel: i18nStrings.labelRefresh, onClick: reloadData })
  );
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/column-formats.js
var BYTES_BASE = 1024;
var BYTES_DECIMALS = 2;
var BYTES_SIZES = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
function formatDefault(value) {
  return value ? value : "-";
}
function formatSize(bytes) {
  if (bytes === void 0) {
    return "-";
  }
  if (bytes === 0) {
    return `0 ${BYTES_SIZES[0]}`;
  }
  const i2 = Math.floor(Math.log(bytes) / Math.log(BYTES_BASE));
  return parseFloat((bytes / Math.pow(BYTES_BASE, i2)).toFixed(BYTES_DECIMALS)) + " " + BYTES_SIZES[i2];
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/table-utils.js
function includes(array, item) {
  return !!array && array.indexOf(item) > -1;
}
var compareDates2 = (itemA, itemB) => {
  const timeA = itemA ? new Date(itemA).getTime() : 0;
  const timeB = itemB ? new Date(itemB).getTime() : 0;
  return timeA - timeB;
};
function getColumnAriaLabel(i18n, i18nStrings, columnName = "") {
  return ({ sorted, descending: descending2 }) => {
    var _a, _b, _c, _d, _e, _f;
    if (!sorted) {
      return (_b = i18n("i18nStrings.labelNotSorted", (_a = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelNotSorted) === null || _a === void 0 ? void 0 : _a.call(i18nStrings, columnName), (format3) => format3({ columnName }))) !== null && _b !== void 0 ? _b : "";
    }
    if (descending2) {
      return (_d = i18n("i18nStrings.labelSortedDescending", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelSortedDescending) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, columnName), (format3) => format3({ columnName }))) !== null && _d !== void 0 ? _d : "";
    }
    return (_f = i18n("i18nStrings.labelSortedAscending", (_e = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelSortedAscending) === null || _e === void 0 ? void 0 : _e.call(i18nStrings, columnName), (format3) => format3({ columnName }))) !== null && _f !== void 0 ? _f : "";
  };
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/buckets-table.js
function BucketsTable({ forwardFocusRef, i18nStrings, isVisualRefresh, isItemDisabled, selectableItemsTypes, fetchData, visibleColumns, onDrilldown, onSelect }) {
  var _a, _b, _c, _d;
  const i18n = useInternalI18n("s3-resource-selector");
  return import_react347.default.createElement(BasicS3Table, { forwardFocusRef, trackBy: "Name", fetchData, visibleColumns, isItemDisabled: isItemDisabled || (() => !includes(selectableItemsTypes, "buckets")), i18nStrings: Object.assign(Object.assign({}, getSharedI18Strings(i18n, i18nStrings)), { header: i18n("i18nStrings.selectionBuckets", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBuckets), loadingText: i18n("i18nStrings.selectionBucketsLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsLoading), filteringAriaLabel: (_a = i18n("i18nStrings.labelFiltering", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering, (format3) => (itemsType) => format3({ itemsType }))) === null || _a === void 0 ? void 0 : _a((_b = i18n("i18nStrings.selectionBuckets", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBuckets)) !== null && _b !== void 0 ? _b : ""), filteringPlaceholder: i18n("i18nStrings.selectionBucketsSearchPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsSearchPlaceholder), emptyText: i18n("i18nStrings.selectionBucketsNoItems", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsNoItems), selectionLabels: Object.assign(Object.assign({}, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection), { selectionGroupLabel: i18n("i18nStrings.labelsBucketsSelection.selectionGroupLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection) === null || _c === void 0 ? void 0 : _c.selectionGroupLabel), itemSelectionLabel: i18n("i18nStrings.labelsBucketsSelection.itemSelectionLabel", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection) === null || _d === void 0 ? void 0 : _d.itemSelectionLabel, (format3) => (data, item) => {
    var _a2;
    return format3({ item__Name: (_a2 = item.Name) !== null && _a2 !== void 0 ? _a2 : "" });
  }) }) }), isVisualRefresh, columnDefinitions: [
    {
      id: "Name",
      header: i18n("i18nStrings.columnBucketName", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketName),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnBucketName", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketName)),
      sortingField: "Name",
      cell: (item) => {
        const isClickable = includes(selectableItemsTypes, "objects") || includes(selectableItemsTypes, "versions");
        return isClickable ? import_react347.default.createElement(internal_default10, { onFollow: () => item.Name && onDrilldown(item.Name), variant: "link" }, item.Name) : item.Name;
      },
      minWidth: "250px"
    },
    {
      id: "Region",
      header: i18n("i18nStrings.columnBucketRegion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketRegion),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnBucketRegion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketRegion)),
      sortingField: "Region",
      cell: (item) => formatDefault(item.Region),
      minWidth: "150px"
    },
    {
      id: "CreationDate",
      header: i18n("i18nStrings.columnBucketCreationDate", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketCreationDate),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnBucketCreationDate", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketCreationDate)),
      sortingComparator: (a4, b2) => compareDates2(a4.CreationDate, b2.CreationDate),
      cell: (item) => formatDefault(item.CreationDate)
    }
  ], onSelect: (item) => {
    var _a2;
    return onSelect((_a2 = item === null || item === void 0 ? void 0 : item.Name) !== null && _a2 !== void 0 ? _a2 : "");
  } });
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/objects-table.js
var import_react348 = __toESM(require_react());
function ObjectsTable({ forwardFocusRef, pathSegments, i18nStrings, isVisualRefresh, isItemDisabled, selectableItemsTypes, fetchData, visibleColumns, onDrilldown, onSelect }) {
  var _a, _b, _c, _d;
  const i18n = useInternalI18n("s3-resource-selector");
  return import_react348.default.createElement(BasicS3Table, {
    // remount fresh component every we change the path to reset the inner state (e.g. selection/filtering)
    key: pathSegments.join("/"),
    forwardFocusRef,
    trackBy: "Key",
    fetchData: () => {
      const [bucketName, ...rest] = pathSegments;
      return fetchData(bucketName, joinObjectPath(rest));
    },
    i18nStrings: Object.assign(Object.assign({}, getSharedI18Strings(i18n, i18nStrings)), { header: i18n("i18nStrings.selectionObjects", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjects), loadingText: i18n("i18nStrings.selectionObjectsLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjectsLoading), filteringAriaLabel: (_a = i18n("i18nStrings.labelFiltering", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering, (format3) => (itemsType) => format3({ itemsType }))) === null || _a === void 0 ? void 0 : _a((_b = i18n("i18nStrings.selectionObjects", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjects)) !== null && _b !== void 0 ? _b : ""), filteringPlaceholder: i18n("i18nStrings.selectionObjectsSearchPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjectsSearchPlaceholder), emptyText: i18n("i18nStrings.selectionObjectsNoItems", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjectsNoItems), selectionLabels: Object.assign(Object.assign({}, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsObjectsSelection), { selectionGroupLabel: i18n("i18nStrings.labelsObjectsSelection.selectionGroupLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsObjectsSelection) === null || _c === void 0 ? void 0 : _c.selectionGroupLabel), itemSelectionLabel: i18n("i18nStrings.labelsObjectsSelection.itemSelectionLabel", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsObjectsSelection) === null || _d === void 0 ? void 0 : _d.itemSelectionLabel, (format3) => (data, item) => {
      var _a2;
      return format3({ item__Key: (_a2 = item.Key) !== null && _a2 !== void 0 ? _a2 : "" });
    }) }) }),
    isVisualRefresh,
    visibleColumns,
    isItemDisabled: isItemDisabled || (() => !includes(selectableItemsTypes, "objects")),
    columnDefinitions: [
      {
        id: "Key",
        header: i18n("i18nStrings.columnObjectKey", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectKey),
        ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnObjectKey", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectKey)),
        sortingField: "Key",
        cell: (item) => {
          const isClickable = item.IsFolder || includes(selectableItemsTypes, "versions");
          const iconProps = item.IsFolder ? { name: "folder", ariaLabel: i18n("i18nStrings.labelIconFolder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelIconFolder) } : { name: "file", ariaLabel: i18n("i18nStrings.labelIconObject", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelIconObject) };
          return import_react348.default.createElement(
            import_react348.default.Fragment,
            null,
            import_react348.default.createElement(internal_default, Object.assign({}, iconProps)),
            " ",
            isClickable ? import_react348.default.createElement(internal_default10, { onFollow: () => item.Key && onDrilldown(item), variant: "link" }, item.Key) : item.Key
          );
        },
        minWidth: "250px"
      },
      {
        id: "LastModified",
        header: i18n("i18nStrings.columnObjectLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectLastModified),
        ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnObjectLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectLastModified)),
        sortingComparator: (a4, b2) => compareDates2(a4.LastModified, b2.LastModified),
        cell: (item) => formatDefault(item.LastModified)
      },
      {
        id: "Size",
        header: i18n("i18nStrings.columnObjectSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectSize),
        ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnObjectSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectSize)),
        sortingField: "Size",
        cell: (item) => formatSize(item.Size)
      }
    ],
    onSelect: (item) => {
      var _a2;
      return onSelect((_a2 = item === null || item === void 0 ? void 0 : item.Key) !== null && _a2 !== void 0 ? _a2 : "");
    }
  });
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/versions-table.js
var import_react349 = __toESM(require_react());
function VersionsTable({ forwardFocusRef, pathSegments, i18nStrings, isVisualRefresh, isItemDisabled, fetchData, visibleColumns, onSelect }) {
  var _a, _b, _c, _d;
  const i18n = useInternalI18n("s3-resource-selector");
  return import_react349.default.createElement(BasicS3Table, { forwardFocusRef, trackBy: "VersionId", fetchData: () => {
    const [bucketName, ...rest] = pathSegments;
    return fetchData(bucketName, joinObjectPath(rest));
  }, i18nStrings: Object.assign(Object.assign({}, getSharedI18Strings(i18n, i18nStrings)), { header: i18n("i18nStrings.selectionVersions", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersions), loadingText: i18n("i18nStrings.selectionVersionsLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsLoading), filteringAriaLabel: (_a = i18n("i18nStrings.labelFiltering", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering, (format3) => (itemsType) => format3({ itemsType }))) === null || _a === void 0 ? void 0 : _a((_b = i18n("i18nStrings.selectionVersions", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersions)) !== null && _b !== void 0 ? _b : ""), filteringPlaceholder: i18n("i18nStrings.selectionVersionsSearchPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsSearchPlaceholder), emptyText: i18n("i18nStrings.selectionVersionsNoItems", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsNoItems), selectionLabels: Object.assign(Object.assign({}, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection), { selectionGroupLabel: i18n("i18nStrings.labelsVersionsSelection.selectionGroupLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection) === null || _c === void 0 ? void 0 : _c.selectionGroupLabel), itemSelectionLabel: i18n("i18nStrings.labelsVersionsSelection.itemSelectionLabel", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection) === null || _d === void 0 ? void 0 : _d.itemSelectionLabel, (format3) => (data, item) => {
    var _a2;
    return format3({ item__VersionId: (_a2 = item.VersionId) !== null && _a2 !== void 0 ? _a2 : "" });
  }) }) }), isVisualRefresh, visibleColumns, isItemDisabled, columnDefinitions: [
    {
      id: "ID",
      header: i18n("i18nStrings.columnVersionID", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionID),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnVersionID", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionID)),
      sortingField: "VersionId",
      cell: (item) => item.VersionId,
      minWidth: "250px"
    },
    {
      id: "LastModified",
      header: i18n("i18nStrings.columnVersionLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionLastModified),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnVersionLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionLastModified)),
      sortingComparator: (a4, b2) => compareDates2(a4.LastModified, b2.LastModified),
      cell: (item) => formatDefault(item.LastModified)
    },
    {
      id: "Size",
      header: i18n("i18nStrings.columnVersionSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionSize),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnVersionSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionSize)),
      sortingField: "Size",
      cell: (item) => formatSize(item.Size)
    }
  ], onSelect: (item) => {
    var _a2;
    return onSelect((_a2 = item === null || item === void 0 ? void 0 : item.VersionId) !== null && _a2 !== void 0 ? _a2 : "");
  } });
}

// node_modules/@cloudscape-design/components/s3-resource-selector/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/s3-resource-selector/test-classes/styles.scoped.css";
var styles_css_default135 = {
  "modal-root": "awsui_modal-root_rkh1e_1yimk_5"
};

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/index.js
function assertNever(_value) {
  return null;
}
var initialBrowseState = {
  selectedItem: null,
  currentView: "buckets",
  breadcrumbs: []
};
function s3BrowseReducer(state, action) {
  switch (action.type) {
    case "browse-buckets":
      return initialBrowseState;
    case "browse-objects":
      return {
        selectedItem: null,
        currentView: "objects",
        breadcrumbs: action.breadcrumbs
      };
    case "browse-versions":
      return {
        selectedItem: null,
        currentView: "versions",
        breadcrumbs: action.breadcrumbs
      };
    case "select-item":
      return Object.assign(Object.assign({}, state), { selectedItem: action.item });
    default:
      assertNever(action);
  }
  return state;
}
function createResourceInfo({ currentView, breadcrumbs, selectedItem }) {
  const prefix = "s3://";
  if (currentView === "versions") {
    return { uri: prefix + joinObjectPath(breadcrumbs), versionId: selectedItem !== null && selectedItem !== void 0 ? selectedItem : void 0 };
  }
  return { uri: prefix + joinObjectPath([...breadcrumbs, selectedItem]) };
}
function S3Modal({ i18nStrings, alert, selectableItemsTypes, fetchBuckets, bucketsVisibleColumns, bucketsIsItemDisabled, fetchObjects, objectsVisibleColumns, objectsIsItemDisabled, fetchVersions, versionsVisibleColumns, versionsIsItemDisabled, getModalRoot, removeModalRoot, onSubmit, onDismiss }) {
  var _a;
  const [{ currentView, breadcrumbs, selectedItem }, dispatch] = (0, import_react350.useReducer)(s3BrowseReducer, initialBrowseState);
  const forwardFocusRef = (0, import_react350.useRef)(null);
  const i18n = useInternalI18n("s3-resource-selector");
  const isVisualRefresh = useVisualRefresh();
  useEffectOnUpdate(() => {
    var _a2;
    (_a2 = forwardFocusRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  }, [breadcrumbs]);
  return import_react350.default.createElement(
    "div",
    null,
    import_react350.default.createElement(
      InternalModal,
      { className: styles_css_default135["modal-root"], visible: true, size: "max", getModalRoot, removeModalRoot, closeAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelModalDismiss, onDismiss, header: i18n("i18nStrings.modalTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalTitle), footer: import_react350.default.createElement(
        internal_default4,
        { className: styles_css_default134["modal-actions"], size: "xs", direction: "horizontal" },
        import_react350.default.createElement(InternalButton, { variant: "link", formAction: "none", onClick: onDismiss }, i18n("i18nStrings.modalCancelButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalCancelButton)),
        import_react350.default.createElement(InternalButton, { variant: "primary", className: styles_css_default134["submit-button"], disabled: !selectedItem, formAction: "none", onClick: () => onSubmit(createResourceInfo({ currentView, breadcrumbs, selectedItem })) }, i18n("i18nStrings.modalSubmitButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalSubmitButton))
      ) },
      import_react350.default.createElement(
        internal_default4,
        { size: isVisualRefresh ? "xxs" : "xs" },
        import_react350.default.createElement(BreadcrumbGroupImplementation, { ariaLabel: i18n("i18nStrings.labelBreadcrumbs", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelBreadcrumbs), expandAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelExpandBreadcrumbs, onFollow: (event) => {
          event.preventDefault();
          event.detail.item.meta.onClick();
        }, items: [
          {
            text: (_a = i18n("i18nStrings.modalBreadcrumbRootItem", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalBreadcrumbRootItem)) !== null && _a !== void 0 ? _a : "",
            href: "",
            meta: { onClick: () => dispatch({ type: "browse-buckets" }) }
          },
          ...breadcrumbs.map((segment, index) => ({
            text: segment,
            href: "",
            meta: {
              onClick: () => dispatch({
                type: "browse-objects",
                breadcrumbs: breadcrumbs.slice(0, index + 1)
              })
            }
          }))
        ] }),
        alert,
        currentView === "buckets" ? import_react350.default.createElement(BucketsTable, { forwardFocusRef, fetchData: fetchBuckets, visibleColumns: bucketsVisibleColumns, isItemDisabled: bucketsIsItemDisabled, selectableItemsTypes, i18nStrings, isVisualRefresh, onDrilldown: (path2) => dispatch({
          type: "browse-objects",
          breadcrumbs: [path2]
        }), onSelect: (item) => dispatch({ type: "select-item", item }) }) : currentView === "objects" ? import_react350.default.createElement(ObjectsTable, { forwardFocusRef, pathSegments: breadcrumbs, fetchData: fetchObjects, visibleColumns: objectsVisibleColumns, isItemDisabled: objectsIsItemDisabled, selectableItemsTypes, i18nStrings, isVisualRefresh, onDrilldown: (item) => {
          dispatch({
            type: item.IsFolder ? "browse-objects" : "browse-versions",
            breadcrumbs: [...breadcrumbs, item.Key]
          });
        }, onSelect: (item) => dispatch({ type: "select-item", item }) }) : currentView === "versions" ? import_react350.default.createElement(VersionsTable, { forwardFocusRef, pathSegments: breadcrumbs, fetchData: fetchVersions, visibleColumns: versionsVisibleColumns, isItemDisabled: versionsIsItemDisabled, i18nStrings, isVisualRefresh, onSelect: (item) => dispatch({ type: "select-item", item }) }) : assertNever(currentView)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/s3-resource-selector/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/s3-resource-selector/styles.scoped.css";
var styles_css_default136 = {
  "root": "awsui_root_1u0yw_rfo7y_5",
  "alert": "awsui_alert_1u0yw_rfo7y_9"
};

// node_modules/@cloudscape-design/components/s3-resource-selector/index.js
var S3ResourceSelector = import_react351.default.forwardRef((_a, ref) => {
  var { i18nStrings, inputPlaceholder, alert, resource, viewHref, invalid, selectableItemsTypes = [], inputAriaDescribedby, bucketsVisibleColumns = ["Name", "CreationDate"], bucketsIsItemDisabled, fetchBuckets, fetchObjects, objectsVisibleColumns = ["Key", "LastModified", "Size"], objectsIsItemDisabled, fetchVersions, versionsVisibleColumns = ["ID", "LastModified", "Size"], versionsIsItemDisabled, onChange, ariaLabel, getModalRoot, removeModalRoot } = _a, rest = __rest(_a, ["i18nStrings", "inputPlaceholder", "alert", "resource", "viewHref", "invalid", "selectableItemsTypes", "inputAriaDescribedby", "bucketsVisibleColumns", "bucketsIsItemDisabled", "fetchBuckets", "fetchObjects", "objectsVisibleColumns", "objectsIsItemDisabled", "fetchVersions", "versionsVisibleColumns", "versionsIsItemDisabled", "onChange", "ariaLabel", "getModalRoot", "removeModalRoot"]);
  checkSafeUrl("S3ResourceSelector", viewHref);
  const { __internalRootRef } = useBaseComponent("S3ResourceSelector");
  const [modalOpen, setModalOpen] = (0, import_react351.useState)(false);
  const inContextRef = (0, import_react351.useRef)(null);
  const modalWasSubmitted = (0, import_react351.useRef)(false);
  useForwardFocus(ref, inContextRef);
  const { ariaLabelledby, ariaDescribedby } = useFormFieldContext(rest);
  (0, import_react351.useEffect)(() => {
    var _a2;
    if (!modalOpen && modalWasSubmitted.current) {
      modalWasSubmitted.current = false;
      (_a2 = inContextRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [modalOpen]);
  const baseProps = getBaseProps(rest);
  const modalProps = {
    alert,
    i18nStrings,
    fetchBuckets,
    selectableItemsTypes,
    bucketsVisibleColumns,
    bucketsIsItemDisabled,
    fetchObjects,
    objectsVisibleColumns,
    objectsIsItemDisabled,
    fetchVersions,
    versionsVisibleColumns,
    versionsIsItemDisabled,
    getModalRoot,
    removeModalRoot,
    onSubmit: (resource2) => {
      fireNonCancelableEvent(onChange, { resource: resource2 });
      setModalOpen(false);
      modalWasSubmitted.current = true;
    },
    onDismiss: () => setModalOpen(false)
  };
  return import_react351.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default136.root, baseProps.className), ref: __internalRootRef, role: "group", "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "aria-label": ariaLabel }),
    import_react351.default.createElement(S3InContext, { ref: inContextRef, selectableItemsTypes, i18nStrings, inputPlaceholder, resource, viewHref, invalid, inputAriaDescribedby, fetchVersions, onBrowse: () => setModalOpen(true), onChange: (resource2, errorText) => fireNonCancelableEvent(onChange, { resource: resource2, errorText }) }),
    !modalOpen && alert && import_react351.default.createElement(InternalBox, { className: styles_css_default136.alert, margin: { top: "s" } }, alert),
    modalOpen && import_react351.default.createElement(S3Modal, Object.assign({}, modalProps))
  );
});
applyDisplayName(S3ResourceSelector, "S3ResourceSelector");
var s3_resource_selector_default = S3ResourceSelector;

// node_modules/@cloudscape-design/components/segmented-control/index.js
var import_react352 = __toESM(require_react());
function SegmentedControl(props2) {
  var _a;
  const baseComponentProps = useBaseComponent("SegmentedControl", {
    props: {},
    metadata: {
      hasDisabledReasons: ((_a = props2.options) !== null && _a !== void 0 ? _a : []).some((option) => Boolean(option.disabledReason))
    }
  });
  return import_react352.default.createElement(InternalSegmentedControl2, Object.assign({}, props2, baseComponentProps));
}
applyDisplayName(SegmentedControl, "SegmentedControl");

// node_modules/@cloudscape-design/components/select/index.js
var import_react353 = __toESM(require_react());
var Select = import_react353.default.forwardRef((_a, ref) => {
  var { options = [], filteringType = "none", statusType = "finished", triggerVariant = "label" } = _a, restProps = __rest(_a, ["options", "filteringType", "statusType", "triggerVariant"]);
  const baseComponentProps = useBaseComponent("Select", {
    props: {
      autoFocus: restProps.autoFocus,
      expandToViewport: restProps.expandToViewport,
      filteringType,
      triggerVariant,
      virtualScroll: restProps.virtualScroll,
      readOnly: restProps.readOnly
    },
    metadata: {
      hasInlineLabel: Boolean(restProps.inlineLabelText),
      hasDisabledReasons: options.some((option) => Boolean(option.disabledReason))
    }
  });
  const externalProps = getExternalProps(restProps);
  const componentAnalyticsMetadata2 = {
    name: "awsui.Select",
    label: `.${styles_css_default66["button-trigger"]}`,
    properties: {
      disabled: `${!!externalProps.disabled}`
    }
  };
  return import_react353.default.createElement(internal_default17, Object.assign({ options, filteringType, statusType, triggerVariant }, externalProps, baseComponentProps, { ref }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })));
});
applyDisplayName(Select, "Select");
var select_default = Select;

// node_modules/@cloudscape-design/components/side-navigation/index.js
var import_react356 = __toESM(require_react());

// node_modules/@cloudscape-design/components/side-navigation/implementation.js
var import_react355 = __toESM(require_react());

// node_modules/@cloudscape-design/components/side-navigation/parts.js
var import_react354 = __toESM(require_react());

// node_modules/@cloudscape-design/components/side-navigation/util.js
function hasActiveLink(items, activeHref) {
  for (const item of items) {
    if ((item.type === "link" || item.type === "link-group" || item.type === "expandable-link-group") && item.href === activeHref) {
      return true;
    }
    if ((item.type === "section" || item.type === "link-group" || item.type === "expandable-link-group") && hasActiveLink(item.items, activeHref)) {
      return true;
    }
  }
  return false;
}
function generateExpandableItemsMapping(items, mapping = /* @__PURE__ */ new WeakMap(), expandableParents = []) {
  items.forEach((item) => {
    const nextLevelParents = expandableParents.slice();
    if (item.type === "section" || item.type === "expandable-link-group") {
      mapping.set(item, expandableParents);
      nextLevelParents.unshift(item);
    }
    if (item.type === "section" || item.type === "link-group" || item.type === "expandable-link-group") {
      generateExpandableItemsMapping(item.items, mapping, nextLevelParents);
    }
  });
  return mapping;
}
function checkDuplicateHrefs(items) {
  const hrefs = /* @__PURE__ */ new Set();
  const queue = items.slice();
  while (queue.length > 0) {
    const item = queue.shift();
    if ("href" in item) {
      if (hrefs.has(item.href)) {
        warnOnce("SideNavigation", `duplicate href in "${item.text}": ${item.href}`);
      }
      hrefs.add(item.href);
    }
    if ("items" in item) {
      queue.push(...item.items);
    }
  }
}

// node_modules/@cloudscape-design/components/side-navigation/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/side-navigation/analytics-metadata/styles.scoped.css";
var styles_css_default137 = {
  "header-link-text": "awsui_header-link-text_eymn4_rug8v_5",
  "link-text": "awsui_link-text_eymn4_rug8v_6"
};

// node_modules/@cloudscape-design/components/side-navigation/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/side-navigation/styles.scoped.css";
var styles_css_default138 = {
  "root": "awsui_root_l0dv0_sejwa_145",
  "header": "awsui_header_l0dv0_sejwa_179",
  "header-link": "awsui_header-link_l0dv0_sejwa_192",
  "header-link--has-logo": "awsui_header-link--has-logo_l0dv0_sejwa_202",
  "header-link-text": "awsui_header-link-text_l0dv0_sejwa_202",
  "header-logo": "awsui_header-logo_l0dv0_sejwa_207",
  "header-logo--stretched": "awsui_header-logo--stretched_l0dv0_sejwa_213",
  "items-control": "awsui_items-control_l0dv0_sejwa_218",
  "list-container": "awsui_list-container_l0dv0_sejwa_222",
  "with-toolbar": "awsui_with-toolbar_l0dv0_sejwa_230",
  "divider-header": "awsui_divider-header_l0dv0_sejwa_230",
  "list": "awsui_list_l0dv0_sejwa_222",
  "list-variant-root": "awsui_list-variant-root_l0dv0_sejwa_243",
  "list-variant-root--first": "awsui_list-variant-root--first_l0dv0_sejwa_250",
  "list-variant-expandable-link-group": "awsui_list-variant-expandable-link-group_l0dv0_sejwa_254",
  "list-item": "awsui_list-item_l0dv0_sejwa_258",
  "section": "awsui_section_l0dv0_sejwa_269",
  "expandable-link-group": "awsui_expandable-link-group_l0dv0_sejwa_270",
  "section--no-ident": "awsui_section--no-ident_l0dv0_sejwa_273",
  "expandable-link-group--no-ident": "awsui_expandable-link-group--no-ident_l0dv0_sejwa_274",
  "refresh": "awsui_refresh_l0dv0_sejwa_282",
  "list-variant-section-group": "awsui_list-variant-section-group_l0dv0_sejwa_293",
  "section-group": "awsui_section-group_l0dv0_sejwa_300",
  "section-group-title": "awsui_section-group-title_l0dv0_sejwa_311",
  "link": "awsui_link_l0dv0_sejwa_315",
  "link-active": "awsui_link-active_l0dv0_sejwa_324",
  "info": "awsui_info_l0dv0_sejwa_361",
  "external-icon": "awsui_external-icon_l0dv0_sejwa_365",
  "divider": "awsui_divider_l0dv0_sejwa_230",
  "divider-default": "awsui_divider-default_l0dv0_sejwa_374"
};

// node_modules/@cloudscape-design/components/side-navigation/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/side-navigation/test-classes/styles.scoped.css";
var styles_css_default139 = {
  "info": "awsui_info_1fhsi_6k3bb_5"
};

// node_modules/@cloudscape-design/components/side-navigation/parts.js
function Header3({ definition, activeHref, fireFollow }) {
  checkSafeUrl("SideNavigation", definition.href);
  const onClick = (0, import_react354.useCallback)((event) => {
    if (isPlainLeftClick(event)) {
      fireFollow(definition, event);
    }
  }, [fireFollow, definition]);
  const clickActionAnalyticsMetadata = {
    action: "click",
    detail: {
      label: `.${styles_css_default137["header-link-text"]}`,
      external: "false",
      href: definition.href,
      position: "header"
    }
  };
  return import_react354.default.createElement(
    import_react354.default.Fragment,
    null,
    import_react354.default.createElement(
      "h2",
      { className: styles_css_default138.header },
      import_react354.default.createElement(
        "a",
        Object.assign({ href: definition.href, className: clsx_m_default(styles_css_default138["header-link"], { [styles_css_default138["header-link--has-logo"]]: !!definition.logo }), "aria-current": definition.href === activeHref ? "page" : void 0, onClick }, getAnalyticsMetadataAttribute(clickActionAnalyticsMetadata)),
        definition.logo && import_react354.default.createElement("img", Object.assign({ className: clsx_m_default(styles_css_default138["header-logo"], {
          [styles_css_default138["header-logo--stretched"]]: !definition.text
        }) }, definition.logo)),
        import_react354.default.createElement("span", { className: clsx_m_default(styles_css_default138["header-link-text"], styles_css_default137["header-link-text"]) }, definition.text)
      )
    ),
    import_react354.default.createElement(Divider, { isPresentational: true, variant: "header" })
  );
}
function NavigationItemsList({ items, variant, activeHref, fireChange, fireFollow, position = "" }) {
  const lists = [];
  let currentListIndex = 0;
  lists[currentListIndex] = {
    listVariant: variant,
    items: []
  };
  items.forEach((item, index) => {
    var _a, _b, _c, _d, _e;
    const itemid = index + 1;
    const itemPosition = `${position ? `${position},` : ""}${itemid}`;
    switch (item.type) {
      case "divider": {
        const dividerIndex = lists.length;
        lists[dividerIndex] = {
          element: import_react354.default.createElement(
            "div",
            { "data-itemid": `item-${itemid}` },
            import_react354.default.createElement(Divider, { variant: "default" })
          )
        };
        currentListIndex = lists.length;
        lists[currentListIndex] = {
          listVariant: variant,
          items: []
        };
        return;
      }
      case "link": {
        (_a = lists[currentListIndex].items) === null || _a === void 0 ? void 0 : _a.push({
          element: import_react354.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default138["list-item"] },
            import_react354.default.createElement(Link2, { definition: item, activeHref, fireChange, fireFollow, position: itemPosition })
          )
        });
        return;
      }
      case "section": {
        (_b = lists[currentListIndex].items) === null || _b === void 0 ? void 0 : _b.push({
          element: import_react354.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default138["list-item"] },
            import_react354.default.createElement(Section, { definition: item, activeHref, variant, fireChange, fireFollow, position: itemPosition })
          )
        });
        return;
      }
      case "section-group": {
        (_c = lists[currentListIndex].items) === null || _c === void 0 ? void 0 : _c.push({
          element: import_react354.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default138["list-item"] },
            import_react354.default.createElement(SectionGroup, { definition: item, activeHref, fireChange, fireFollow, position: itemPosition })
          )
        });
        return;
      }
      case "link-group": {
        (_d = lists[currentListIndex].items) === null || _d === void 0 ? void 0 : _d.push({
          element: import_react354.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default138["list-item"] },
            import_react354.default.createElement(LinkGroup, { definition: item, activeHref, fireChange, fireFollow, position: itemPosition })
          )
        });
        return;
      }
      case "expandable-link-group": {
        (_e = lists[currentListIndex].items) === null || _e === void 0 ? void 0 : _e.push({
          element: import_react354.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default138["list-item"] },
            import_react354.default.createElement(ExpandableLinkGroup, { definition: item, activeHref, fireChange, fireFollow, variant, position: itemPosition })
          )
        });
        return;
      }
    }
  });
  return import_react354.default.createElement(import_react354.default.Fragment, null, lists.map((list, index) => {
    if (!list.items || list.items.length === 0) {
      return import_react354.default.createElement("div", { key: `hr-${index}`, className: clsx_m_default(styles_css_default138.list, styles_css_default138[`list-variant-${variant}`], {
        [styles_css_default138["list-variant-root--first"]]: list.listVariant === "root" && index === 0
      }) }, list.element);
    } else {
      return import_react354.default.createElement("ul", { key: `list-${index}`, className: clsx_m_default(styles_css_default138.list, styles_css_default138[`list-variant-${list.listVariant}`], {
        [styles_css_default138["list-variant-root--first"]]: list.listVariant === "root" && index === 0
      }) }, list.items.map((item) => item.element));
    }
  }));
}
function Divider({ variant = "default", isPresentational = false }) {
  return import_react354.default.createElement("hr", { className: clsx_m_default(styles_css_default138.divider, styles_css_default138[`divider-${variant}`]), role: isPresentational ? "presentation" : void 0 });
}
function Link2({ definition, expanded, activeHref, fireFollow, position }) {
  checkSafeUrl("SideNavigation", definition.href);
  const isActive = definition.href === activeHref;
  const onClick = (0, import_react354.useCallback)((event) => {
    if (isPlainLeftClick(event)) {
      fireFollow(definition, event);
    }
  }, [fireFollow, definition]);
  const clickActionAnalyticsMetadata = {
    action: "click",
    detail: {
      label: `.${styles_css_default137["link-text"]}`,
      external: `${!!definition.external}`,
      href: definition.href,
      position
    }
  };
  return import_react354.default.createElement(
    import_react354.default.Fragment,
    null,
    import_react354.default.createElement(
      "a",
      Object.assign({ href: definition.href, className: clsx_m_default(styles_css_default138.link, { [styles_css_default138["link-active"]]: isActive }), target: definition.external ? "_blank" : void 0, rel: definition.external ? "noopener noreferrer" : void 0, "aria-expanded": expanded, "aria-current": definition.href === activeHref ? "page" : void 0, onClick }, getAnalyticsMetadataAttribute(clickActionAnalyticsMetadata)),
      import_react354.default.createElement("span", { className: styles_css_default137["link-text"] }, definition.text),
      definition.external && import_react354.default.createElement(
        "span",
        { "aria-label": definition.externalIconAriaLabel, role: definition.externalIconAriaLabel ? "img" : void 0 },
        import_react354.default.createElement(internal_default, { name: "external", className: styles_css_default138["external-icon"] })
      )
    ),
    definition.info && import_react354.default.createElement("span", { className: clsx_m_default(styles_css_default138.info, styles_css_default139.info) }, definition.info)
  );
}
function Section({ definition, activeHref, fireFollow, fireChange, variant, position }) {
  var _a;
  const [expanded, setExpanded] = (0, import_react354.useState)((_a = definition.defaultExpanded) !== null && _a !== void 0 ? _a : true);
  const isVisualRefresh = useVisualRefresh();
  const onExpandedChange = (0, import_react354.useCallback)((e3) => {
    fireChange(definition, e3.detail.expanded);
    setExpanded(e3.detail.expanded);
  }, [definition, fireChange]);
  (0, import_react354.useEffect)(() => {
    var _a2;
    setExpanded((_a2 = definition.defaultExpanded) !== null && _a2 !== void 0 ? _a2 : true);
  }, [definition]);
  return import_react354.default.createElement(
    InternalExpandableSection,
    { variant: "footer", expanded, onChange: onExpandedChange, className: clsx_m_default(styles_css_default138.section, variant === "section-group" && styles_css_default138["section--no-ident"], isVisualRefresh && styles_css_default138.refresh), headerText: definition.text },
    import_react354.default.createElement(NavigationItemsList, { variant: "section", items: definition.items, fireFollow, fireChange, activeHref, position })
  );
}
function SectionGroup({ definition, activeHref, fireFollow, fireChange, position }) {
  return import_react354.default.createElement(
    "div",
    { className: styles_css_default138["section-group"] },
    import_react354.default.createElement(InternalBox, { className: styles_css_default138["section-group-title"], variant: "h3" }, definition.title),
    import_react354.default.createElement(NavigationItemsList, { variant: "section-group", items: definition.items, fireFollow, fireChange, activeHref, position })
  );
}
function LinkGroup({ definition, activeHref, fireFollow, fireChange, position }) {
  checkSafeUrl("SideNavigation", definition.href);
  return import_react354.default.createElement(
    import_react354.default.Fragment,
    null,
    import_react354.default.createElement(Link2, { definition: { type: "link", href: definition.href, text: definition.text, info: definition.info }, fireFollow: (_, event) => fireFollow(definition, event), fireChange, activeHref, position }),
    import_react354.default.createElement(NavigationItemsList, { variant: "link-group", items: definition.items, fireFollow, fireChange, activeHref, position })
  );
}
function ExpandableLinkGroup({ definition, fireFollow, fireChange, activeHref, variant, position }) {
  const containsActiveLink = (0, import_react354.useMemo)(() => {
    return activeHref ? hasActiveLink(definition.items, activeHref) : false;
  }, [activeHref, definition.items]);
  const [expanded, setExpanded] = (0, import_react354.useState)(() => {
    var _a;
    return (_a = definition.defaultExpanded) !== null && _a !== void 0 ? _a : definition.href === activeHref || containsActiveLink;
  });
  const [userExpanded, setUserExpanded] = (0, import_react354.useState)();
  (0, import_react354.useEffect)(() => setUserExpanded(void 0), [definition]);
  (0, import_react354.useEffect)(() => {
    setExpanded(definition.href === activeHref || containsActiveLink);
  }, [definition.href, containsActiveLink, activeHref]);
  (0, import_react354.useEffect)(() => {
    if (definition.defaultExpanded !== void 0) {
      setExpanded(definition.defaultExpanded);
    }
  }, [definition]);
  const onExpandedChange = (0, import_react354.useCallback)((e3) => {
    fireChange(definition, e3.detail.expanded);
    setUserExpanded(e3.detail.expanded);
  }, [definition, fireChange]);
  const onHeaderFollow = (_, event) => {
    fireFollow(definition, event);
    setUserExpanded(true);
    if (!expanded) {
      fireChange(definition, true);
    }
  };
  return import_react354.default.createElement(
    InternalExpandableSection,
    { className: clsx_m_default(styles_css_default138["expandable-link-group"], variant === "section-group" && styles_css_default138["expandable-link-group--no-ident"]), variant: "navigation", expanded: userExpanded !== null && userExpanded !== void 0 ? userExpanded : expanded, onChange: onExpandedChange, headerText: import_react354.default.createElement(Link2, { definition: { type: "link", href: definition.href, text: definition.text }, expanded: userExpanded !== null && userExpanded !== void 0 ? userExpanded : expanded, fireFollow: onHeaderFollow, fireChange, activeHref, position }) },
    import_react354.default.createElement(NavigationItemsList, { variant: "expandable-link-group", items: definition.items, fireFollow, fireChange, activeHref, position })
  );
}

// node_modules/@cloudscape-design/components/side-navigation/implementation.js
function SideNavigationImplementation(_a) {
  var { header, itemsControl, activeHref, items = [], onFollow, onChange, __internalRootRef } = _a, props2 = __rest(_a, ["header", "itemsControl", "activeHref", "items", "onFollow", "onChange", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  const isToolbar = useAppLayoutToolbarDesignEnabled();
  const parentMap = (0, import_react355.useMemo)(() => generateExpandableItemsMapping(items), [items]);
  if (isDevelopment2) {
    (0, import_react355.useEffect)(() => checkDuplicateHrefs(items), [items]);
  }
  const onChangeHandler = (0, import_react355.useCallback)((item, expanded) => {
    fireNonCancelableEvent(onChange, { item, expanded, expandableParents: parentMap.get(item) });
  }, [onChange, parentMap]);
  const onFollowHandler = (0, import_react355.useCallback)((item, sourceEvent) => {
    fireCancelableEvent(onFollow, item, sourceEvent);
  }, [onFollow]);
  return import_react355.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default138.root, baseProps.className, isToolbar && styles_css_default138["with-toolbar"]), ref: __internalRootRef }),
    header && import_react355.default.createElement(Header3, { definition: header, activeHref, fireChange: onChangeHandler, fireFollow: onFollowHandler }),
    itemsControl && import_react355.default.createElement("div", { className: styles_css_default138["items-control"] }, itemsControl),
    items && import_react355.default.createElement(
      "div",
      { className: styles_css_default138["list-container"] },
      import_react355.default.createElement(NavigationItemsList, { variant: "root", items, fireFollow: onFollowHandler, fireChange: onChangeHandler, activeHref })
    )
  );
}
var createWidgetizedSideNavigation = createWidgetizedComponent(SideNavigationImplementation);

// node_modules/@cloudscape-design/components/side-navigation/internal.js
var InternalSideNavigation = createWidgetizedSideNavigation();

// node_modules/@cloudscape-design/components/side-navigation/index.js
function SideNavigation(_a) {
  var { items = [] } = _a, props2 = __rest(_a, ["items"]);
  const internalProps = useBaseComponent("SideNavigation");
  const componentAnalyticMetadata = {
    name: "awsui.SideNavigation",
    label: `.${styles_css_default137["header-link-text"]}`,
    properties: {
      activeHref: props2.activeHref || ""
    }
  };
  return import_react356.default.createElement(InternalSideNavigation, Object.assign({}, props2, internalProps, { items }, getAnalyticsMetadataAttribute({ component: componentAnalyticMetadata })));
}
applyDisplayName(SideNavigation, "SideNavigation");

// node_modules/@cloudscape-design/components/slider/index.js
var import_react360 = __toESM(require_react());

// node_modules/@cloudscape-design/components/slider/internal.js
var import_react359 = __toESM(require_react());

// node_modules/@cloudscape-design/components/slider/slider-labels.js
var import_react357 = __toESM(require_react());

// node_modules/@cloudscape-design/components/slider/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/slider/styles.scoped.css";
var styles_css_default140 = {
  "root": "awsui_root_pcgz5_e5qio_153",
  "slider": "awsui_slider_pcgz5_e5qio_190",
  "slider-track": "awsui_slider-track_pcgz5_e5qio_194",
  "slider-range": "awsui_slider-range_pcgz5_e5qio_194",
  "disabled": "awsui_disabled_pcgz5_e5qio_209",
  "readonly": "awsui_readonly_pcgz5_e5qio_213",
  "error": "awsui_error_pcgz5_e5qio_222",
  "warning": "awsui_warning_pcgz5_e5qio_225",
  "active": "awsui_active_pcgz5_e5qio_228",
  "error-active": "awsui_error-active_pcgz5_e5qio_231",
  "warning-active": "awsui_warning-active_pcgz5_e5qio_234",
  "labels": "awsui_labels_pcgz5_e5qio_245",
  "labels-noref": "awsui_labels-noref_pcgz5_e5qio_251",
  "labels-reference": "awsui_labels-reference_pcgz5_e5qio_254",
  "labels-min": "awsui_labels-min_pcgz5_e5qio_261",
  "labels-max": "awsui_labels-max_pcgz5_e5qio_267",
  "labels-aria-description": "awsui_labels-aria-description_pcgz5_e5qio_275",
  "ticks": "awsui_ticks_pcgz5_e5qio_293",
  "ticks-wrapper": "awsui_ticks-wrapper_pcgz5_e5qio_299",
  "tick": "awsui_tick_pcgz5_e5qio_293",
  "middle": "awsui_middle_pcgz5_e5qio_314",
  "filled": "awsui_filled_pcgz5_e5qio_317",
  "tooltip-thumb": "awsui_tooltip-thumb_pcgz5_e5qio_345",
  "thumb": "awsui_thumb_pcgz5_e5qio_358",
  "min": "awsui_min_pcgz5_e5qio_394",
  "max": "awsui_max_pcgz5_e5qio_397"
};

// node_modules/@cloudscape-design/components/slider/slider-labels.js
function SliderLabels({ min: min3, max: max3, referenceValues, valueFormatter, labelsId, ariaDescription }) {
  const isMobile = useMobile();
  const MAX_LABEL_COUNT = isMobile ? 4 : 10;
  const minDistance = (max3 - min3) / MAX_LABEL_COUNT;
  const getVisibleReferenceValues = () => {
    if (!referenceValues || referenceValues.length === 0) {
      return [];
    }
    const values = [];
    let lastValue = min3;
    for (let i2 = 0; i2 <= referenceValues.length; i2++) {
      if (referenceValues[i2] > min3 && referenceValues[i2] < max3 && Math.abs(referenceValues[i2] - lastValue) >= minDistance && Math.abs(max3 - referenceValues[i2]) >= minDistance && Number.isInteger(referenceValues[i2])) {
        values.push(referenceValues[i2]);
        lastValue = referenceValues[i2];
      }
    }
    return values;
  };
  function getLabelPosition(index) {
    const colSpan = Math.floor(minDistance / 2);
    const positionStart = index - colSpan;
    const positionEnd = index + colSpan;
    const hasSmallRange = max3 - min3 <= MAX_LABEL_COUNT;
    if (hasSmallRange) {
      return {
        min: 1,
        max: (max3 - min3) * 2 - 1,
        posStart: (index - min3) * 2,
        posEnd: (index - min3) * 2
      };
    }
    const roundedHalfCol = Math.round(colSpan / 2);
    return {
      min: colSpan * 2 + roundedHalfCol,
      max: (max3 - min3 - colSpan) * 2 - roundedHalfCol + 1,
      // add one to center the label
      posStart: (positionStart - min3) * 2 + 1 + roundedHalfCol,
      posEnd: (positionEnd - min3) * 2 - roundedHalfCol
    };
  }
  return import_react357.default.createElement(
    import_react357.default.Fragment,
    null,
    import_react357.default.createElement(
      "div",
      { role: "list", "aria-hidden": !valueFormatter && !referenceValues ? "true" : void 0, className: clsx_m_default(styles_css_default140.labels, {
        [styles_css_default140["labels-noref"]]: getVisibleReferenceValues().length === 0
      }), style: {
        [custom_css_properties_default.sliderLabelCount]: getVisibleReferenceValues().length === 0 ? 2 : (max3 - min3) * 2
      }, id: !ariaDescription ? labelsId : void 0 },
      import_react357.default.createElement("span", { role: "listitem", className: clsx_m_default(styles_css_default140.label, styles_css_default140["labels-min"]), style: {
        [custom_css_properties_default.sliderMinEnd]: getLabelPosition(0).min
      } }, valueFormatter ? valueFormatter(min3) : min3),
      getVisibleReferenceValues().map((step2) => {
        return import_react357.default.createElement("span", { role: "listitem", key: step2, style: {
          [custom_css_properties_default.sliderReferenceColumn]: getLabelPosition(step2).posStart,
          [custom_css_properties_default.sliderNextReferenceColumn]: getLabelPosition(step2).posEnd
        }, className: clsx_m_default(styles_css_default140.label, styles_css_default140["labels-reference"]) }, valueFormatter ? valueFormatter(step2) : step2);
      }),
      import_react357.default.createElement("span", { role: "listitem", className: clsx_m_default(styles_css_default140.label, styles_css_default140["labels-max"]), style: {
        [custom_css_properties_default.sliderMaxStart]: !referenceValues ? 2 : getLabelPosition(0).max
      } }, valueFormatter ? valueFormatter(max3) : max3)
    ),
    ariaDescription && import_react357.default.createElement("div", { className: styles_css_default140["labels-aria-description"], id: labelsId }, ariaDescription)
  );
}

// node_modules/@cloudscape-design/components/slider/tick-marks.js
var import_react358 = __toESM(require_react());

// node_modules/@cloudscape-design/components/slider/utils.js
function getPercent(value, range3) {
  return (value - range3[0]) / (range3[1] - range3[0]) * 100;
}
function countDecimals(value) {
  var _a;
  if (Math.floor(value) === value) {
    return 0;
  }
  const str = Math.abs(value).toString();
  if (str.indexOf("-") !== -1) {
    return parseInt(str.split("-")[1], 10) || 0;
  }
  return ((_a = str.split(".")[1]) === null || _a === void 0 ? void 0 : _a.length) || 0;
}
var getStepArray = (step2, [min3, max3]) => {
  const steps = [min3];
  const multiplier = Math.pow(10, countDecimals(step2));
  let currentStep = min3;
  while (currentStep < max3) {
    currentStep = (multiplier * currentStep + multiplier * step2) / multiplier;
    if (currentStep <= max3) {
      steps.push(currentStep);
    }
  }
  return steps;
};
var findLowerAndHigherValues = (array, value) => {
  let sortedArray = [...array];
  sortedArray = sortedArray.sort((a4, b2) => a4 - b2);
  const index = sortedArray.indexOf(value) || 0;
  const lower = sortedArray[index - 1] || void 0;
  const higher = sortedArray[index + 1] || void 0;
  return { lower, higher };
};
var valuesAreValid = (referenceValues) => {
  const valuesWithDecimals = referenceValues === null || referenceValues === void 0 ? void 0 : referenceValues.filter((value) => !Number.isInteger(value));
  return valuesWithDecimals.length === 0;
};
var THUMB_SIZE = 16;
var THUMB_READONLY_SIZE = 12;

// node_modules/@cloudscape-design/components/slider/tick-marks.js
function TickMark(props2) {
  const { hideFillLine, value, isActive, invalid, warning, disabled, type, min: min3, max: max3, step: step2, readOnly } = props2;
  const showWarning = warning && !invalid;
  const getType = () => {
    if (type === "min") {
      return min3;
    }
    if (type === "max") {
      return max3;
    }
    return step2;
  };
  return import_react358.default.createElement("div", { className: clsx_m_default(styles_css_default140.tick, {
    [styles_css_default140.filled]: !hideFillLine && value > getType(),
    [styles_css_default140.active]: !hideFillLine && isActive && value > getType(),
    [styles_css_default140.error]: invalid && !hideFillLine && value > getType(),
    [styles_css_default140.warning]: showWarning && !hideFillLine && value > getType(),
    [styles_css_default140["error-active"]]: invalid && isActive && !hideFillLine && value > getType(),
    [styles_css_default140["warning-active"]]: showWarning && isActive && !hideFillLine && value > getType(),
    [styles_css_default140.disabled]: disabled,
    [styles_css_default140.readonly]: readOnly,
    [styles_css_default140.middle]: type === "step"
  }) });
}
function SliderTickMarks(props2) {
  const { min: min3, max: max3, step: step2 } = props2;
  return import_react358.default.createElement(
    "div",
    { className: styles_css_default140["ticks-wrapper"] },
    import_react358.default.createElement(TickMark, Object.assign({}, props2, { type: "min" })),
    import_react358.default.createElement("div", { className: styles_css_default140.ticks, style: {
      [custom_css_properties_default.sliderTickCount]: Math.round((max3 - min3) / step2)
    } }, getStepArray(step2, [min3, max3]).map((step3, index) => import_react358.default.createElement(TickMark, Object.assign({}, props2, { type: "step", step: step3, key: `step-${index}` })))),
    import_react358.default.createElement(TickMark, Object.assign({}, props2, { type: "max" }))
  );
}

// node_modules/@cloudscape-design/components/slider/internal.js
function InternalSlider(_a) {
  var { value, min: min3, max: max3, onChange, step: step2, disabled, readOnly, ariaLabel, ariaDescription, referenceValues, tickMarks, hideFillLine, valueFormatter, i18nStrings, __internalRootRef = null } = _a, rest = __rest(_a, ["value", "min", "max", "onChange", "step", "disabled", "readOnly", "ariaLabel", "ariaDescription", "referenceValues", "tickMarks", "hideFillLine", "valueFormatter", "i18nStrings", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("slider");
  const handleRef = (0, import_react359.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react359.useState)(false);
  const [isActive, setIsActive] = (0, import_react359.useState)(false);
  const labelsId = useUniqueId("labels");
  const { ariaLabelledby, ariaDescribedby, controlId, invalid, warning } = useFormFieldContext(rest);
  const showWarning = warning && !invalid;
  if (referenceValues && valuesAreValid(referenceValues) === false) {
    warnOnce("Slider", "All reference values must be integers. Non-integer values will not be displayed.");
  }
  if (min3 >= max3) {
    warnOnce("Slider", "The min value cannot be greater than the max value.");
  }
  if (step2 && step2 > max3 - min3) {
    warnOnce("Slider", "The step value cannot be greater than the difference between the min and max.");
  }
  if (step2 && value !== void 0 && (value - min3) % step2 !== 0) {
    warnOnce("Slider", "Slider value must be a multiple of the step. The value will round to the nearest step value.");
  }
  const getValue = () => {
    const stepIsValid = step2 && step2 < max3 - min3 && step2 > min3;
    if (value === void 0) {
      return max3 < min3 ? min3 : min3 + (max3 - min3) / 2;
    }
    if (!step2) {
      return value;
    }
    if (step2 && stepIsValid && (value - min3) % step2 !== 0) {
      const closest = getStepArray(step2, [min3, max3]).reduce(function(prev, curr) {
        return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;
      });
      return closest;
    }
    return value;
  };
  const sliderValue = getValue();
  const percent = getPercent(Math.max(Math.min(sliderValue, max3), min3), [min3, max3]);
  const getAriaValueText = () => {
    if (valueFormatter && valueFormatter(sliderValue)) {
      return valueFormatter(sliderValue);
    }
    if (valueFormatter && !valueFormatter(sliderValue)) {
      const middleValues = referenceValues ? referenceValues : [];
      const valueArray = [min3, ...middleValues, sliderValue, max3];
      const prevAndNext = findLowerAndHigherValues(valueArray, sliderValue);
      const previousValue = prevAndNext.lower ? valueFormatter(prevAndNext.lower) : valueFormatter(min3);
      const nextValue = prevAndNext.higher ? valueFormatter(prevAndNext.higher) : valueFormatter(max3);
      const value2 = sliderValue;
      return i18n("i18nStrings.valueTextRange", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valueTextRange(previousValue, value2, nextValue), (format3) => format3({ value: value2, previousValue, nextValue }));
    }
    return void 0;
  };
  const thumbSize = readOnly ? THUMB_READONLY_SIZE : THUMB_SIZE;
  return import_react359.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default140.root) }),
    import_react359.default.createElement(
      "div",
      { onMouseEnter: () => {
        setShowTooltip(true);
      }, onMouseLeave: () => {
        setShowTooltip(false);
      } },
      showTooltip && import_react359.default.createElement(Tooltip, { value: valueFormatter ? valueFormatter(sliderValue) : sliderValue, trackRef: handleRef, onDismiss: () => setShowTooltip(false) }),
      import_react359.default.createElement("div", { ref: handleRef, className: clsx_m_default(styles_css_default140["tooltip-thumb"], {
        [styles_css_default140.readonly]: readOnly
      }), style: {
        [custom_css_properties_default.sliderTooltipPosition]: `calc(${percent}% - ${thumbSize}px)`
      } }),
      import_react359.default.createElement(
        "div",
        { className: styles_css_default140.slider },
        import_react359.default.createElement("div", { className: clsx_m_default(styles_css_default140["slider-track"], {
          [styles_css_default140.disabled]: disabled,
          [styles_css_default140.readonly]: readOnly
        }) }),
        !hideFillLine && import_react359.default.createElement("div", { className: clsx_m_default(styles_css_default140["slider-range"], {
          [styles_css_default140.error]: invalid,
          [styles_css_default140.warning]: showWarning,
          [styles_css_default140.active]: isActive,
          [styles_css_default140["error-active"]]: invalid && isActive,
          [styles_css_default140["warning-active"]]: showWarning && isActive,
          [styles_css_default140.disabled]: disabled,
          [styles_css_default140.readonly]: readOnly
        }), style: { [custom_css_properties_default.sliderRangeInlineSize]: `${percent}%` } })
      ),
      !!step2 && tickMarks && import_react359.default.createElement(SliderTickMarks, { hideFillLine, disabled, readOnly, invalid, warning, isActive, step: step2, min: min3, max: max3, value: sliderValue }),
      import_react359.default.createElement("input", {
        // we need to add this because input[type=range] isn't natively focusable in Safari.
        tabIndex: 0,
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabel && !rest.ariaLabelledby ? void 0 : ariaLabelledby,
        "aria-describedby": valueFormatter ? ariaDescribedby ? `${labelsId} ${ariaDescribedby}` : labelsId : ariaDescribedby,
        "aria-valuetext": getAriaValueText(),
        "aria-invalid": invalid ? "true" : void 0,
        "aria-disabled": readOnly && !disabled ? "true" : void 0,
        id: controlId,
        type: "range",
        min: min3,
        max: max3,
        disabled,
        onFocus: () => {
          setShowTooltip(true);
          setIsActive(true);
        },
        onBlur: () => {
          setShowTooltip(false);
          setIsActive(false);
        },
        onTouchStart: () => {
          setShowTooltip(true);
          setIsActive(true);
        },
        onTouchEnd: () => {
          setShowTooltip(false);
          setIsActive(false);
        },
        step: step2,
        value: sliderValue,
        onChange: (event) => {
          if (readOnly) {
            return;
          }
          fireNonCancelableEvent(onChange, { value: Number(event.target.value) });
        },
        className: clsx_m_default(styles_css_default140.thumb, {
          [styles_css_default140.error]: invalid,
          [styles_css_default140.warning]: showWarning,
          [styles_css_default140.disabled]: disabled,
          [styles_css_default140.readonly]: readOnly,
          [styles_css_default140.min]: sliderValue <= min3 || max3 < min3,
          [styles_css_default140.max]: sliderValue >= max3 && min3 < max3
        })
      })
    ),
    import_react359.default.createElement(SliderLabels, { min: min3, max: max3, referenceValues, valueFormatter, labelsId, ariaDescription })
  );
}

// node_modules/@cloudscape-design/components/slider/index.js
function Slider(_a) {
  var { tickMarks, hideFillLine } = _a, props2 = __rest(_a, ["tickMarks", "hideFillLine"]);
  const baseComponentProps = useBaseComponent("Slider", {
    props: { tickMarks, hideFillLine, readOnly: props2.readOnly }
  });
  return import_react360.default.createElement(InternalSlider, Object.assign({ tickMarks, hideFillLine }, props2, baseComponentProps));
}
applyDisplayName(Slider, "Slider");

// node_modules/@cloudscape-design/components/spinner/index.js
var import_react361 = __toESM(require_react());
function Spinner(_a) {
  var { size = "normal", variant = "normal" } = _a, props2 = __rest(_a, ["size", "variant"]);
  const baseComponentProps = useBaseComponent("Spinner", {
    props: { size, variant }
  });
  return import_react361.default.createElement(InternalSpinner, Object.assign({ size, variant }, props2, baseComponentProps));
}
applyDisplayName(Spinner, "Spinner");

// node_modules/@cloudscape-design/components/split-panel/index.js
var import_react372 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/implementation.js
var import_react371 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/bottom.js
var import_react362 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/split-panel/styles.scoped.css";
var styles_css_default141 = {
  "drawer": "awsui_drawer_1r9lg_8gnrx_153",
  "drawer-closed": "awsui_drawer-closed_1r9lg_8gnrx_190",
  "refresh": "awsui_refresh_1r9lg_8gnrx_190",
  "drawer-content-side": "awsui_drawer-content-side_1r9lg_8gnrx_195",
  "drawer-content-bottom": "awsui_drawer-content-bottom_1r9lg_8gnrx_211",
  "position-bottom": "awsui_position-bottom_1r9lg_8gnrx_218",
  "hidden": "awsui_hidden_1r9lg_8gnrx_226",
  "position-side": "awsui_position-side_1r9lg_8gnrx_247",
  "with-toolbar": "awsui_with-toolbar_1r9lg_8gnrx_252",
  "slider-wrapper-bottom": "awsui_slider-wrapper-bottom_1r9lg_8gnrx_256",
  "slider-wrapper-side": "awsui_slider-wrapper-side_1r9lg_8gnrx_267",
  "open-button-side": "awsui_open-button-side_1r9lg_8gnrx_281",
  "pane-header-wrapper-bottom": "awsui_pane-header-wrapper-bottom_1r9lg_8gnrx_290",
  "drawer-mobile": "awsui_drawer-mobile_1r9lg_8gnrx_300",
  "drawer-disable-content-paddings": "awsui_drawer-disable-content-paddings_1r9lg_8gnrx_304",
  "content-bottom": "awsui_content-bottom_1r9lg_8gnrx_316",
  "pane-bottom-center-align": "awsui_pane-bottom-center-align_1r9lg_8gnrx_335",
  "pane-bottom-content-nav-padding": "awsui_pane-bottom-content-nav-padding_1r9lg_8gnrx_340",
  "pane-bottom-content-tools-padding": "awsui_pane-bottom-content-tools-padding_1r9lg_8gnrx_344",
  "content-bottom-max-width": "awsui_content-bottom-max-width_1r9lg_8gnrx_348",
  "content-side": "awsui_content-side_1r9lg_8gnrx_353",
  "pane-header-wrapper-side": "awsui_pane-header-wrapper-side_1r9lg_8gnrx_365",
  "pane-content-wrapper-side": "awsui_pane-content-wrapper-side_1r9lg_8gnrx_374",
  "header": "awsui_header_1r9lg_8gnrx_385",
  "header-text": "awsui_header-text_1r9lg_8gnrx_398",
  "header-actions": "awsui_header-actions_1r9lg_8gnrx_411",
  "divider": "awsui_divider_1r9lg_8gnrx_419"
};

// node_modules/@cloudscape-design/components/split-panel/bottom.js
function SplitPanelContentBottom({ closeBehavior, baseProps, isOpen, splitPanelRef, cappedSize, header, resizeHandle, children, appLayoutMaxWidth, panelHeaderId, onToggle }) {
  const isRefresh = useVisualRefresh();
  const isToolbar = useAppLayoutToolbarDesignEnabled();
  const { bottomOffset, leftOffset, rightOffset, disableContentPaddings, contentWrapperPaddings, reportHeaderHeight, headerHeight: headerBlockSize, animationDisabled } = useSplitPanelContext();
  const isMobile = useMobile();
  const headerRef = (0, import_react362.useRef)(null);
  useResizeObserver(headerRef, (entry) => {
    const visibleHeaderSize = closeBehavior === "hide" && !isOpen ? 0 : entry.borderBoxHeight;
    reportHeaderHeight(visibleHeaderSize);
  });
  (0, import_react362.useEffect)(() => {
    return () => reportHeaderHeight(0);
  }, []);
  const centeredMaxWidthClasses = clsx_m_default({
    [styles_css_default141["pane-bottom-center-align"]]: isRefresh,
    [styles_css_default141["pane-bottom-content-nav-padding"]]: contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedNav,
    [styles_css_default141["pane-bottom-content-tools-padding"]]: contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedTools
  });
  return import_react362.default.createElement("div", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default141.drawer, styles_css_default141["position-bottom"], styles_css_default34.root, {
    [styles_css_default28["with-motion-vertical"]]: !animationDisabled,
    [styles_css_default34["open-position-bottom"]]: isOpen,
    [styles_css_default141["drawer-closed"]]: !isOpen,
    [styles_css_default141["drawer-mobile"]]: isMobile,
    [styles_css_default141["drawer-disable-content-paddings"]]: disableContentPaddings,
    [styles_css_default141.refresh]: isRefresh,
    [styles_css_default141["with-toolbar"]]: isToolbar,
    [styles_css_default141.hidden]: closeBehavior === "hide" && !isOpen
  }), onClick: () => !isOpen && onToggle(), style: {
    insetBlockEnd: bottomOffset,
    insetInlineStart: leftOffset,
    insetInlineEnd: rightOffset,
    blockSize: isOpen ? cappedSize : closeBehavior === "hide" ? 0 : isToolbar && headerBlockSize !== void 0 ? `calc(${headerBlockSize}px + ${borderPanelTopWidth})` : void 0
  }, ref: splitPanelRef }), closeBehavior === "hide" && !isOpen ? null : import_react362.default.createElement(
    import_react362.default.Fragment,
    null,
    isOpen && import_react362.default.createElement("div", { className: styles_css_default141["slider-wrapper-bottom"] }, resizeHandle),
    import_react362.default.createElement(
      "div",
      { className: styles_css_default141["drawer-content-bottom"], "aria-labelledby": panelHeaderId, role: "region" },
      import_react362.default.createElement("div", { className: clsx_m_default(styles_css_default141["pane-header-wrapper-bottom"], centeredMaxWidthClasses), ref: headerRef }, header),
      import_react362.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default141["content-bottom"], centeredMaxWidthClasses), "aria-hidden": !isOpen },
        import_react362.default.createElement("div", { className: clsx_m_default({ [styles_css_default141["content-bottom-max-width"]]: isRefresh }), style: appLayoutMaxWidth }, children)
      )
    )
  ));
}

// node_modules/@cloudscape-design/components/split-panel/preferences-modal.js
var import_react369 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tiles/internal.js
var import_react364 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tiles/tile.js
var import_react363 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tiles/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/tiles/analytics-metadata/styles.scoped.css";
var styles_css_default142 = {
  "radio-button": "awsui_radio-button_feeqa_1rmzd_5"
};

// node_modules/@cloudscape-design/components/tiles/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/tiles/styles.scoped.css";
var styles_css_default143 = {
  "column-layout": "awsui_column-layout_vj6p7_1p9yl_189",
  "grid": "awsui_grid_vj6p7_1p9yl_221",
  "grid-no-gutters": "awsui_grid-no-gutters_vj6p7_1p9yl_227",
  "grid-variant-text-grid": "awsui_grid-variant-text-grid_vj6p7_1p9yl_231",
  "grid-breakpoint-default": "awsui_grid-breakpoint-default_vj6p7_1p9yl_239",
  "grid-columns-1": "awsui_grid-columns-1_vj6p7_1p9yl_242",
  "grid-breakpoint-xxs": "awsui_grid-breakpoint-xxs_vj6p7_1p9yl_242",
  "grid-breakpoint-xs": "awsui_grid-breakpoint-xs_vj6p7_1p9yl_245",
  "grid-columns-2": "awsui_grid-columns-2_vj6p7_1p9yl_248",
  "grid-columns-3": "awsui_grid-columns-3_vj6p7_1p9yl_254",
  "grid-columns-4": "awsui_grid-columns-4_vj6p7_1p9yl_260",
  "grid-vertical-borders": "awsui_grid-vertical-borders_vj6p7_1p9yl_276",
  "grid-horizontal-borders": "awsui_grid-horizontal-borders_vj6p7_1p9yl_309",
  "root": "awsui_root_vj6p7_1p9yl_359",
  "tile-container": "awsui_tile-container_vj6p7_1p9yl_394",
  "refresh": "awsui_refresh_vj6p7_1p9yl_419",
  "selected": "awsui_selected_vj6p7_1p9yl_423",
  "disabled": "awsui_disabled_vj6p7_1p9yl_423",
  "readonly": "awsui_readonly_vj6p7_1p9yl_423",
  "has-metadata": "awsui_has-metadata_vj6p7_1p9yl_426",
  "columns": "awsui_columns_vj6p7_1p9yl_448",
  "column-1": "awsui_column-1_vj6p7_1p9yl_455",
  "breakpoint-xs": "awsui_breakpoint-xs_vj6p7_1p9yl_462",
  "breakpoint-xxs": "awsui_breakpoint-xxs_vj6p7_1p9yl_466",
  "column-2": "awsui_column-2_vj6p7_1p9yl_470",
  "column-3": "awsui_column-3_vj6p7_1p9yl_485",
  "column-4": "awsui_column-4_vj6p7_1p9yl_500",
  "control": "awsui_control_vj6p7_1p9yl_516",
  "no-image": "awsui_no-image_vj6p7_1p9yl_520",
  "image": "awsui_image_vj6p7_1p9yl_524"
};

// node_modules/@cloudscape-design/components/tiles/tile.js
var Tile = import_react363.default.forwardRef((_a, forwardedRef) => {
  var { item, selected, name, breakpoint, onChange, readOnly } = _a, rest = __rest(_a, ["item", "selected", "name", "breakpoint", "onChange", "readOnly"]);
  const internalRef = (0, import_react363.useRef)(null);
  const isVisualRefresh = useVisualRefresh();
  const mergedRef = useMergeRefs(internalRef, forwardedRef);
  return import_react363.default.createElement(
    "div",
    Object.assign({ className: clsx_m_default(styles_css_default143["tile-container"], { [styles_css_default143["has-metadata"]]: item.description || item.image }, { [styles_css_default143.selected]: selected }, { [styles_css_default143.disabled]: !!item.disabled }, { [styles_css_default143.readonly]: readOnly }, { [styles_css_default143.refresh]: isVisualRefresh }, styles_css_default143[`breakpoint-${breakpoint}`]), "data-value": item.value, onClick: () => {
      var _a2;
      if (item.disabled || readOnly) {
        return;
      }
      (_a2 = internalRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      if (!selected) {
        fireNonCancelableEvent(onChange, { value: item.value });
      }
    } }, copyAnalyticsMetadataAttribute(rest)),
    import_react363.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default143.control, { [styles_css_default143["no-image"]]: !item.image }) },
      import_react363.default.createElement(radio_button_default, { checked: selected, ref: mergedRef, name, value: item.value, label: item.label, description: item.description, disabled: item.disabled, controlId: item.controlId, readOnly, className: styles_css_default142["radio-button"] })
    ),
    item.image && import_react363.default.createElement("div", { className: clsx_m_default(styles_css_default143.image, { [styles_css_default143.disabled]: !!item.disabled }) }, item.image)
  );
});

// node_modules/@cloudscape-design/components/tiles/internal.js
var COLUMN_TRIGGERS2 = ["default", "xxs", "xs"];
var InternalTiles = import_react364.default.forwardRef((_a, ref) => {
  var { name, value, items, ariaLabel, ariaRequired, ariaControls, columns, onChange, readOnly, __internalRootRef = null } = _a, rest = __rest(_a, ["name", "value", "items", "ariaLabel", "ariaRequired", "ariaControls", "columns", "onChange", "readOnly", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);
  const generatedName = useUniqueId("awsui-tiles-");
  const [tileRef, tileRefIndex] = useRadioGroupForwardFocus(ref, items, value);
  const [breakpoint, breakpointRef] = useContainerBreakpoints(COLUMN_TRIGGERS2);
  const mergedRef = useMergeRefs(breakpointRef, __internalRootRef);
  const columnCount = getColumnCount(items, columns);
  return import_react364.default.createElement(
    "div",
    Object.assign({ role: "radiogroup", "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "aria-required": ariaRequired, "aria-controls": ariaControls, "aria-readonly": readOnly ? "true" : void 0 }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default143.root), ref: mergedRef }),
    import_react364.default.createElement("div", { className: clsx_m_default(styles_css_default143.columns, styles_css_default143[`column-${columnCount}`]) }, items && items.map((item, index) => import_react364.default.createElement(Tile, Object.assign({ ref: index === tileRefIndex ? tileRef : void 0, key: item.value, item, selected: item.value === value, name: name || generatedName, breakpoint, onChange, readOnly }, !item.disabled && !readOnly ? getAnalyticsMetadataAttribute({
      action: "select",
      detail: {
        position: `${index + 1}`,
        value: item.value,
        label: `.${styles_css_default142["radio-button"]}`
      }
    }) : {}))))
  );
});
function getColumnCount(items, columns) {
  if (columns) {
    return columns;
  }
  const nItems = items ? items.length : 0;
  const columnsLookup = {
    0: 1,
    1: 1,
    2: 2,
    4: 2,
    8: 2
  };
  return columnsLookup[nItems] || 3;
}
var internal_default29 = InternalTiles;

// node_modules/@cloudscape-design/components/split-panel/icons/bottom-icon.js
var import_react365 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/icons/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/split-panel/icons/styles.scoped.css";
var styles_css_default144 = {
  "preference-icon--svg": "awsui_preference-icon--svg_d4xxm_19o1r_145",
  "preference-icon--layout-border": "awsui_preference-icon--layout-border_d4xxm_19o1r_151",
  "preference-icon--layout-background": "awsui_preference-icon--layout-background_d4xxm_19o1r_155",
  "preference-icon--layout-header": "awsui_preference-icon--layout-header_d4xxm_19o1r_158",
  "preference-icon--border": "awsui_preference-icon--border_d4xxm_19o1r_161",
  "preference-icon--primary-button": "awsui_preference-icon--primary-button_d4xxm_19o1r_165",
  "preference-icon--secondary": "awsui_preference-icon--secondary_d4xxm_19o1r_168",
  "preference-icon--disabled-element": "awsui_preference-icon--disabled-element_d4xxm_19o1r_171",
  "preference-icon--separator": "awsui_preference-icon--separator_d4xxm_19o1r_174",
  "preference-icon--focus-text": "awsui_preference-icon--focus-text_d4xxm_19o1r_177",
  "preference-icon-refresh--svg": "awsui_preference-icon-refresh--svg_d4xxm_19o1r_181",
  "preference-icon-refresh--layout-top": "awsui_preference-icon-refresh--layout-top_d4xxm_19o1r_187",
  "preference-icon-refresh--layout-main": "awsui_preference-icon-refresh--layout-main_d4xxm_19o1r_190",
  "preference-icon-refresh--primary": "awsui_preference-icon-refresh--primary_d4xxm_19o1r_193",
  "preference-icon-refresh--disabled": "awsui_preference-icon-refresh--disabled_d4xxm_19o1r_196",
  "preference-icon-refresh--column-header": "awsui_preference-icon-refresh--column-header_d4xxm_19o1r_199",
  "preference-icon-refresh--window": "awsui_preference-icon-refresh--window_d4xxm_19o1r_202",
  "preference-icon-refresh--secondary": "awsui_preference-icon-refresh--secondary_d4xxm_19o1r_206",
  "preference-icon-refresh--default": "awsui_preference-icon-refresh--default_d4xxm_19o1r_209",
  "preference-icon-refresh--separator": "awsui_preference-icon-refresh--separator_d4xxm_19o1r_212",
  "preference-icon-refresh--input-default": "awsui_preference-icon-refresh--input-default_d4xxm_19o1r_215",
  "preference-icon-refresh--heading": "awsui_preference-icon-refresh--heading_d4xxm_19o1r_218"
};

// node_modules/@cloudscape-design/components/split-panel/icons/bottom-icon.js
var bottomPositionIcon = import_react365.default.createElement(
  "svg",
  { className: styles_css_default144["preference-icon--svg"], focusable: "false", viewBox: "0 0 240 134", version: "1.1", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", "aria-hidden": "true" },
  import_react365.default.createElement(
    "g",
    { stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" },
    import_react365.default.createElement(
      "g",
      null,
      import_react365.default.createElement(
        "g",
        null,
        import_react365.default.createElement("rect", { className: styles_css_default144["preference-icon--layout-border"], strokeWidth: "2", x: "1", y: "1", width: "238", height: "125", rx: "2" }),
        import_react365.default.createElement("rect", { className: styles_css_default144["preference-icon--layout-background"], x: "12", y: "0", width: "217", height: "126" }),
        import_react365.default.createElement("path", { className: styles_css_default144["preference-icon--layout-header"], d: "M2,0 L238,0 C239.104569,-1.58997828e-14 240,0.8954305 240,2 L240,10 L240,10 L0,10 L0,2 C-1.3527075e-16,0.8954305 0.8954305,2.02906125e-16 2,0 Z" })
      ),
      import_react365.default.createElement(
        "g",
        { transform: "translate(28.000000, 22.000000)" },
        import_react365.default.createElement("rect", { className: styles_css_default144["preference-icon--border"], strokeWidth: "2", x: "1", y: "1", width: "182", height: "110", rx: "2" }),
        import_react365.default.createElement("rect", { className: styles_css_default144["preference-icon--primary-button"], x: "152", y: "6", width: "26", height: "10" }),
        import_react365.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "122", y: "6", width: "26", height: "10" }),
        import_react365.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "92", y: "6", width: "26", height: "10" }),
        import_react365.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "122", y: "29", width: "55", height: "3" }),
        import_react365.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "92", y: "29", width: "26", height: "3" }),
        import_react365.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "19 29 49 29 49 32 19 32" }),
        import_react365.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "10 10 40 10 40 13 10 13" }),
        import_react365.default.createElement("polygon", { className: styles_css_default144["preference-icon--disabled-element"], points: "10 29 13 29 13 32 10 32" }),
        import_react365.default.createElement("line", { className: styles_css_default144["preference-icon--separator"], x1: "3", y1: "22.7619048", x2: "181", y2: "22.7619048", strokeWidth: "2", strokeLinecap: "square" }),
        import_react365.default.createElement(
          "g",
          { transform: "translate(3.000000, 37.285714)" },
          import_react365.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
          import_react365.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
          import_react365.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
          import_react365.default.createElement("polygon", { className: styles_css_default144["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
          import_react365.default.createElement("line", { className: styles_css_default144["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
        )
      ),
      import_react365.default.createElement(
        "g",
        { transform: "translate(12.000000, 74.000000)" },
        import_react365.default.createElement(
          "g",
          null,
          import_react365.default.createElement("rect", { className: styles_css_default144["preference-icon--border"], strokeWidth: "2", x: "1", y: "1", width: "215", height: "58", rx: "2" }),
          import_react365.default.createElement("rect", { className: styles_css_default144["preference-icon--secondary"], x: "177", y: "8", width: "30.6630435", height: "10" }),
          import_react365.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "10 12 45.3804348 12 45.3804348 15 10 15" })
        ),
        import_react365.default.createElement(
          "g",
          { className: styles_css_default144["preference-icon--secondary"], transform: "translate(9.000000, 40.000000)" },
          import_react365.default.createElement("polygon", { points: "-3.55271368e-15 0 39 0 39 3 -3.55271368e-15 3" }),
          import_react365.default.createElement("polygon", { points: "53 0 92 0 92 3 53 3" }),
          import_react365.default.createElement("polygon", { points: "107 0 146 0 146 3 107 3" }),
          import_react365.default.createElement("polygon", { points: "160 0 199 0 199 3 160 3" }),
          import_react365.default.createElement("polygon", { points: "-3.55271368e-15 9 39 9 39 12 -3.55271368e-15 12" }),
          import_react365.default.createElement("polygon", { points: "53 9 92 9 92 12 53 12" }),
          import_react365.default.createElement("polygon", { points: "107 9 146 9 146 12 107 12" }),
          import_react365.default.createElement("polygon", { points: "160 9 199 9 199 12 160 12" })
        ),
        import_react365.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "10 23 32 23 32 26 10 26" }),
        import_react365.default.createElement("polygon", { className: styles_css_default144["preference-icon--secondary"], points: "40 23 62 23 62 26 40 26" })
      )
    )
  )
);
var bottom_icon_default = bottomPositionIcon;

// node_modules/@cloudscape-design/components/split-panel/icons/bottom-icon-refresh.js
var import_react367 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/icons/side-position-refresh.js
var import_react366 = __toESM(require_react());
var getClassName3 = (suffix) => styles_css_default144[`preference-icon-refresh--${suffix}`];
var TableRow = ({ offset, separator = true, isHeader }) => {
  const offsetTop = 0.4482;
  const offsetBottom = 3.4482;
  return import_react366.default.createElement(
    "g",
    { transform: `translate(0, ${offset})`, className: getClassName3(isHeader ? "column-header" : "disabled") },
    import_react366.default.createElement("path", { d: `M19 ${offsetTop}2H22V${offsetBottom}H19V${offsetTop}Z` }),
    import_react366.default.createElement("path", { d: `M27 ${offsetTop}H51V${offsetBottom}H27V${offsetTop}Z`, className: !isHeader ? getClassName3("secondary") : void 0 }),
    import_react366.default.createElement("path", { d: `M90 ${offsetTop}H110V${offsetBottom}H90V${offsetTop}Z` }),
    import_react366.default.createElement("path", { d: `M113 ${offsetTop}H157V${offsetBottom}H113V${offsetTop}Z` }),
    separator && import_react366.default.createElement("path", { d: "M14 8H159.387", className: getClassName3("separator"), strokeLinecap: "square" })
  );
};
var SidePanelRow = ({ offset }) => {
  return import_react366.default.createElement(
    "g",
    { transform: `translate(0, ${offset})`, className: getClassName3("secondary") },
    import_react366.default.createElement("path", { d: "M177 0H190V3H177V0Z" }),
    import_react366.default.createElement("path", { d: "M195 0H208V3H195V0Z" })
  );
};
var bottomPositionIcon2 = import_react366.default.createElement(
  "svg",
  { className: getClassName3("svg"), focusable: "false", viewBox: "0 0 230 128", version: "1.1", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", "aria-hidden": "true" },
  import_react366.default.createElement("path", { d: "M2 1H214C214.552 1 215 1.44772 215 2V126C215 126.552 214.552 127 214 127H2.00001C1.44772 127 1 126.552 1 126V2C1 1.44772 1.44772 1 2 1Z", className: getClassName3("window"), strokeWidth: "2" }),
  import_react366.default.createElement(
    "g",
    { className: "awsui-context-top-navigation" },
    import_react366.default.createElement("rect", { x: "2", y: "2", width: "212", height: "6", className: getClassName3("layout-top") })
  ),
  import_react366.default.createElement(
    "g",
    null,
    import_react366.default.createElement("path", { d: "M2 8H214V23H2V8Z", className: getClassName3("layout-main") }),
    import_react366.default.createElement(
      "g",
      { className: getClassName3("default") },
      import_react366.default.createElement("path", { d: "M9 15.5C9 16.8807 7.88071 18 6.5 18C5.11929 18 4 16.8807 4 15.5C4 14.1193 5.11929 13 6.5 13C7.88071 13 9 14.1193 9 15.5Z", className: getClassName3("disabled") }),
      import_react366.default.createElement("path", { d: "M16 14H46.1484V17H16V14Z" }),
      import_react366.default.createElement("path", { d: "M92 15.5C92 13.567 93.567 12 95.5 12H108.86C110.793 12 112.36 13.567 112.36 15.5C112.36 17.433 110.793 19 108.86 19H95.5C93.567 19 92 17.433 92 15.5Z" }),
      import_react366.default.createElement("path", { d: "M116 15.5C116 13.567 117.567 12 119.5 12H132.86C134.793 12 136.36 13.567 136.36 15.5C136.36 17.433 134.793 19 132.86 19H119.5C117.567 19 116 17.433 116 15.5Z" }),
      import_react366.default.createElement("path", { d: "M139 15.5C139 13.567 140.567 12 142.5 12H155.86C157.793 12 159.36 13.567 159.36 15.5C159.36 17.433 157.793 19 155.86 19H142.5C140.567 19 139 17.433 139 15.5Z", className: getClassName3("primary") })
    )
  ),
  import_react366.default.createElement(TableRow, { offset: 27, isHeader: true }),
  import_react366.default.createElement(TableRow, { offset: 39 }),
  import_react366.default.createElement(TableRow, { offset: 51 }),
  import_react366.default.createElement(TableRow, { offset: 63 }),
  import_react366.default.createElement(TableRow, { offset: 75 }),
  import_react366.default.createElement(TableRow, { offset: 87 }),
  import_react366.default.createElement(TableRow, { offset: 99 }),
  import_react366.default.createElement(TableRow, { offset: 111, separator: false }),
  import_react366.default.createElement("rect", { x: "166", y: "13", width: "62", height: "108", rx: "5", className: getClassName3("window"), strokeWidth: "2" }),
  import_react366.default.createElement("rect", { x: "169", y: "62", width: "3", height: "8", rx: "1.5", className: getClassName3("input-default") }),
  import_react366.default.createElement("path", { d: "M216 14V120", className: getClassName3("separator") }),
  import_react366.default.createElement(
    "g",
    { className: getClassName3("disabled") },
    import_react366.default.createElement("path", { d: "M224 19.5C224 20.8807 222.881 22 221.5 22C220.119 22 219 20.8807 219 19.5C219 18.1193 220.119 17 221.5 17C222.881 17 224 18.1193 224 19.5Z" }),
    import_react366.default.createElement("path", { d: "M224 27.5C224 28.8807 222.881 30 221.5 30C220.119 30 219 28.8807 219 27.5C219 26.1193 220.119 25 221.5 25C222.881 25 224 26.1193 224 27.5Z" })
  ),
  import_react366.default.createElement("path", { d: "M177 23H191V28H177V23Z", className: getClassName3("heading") }),
  import_react366.default.createElement(
    "g",
    { className: getClassName3("secondary") },
    import_react366.default.createElement("path", { d: "M207 23H212V28H207V23Z" }),
    import_react366.default.createElement("path", { d: "M199 23H204V28H199V23Z" })
  ),
  import_react366.default.createElement(SidePanelRow, { offset: 36 }),
  import_react366.default.createElement(SidePanelRow, { offset: 48 }),
  import_react366.default.createElement(SidePanelRow, { offset: 60 }),
  import_react366.default.createElement(SidePanelRow, { offset: 72 })
);
var side_position_refresh_default = bottomPositionIcon2;

// node_modules/@cloudscape-design/components/split-panel/icons/bottom-icon-refresh.js
var TableRow2 = ({ offset, isHeader }) => {
  const offsetTop = 0.4482;
  const offsetBottom = 3.4482;
  return import_react367.default.createElement(
    "g",
    { transform: `translate(0, ${offset})`, className: getClassName3(isHeader ? "column-header" : "disabled") },
    import_react367.default.createElement("path", { d: `M31 ${offsetTop}H34V${offsetBottom}H31V${offsetTop}Z` }),
    import_react367.default.createElement("path", { d: `M39 ${offsetTop}H63V${offsetBottom}H39V${offsetTop}Z`, className: !isHeader ? getClassName3("secondary") : void 0 }),
    import_react367.default.createElement("path", { d: `M135 ${offsetTop}H155V${offsetBottom}H135V${offsetTop}Z` }),
    import_react367.default.createElement("path", { d: `M158 ${offsetTop}H202V${offsetBottom}H158V${offsetTop}Z` }),
    import_react367.default.createElement("path", { d: "M26 8H204.388", className: getClassName3("separator"), strokeLinecap: "square" })
  );
};
var SidePanelRow2 = ({ offset }) => {
  return import_react367.default.createElement(
    "g",
    { transform: `translate(0, ${offset})`, className: getClassName3("secondary") },
    import_react367.default.createElement("path", { d: "M27 0H59V3H27V0Z" }),
    import_react367.default.createElement("path", { d: "M75 0H107V3H75V0Z" }),
    import_react367.default.createElement("path", { d: "M123 0H155V3H123V0Z" }),
    import_react367.default.createElement("path", { d: "M171 0H203V3H171V0Z" })
  );
};
var bottomPositionIcon3 = import_react367.default.createElement(
  "svg",
  { className: getClassName3("svg"), focusable: "false", viewBox: "0 0 230 128", version: "1.1", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", "aria-hidden": "true" },
  import_react367.default.createElement("path", { d: "M2 1H228C228.552 1 229 1.44772 229 2V117C229 117.552 228.552 118 228 118H2C1.44772 118 1 117.552 1 117V2C1 1.44772 1.44772 1 2 1Z", className: getClassName3("window"), strokeWidth: "2" }),
  import_react367.default.createElement(
    "g",
    { className: "awsui-context-top-navigation" },
    import_react367.default.createElement("rect", { x: "2", y: "2", width: "226", height: "6", className: getClassName3("layout-top") })
  ),
  import_react367.default.createElement(
    "g",
    null,
    import_react367.default.createElement("path", { d: "M2 8H228V23H2V8Z", className: getClassName3("layout-main") }),
    import_react367.default.createElement(
      "g",
      { className: getClassName3("default") },
      import_react367.default.createElement("path", { d: "M9 15.5C9 16.8807 7.88071 18 6.5 18C5.11929 18 4 16.8807 4 15.5C4 14.1193 5.11929 13 6.5 13C7.88071 13 9 14.1193 9 15.5Z", className: getClassName3("disabled") }),
      import_react367.default.createElement("path", { d: "M26 14H56.1484V17H26V14Z" }),
      import_react367.default.createElement("path", { d: "M139 15.5C139 13.567 140.567 12 142.5 12H155.86C157.793 12 159.36 13.567 159.36 15.5C159.36 17.433 157.793 19 155.86 19H142.5C140.567 19 139 17.433 139 15.5Z" }),
      import_react367.default.createElement("path", { d: "M163 15.5C163 13.567 164.567 12 166.5 12H179.86C181.793 12 183.36 13.567 183.36 15.5C183.36 17.433 181.793 19 179.86 19H166.5C164.567 19 163 17.433 163 15.5Z" }),
      import_react367.default.createElement("path", { d: "M186 15.5C186 13.567 187.567 12 189.5 12H202.86C204.793 12 206.36 13.567 206.36 15.5C206.36 17.433 204.793 19 202.86 19H189.5C187.567 19 186 17.433 186 15.5Z", className: getClassName3("primary") }),
      import_react367.default.createElement("circle", { cx: "223.5", cy: "15.5", r: "2.5", className: getClassName3("disabled") })
    )
  ),
  import_react367.default.createElement(TableRow2, { offset: 27, isHeader: true }),
  import_react367.default.createElement(TableRow2, { offset: 39 }),
  import_react367.default.createElement(TableRow2, { offset: 51 }),
  import_react367.default.createElement(TableRow2, { offset: 63 }),
  import_react367.default.createElement("rect", { x: "8", y: "75", width: "214", height: "52", rx: "5", className: getClassName3("window"), strokeWidth: "2" }),
  import_react367.default.createElement("rect", { x: "111", y: "79", width: "8", height: "3", rx: "1.5", className: getClassName3("input-default") }),
  import_react367.default.createElement("path", { d: "M27 87H57V92H27V87Z", className: getClassName3("heading") }),
  import_react367.default.createElement(
    "g",
    { className: getClassName3("secondary") },
    import_react367.default.createElement("path", { d: "M198 87H203V92H198V87Z" }),
    import_react367.default.createElement("path", { d: "M190 87H195V92H190V87Z" })
  ),
  import_react367.default.createElement(SidePanelRow2, { offset: 99 }),
  import_react367.default.createElement(SidePanelRow2, { offset: 106 }),
  import_react367.default.createElement(SidePanelRow2, { offset: 113 })
);
var bottom_icon_refresh_default = bottomPositionIcon3;

// node_modules/@cloudscape-design/components/split-panel/icons/side-position.js
var import_react368 = __toESM(require_react());
var sidePositionIcon = import_react368.default.createElement(
  "svg",
  { className: styles_css_default144["preference-icon--svg"], focusable: "false", viewBox: "0 0 239 134", version: "1.1", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", "aria-hidden": "true" },
  import_react368.default.createElement(
    "g",
    { stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" },
    import_react368.default.createElement(
      "g",
      null,
      import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--layout-border"], strokeWidth: "2", x: "1", y: "1", width: "223", height: "125", rx: "2" }),
      import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--layout-background"], x: "11.25", y: "0", width: "203.4375", height: "125" }),
      import_react368.default.createElement("path", { className: styles_css_default144["preference-icon--layout-header"], d: "M2,0 L223,0 C224.104569,-2.02906125e-16 225,0.8954305 225,2 L225,10 L225,10 L0,10 L0,2 C-1.3527075e-16,0.8954305 0.8954305,2.02906125e-16 2,0 Z" })
    ),
    import_react368.default.createElement(
      "g",
      { transform: "translate(20.000000, 22.000000)" },
      import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--border"], strokeWidth: "2", x: "1", y: "1", width: "182", height: "110", rx: "2" }),
      import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--primary-button"], x: "152", y: "6", width: "26", height: "10" }),
      import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "122", y: "6", width: "26", height: "10" }),
      import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "92", y: "6", width: "26", height: "10" }),
      import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "122", y: "29", width: "55", height: "3" }),
      import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "92", y: "29", width: "26", height: "3" }),
      import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "19 29 49 29 49 32 19 32" }),
      import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "10 10 40 10 40 13 10 13" }),
      import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--disabled-element"], points: "10 29 13 29 13 32 10 32" }),
      import_react368.default.createElement("line", { className: styles_css_default144["preference-icon--separator"], x1: "3", y1: "22.7619048", x2: "181", y2: "22.7619048", strokeWidth: "2", strokeLinecap: "square" }),
      import_react368.default.createElement(
        "g",
        { transform: "translate(3.000000, 37.285714)" },
        import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react368.default.createElement("line", { className: styles_css_default144["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      ),
      import_react368.default.createElement(
        "g",
        { transform: "translate(3.000000, 51.714286)" },
        import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react368.default.createElement("line", { className: styles_css_default144["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      ),
      import_react368.default.createElement(
        "g",
        { transform: "translate(3.000000, 80.571429)" },
        import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react368.default.createElement("line", { className: styles_css_default144["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      ),
      import_react368.default.createElement(
        "g",
        { transform: "translate(3.000000, 66.142857)" },
        import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react368.default.createElement("line", { className: styles_css_default144["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      ),
      import_react368.default.createElement(
        "g",
        { transform: "translate(3.000000, 95.000000)" },
        import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react368.default.createElement("line", { className: styles_css_default144["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      )
    ),
    import_react368.default.createElement(
      "g",
      { transform: "translate(182.000000, 28.000000)" },
      import_react368.default.createElement(
        "g",
        null,
        import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--border"], strokeWidth: "2", x: "1", y: "1", width: "55", height: "97", rx: "2" }),
        import_react368.default.createElement("rect", { className: styles_css_default144["preference-icon--secondary"], x: "39.5474354", y: "5.86666667", width: "14", height: "6.41666667" }),
        import_react368.default.createElement("polygon", { className: styles_css_default144["preference-icon--focus-text"], points: "3.62672811 7.88333333 24.6267281 7.88333333 24.6267281 10.6333333 3.62672811 10.6333333" })
      ),
      import_react368.default.createElement(
        "g",
        { transform: "translate(4.000000, 22.000000)", className: styles_css_default144["preference-icon--secondary"] },
        import_react368.default.createElement("polygon", { points: "0 0 23 0 23 2 0 2" }),
        import_react368.default.createElement("polygon", { points: "26 0 49 0 49 2 26 2" })
      ),
      import_react368.default.createElement(
        "g",
        { transform: "translate(4.000000, 32.000000)", className: styles_css_default144["preference-icon--secondary"] },
        import_react368.default.createElement("polygon", { points: "0 0 23 0 23 2 0 2" }),
        import_react368.default.createElement("polygon", { points: "26 0 49 0 49 2 26 2" })
      ),
      import_react368.default.createElement(
        "g",
        { transform: "translate(4.000000, 43.000000)", className: styles_css_default144["preference-icon--secondary"] },
        import_react368.default.createElement("polygon", { points: "0 0 23 0 23 2 0 2" }),
        import_react368.default.createElement("polygon", { points: "26 0 49 0 49 2 26 2" })
      ),
      import_react368.default.createElement(
        "g",
        { transform: "translate(4.000000, 51.000000)", className: styles_css_default144["preference-icon--secondary"] },
        import_react368.default.createElement("polygon", { points: "0 0 23 0 23 2 0 2" }),
        import_react368.default.createElement("polygon", { points: "26 0 49 0 49 2 26 2" })
      )
    )
  )
);
var side_position_default = sidePositionIcon;

// node_modules/@cloudscape-design/components/split-panel/preferences-modal.js
var preferences_modal_default2 = (props2) => {
  const [position, setPosition] = (0, import_react369.useState)(props2.preferences.position);
  const onCancel = () => {
    setPosition(props2.preferences.position);
    props2.onDismiss();
  };
  const onConfirm = () => {
    props2.onConfirm({ position });
  };
  return import_react369.default.createElement(
    InternalModal,
    { size: "medium", visible: props2.visible, onDismiss: props2.onDismiss, header: props2.i18nStrings.header, closeAriaLabel: props2.i18nStrings.close, footer: import_react369.default.createElement(
      InternalBox,
      { float: "right" },
      import_react369.default.createElement(
        internal_default4,
        { direction: "horizontal", size: "xs" },
        import_react369.default.createElement(InternalButton, { onClick: onCancel, formAction: "none", variant: "link" }, props2.i18nStrings.cancel),
        import_react369.default.createElement(InternalButton, { onClick: onConfirm, variant: "primary" }, props2.i18nStrings.confirm)
      )
    ), __internalRootRef: props2.__internalRootRef },
    import_react369.default.createElement(
      InternalFormField,
      { label: props2.i18nStrings.positionLabel, description: props2.i18nStrings.positionDescription },
      import_react369.default.createElement(internal_default29, { onChange: (e3) => setPosition(e3.detail.value), value: position, columns: 2, items: [
        {
          label: props2.i18nStrings.positionBottom,
          image: props2.isRefresh ? bottom_icon_refresh_default : bottom_icon_default,
          value: "bottom"
        },
        {
          label: props2.i18nStrings.positionSide,
          image: props2.isRefresh ? side_position_refresh_default : side_position_default,
          value: "side",
          disabled: props2.disabledSidePosition
        }
      ] })
    )
  );
};

// node_modules/@cloudscape-design/components/split-panel/side.js
var import_react370 = __toESM(require_react());
function SplitPanelContentSide({ style, baseProps, splitPanelRef, toggleRef, header, children, resizeHandle, isOpen, cappedSize, openButtonAriaLabel, panelHeaderId, onToggle, closeBehavior }) {
  const { topOffset, bottomOffset, animationDisabled } = useSplitPanelContext();
  const isRefresh = useVisualRefresh();
  const isToolbar = useAppLayoutToolbarDesignEnabled();
  const disableAnimation = animationDisabled || closeBehavior === "hide" && !isOpen;
  return import_react370.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default141.drawer, styles_css_default141["position-side"], styles_css_default34.root, {
      [styles_css_default28["with-motion-horizontal"]]: !disableAnimation,
      [styles_css_default34["open-position-side"]]: isOpen,
      [styles_css_default141["drawer-closed"]]: !isOpen,
      [styles_css_default141["with-toolbar"]]: isToolbar,
      [styles_css_default141.refresh]: isRefresh
    }), style: Object.assign({ width: isOpen ? cappedSize : isRefresh ? "0px" : void 0, maxWidth: isRefresh ? "100%" : void 0 }, style), ref: splitPanelRef }),
    import_react370.default.createElement(
      "div",
      { className: styles_css_default141["drawer-content-side"], style: {
        top: topOffset,
        bottom: bottomOffset
      }, onClick: () => !isOpen && onToggle(), "aria-labelledby": panelHeaderId, role: "region" },
      isOpen ? import_react370.default.createElement("div", { className: clsx_m_default(styles_css_default141["slider-wrapper-side"], isToolbar && styles_css_default141["with-toolbar"]) }, resizeHandle) : closeBehavior === "hide" ? null : import_react370.default.createElement(internal_default3, {
        className: clsx_m_default(styles_css_default34["open-button"], styles_css_default141["open-button-side"]),
        iconName: "angle-left",
        variant: "icon",
        formAction: "none",
        ariaLabel: openButtonAriaLabel,
        ariaExpanded: isOpen,
        //toggleRef should only be assigned when there is no other trigger-buttons
        ref: isRefresh || isToolbar ? null : toggleRef
      }),
      import_react370.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default141["content-side"], isToolbar && styles_css_default141["with-toolbar"]), "aria-hidden": !isOpen, style: { width: isToolbar ? cappedSize : "0px" } },
        import_react370.default.createElement("div", { className: styles_css_default141["pane-header-wrapper-side"] }, header),
        import_react370.default.createElement("div", { className: styles_css_default141["pane-content-wrapper-side"] }, children)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/split-panel/implementation.js
function SplitPanelImplementation(_a) {
  var { __internalRootRef, header, children, hidePreferencesButton, closeBehavior, i18nStrings = {} } = _a, restProps = __rest(_a, ["__internalRootRef", "header", "children", "hidePreferencesButton", "closeBehavior", "i18nStrings"]);
  const isRefresh = useVisualRefresh();
  const isToolbar = useAppLayoutToolbarDesignEnabled();
  const { position, topOffset, bottomOffset, rightOffset, contentWidthStyles, isOpen, isForcedPosition, onPreferencesChange, onResize, onToggle, size, relativeSize, setSplitPanelToggle, refs, animationDisabled } = useSplitPanelContext();
  const baseProps = getBaseProps(restProps);
  const [isPreferencesOpen, setPreferencesOpen] = (0, import_react371.useState)(false);
  const appLayoutMaxWidth = isRefresh && position === "bottom" ? contentWidthStyles : void 0;
  const openButtonAriaLabel = i18nStrings.openButtonAriaLabel;
  (0, import_react371.useEffect)(() => {
    setSplitPanelToggle({ displayed: closeBehavior === "collapse", ariaLabel: openButtonAriaLabel });
    return () => {
      setSplitPanelToggle({ displayed: false, ariaLabel: void 0 });
    };
  }, [setSplitPanelToggle, openButtonAriaLabel, closeBehavior]);
  const splitPanelRefObject = (0, import_react371.useRef)(null);
  const sizeControlProps = {
    position,
    panelRef: splitPanelRefObject,
    handleRef: refs.slider,
    onResize
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const { onKeyDown, onDirectionClick } = useKeyboardEvents(sizeControlProps);
  const contentStyle = {
    [global_vars_default.stickyVerticalTopOffset]: topOffset,
    [global_vars_default.stickyVerticalBottomOffset]: bottomOffset
  };
  const panelHeaderId = useUniqueId("split-panel-header");
  const wrappedHeader = import_react371.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default141.header, isToolbar && styles_css_default141["with-toolbar"]), style: appLayoutMaxWidth },
    import_react371.default.createElement("h2", { className: clsx_m_default(styles_css_default141["header-text"], styles_css_default34["header-text"]), id: panelHeaderId }, header),
    import_react371.default.createElement(
      "div",
      { className: styles_css_default141["header-actions"] },
      !hidePreferencesButton && isOpen && import_react371.default.createElement(
        import_react371.default.Fragment,
        null,
        import_react371.default.createElement(InternalButton, { className: styles_css_default34["preferences-button"], iconName: "settings", variant: "icon", onClick: () => setPreferencesOpen(true), formAction: "none", ariaLabel: i18nStrings.preferencesTitle, ref: refs.preferences }),
        import_react371.default.createElement("span", { className: styles_css_default141.divider })
      ),
      isOpen ? import_react371.default.createElement(InternalButton, { className: styles_css_default34["close-button"], iconName: isRefresh && closeBehavior === "collapse" ? position === "side" ? "angle-right" : "angle-down" : "close", variant: "icon", onClick: onToggle, formAction: "none", ariaLabel: i18nStrings.closeButtonAriaLabel, ariaExpanded: isOpen }) : position === "side" || closeBehavior === "hide" ? null : import_react371.default.createElement(InternalButton, { className: styles_css_default34["open-button"], iconName: "angle-up", variant: "icon", formAction: "none", ariaLabel: i18nStrings.openButtonAriaLabel, ref: refs.toggle, ariaExpanded: isOpen })
    )
  );
  const resizeHandle = import_react371.default.createElement(panel_resize_handle_default, {
    ref: refs.slider,
    className: styles_css_default34.slider,
    tooltipText: i18nStrings.resizeHandleTooltipText,
    ariaLabel: i18nStrings.resizeHandleAriaLabel,
    // Allows us to use the logical left/right keys to move the slider left/right,
    // but match aria keyboard behavior of using left/right to decrease/increase
    // the slider value.
    ariaValuenow: position === "bottom" ? relativeSize : 100 - relativeSize,
    position,
    onKeyDown,
    onPointerDown: onSliderPointerDown,
    onDirectionClick
  });
  (0, import_react371.useLayoutEffect)(() => {
    const root = splitPanelRefObject.current;
    if (root) {
      const property = "transform";
      const temporaryValue = "translateZ(0)";
      const valueBefore = root.style[property];
      root.style[property] = temporaryValue;
      void root.offsetHeight;
      root.style[property] = valueBefore;
    }
  }, [rightOffset, __internalRootRef]);
  const mergedRef = useMergeRefs(splitPanelRefObject, __internalRootRef);
  if (closeBehavior === "hide" && !isOpen && (animationDisabled || !isRefresh)) {
    return import_react371.default.createElement(import_react371.default.Fragment, null);
  }
  if (isRefresh && !isToolbar && !isOpen && position === "side") {
    return import_react371.default.createElement(import_react371.default.Fragment, null);
  }
  return import_react371.default.createElement(
    import_react371.default.Fragment,
    null,
    position === "side" && import_react371.default.createElement(SplitPanelContentSide, { style: contentStyle, resizeHandle, baseProps, isOpen, splitPanelRef: mergedRef, cappedSize: size, onToggle, openButtonAriaLabel, toggleRef: refs.toggle, header: wrappedHeader, panelHeaderId, closeBehavior }, children),
    position === "bottom" && import_react371.default.createElement(SplitPanelContentBottom, { style: contentStyle, resizeHandle, baseProps, isOpen, splitPanelRef: mergedRef, cappedSize: size, onToggle, header: wrappedHeader, panelHeaderId, appLayoutMaxWidth, closeBehavior }, children),
    isPreferencesOpen && import_react371.default.createElement(preferences_modal_default2, { visible: true, preferences: { position }, disabledSidePosition: position === "bottom" && isForcedPosition, isRefresh, i18nStrings: {
      header: i18nStrings.preferencesTitle,
      confirm: i18nStrings.preferencesConfirm,
      cancel: i18nStrings.preferencesCancel,
      close: i18nStrings.preferencesCloseAriaLabel,
      positionLabel: i18nStrings.preferencesPositionLabel,
      positionDescription: i18nStrings.preferencesPositionDescription,
      positionBottom: i18nStrings.preferencesPositionBottom,
      positionSide: i18nStrings.preferencesPositionSide
    }, onConfirm: (preferences) => {
      onPreferencesChange(Object.assign({}, preferences));
      setPreferencesOpen(false);
    }, onDismiss: () => {
      setPreferencesOpen(false);
    } })
  );
}
var createWidgetizedSplitPanel = createWidgetizedComponent(SplitPanelImplementation);

// node_modules/@cloudscape-design/components/split-panel/internal.js
var SplitPanelInternal = createWidgetizedSplitPanel();

// node_modules/@cloudscape-design/components/split-panel/index.js
function SplitPanel2(_a) {
  var { hidePreferencesButton = false, closeBehavior = "collapse", i18nStrings = {} } = _a, restProps = __rest(_a, ["hidePreferencesButton", "closeBehavior", "i18nStrings"]);
  const { __internalRootRef } = useBaseComponent("SplitPanel", {
    props: { closeBehavior, hidePreferencesButton }
  });
  const i18n = useInternalI18n("split-panel");
  const i18nModal = useInternalI18n("modal");
  return import_react372.default.createElement(SplitPanelInternal, Object.assign({}, restProps, { __internalRootRef, hidePreferencesButton, closeBehavior, i18nStrings: Object.assign(Object.assign({}, i18nStrings), { closeButtonAriaLabel: i18n("i18nStrings.closeButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.closeButtonAriaLabel), openButtonAriaLabel: i18n("i18nStrings.openButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.openButtonAriaLabel), resizeHandleAriaLabel: i18n("i18nStrings.resizeHandleAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleAriaLabel), resizeHandleTooltipText: i18n("i18nStrings.resizeHandleTooltipText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleTooltipText), preferencesTitle: i18n("i18nStrings.preferencesTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesTitle), preferencesConfirm: i18n("i18nStrings.preferencesConfirm", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesConfirm), preferencesCancel: i18n("i18nStrings.preferencesCancel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesCancel), preferencesCloseAriaLabel: i18nModal("closeAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesCloseAriaLabel) || (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesCancel), preferencesPositionLabel: i18n("i18nStrings.preferencesPositionLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionLabel), preferencesPositionDescription: i18n("i18nStrings.preferencesPositionDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionDescription), preferencesPositionBottom: i18n("i18nStrings.preferencesPositionBottom", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionBottom), preferencesPositionSide: i18n("i18nStrings.preferencesPositionSide", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionSide) }) }));
}
applyDisplayName(SplitPanel2, "SplitPanel");

// node_modules/@cloudscape-design/components/status-indicator/index.js
var import_react373 = __toESM(require_react());
function StatusIndicator2(_a) {
  var { type = "success", wrapText = true } = _a, props2 = __rest(_a, ["type", "wrapText"]);
  const baseComponentProps = useBaseComponent("StatusIndicator", {
    props: { colorOverride: props2.colorOverride, type, wrapText }
  });
  return import_react373.default.createElement(StatusIndicator, Object.assign({ type, wrapText }, props2, baseComponentProps));
}
applyDisplayName(StatusIndicator2, "StatusIndicator");

// node_modules/@cloudscape-design/components/steps/index.js
var import_react375 = __toESM(require_react());

// node_modules/@cloudscape-design/components/steps/internal.js
var import_react374 = __toESM(require_react());

// node_modules/@cloudscape-design/components/steps/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/steps/styles.scoped.css";
var styles_css_default145 = {
  "root": "awsui_root_gxp9y_psgtx_181",
  "list": "awsui_list_gxp9y_psgtx_212",
  "container": "awsui_container_gxp9y_psgtx_217",
  "header": "awsui_header_gxp9y_psgtx_222",
  "details": "awsui_details_gxp9y_psgtx_226",
  "connector": "awsui_connector_gxp9y_psgtx_232"
};

// node_modules/@cloudscape-design/components/steps/internal.js
var InternalStep = ({ status, statusIconAriaLabel, header, details }) => {
  return import_react374.default.createElement(
    "li",
    { className: styles_css_default145.container },
    import_react374.default.createElement(
      "div",
      { className: styles_css_default145.header },
      import_react374.default.createElement(StatusIndicator, { type: status, iconAriaLabel: statusIconAriaLabel }, header)
    ),
    import_react374.default.createElement("hr", { className: styles_css_default145.connector, role: "none" }),
    details && import_react374.default.createElement("div", { className: styles_css_default145.details }, details)
  );
};
var InternalSteps = (_a) => {
  var { steps, ariaLabel, ariaLabelledby, ariaDescribedby, __internalRootRef } = _a, props2 = __rest(_a, ["steps", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "__internalRootRef"]);
  return import_react374.default.createElement(
    "div",
    Object.assign({}, props2, { className: clsx_m_default(styles_css_default145.root, props2.className), ref: __internalRootRef }),
    import_react374.default.createElement("ol", { className: styles_css_default145.list, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }, steps.map((step2, index) => import_react374.default.createElement(InternalStep, { key: index, status: step2.status, statusIconAriaLabel: step2.statusIconAriaLabel, header: step2.header, details: step2.details })))
  );
};
var internal_default30 = InternalSteps;

// node_modules/@cloudscape-design/components/steps/index.js
var Steps = (_a) => {
  var { steps } = _a, props2 = __rest(_a, ["steps"]);
  const baseProps = getBaseProps(props2);
  const baseComponentProps = useBaseComponent("Steps");
  const externalProps = getExternalProps(props2);
  return import_react375.default.createElement(internal_default30, Object.assign({}, baseProps, baseComponentProps, externalProps, { steps }));
};
applyDisplayName(Steps, "Steps");
var steps_default = Steps;

// node_modules/@cloudscape-design/components/tabs/index.js
var import_react377 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tabs/tab-header-bar.js
var import_react376 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tabs/native-smooth-scroll-supported.js
function native_smooth_scroll_supported_default() {
  return "scrollBehavior" in document.documentElement.style;
}

// node_modules/@cloudscape-design/components/tabs/smooth-scroll.js
var getScrollSpeed = (pixels) => 15e-4 * Math.abs(pixels) + 0.558;
var getScrollTime = (pixels) => Math.round(Math.abs(pixels) / getScrollSpeed(pixels));
var now = () => window.performance ? window.performance.now() : Date.now();
var ease = (k3) => {
  return 0.5 * (1 - Math.cos(Math.PI * k3));
};
var step = (context) => {
  const time2 = now();
  const elapsed = Math.min((time2 - context.startTime) / context.scrollTime, 1);
  const value = ease(elapsed);
  const currentX = context.startX + (context.endX - context.startX) * value;
  context.scrollable.scrollLeft = currentX;
  if (currentX !== context.endX) {
    requestAnimationFrame(() => step(context));
  }
};
var simulateSmoothScroll = (element, endX) => {
  const startX = element.scrollLeft;
  step({
    scrollable: element,
    startX,
    endX,
    startTime: now(),
    scrollTime: getScrollTime(endX - startX)
  });
};
var smoothScroll = (element, to) => {
  if (isMotionDisabled(element)) {
    element.scrollLeft = to;
    return;
  }
  if (native_smooth_scroll_supported_default() && element.scrollTo) {
    element.scrollTo({
      left: to,
      behavior: "smooth"
    });
    return;
  }
  simulateSmoothScroll(element, to);
};
var smooth_scroll_default = smoothScroll;

// node_modules/@cloudscape-design/components/tabs/scroll-utils.js
var onPaginationClick = (headerBarRef, direction) => {
  if (!(headerBarRef === null || headerBarRef === void 0 ? void 0 : headerBarRef.current)) {
    return;
  }
  const element = headerBarRef.current;
  const { scrollLeft, scrollWidth, offsetWidth } = element;
  const paginatedSectionSize = Math.ceil(element.clientWidth * 0.75);
  const scrollDistance = direction === "forward" ? Math.min(Math.abs(scrollLeft) + paginatedSectionSize, scrollWidth - offsetWidth) : Math.max(Math.abs(scrollLeft) - paginatedSectionSize, 0);
  const scrollTo = getIsRtl(element) ? scrollDistance * -1 : scrollDistance;
  smooth_scroll_default(element, scrollTo);
};
var hasHorizontalOverflow = (headerBar, inlineStartOverflowButton) => {
  const { offsetWidth, scrollWidth } = headerBar;
  const paginationButtonsWidth = inlineStartOverflowButton.current && 2 * inlineStartOverflowButton.current.offsetWidth;
  return paginationButtonsWidth ? scrollWidth > offsetWidth + paginationButtonsWidth : scrollWidth > offsetWidth;
};
var hasInlineStartOverflow = (headerBar) => {
  return getScrollInlineStart(headerBar) > 0;
};
var hasInlineEndOverflow = (headerBar) => {
  return Math.ceil(getScrollInlineStart(headerBar)) < headerBar.scrollWidth - headerBar.offsetWidth;
};
var scrollIntoView = (tabHeader, headerBar, smooth = true) => {
  if (!tabHeader || !headerBar) {
    return;
  }
  const margin = 2;
  let updatedLeftScroll = headerBar.scrollLeft;
  updatedLeftScroll = Math.min(updatedLeftScroll, tabHeader.offsetLeft - margin);
  updatedLeftScroll = Math.max(updatedLeftScroll, tabHeader.offsetLeft + tabHeader.offsetWidth / 2 - headerBar.offsetWidth / 2 + margin);
  if (smooth) {
    smooth_scroll_default(headerBar, updatedLeftScroll);
  } else {
    headerBar.scrollLeft = updatedLeftScroll;
  }
};

// node_modules/@cloudscape-design/components/tabs/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/tabs/analytics-metadata/styles.scoped.css";
var styles_css_default146 = {
  "tabs-header-list": "awsui_tabs-header-list_1acwa_dp0cl_5",
  "active-tab-header": "awsui_active-tab-header_1acwa_dp0cl_6",
  "tab-label": "awsui_tab-label_1acwa_dp0cl_7",
  "tab-dismiss-button": "awsui_tab-dismiss-button_1acwa_dp0cl_8"
};

// node_modules/@cloudscape-design/components/tabs/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/tabs/styles.scoped.css";
var styles_css_default147 = {
  "tabs-header": "awsui_tabs-header_14rmt_7y4gf_154",
  "tab-header-scroll-container": "awsui_tab-header-scroll-container_14rmt_7y4gf_163",
  "tabs-header-list": "awsui_tabs-header-list_14rmt_7y4gf_169",
  "pagination-button": "awsui_pagination-button_14rmt_7y4gf_187",
  "pagination-button-left": "awsui_pagination-button-left_14rmt_7y4gf_194",
  "pagination-button-left-scrollable": "awsui_pagination-button-left-scrollable_14rmt_7y4gf_197",
  "pagination-button-right": "awsui_pagination-button-right_14rmt_7y4gf_201",
  "pagination-button-right-scrollable": "awsui_pagination-button-right-scrollable_14rmt_7y4gf_204",
  "actions-container": "awsui_actions-container_14rmt_7y4gf_209",
  "tabs-tab": "awsui_tabs-tab_14rmt_7y4gf_217",
  "tabs-tab-label": "awsui_tabs-tab-label_14rmt_7y4gf_227",
  "tabs-tab-header-container": "awsui_tabs-tab-header-container_14rmt_7y4gf_238",
  "tabs-tab-dismiss": "awsui_tabs-tab-dismiss_14rmt_7y4gf_249",
  "tabs-tab-action": "awsui_tabs-tab-action_14rmt_7y4gf_249",
  "refresh": "awsui_refresh_14rmt_7y4gf_254",
  "tabs-tab-disabled": "awsui_tabs-tab-disabled_14rmt_7y4gf_258",
  "tabs-tab-link": "awsui_tabs-tab-link_14rmt_7y4gf_300",
  "tabs-tab-active": "awsui_tabs-tab-active_14rmt_7y4gf_378",
  "tabs-header-with-divider": "awsui_tabs-header-with-divider_14rmt_7y4gf_385",
  "tabs-tab-focusable": "awsui_tabs-tab-focusable_14rmt_7y4gf_389",
  "root": "awsui_root_14rmt_7y4gf_393",
  "tabs": "awsui_tabs_14rmt_7y4gf_154",
  "tabs-content": "awsui_tabs-content_14rmt_7y4gf_431",
  "fit-height": "awsui_fit-height_14rmt_7y4gf_435",
  "tabs-content-active": "awsui_tabs-content-active_14rmt_7y4gf_441",
  "tabs-content-wrapper": "awsui_tabs-content-wrapper_14rmt_7y4gf_455",
  "with-paddings": "awsui_with-paddings_14rmt_7y4gf_455",
  "tabs-container-content-wrapper": "awsui_tabs-container-content-wrapper_14rmt_7y4gf_466",
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_14rmt_7y4gf_477",
  "tabs-tab-focused": "awsui_tabs-tab-focused_14rmt_7y4gf_481"
};

// node_modules/@cloudscape-design/components/tabs/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/tabs/test-classes/styles.scoped.css";
var styles_css_default148 = {
  "tab-dismiss-button": "awsui_tab-dismiss-button_1nq1i_1nd7r_5"
};

// node_modules/@cloudscape-design/components/tabs/tab-header-bar.js
var tabSelector = `.${styles_css_default147["tabs-tab-link"]}`;
var focusedTabSelector = `.${styles_css_default147["tabs-tab-focused"]}`;
var focusableTabSelector = `.${styles_css_default147["tabs-tab-focusable"]}`;
function dismissButton2({ dismissLabel, dismissDisabled, onDismiss, tabId }) {
  return import_react376.default.createElement(InternalButton, { onClick: onDismiss, variant: "icon", iconName: "close", formAction: "none", ariaLabel: dismissLabel, disabled: dismissDisabled, className: clsx_m_default(styles_css_default148["tab-dismiss-button"], styles_css_default146["tab-dismiss-button"]), "data-testid": `awsui-tab-dismiss-button-${tabId}` });
}
function TabHeaderBar({ onChange, activeTabId, tabs, variant, idNamespace, ariaLabel, ariaLabelledby, i18nStrings, keyboardActivationMode, actions }) {
  const headerBarRef = (0, import_react376.useRef)(null);
  const activeTabHeaderRef = (0, import_react376.useRef)(null);
  const inlineStartOverflowButton = (0, import_react376.useRef)(null);
  const i18n = useInternalI18n("tabs");
  const isVisualRefresh = useVisualRefresh();
  const containerObjectRef = (0, import_react376.useRef)(null);
  const [widthChange, containerMeasureRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const containerRef = useMergeRefs(containerObjectRef, containerMeasureRef);
  const tabRefs = (0, import_react376.useRef)(/* @__PURE__ */ new Map());
  const [horizontalOverflow, setHorizontalOverflow] = (0, import_react376.useState)(false);
  const [inlineStartOverflow, setInlineStartOverflow] = (0, import_react376.useState)(false);
  const [inlineEndOverflow, setInlineEndOverflow] = (0, import_react376.useState)(false);
  const [focusedTabId, setFocusedTabId] = (0, import_react376.useState)(activeTabId);
  const [previousActiveTabId, setPreviousActiveTabId] = (0, import_react376.useState)(activeTabId);
  const hasActionOrDismissible = tabs.some((tab) => tab.action || tab.dismissible);
  const hadActionOrDismissible = usePrevious(hasActionOrDismissible);
  const tabActionAttributes = hasActionOrDismissible ? {
    role: "application",
    "aria-roledescription": i18n("i18nStrings.tabsWithActionsAriaRoleDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tabsWithActionsAriaRoleDescription)
  } : {
    role: "tablist"
  };
  (0, import_react376.useEffect)(() => {
    var _a;
    if (hadActionOrDismissible && !hasActionOrDismissible) {
      (_a = getNextFocusTarget()) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }, [hasActionOrDismissible, hadActionOrDismissible]);
  (0, import_react376.useEffect)(() => {
    if (headerBarRef.current) {
      setHorizontalOverflow(hasHorizontalOverflow(headerBarRef.current, inlineStartOverflowButton));
      setInlineStartOverflow(hasInlineStartOverflow(headerBarRef.current));
      setInlineEndOverflow(hasInlineEndOverflow(headerBarRef.current));
    }
  }, [widthChange, tabs]);
  const scrollIntoViewIfPossible = (smooth) => {
    if (!activeTabId) {
      return;
    }
    const activeTabRef = tabRefs.current.get(activeTabId);
    if (activeTabRef && headerBarRef.current) {
      scrollIntoView(activeTabRef, headerBarRef.current, smooth);
    }
  };
  (0, import_react376.useEffect)(() => {
    requestAnimationFrame(() => {
      scrollIntoViewIfPossible(false);
    });
  }, [horizontalOverflow, widthChange, tabs.length]);
  (0, import_react376.useEffect)(() => {
    scrollIntoViewIfPossible(true);
  }, [activeTabId]);
  (0, import_react376.useEffect)(() => {
    var _a, _b;
    if ((_a = headerBarRef.current) === null || _a === void 0 ? void 0 : _a.contains(document.activeElement)) {
      if (document.activeElement !== activeTabHeaderRef.current) {
        (_b = activeTabHeaderRef.current) === null || _b === void 0 ? void 0 : _b.focus({ preventScroll: true });
      }
    }
  }, [activeTabId]);
  const onScroll = () => {
    if (headerBarRef.current) {
      setInlineStartOverflow(hasInlineStartOverflow(headerBarRef.current));
      setInlineEndOverflow(hasInlineEndOverflow(headerBarRef.current));
    }
  };
  const classes = clsx_m_default({
    [styles_css_default147["tabs-header"]]: true,
    [styles_css_default147["tabs-header-with-divider"]]: variant === "default" || isVisualRefresh
  });
  const leftButtonClasses = clsx_m_default({
    [styles_css_default147["pagination-button"]]: true,
    [styles_css_default147["pagination-button-left"]]: true,
    [styles_css_default147["pagination-button-left-scrollable"]]: inlineStartOverflow
  });
  const rightButtonClasses = clsx_m_default({
    [styles_css_default147["pagination-button"]]: true,
    [styles_css_default147["pagination-button-right"]]: true,
    [styles_css_default147["pagination-button-right-scrollable"]]: inlineEndOverflow
  });
  const navigationAPI = (0, import_react376.useRef)(null);
  function getNextFocusTarget() {
    var _a, _b;
    if (!containerObjectRef.current) {
      return null;
    }
    const tabElements = Array.from(containerObjectRef.current.querySelectorAll(tabSelector));
    return (_b = (_a = tabElements.find((tab) => tab.matches(focusedTabSelector))) !== null && _a !== void 0 ? _a : tabElements.find((tab) => !tab.disabled)) !== null && _b !== void 0 ? _b : null;
  }
  function onUnregisterActive(focusableElement) {
    var _a;
    const isFocusableActionOrDismissible = !focusableElement.classList.contains(styles_css_default147["tabs-tab-link"]);
    if (!isFocusableActionOrDismissible) {
      const nextFocusTarget = (_a = navigationAPI.current) === null || _a === void 0 ? void 0 : _a.getFocusTarget();
      const tabLinkButton = nextFocusTarget === null || nextFocusTarget === void 0 ? void 0 : nextFocusTarget.querySelector(`.${styles_css_default147["tabs-tab-link"]}`);
      tabLinkButton === null || tabLinkButton === void 0 ? void 0 : tabLinkButton.focus();
    }
  }
  (0, import_react376.useEffect)(() => {
    var _a;
    (_a = navigationAPI.current) === null || _a === void 0 ? void 0 : _a.updateFocusTarget();
  });
  function onFocus() {
    var _a;
    (_a = navigationAPI.current) === null || _a === void 0 ? void 0 : _a.updateFocusTarget();
  }
  function onBlur() {
    var _a;
    (_a = navigationAPI.current) === null || _a === void 0 ? void 0 : _a.updateFocusTarget();
  }
  function onKeyDown(event) {
    const focusTarget = document.activeElement;
    const specialKeys = [
      KeyCode.right,
      KeyCode.left,
      KeyCode.end,
      KeyCode.home,
      KeyCode.pageUp,
      KeyCode.pageDown,
      KeyCode.space
    ];
    const isActionOpen = document.querySelector(`.${styles_css_default147["tabs-tab-action"]} [aria-expanded="true"]`);
    const isDismissOrActionFocused = !(focusTarget === null || focusTarget === void 0 ? void 0 : focusTarget.classList.contains(styles_css_default147["tabs-tab-link"]));
    if (isActionOpen) {
      return;
    }
    if (event.key === "Tab" && !event.shiftKey && isDismissOrActionFocused) {
      event.preventDefault();
      const panelId = `${idNamespace}-${activeTabId}-panel`;
      const panel = document.getElementById(panelId);
      panel === null || panel === void 0 ? void 0 : panel.focus();
    }
    if (hasModifierKeys(event) || specialKeys.indexOf(event.keyCode) === -1) {
      return;
    }
    if (!containerObjectRef.current || !focusTarget) {
      return;
    }
    event.preventDefault();
    const focusables = getFocusablesFrom(containerObjectRef.current);
    const activeIndex = document.activeElement instanceof HTMLElement ? focusables.indexOf(document.activeElement) : -1;
    handleKey(event, {
      onHome: () => focusElement(focusables[0]),
      onEnd: () => focusElement(focusables[focusables.length - 1]),
      onInlineStart: () => focusElement(focusables[circleIndex(activeIndex - 1, [0, focusables.length - 1])]),
      onInlineEnd: () => focusElement(focusables[circleIndex(activeIndex + 1, [0, focusables.length - 1])]),
      onPageDown: () => inlineEndOverflow && onPaginationClick(headerBarRef, "forward"),
      onPageUp: () => inlineStartOverflow && onPaginationClick(headerBarRef, "backward"),
      onActivate: () => {
        var _a;
        return focusedTabId && focusedTabId !== activeTabId && onChange({ activeTabId: focusedTabId, activeTabHref: (_a = tabs.find((tab) => tab.id === focusedTabId)) === null || _a === void 0 ? void 0 : _a.href });
      }
    });
  }
  function focusElement(element) {
    var _a, _b;
    element.focus();
    const tabsById = tabs.reduce((map2, tab) => map2.set(tab.id, tab), /* @__PURE__ */ new Map());
    for (const [tabId, focusTargetTabTriggerElement] of tabRefs.current.entries()) {
      const focusTargetTabLabelElement = focusTargetTabTriggerElement === null || focusTargetTabTriggerElement === void 0 ? void 0 : focusTargetTabTriggerElement.querySelector(`.${styles_css_default147["tabs-tab-link"]}`);
      if (tabId !== activeTabId && focusTargetTabLabelElement === element) {
        setPreviousActiveTabId(tabId);
        setFocusedTabId(tabId);
        if (!((_a = tabsById.get(tabId)) === null || _a === void 0 ? void 0 : _a.disabled) && keyboardActivationMode === "automatic") {
          onChange({ activeTabId: tabId, activeTabHref: (_b = tabsById.get(tabId)) === null || _b === void 0 ? void 0 : _b.href });
        }
        break;
      }
    }
  }
  function getFocusablesFrom(target) {
    function isElementRegistered(element) {
      var _a, _b;
      return (_b = (_a = navigationAPI.current) === null || _a === void 0 ? void 0 : _a.isRegistered(element)) !== null && _b !== void 0 ? _b : false;
    }
    function isElementFocusable(element) {
      if (element instanceof HTMLButtonElement) {
        return !element.disabled || element.closest(focusableTabSelector);
      }
      return element.matches(focusableTabSelector);
    }
    return getAllFocusables(target).filter((el) => isElementRegistered(el) && isElementFocusable(el));
  }
  const TabList = hasActionOrDismissible ? "div" : "ul";
  return import_react376.default.createElement(
    "div",
    { className: classes },
    import_react376.default.createElement(
      "div",
      { className: styles_css_default147["tab-header-scroll-container"], ref: containerRef },
      horizontalOverflow && import_react376.default.createElement(
        "span",
        { ref: inlineStartOverflowButton, className: leftButtonClasses },
        import_react376.default.createElement(InternalButton, { formAction: "none", variant: "icon", iconName: "angle-left", disabled: !inlineStartOverflow, __focusable: true, onClick: () => onPaginationClick(headerBarRef, "backward"), ariaLabel: i18n("i18nStrings.scrollLeftAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.scrollLeftAriaLabel) })
      ),
      import_react376.default.createElement(
        SingleTabStopNavigationProvider,
        { ref: navigationAPI, navigationActive: true, getNextFocusTarget, onUnregisterActive },
        import_react376.default.createElement(TabList, Object.assign({}, tabActionAttributes, { className: clsx_m_default(styles_css_default147["tabs-header-list"], styles_css_default146["tabs-header-list"]), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, ref: headerBarRef, onScroll, onKeyDown, onFocus, onBlur }), tabs.map(renderTabHeader))
      ),
      horizontalOverflow && import_react376.default.createElement(
        "span",
        { className: rightButtonClasses },
        import_react376.default.createElement(InternalButton, { formAction: "none", variant: "icon", iconName: "angle-right", disabled: !inlineEndOverflow, __focusable: true, onClick: () => onPaginationClick(headerBarRef, "forward"), ariaLabel: i18n("i18nStrings.scrollRightAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.scrollRightAriaLabel) })
      )
    ),
    actions && import_react376.default.createElement("div", { className: styles_css_default147["actions-container"] }, actions)
  );
  function renderTabHeader(tab, index) {
    const { dismissible, dismissLabel, dismissDisabled, action, onDismiss } = tab;
    const isActive = activeTabId === tab.id && !tab.disabled;
    const clickTab = (event) => {
      if (tab.disabled) {
        event.preventDefault();
        return;
      }
      const specialKey = !isPlainLeftClick(event);
      if (specialKey && tab.href) {
        return;
      }
      event.preventDefault();
      if (!tab.href) {
        const clickedTabRef = tabRefs.current.get(tab.id);
        if (clickedTabRef) {
          if (clickedTabRef && clickedTabRef !== document.activeElement) {
            clickedTabRef.focus({ preventScroll: true });
          }
        }
      }
      if (tab.id === activeTabId) {
        return;
      }
      setFocusedTabId(tab.id);
      setPreviousActiveTabId(tab.id);
      onChange({ activeTabId: tab.id, activeTabHref: tab.href });
    };
    const classes2 = clsx_m_default({
      [styles_css_default147["tabs-tab-link"]]: true,
      [styles_css_default147.refresh]: isVisualRefresh,
      [styles_css_default147["tabs-tab-active"]]: activeTabId === tab.id && !tab.disabled,
      [styles_css_default147["tabs-tab-focused"]]: focusedTabId === tab.id,
      [styles_css_default147["tabs-tab-active"]]: isActive,
      [styles_css_default146["active-tab-header"]]: isActive,
      [styles_css_default147["tabs-tab-disabled"]]: tab.disabled,
      [styles_css_default147["tabs-tab-focusable"]]: !tab.disabled || tab.disabled && !!tab.disabledReason
    });
    const tabHeaderContainerClasses = clsx_m_default({
      [styles_css_default147["tabs-tab-header-container"]]: true,
      [styles_css_default147.refresh]: isVisualRefresh,
      [styles_css_default147["tabs-tab-active"]]: isActive,
      [styles_css_default147["tabs-tab-disabled"]]: tab.disabled,
      [styles_css_default147["tabs-tab-focusable"]]: !tab.disabled || tab.disabled && !!tab.disabledReason
    });
    const tabActionClasses = clsx_m_default({
      [styles_css_default147["tabs-tab-action"]]: true,
      [styles_css_default147["tabs-tab-active"]]: isActive
    });
    const commonProps = {
      className: classes2,
      "aria-controls": `${idNamespace}-${tab.id}-panel`,
      "data-testid": tab.id,
      id: getTabElementId({ namespace: idNamespace, tabId: tab.id }),
      onClick: clickTab
    };
    const tabHeaderContainerAriaProps = hasActionOrDismissible ? {
      role: "group",
      "aria-labelledby": commonProps.id
    } : {};
    if (!hasActionOrDismissible) {
      commonProps["aria-selected"] = activeTabId === tab.id;
      commonProps.role = "tab";
    } else {
      commonProps["aria-expanded"] = activeTabId === tab.id;
    }
    if (tab.disabled) {
      commonProps["aria-disabled"] = "true";
    }
    const setElement = (tabElement) => {
      if (tab.id === activeTabId) {
        activeTabHeaderRef.current = tabElement;
      }
      tabRefs.current.set(tab.id, tabElement);
    };
    const handleDismiss = (event) => {
      if (!containerObjectRef.current || !onDismiss) {
        return;
      }
      const tabElements = getFocusablesFrom(containerObjectRef.current).filter((el) => el.classList.contains(styles_css_default147["tabs-tab-link"]));
      const activeTabIndex = tabElements.findIndex((el) => el.dataset.testid === tab.id);
      tabElements.splice(activeTabIndex, 1);
      let nextActive;
      if (previousActiveTabId && previousActiveTabId !== tab.id) {
        nextActive = tabElements.find((el) => el.dataset.testid === previousActiveTabId);
      } else {
        nextActive = tabElements[Math.min(tabElements.length - 1, activeTabIndex)];
      }
      if (nextActive && nextActive.dataset.testid) {
        onChange({ activeTabId: nextActive.dataset.testid });
        setPreviousActiveTabId(nextActive.dataset.testid);
        nextActive.focus();
      }
      onDismiss(event);
    };
    const TabItem = hasActionOrDismissible ? "div" : "li";
    const analyticsDismissMetadata = {
      action: "dismiss",
      detail: {
        id: tab.id,
        label: `.${styles_css_default146["tab-dismiss-button"]}`,
        position: `${index + 1}`
      }
    };
    const analyticsComponentMetadataInnerContext = {
      innerContext: {
        tabId: tab.id,
        tabLabel: `.${styles_css_default146["tab-label"]}`,
        tabPosition: `${index + 1}`
      }
    };
    return import_react376.default.createElement(
      TabItem,
      { ref: (element) => tabRefs.current.set(tab.id, element), className: styles_css_default147["tabs-tab"], role: "presentation", key: tab.id },
      import_react376.default.createElement(
        "div",
        Object.assign({ className: tabHeaderContainerClasses }, tabHeaderContainerAriaProps, getAnalyticsMetadataAttribute({ component: analyticsComponentMetadataInnerContext })),
        import_react376.default.createElement(TabTrigger, { ref: setElement, tab, elementProps: commonProps, activeTabId, index }),
        action && import_react376.default.createElement("span", { className: tabActionClasses }, action),
        dismissible && import_react376.default.createElement("span", Object.assign({ className: styles_css_default147["tabs-tab-dismiss"] }, getAnalyticsMetadataAttribute(analyticsDismissMetadata)), dismissButton2({ dismissLabel, dismissDisabled, onDismiss: handleDismiss, tabId: tab.id }))
      )
    );
  }
}
var TabTrigger = (0, import_react376.forwardRef)(({ tab, elementProps, activeTabId, index }, ref) => {
  const refObject = (0, import_react376.useRef)(null);
  const tabLabelRefObject = (0, import_react376.useRef)(null);
  const mergedRef = useMergeRefs(refObject, ref);
  const { tabIndex } = useSingleTabStopNavigation(refObject);
  const isDisabledWithReason = tab.disabled && !!tab.disabledReason;
  const [showTooltip, setShowTooltip] = (0, import_react376.useState)(false);
  const { targetProps, descriptionEl } = useHiddenDescription(tab.disabledReason);
  const children = import_react376.default.createElement(
    import_react376.default.Fragment,
    null,
    import_react376.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default147["tabs-tab-label"], styles_css_default146["tab-label"]), ref: tabLabelRefObject },
      import_react376.default.createElement("span", null, tab.label)
    ),
    isDisabledWithReason && import_react376.default.createElement(
      import_react376.default.Fragment,
      null,
      descriptionEl,
      showTooltip && import_react376.default.createElement(Tooltip, { className: styles_css_default147["disabled-reason-tooltip"], trackRef: tabLabelRefObject, value: tab.disabledReason, onDismiss: () => setShowTooltip(false) })
    )
  );
  const handlers = {
    onFocus: () => setShowTooltip(true),
    onBlur: () => setShowTooltip(false),
    onMouseEnter: () => setShowTooltip(true),
    onMouseLeave: () => setShowTooltip(false)
  };
  const analyticsSelectMetadata = {
    action: "select",
    detail: {
      id: tab.id,
      label: `.${styles_css_default146["tab-label"]}`,
      position: `${index + 1}`,
      originTabId: activeTabId || ""
    }
  };
  const commonProps = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, elementProps), isDisabledWithReason ? targetProps : {}), isDisabledWithReason ? handlers : {}), { ref: mergedRef, tabIndex }), tab.disabled || tab.id === activeTabId ? {} : getAnalyticsMetadataAttribute(analyticsSelectMetadata));
  return tab.href ? import_react376.default.createElement("a", Object.assign({}, commonProps, { href: tab.href }), children) : import_react376.default.createElement("button", Object.assign({}, commonProps, { type: "button", disabled: tab.disabled && !isDisabledWithReason }), children);
});
function getTabElementId({ namespace, tabId }) {
  return namespace + "-" + tabId;
}

// node_modules/@cloudscape-design/components/tabs/index.js
function firstEnabledTab(tabs) {
  const enabledTabs = tabs.filter((tab) => !tab.disabled);
  if (enabledTabs.length > 0) {
    return enabledTabs[0];
  }
  return null;
}
function shouldRenderTabContent(tab, viewedTabs) {
  switch (tab.contentRenderStrategy) {
    case "active":
      return false;
    case "eager":
      return true;
    case "lazy":
      return viewedTabs.has(tab.id);
  }
  return false;
}
function Tabs(_a) {
  var _b, _c;
  var { tabs, variant = "default", onChange, activeTabId: controlledTabId, ariaLabel, ariaLabelledby, disableContentPaddings = false, i18nStrings, fitHeight, keyboardActivationMode = "automatic", actions } = _a, rest = __rest(_a, ["tabs", "variant", "onChange", "activeTabId", "ariaLabel", "ariaLabelledby", "disableContentPaddings", "i18nStrings", "fitHeight", "keyboardActivationMode", "actions"]);
  for (const tab of tabs) {
    checkSafeUrl("Tabs", tab.href);
  }
  const { __internalRootRef } = useBaseComponent("Tabs", {
    props: { disableContentPaddings, variant, fitHeight, keyboardActivationMode },
    metadata: {
      hasActions: tabs.some((tab) => !!tab.action),
      hasHeaderActions: !!actions,
      hasDisabledReasons: tabs.some((tab) => !!tab.disabledReason),
      hasEagerLoadedTabs: tabs.some((tab) => tab.contentRenderStrategy === "eager"),
      hasLazyLoadedTabs: tabs.some((tab) => tab.contentRenderStrategy === "lazy")
    }
  });
  const idNamespace = useUniqueId("awsui-tabs-");
  const [activeTabId, setActiveTabId] = useControllable(controlledTabId, onChange, (_c = (_b = firstEnabledTab(tabs)) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : "", {
    componentName: "Tabs",
    controlledProp: "activeTabId",
    changeHandler: "onChange"
  });
  const viewedTabs = (0, import_react377.useRef)(/* @__PURE__ */ new Set());
  if (activeTabId !== void 0) {
    viewedTabs.current.add(activeTabId);
  }
  const baseProps = getBaseProps(rest);
  const analyticsComponentMetadata = {
    name: "awsui.Tabs",
    label: `.${styles_css_default146["tabs-header-list"]}`
  };
  if (activeTabId) {
    analyticsComponentMetadata.properties = {
      activeTabId,
      activeTabLabel: `.${styles_css_default146["active-tab-header"]} .${styles_css_default146["tab-label"]}`,
      activeTabPosition: `${tabs.findIndex((tab) => tab.id === activeTabId) + 1}`,
      tabsCount: `${tabs.length}`
    };
  }
  const content = () => {
    const selectedTab = tabs.filter((tab) => tab.id === activeTabId)[0];
    const renderContent = (tab) => {
      const isTabSelected = tab === selectedTab;
      const classes = clsx_m_default({
        [styles_css_default147["tabs-content"]]: true,
        [styles_css_default147["tabs-content-active"]]: isTabSelected
      });
      const contentAttributes = {
        className: classes,
        role: "tabpanel",
        id: `${idNamespace}-${tab.id}-panel`,
        key: `${idNamespace}-${tab.id}-panel`,
        tabIndex: 0,
        "aria-labelledby": getTabElementId({ namespace: idNamespace, tabId: tab.id })
      };
      const isContentShown = !tab.disabled && (isTabSelected || shouldRenderTabContent(tab, viewedTabs.current));
      return import_react377.default.createElement("div", Object.assign({}, contentAttributes), isContentShown && tab.content);
    };
    return import_react377.default.createElement("div", { className: clsx_m_default(variant === "container" || variant === "stacked" ? styles_css_default147["tabs-container-content-wrapper"] : styles_css_default147["tabs-content-wrapper"], {
      [styles_css_default147["with-paddings"]]: !disableContentPaddings
    }) }, tabs.map(renderContent));
  };
  const header = import_react377.default.createElement(TabHeaderBar, { activeTabId, variant, idNamespace, ariaLabel, ariaLabelledby, tabs, actions, onChange: (changeDetail) => {
    setActiveTabId(changeDetail.activeTabId);
    fireNonCancelableEvent(onChange, changeDetail);
  }, i18nStrings, keyboardActivationMode });
  if (variant === "container" || variant === "stacked") {
    return import_react377.default.createElement(InternalContainer, Object.assign({ header, disableHeaderPaddings: true }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default147.root), __internalRootRef, disableContentPaddings: true, variant: variant === "stacked" ? "stacked" : "default", fitHeight }, getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata })), content());
  }
  return import_react377.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default147.root, styles_css_default147.tabs, { [styles_css_default147["fit-height"]]: fitHeight }), ref: __internalRootRef }, getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata })),
    header,
    content()
  );
}
applyDisplayName(Tabs, "Tabs");

// node_modules/@cloudscape-design/components/tag-editor/index.js
var import_react380 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tag-editor/internal.js
var import_react378 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tag-editor/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/tag-editor/styles.scoped.css";
var styles_css_default149 = {
  "root": "awsui_root_brdst_1wxju_145",
  "loading": "awsui_loading_brdst_1wxju_149",
  "undo-button": "awsui_undo-button_brdst_1wxju_153"
};

// node_modules/@cloudscape-design/components/tag-editor/internal.js
var TagControl = import_react378.default.forwardRef(({ row, value, readOnly, defaultOptions: defaultOptions3, placeholder, errorText, loadingText, suggestionText, tooManySuggestionText, limit, filteringKey, enteredTextLabel, clearAriaLabel, onChange, onBlur, onRequest, initialOptionsRef }, ref) => {
  const [options, setOptions] = (0, import_react378.useState)(defaultOptions3);
  const [statusType, setStatusType] = (0, import_react378.useState)();
  const requestCancelFnRef = (0, import_react378.useRef)({
    cancel: () => {
    },
    isCancelled: () => false
  });
  const latestFilteringQuery = (0, import_react378.useRef)({ key: void 0, value: void 0 });
  const isSameQuery = (key2, value2) => latestFilteringQuery.current.key === key2 && latestFilteringQuery.current.value === value2;
  const onLoadItems = (filteringText) => {
    if (!onRequest || isSameQuery(filteringKey, filteringText) || requestCancelFnRef.current.isCancelled()) {
      return;
    }
    requestCancelFnRef.current.cancel();
    if (latestFilteringQuery.current.key !== filteringKey) {
      setOptions([]);
    } else if (filteringText === "" && (initialOptionsRef === null || initialOptionsRef === void 0 ? void 0 : initialOptionsRef.current) && initialOptionsRef.current.length > 0) {
      setOptions(initialOptionsRef.current);
    }
    setStatusType("loading");
    latestFilteringQuery.current = { key: filteringKey, value: filteringText };
    const { promise, cancel, isCancelled } = makeCancellable(onRequest(filteringText));
    promise.then((newValues) => {
      const newOptions = newValues.map((value2) => ({ value: value2 }));
      setStatusType(void 0);
      setOptions(newOptions);
      if (initialOptionsRef) {
        initialOptionsRef.current = newOptions;
      }
    }).catch((err) => {
      if (!(err instanceof PromiseCancelledSignal)) {
        setStatusType("error");
      }
    });
    requestCancelFnRef.current = { cancel, isCancelled };
  };
  return import_react378.default.createElement(internal_default14, { ref, value, readOnly, statusType, options: options.length < limit ? options : [], empty: options.length < limit ? suggestionText : tooManySuggestionText, placeholder, errorText, loadingText, enteredTextLabel, clearAriaLabel, onChange: ({ detail }) => onChange(detail.value, row), onBlur: () => onBlur === null || onBlur === void 0 ? void 0 : onBlur(row), onFocus: () => {
    onLoadItems("");
  }, onLoadItems: ({ detail }) => {
    onLoadItems(detail.filteringText);
  } });
});
var UndoButton = import_react378.default.forwardRef(({ children, onClick }, ref) => {
  return import_react378.default.createElement("a", { ref, role: "button", tabIndex: 0, className: styles_css_default149["undo-button"], onClick, onKeyDown: (event) => {
    if (event.keyCode === KeyCode.space || event.keyCode === KeyCode.enter) {
      event.preventDefault();
    }
    if (event.keyCode === KeyCode.enter) {
      onClick();
    }
  }, onKeyUp: (event) => {
    if (event.keyCode === KeyCode.space) {
      onClick();
    }
  } }, children);
});

// node_modules/@cloudscape-design/components/tag-editor/utils.js
var import_react379 = __toESM(require_react());
function findIndex3(array, condition) {
  for (let i2 = 0; i2 < array.length; i2++) {
    if (condition(array[i2])) {
      return i2;
    }
  }
  return -1;
}
function makeMemoizedArray(prev, next, isEqual2) {
  for (let i2 = 0; i2 < Math.max(prev.length, next.length); i2++) {
    if (i2 === next.length) {
      return prev.slice(0, i2);
    }
    if (i2 === prev.length) {
      return [...prev.slice(0, i2), ...next.slice(i2)];
    }
    if (!isEqual2(prev[i2], next[i2])) {
      return [...prev.slice(0, i2), next[i2], ...makeMemoizedArray(prev.slice(i2 + 1), next.slice(i2 + 1), isEqual2)];
    }
  }
  return prev;
}
function useMemoizedArray(array, isEqual2) {
  const ref = (0, import_react379.useRef)(array);
  const updated = makeMemoizedArray(ref.current, array, isEqual2);
  (0, import_react379.useEffect)(() => {
    ref.current = updated;
  }, [updated]);
  return updated;
}

// node_modules/@cloudscape-design/components/tag-editor/validation.js
var DEFAULT_CHAR_REGEX = /^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$/u;
var SYSTEM_TAG_PREFIX = "aws:";
var MAX_KEY_LENGTH = 128;
var MAX_VALUE_LENGTH = 256;
function validate2(tags, keyDirtyState, i18n, i18nStrings, charRegex = DEFAULT_CHAR_REGEX) {
  const tagKeysCache = {};
  tags.forEach((tag) => {
    var _a;
    if (tag.key && !tag.markedForRemoval) {
      tagKeysCache[tag.key] = ((_a = tagKeysCache[tag.key]) !== null && _a !== void 0 ? _a : 0) + 1;
    }
  });
  return tags.map((tag, i2) => {
    let keyError, valueError;
    if (keyDirtyState[i2] && emptyKeyCheck(tag.key)) {
      keyError = i18n("i18nStrings.emptyKeyError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.emptyKeyError);
    } else if (awsPrefixCheck(tag.key)) {
      keyError = i18n("i18nStrings.awsPrefixError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.awsPrefixError);
    } else if (invalidCharCheck(tag.key, charRegex)) {
      keyError = i18n("i18nStrings.invalidKeyError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.invalidKeyError);
    } else if (maxKeyLengthCheck(tag.key)) {
      keyError = i18n("i18nStrings.maxKeyCharLengthError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.maxKeyCharLengthError);
    } else if (duplicateKeyCheck(tag.key, tagKeysCache)) {
      keyError = i18n("i18nStrings.duplicateKeyError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.duplicateKeyError);
    }
    if (!tag.markedForRemoval) {
      if (invalidCharCheck(tag.value, charRegex)) {
        valueError = i18n("i18nStrings.invalidValueError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.invalidValueError);
      } else if (maxValueLengthCheck(tag.value)) {
        valueError = i18n("i18nStrings.maxValueCharLengthError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.maxValueCharLengthError);
      }
    }
    if (keyError || valueError) {
      return { key: keyError, value: valueError };
    }
  });
}
var awsPrefixCheck = (value) => {
  return value.toLowerCase().indexOf(SYSTEM_TAG_PREFIX) === 0;
};
var emptyKeyCheck = (value) => {
  return !value || value.trim().length === 0;
};
var maxKeyLengthCheck = (value) => {
  return value && value.length > MAX_KEY_LENGTH;
};
var duplicateKeyCheck = (value, keyCache) => {
  var _a;
  return ((_a = keyCache === null || keyCache === void 0 ? void 0 : keyCache[value]) !== null && _a !== void 0 ? _a : 0) > 1;
};
var maxValueLengthCheck = (value) => {
  return value && value.length > MAX_VALUE_LENGTH;
};
var invalidCharCheck = (value, validCharRegex = DEFAULT_CHAR_REGEX) => {
  if (!value || !validCharRegex) {
    return false;
  }
  return !validCharRegex.test(value);
};

// node_modules/@cloudscape-design/components/tag-editor/index.js
var isItemRemovable = ({ tag }) => !tag.markedForRemoval;
var TagEditor = import_react380.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f, _g;
  var { tags = [], i18nStrings, loading = false, tagLimit = 50, allowedCharacterPattern, keysRequest, valuesRequest, onChange } = _a, restProps = __rest(_a, ["tags", "i18nStrings", "loading", "tagLimit", "allowedCharacterPattern", "keysRequest", "valuesRequest", "onChange"]);
  const baseComponentProps = useBaseComponent("TagEditor", {
    props: { tagLimit, allowedCharacterPattern }
  });
  const i18n = useInternalI18n("tag-editor");
  const remainingTags = tagLimit - tags.filter((tag) => !tag.markedForRemoval).length;
  const attributeEditorRef = (0, import_react380.useRef)(null);
  const keyInputRefs = (0, import_react380.useRef)([]);
  const valueInputRefs = (0, import_react380.useRef)([]);
  const undoButtonRefs = (0, import_react380.useRef)([]);
  const initialKeyOptionsRef = (0, import_react380.useRef)([]);
  const keyDirtyStateRef = (0, import_react380.useRef)([]);
  const focusEventRef = (0, import_react380.useRef)();
  (0, import_react380.useLayoutEffect)(() => {
    var _a2;
    (_a2 = focusEventRef.current) === null || _a2 === void 0 ? void 0 : _a2.apply(void 0);
    focusEventRef.current = void 0;
  });
  const errors = validate2(tags, keyDirtyStateRef.current, i18n, i18nStrings, allowedCharacterPattern ? new RegExp(allowedCharacterPattern) : void 0);
  const internalTags = useMemoizedArray(tags.map((tag, i2) => ({ tag, error: errors[i2] })), (prev, next) => {
    var _a2, _b2, _c2, _d2;
    return prev.tag === next.tag && ((_a2 = prev.error) === null || _a2 === void 0 ? void 0 : _a2.key) === ((_b2 = next.error) === null || _b2 === void 0 ? void 0 : _b2.key) && ((_c2 = prev.error) === null || _c2 === void 0 ? void 0 : _c2.value) === ((_d2 = next.error) === null || _d2 === void 0 ? void 0 : _d2.value);
  });
  (0, import_react380.useImperativeHandle)(ref, () => ({
    focus() {
      var _a2, _b2;
      const errorIndex = findIndex3(internalTags, ({ error }) => (error === null || error === void 0 ? void 0 : error.key) || (error === null || error === void 0 ? void 0 : error.value));
      if (errorIndex !== -1) {
        const refArray = ((_a2 = internalTags[errorIndex].error) === null || _a2 === void 0 ? void 0 : _a2.key) ? keyInputRefs : valueInputRefs;
        (_b2 = refArray.current[errorIndex]) === null || _b2 === void 0 ? void 0 : _b2.focus();
      }
    }
  }), [internalTags]);
  const validateAndFire = (0, import_react380.useCallback)((newTags) => {
    fireNonCancelableEvent(onChange, {
      tags: newTags,
      valid: !validate2(newTags, keyDirtyStateRef.current, i18n, i18nStrings, allowedCharacterPattern ? new RegExp(allowedCharacterPattern) : void 0).some((error) => error)
    });
  }, [onChange, i18n, i18nStrings, allowedCharacterPattern]);
  const onAddButtonClick = () => {
    validateAndFire([...tags, { key: "", value: "", existing: false }]);
    focusEventRef.current = () => {
      var _a2;
      (_a2 = keyInputRefs.current[tags.length]) === null || _a2 === void 0 ? void 0 : _a2.focus();
    };
  };
  const onRemoveButtonClick = useStableCallback(({ detail }) => {
    var _a2, _b2, _c2, _d2, _e2;
    const existing = tags[detail.itemIndex].existing;
    validateAndFire([
      ...tags.slice(0, detail.itemIndex),
      ...existing ? [Object.assign(Object.assign({}, tags[detail.itemIndex]), { markedForRemoval: true })] : [],
      ...tags.slice(detail.itemIndex + 1)
    ]);
    if (existing) {
      focusEventRef.current = () => {
        var _a3;
        (_a3 = undoButtonRefs.current[detail.itemIndex]) === null || _a3 === void 0 ? void 0 : _a3.focus();
      };
    } else {
      keyDirtyStateRef.current.splice(detail.itemIndex, 1);
      const nextKey = keyInputRefs.current[detail.itemIndex + 1];
      if (nextKey) {
        (_a2 = keyInputRefs.current[detail.itemIndex]) === null || _a2 === void 0 ? void 0 : _a2.focus();
      } else if (detail.itemIndex > 0) {
        const previousIsExisting = tags[detail.itemIndex - 1].existing;
        if (previousIsExisting) {
          if (tags[detail.itemIndex - 1].markedForRemoval) {
            (_b2 = undoButtonRefs.current[detail.itemIndex - 1]) === null || _b2 === void 0 ? void 0 : _b2.focus();
          } else {
            (_c2 = valueInputRefs.current[detail.itemIndex - 1]) === null || _c2 === void 0 ? void 0 : _c2.focus();
          }
        } else {
          (_d2 = keyInputRefs.current[detail.itemIndex - 1]) === null || _d2 === void 0 ? void 0 : _d2.focus();
        }
      } else {
        (_e2 = attributeEditorRef.current) === null || _e2 === void 0 ? void 0 : _e2.focusAddButton();
      }
    }
  });
  const onKeyChange = useStableCallback((value, row) => {
    keyDirtyStateRef.current[row] = true;
    validateAndFire([...tags.slice(0, row), Object.assign(Object.assign({}, tags[row]), { key: value }), ...tags.slice(row + 1)]);
  });
  const onKeyBlur = useStableCallback((row) => {
    keyDirtyStateRef.current[row] = true;
    validateAndFire([...tags]);
  });
  const onValueChange = useStableCallback((value, row) => {
    validateAndFire([...tags.slice(0, row), Object.assign(Object.assign({}, tags[row]), { value }), ...tags.slice(row + 1)]);
  });
  const onUndoRemoval = useStableCallback((row) => {
    validateAndFire([...tags.slice(0, row), Object.assign(Object.assign({}, tags[row]), { markedForRemoval: false }), ...tags.slice(row + 1)]);
    focusEventRef.current = () => {
      var _a2;
      (_a2 = attributeEditorRef.current) === null || _a2 === void 0 ? void 0 : _a2.focusRemoveButton(row);
    };
  });
  const definition = (0, import_react380.useMemo)(() => [
    {
      label: i18n("i18nStrings.keyHeader", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keyHeader),
      control: ({ tag }, row) => import_react380.default.createElement(TagControl, { row, value: tag.key, readOnly: tag.existing, limit: 200, defaultOptions: [], placeholder: i18n("i18nStrings.keyPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keyPlaceholder), errorText: i18n("i18nStrings.keysSuggestionError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keysSuggestionError), loadingText: i18n("i18nStrings.keysSuggestionLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keysSuggestionLoading), suggestionText: i18n("i18nStrings.keySuggestion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keySuggestion), tooManySuggestionText: i18n("i18nStrings.tooManyKeysSuggestion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tooManyKeysSuggestion), enteredTextLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.enteredKeyLabel, clearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearAriaLabel, onRequest: keysRequest, onChange: onKeyChange, onBlur: onKeyBlur, initialOptionsRef: initialKeyOptionsRef, ref: (ref2) => {
        keyInputRefs.current[row] = ref2;
      } }),
      errorText: ({ error }) => error === null || error === void 0 ? void 0 : error.key
    },
    {
      label: import_react380.default.createElement(
        "span",
        null,
        i18n("i18nStrings.valueHeader", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valueHeader),
        " -",
        " ",
        import_react380.default.createElement("i", null, i18n("i18nStrings.optional", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.optional))
      ),
      control: ({ tag }, row) => {
        var _a2;
        return tag.markedForRemoval ? import_react380.default.createElement(
          "div",
          { role: "alert" },
          import_react380.default.createElement(
            InternalBox,
            { margin: { top: "xxs" } },
            i18n("i18nStrings.undoPrompt", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.undoPrompt),
            " ",
            import_react380.default.createElement(UndoButton, { onClick: () => onUndoRemoval(row), ref: (elem) => {
              undoButtonRefs.current[row] = elem;
            } }, i18n("i18nStrings.undoButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.undoButton))
          )
        ) : import_react380.default.createElement(TagControl, { row, value: tag.value, readOnly: false, limit: 200, defaultOptions: (_a2 = tag.valueSuggestionOptions) !== null && _a2 !== void 0 ? _a2 : [], placeholder: i18n("i18nStrings.valuePlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valuePlaceholder), errorText: i18n("i18nStrings.valuesSuggestionError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valuesSuggestionError), loadingText: i18n("i18nStrings.valuesSuggestionLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valuesSuggestionLoading), suggestionText: i18n("i18nStrings.valueSuggestion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valueSuggestion), tooManySuggestionText: i18n("i18nStrings.tooManyValuesSuggestion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tooManyValuesSuggestion), enteredTextLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.enteredValueLabel, clearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearAriaLabel, filteringKey: tag.key, onRequest: valuesRequest && ((value) => valuesRequest(tag.key, value)), onChange: onValueChange, ref: (ref2) => {
          valueInputRefs.current[row] = ref2;
        } });
      },
      errorText: ({ error }) => error === null || error === void 0 ? void 0 : error.value
    }
  ], [i18n, i18nStrings, keysRequest, onKeyChange, onKeyBlur, valuesRequest, onValueChange, onUndoRemoval]);
  const forwardedI18nStrings = (0, import_react380.useMemo)(() => ({
    errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel,
    itemRemovedAriaLive: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.itemRemovedAriaLive,
    removeButtonAriaLabel: i18n("i18nStrings.removeButtonAriaLabel", (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeButtonAriaLabel) && (({ tag }) => i18nStrings.removeButtonAriaLabel(tag)), (format3) => ({ tag }) => format3({ tag__key: tag.key }))
  }), [i18nStrings, i18n]);
  if (loading) {
    return import_react380.default.createElement(
      "div",
      { className: styles_css_default149.root, ref: baseComponentProps.__internalRootRef },
      import_react380.default.createElement(
        StatusIndicator,
        { className: styles_css_default149.loading, type: "loading" },
        import_react380.default.createElement(internal_default2, { tagName: "span" }, i18n("i18nStrings.loading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.loading))
      )
    );
  }
  const baseProps = getBaseProps(restProps);
  return import_react380.default.createElement(internal_default13, Object.assign({}, baseProps, baseComponentProps, { ref: attributeEditorRef, className: clsx_m_default(styles_css_default149.root, baseProps.className), items: internalTags, isItemRemovable, onAddButtonClick, onRemoveButtonClick, addButtonText: (_b = i18n("i18nStrings.addButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.addButton)) !== null && _b !== void 0 ? _b : "", removeButtonText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeButton, disableAddButton: remainingTags <= 0, empty: i18n("i18nStrings.emptyTags", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.emptyTags), addButtonVariant: "normal", additionalInfo: remainingTags < 0 ? import_react380.default.createElement(FormFieldError, { errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel }, (_d = i18n("i18nStrings.tagLimitExceeded", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tagLimitExceeded) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, tagLimit), (format3) => format3({ tagLimit }))) !== null && _d !== void 0 ? _d : "") : remainingTags === 0 ? (_f = i18n("i18nStrings.tagLimitReached", (_e = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tagLimitReached) === null || _e === void 0 ? void 0 : _e.call(i18nStrings, tagLimit), (format3) => format3({ tagLimit }))) !== null && _f !== void 0 ? _f : "" : i18n("i18nStrings.tagLimit", (_g = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tagLimit) === null || _g === void 0 ? void 0 : _g.call(i18nStrings, remainingTags, tagLimit), (format3) => format3({ tagLimitAvailable: `${remainingTags === tagLimit}`, availableTags: remainingTags, tagLimit })), definition, i18nStrings: forwardedI18nStrings }));
});
applyDisplayName(TagEditor, "TagEditor");
var tag_editor_default = TagEditor;

// node_modules/@cloudscape-design/components/text-content/index.js
var import_react381 = __toESM(require_react());

// node_modules/@cloudscape-design/components/text-content/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/text-content/styles.scoped.css";
var styles_css_default150 = {
  "text-content": "awsui_text-content_6absk_i9ovx_146"
};

// node_modules/@cloudscape-design/components/text-content/index.js
function TextContent(_a) {
  var { children } = _a, props2 = __rest(_a, ["children"]);
  const { __internalRootRef } = useBaseComponent("TextContent");
  const baseProps = getBaseProps(props2);
  const className2 = clsx_m_default(baseProps.className, styles_css_default150["text-content"]);
  return import_react381.default.createElement("div", Object.assign({}, baseProps, { className: className2, ref: __internalRootRef }), children);
}
applyDisplayName(TextContent, "TextContent");

// node_modules/@cloudscape-design/components/text-filter/index.js
var import_react382 = __toESM(require_react());
var TextFilter = import_react382.default.forwardRef((props2, ref) => {
  const baseComponentProps = useBaseComponent("TextFilter", {
    props: { disabled: props2.disabled, disableBrowserAutocorrect: props2.disableBrowserAutocorrect }
  });
  const componentAnalyticsMetadata2 = {
    name: "awsui.TextFilter",
    label: "input",
    properties: {
      disabled: `${!!props2.disabled}`
    }
  };
  return import_react382.default.createElement(internal_default18, Object.assign({}, props2, baseComponentProps, { ref }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })));
});
applyDisplayName(TextFilter, "TextFilter");
var text_filter_default = TextFilter;

// node_modules/@cloudscape-design/components/textarea/index.js
var import_react383 = __toESM(require_react());

// node_modules/@cloudscape-design/components/textarea/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/textarea/styles.scoped.css";
var styles_css_default151 = {
  "root": "awsui_root_qk1j1_15a0y_145",
  "textarea": "awsui_textarea_qk1j1_15a0y_149",
  "textarea-readonly": "awsui_textarea-readonly_qk1j1_15a0y_199",
  "textarea-invalid": "awsui_textarea-invalid_qk1j1_15a0y_241",
  "textarea-warning": "awsui_textarea-warning_qk1j1_15a0y_250"
};

// node_modules/@cloudscape-design/components/textarea/index.js
var Textarea = import_react383.default.forwardRef((_a, ref) => {
  var { value, autoComplete = true, disabled, readOnly, disableBrowserAutocorrect, disableBrowserSpellcheck, spellcheck, onKeyDown, onKeyUp, onChange, onBlur, onFocus, ariaRequired, name, rows, placeholder, autoFocus, ariaLabel } = _a, rest = __rest(_a, ["value", "autoComplete", "disabled", "readOnly", "disableBrowserAutocorrect", "disableBrowserSpellcheck", "spellcheck", "onKeyDown", "onKeyUp", "onChange", "onBlur", "onFocus", "ariaRequired", "name", "rows", "placeholder", "autoFocus", "ariaLabel"]);
  const { __internalRootRef } = useBaseComponent("Textarea", {
    props: { autoComplete, autoFocus, disableBrowserAutocorrect, disableBrowserSpellcheck, readOnly, spellcheck }
  });
  const { ariaLabelledby, ariaDescribedby, controlId, invalid, warning } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const textareaRef = (0, import_react383.useRef)(null);
  useForwardFocus(ref, textareaRef);
  const attributes = {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    "aria-required": ariaRequired ? "true" : void 0,
    "aria-invalid": invalid ? "true" : void 0,
    name,
    placeholder,
    autoFocus,
    className: clsx_m_default(styles_css_default151.textarea, {
      [styles_css_default151["textarea-readonly"]]: readOnly,
      [styles_css_default151["textarea-invalid"]]: invalid,
      [styles_css_default151["textarea-warning"]]: warning && !invalid
    }),
    autoComplete: convertAutoComplete(autoComplete),
    spellCheck: spellcheck,
    disabled,
    readOnly: readOnly ? true : void 0,
    rows: rows || 3,
    onKeyDown: onKeyDown && ((event) => fireKeyboardEvent(onKeyDown, event)),
    onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)),
    // We set a default value on the component in order to force it into the controlled mode.
    value: value || "",
    onChange: onChange && ((event) => fireNonCancelableEvent(onChange, { value: event.target.value })),
    onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),
    onFocus: onFocus && (() => fireNonCancelableEvent(onFocus))
  };
  if (disableBrowserAutocorrect) {
    attributes.autoCorrect = "off";
    attributes.autoCapitalize = "off";
  }
  if (disableBrowserSpellcheck) {
    attributes.spellCheck = "false";
  }
  return import_react383.default.createElement(
    "span",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default151.root, baseProps.className), ref: __internalRootRef }),
    import_react383.default.createElement("textarea", Object.assign({ ref: textareaRef, id: controlId }, attributes))
  );
});
applyDisplayName(Textarea, "Textarea");
var textarea_default = Textarea;

// node_modules/@cloudscape-design/components/tiles/index.js
var import_react384 = __toESM(require_react());
var Tiles = import_react384.default.forwardRef((props2, ref) => {
  const baseComponentProps = useBaseComponent("Tiles", {
    props: { columns: props2.columns, readOnly: props2.readOnly }
  });
  const componentAnalyticsMetadata2 = {
    name: "awsui.Tiles",
    label: { root: "self" }
  };
  return import_react384.default.createElement(internal_default29, Object.assign({ ref }, props2, baseComponentProps, getAnalyticsMetadataAttribute({
    component: componentAnalyticsMetadata2
  })));
});
applyDisplayName(Tiles, "Tiles");
var tiles_default = Tiles;

// node_modules/@cloudscape-design/components/time-input/index.js
var import_react385 = __toESM(require_react());
var TimeInput = import_react385.default.forwardRef((_a, ref) => {
  var { format: format3 = "hh:mm:ss", use24Hour = true, autoComplete = true } = _a, props2 = __rest(_a, ["format", "use24Hour", "autoComplete"]);
  const baseComponentProps = useBaseComponent("TimeInput", {
    props: {
      autoFocus: props2.autoFocus,
      disableBrowserAutocorrect: props2.disableBrowserAutocorrect,
      format: format3,
      readOnly: props2.readOnly,
      use24Hour
    }
  });
  return import_react385.default.createElement(internal_default23, Object.assign({ format: format3, use24Hour, autoComplete }, props2, baseComponentProps, { ref }));
});
applyDisplayName(TimeInput, "TimeInput");
var time_input_default = TimeInput;

// node_modules/@cloudscape-design/components/toggle/index.js
var import_react386 = __toESM(require_react());
var Toggle = import_react386.default.forwardRef((props2, ref) => {
  const baseComponentProps = useBaseComponent("Toggle", { props: { readOnly: props2.readOnly } });
  return import_react386.default.createElement(internal_default19, Object.assign({}, props2, baseComponentProps, { ref, __injectAnalyticsComponentMetadata: true }));
});
applyDisplayName(Toggle, "Toggle");
var toggle_default = Toggle;

// node_modules/@cloudscape-design/components/toggle-button/index.js
var import_react387 = __toESM(require_react());
var ToggleButton2 = import_react387.default.forwardRef((_a, ref) => {
  var { children, iconName, pressedIconName, iconUrl, pressedIconUrl, iconSvg, pressedIconSvg, variant = "normal", loading = false, loadingText, disabled = false, disabledReason, wrapText = true, ariaLabel, ariaDescribedby, ariaControls, pressed = false, onChange } = _a, props2 = __rest(_a, ["children", "iconName", "pressedIconName", "iconUrl", "pressedIconUrl", "iconSvg", "pressedIconSvg", "variant", "loading", "loadingText", "disabled", "disabledReason", "wrapText", "ariaLabel", "ariaDescribedby", "ariaControls", "pressed", "onChange"]);
  const baseComponentProps = useBaseComponent("ToggleButton", {
    props: { iconName, pressedIconName, pressed, variant, wrapText },
    metadata: {
      hasDisabledReason: Boolean(disabledReason)
    }
  });
  const baseProps = getBaseProps(props2);
  return import_react387.default.createElement(InternalToggleButton, Object.assign({}, baseProps, baseComponentProps, { ref, iconName, iconUrl, iconSvg, variant, loading, loadingText, disabled, disabledReason, wrapText, ariaLabel, ariaDescribedby, ariaControls, pressedIconName, pressedIconUrl, pressedIconSvg, pressed, onChange }), children);
});
applyDisplayName(ToggleButton2, "ToggleButton");
var toggle_button_default = ToggleButton2;

// node_modules/@cloudscape-design/components/token-group/index.js
var import_react388 = __toESM(require_react());
function TokenGroup2(_a) {
  var { items = [], alignment = "horizontal" } = _a, props2 = __rest(_a, ["items", "alignment"]);
  const baseComponentProps = useBaseComponent("TokenGroup", {
    props: { alignment, disableOuterPadding: props2.disableOuterPadding, limit: props2.limit, readOnly: props2.readOnly }
  });
  const componentAnalyticsMetadata2 = {
    name: "awsui.TokenGroup",
    label: "invalid",
    properties: {
      itemsCount: `${items.length}`
    }
  };
  return import_react388.default.createElement(InternalTokenGroup, Object.assign({ items, alignment }, props2, baseComponentProps, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })));
}
applyDisplayName(TokenGroup2, "TokenGroup");

// node_modules/@cloudscape-design/components/top-navigation/index.js
var import_react399 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/internal.js
var import_react398 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/index.js
var import_react389 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/menu-dropdown/styles.scoped.css";
var styles_css_default152 = {
  "button": "awsui_button_m5h9f_19alj_145",
  "expanded": "awsui_expanded_m5h9f_19alj_197",
  "offset-right-none": "awsui_offset-right-none_m5h9f_19alj_208",
  "offset-right-l": "awsui_offset-right-l_m5h9f_19alj_211",
  "offset-right-xxl": "awsui_offset-right-xxl_m5h9f_19alj_214",
  "text": "awsui_text_m5h9f_19alj_239",
  "icon": "awsui_icon_m5h9f_19alj_243"
};

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/index.js
var ButtonTrigger2 = import_react389.default.forwardRef(({ testUtilsClass, iconName, iconUrl, iconAlt, iconSvg, badge, ariaLabel, offsetRight, disabled, expanded, children, onClick }, ref) => {
  const hasIcon = iconName || iconUrl || iconSvg;
  return import_react389.default.createElement(
    "button",
    { ref, type: "button", className: clsx_m_default(styles_css_default152.button, styles_css_default152[`offset-right-${offsetRight}`], testUtilsClass, {
      [styles_css_default152.expanded]: expanded
    }), "aria-label": ariaLabel, "aria-expanded": !!expanded, "aria-haspopup": true, disabled, onClick: (event) => {
      event.preventDefault();
      onClick === null || onClick === void 0 ? void 0 : onClick();
    } },
    hasIcon && import_react389.default.createElement(internal_default, { className: styles_css_default152.icon, name: iconName, url: iconUrl, alt: iconAlt, svg: iconSvg, badge }),
    children && import_react389.default.createElement("span", { className: styles_css_default152.text }, children),
    children && import_react389.default.createElement(internal_default, { name: "caret-down-filled", className: spinWhenOpen(styles_css_default21, "rotate", !!expanded) })
  );
});
var MenuDropdown = (_a) => {
  var { iconName, iconUrl, iconAlt, iconSvg, badge, offsetRight, children } = _a, props2 = __rest(_a, ["iconName", "iconUrl", "iconAlt", "iconSvg", "badge", "offsetRight", "children"]);
  const baseProps = getBaseProps(props2);
  const dropdownTrigger = ({ triggerRef, ariaLabel, isOpen, testUtilsClass, disabled, onClick }) => {
    return import_react389.default.createElement(ButtonTrigger2, { testUtilsClass, ref: triggerRef, disabled, expanded: isOpen, iconName, iconUrl, iconAlt, iconSvg, badge, ariaLabel, offsetRight, onClick }, children);
  };
  return import_react389.default.createElement(internal_default9, Object.assign({}, baseProps, props2, { variant: "navigation", customTriggerBuilder: dropdownTrigger, preferCenter: true }));
};
applyDisplayName(MenuDropdown, "MenuDropdown");
var menu_dropdown_default = MenuDropdown;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/index.js
var import_react395 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/router.js
var import_react390 = __toESM(require_react());
var defaultCtx = { state: { view: "utilities", data: null }, setState: () => {
} };
var ViewContext = (0, import_react390.createContext)(defaultCtx);
var useNavigate = () => {
  const { setState } = (0, import_react390.useContext)(ViewContext);
  const navigate = (view, data) => {
    setState({ view, data });
  };
  return navigate;
};
var Route = ({ view, element }) => {
  const { state } = (0, import_react390.useContext)(ViewContext);
  if (view === state.view) {
    if (typeof element === "function") {
      return element(state.data);
    }
    return import_react390.default.createElement(import_react390.default.Fragment, null, element);
  }
  return null;
};
var Router = ({ children }) => {
  const [state, setState] = (0, import_react390.useState)({ view: "utilities", data: null });
  return import_react390.default.createElement(ViewContext.Provider, { value: { state, setState } }, children);
};
var router_default = Router;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/submenu.js
var import_react393 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/header.js
var import_react391 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/top-navigation/styles.scoped.css";
var styles_css_default153 = {
  "top-navigation": "awsui_top-navigation_k5dlb_1wtuq_145",
  "padding-box": "awsui_padding-box_k5dlb_1wtuq_178",
  "medium": "awsui_medium_k5dlb_1wtuq_188",
  "narrow": "awsui_narrow_k5dlb_1wtuq_188",
  "virtual": "awsui_virtual_k5dlb_1wtuq_199",
  "hidden": "awsui_hidden_k5dlb_1wtuq_203",
  "	": "awsui_	_k5dlb_1wtuq_1",
  "identity": "awsui_identity_k5dlb_1wtuq_215",
  "identity-link": "awsui_identity-link_k5dlb_1wtuq_218",
  "no-logo": "awsui_no-logo_k5dlb_1wtuq_238",
  "logo": "awsui_logo_k5dlb_1wtuq_242",
  "title": "awsui_title_k5dlb_1wtuq_254",
  "inputs": "awsui_inputs_k5dlb_1wtuq_269",
  "search": "awsui_search_k5dlb_1wtuq_277",
  "search-expanded": "awsui_search-expanded_k5dlb_1wtuq_281",
  "utilities": "awsui_utilities_k5dlb_1wtuq_285",
  "utility-wrapper": "awsui_utility-wrapper_k5dlb_1wtuq_296",
  "utility-type-button-link": "awsui_utility-type-button-link_k5dlb_1wtuq_317",
  "utility-type-menu-dropdown": "awsui_utility-type-menu-dropdown_k5dlb_1wtuq_322",
  "utility-type-button-primary-button": "awsui_utility-type-button-primary-button_k5dlb_1wtuq_331",
  "utility-link-icon": "awsui_utility-link-icon_k5dlb_1wtuq_339",
  "utility-button-external-icon": "awsui_utility-button-external-icon_k5dlb_1wtuq_343",
  "offset-right-none": "awsui_offset-right-none_k5dlb_1wtuq_347",
  "offset-right-l": "awsui_offset-right-l_k5dlb_1wtuq_351",
  "offset-right-xxl": "awsui_offset-right-xxl_k5dlb_1wtuq_355",
  "overflow-menu-drawer": "awsui_overflow-menu-drawer_k5dlb_1wtuq_360",
  "overflow-menu": "awsui_overflow-menu_k5dlb_1wtuq_360",
  "overflow-menu-header": "awsui_overflow-menu-header_k5dlb_1wtuq_401",
  "overflow-menu-header-text": "awsui_overflow-menu-header-text_k5dlb_1wtuq_409",
  "overflow-menu-header-text--secondary": "awsui_overflow-menu-header-text--secondary_k5dlb_1wtuq_421",
  "overflow-menu-header-text--title": "awsui_overflow-menu-header-text--title_k5dlb_1wtuq_427",
  "overflow-menu-back-button": "awsui_overflow-menu-back-button_k5dlb_1wtuq_431",
  "overflow-menu-dismiss-button": "awsui_overflow-menu-dismiss-button_k5dlb_1wtuq_435",
  "overflow-menu-control": "awsui_overflow-menu-control_k5dlb_1wtuq_439",
  "overflow-menu-list-item-utility": "awsui_overflow-menu-list-item-utility_k5dlb_1wtuq_477",
  "overflow-menu-control-link": "awsui_overflow-menu-control-link_k5dlb_1wtuq_485",
  "overflow-menu-control-expandable-menu-trigger": "awsui_overflow-menu-control-expandable-menu-trigger_k5dlb_1wtuq_488",
  "overflow-menu-list": "awsui_overflow-menu-list_k5dlb_1wtuq_477",
  "overflow-menu-list-submenu": "awsui_overflow-menu-list-submenu_k5dlb_1wtuq_524",
  "overflow-menu-list-item": "awsui_overflow-menu-list-item_k5dlb_1wtuq_477",
  "overflow-menu-list-item-icon": "awsui_overflow-menu-list-item-icon_k5dlb_1wtuq_533",
  "overflow-menu-list-item-text": "awsui_overflow-menu-list-item-text_k5dlb_1wtuq_536",
  "overflow-menu-list-item-submenu": "awsui_overflow-menu-list-item-submenu_k5dlb_1wtuq_545",
  "overflow-menu-list-item-dropdown-menu": "awsui_overflow-menu-list-item-dropdown-menu_k5dlb_1wtuq_551",
  "overflow-menu-list-item-expandable": "awsui_overflow-menu-list-item-expandable_k5dlb_1wtuq_555",
  "icon": "awsui_icon_k5dlb_1wtuq_560",
  "icon-open": "awsui_icon-open_k5dlb_1wtuq_574"
};

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/header.js
var Header4 = ({ children, secondaryText, backIconAriaLabel, dismissIconAriaLabel, onBack, onClose }) => {
  return import_react391.default.createElement(
    "div",
    { className: styles_css_default153["overflow-menu-header"] },
    onBack && import_react391.default.createElement(
      internal_default3,
      {
        // Used for test-utils, which require the selectable element to have a classname.
        className: styles_css_default153["overflow-menu-back-button"],
        ariaLabel: backIconAriaLabel,
        iconName: "angle-left",
        variant: "icon",
        onClick: () => onBack()
      }
    ),
    import_react391.default.createElement(
      "h2",
      { className: styles_css_default153["overflow-menu-header-text"] },
      import_react391.default.createElement("div", { className: styles_css_default153["overflow-menu-header-text--title"] }, children),
      secondaryText && import_react391.default.createElement("div", { className: styles_css_default153["overflow-menu-header-text--secondary"] }, secondaryText)
    ),
    import_react391.default.createElement(internal_default3, { className: styles_css_default153["overflow-menu-dismiss-button"], ariaLabel: dismissIconAriaLabel, iconName: "close", variant: "icon", onClick: () => onClose && onClose() })
  );
};
var header_default2 = Header4;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/menu-item.js
var import_react392 = __toESM(require_react());
var ListItem = ({ children, startIcon, endIcon }) => {
  return import_react392.default.createElement(
    import_react392.default.Fragment,
    null,
    startIcon && import_react392.default.createElement("span", { className: styles_css_default153["overflow-menu-list-item-icon"] }, startIcon),
    import_react392.default.createElement("span", { className: styles_css_default153["overflow-menu-list-item-text"] }, children),
    endIcon && endIcon
  );
};
var LinkItem = (0, import_react392.forwardRef)(({ children, external, href, target, rel, startIcon, endIcon, onClick, context, testId }, ref) => {
  const anchorTarget = target !== null && target !== void 0 ? target : external ? "_blank" : void 0;
  const anchorRel = rel !== null && rel !== void 0 ? rel : anchorTarget === "_blank" ? "noopener noreferrer" : void 0;
  const role = !href ? "button" : void 0;
  return import_react392.default.createElement(
    "a",
    Object.assign({ ref, onClick, className: clsx_m_default(styles_css_default153["overflow-menu-control"], styles_css_default153["overflow-menu-control-link"], context && styles_css_default153[`overflow-menu-control-${context}`]), role, tabIndex: 0, href, target: anchorTarget, rel: anchorRel }, testId ? { "data-testid": testId } : {}),
    import_react392.default.createElement(ListItem, { startIcon, endIcon }, children)
  );
});
var ButtonItem = (0, import_react392.forwardRef)(({ children, startIcon, endIcon, onClick, testId }, ref) => {
  return import_react392.default.createElement(
    "button",
    Object.assign({ ref, className: styles_css_default153["overflow-menu-control"], onClick }, typeof testId === "string" ? { "data-testid": testId } : {}),
    import_react392.default.createElement(ListItem, { startIcon, endIcon }, children)
  );
});
var NavigationItem = (0, import_react392.forwardRef)((_a, ref) => {
  var { startIcon, children, index, testId } = _a, definition = __rest(_a, ["startIcon", "children", "index", "testId"]);
  const navigate = useNavigate();
  return import_react392.default.createElement(ButtonItem, { ref, startIcon, endIcon: import_react392.default.createElement(internal_default, { name: "angle-right" }), testId, onClick: () => navigate("dropdown-menu", {
    definition,
    headerText: definition.text || definition.title,
    headerSecondaryText: definition.description,
    utilityIndex: index
  }) }, children);
});
var ExpandableItem = (_a) => {
  var { children, onItemClick } = _a, definition = __rest(_a, ["children", "onItemClick"]);
  const [expanded, setExpanded] = (0, import_react392.useState)(false);
  const headerId = useUniqueId("overflow-menu-item");
  return import_react392.default.createElement(
    import_react392.default.Fragment,
    null,
    import_react392.default.createElement(
      "button",
      { className: clsx_m_default(styles_css_default153["overflow-menu-control"], styles_css_default153["overflow-menu-control-expandable-menu-trigger"]), onClick: () => setExpanded((value) => !value), "aria-expanded": expanded },
      import_react392.default.createElement(
        ListItem,
        { endIcon: import_react392.default.createElement(
          "span",
          { className: spinWhenOpen(styles_css_default153, "icon", expanded) },
          import_react392.default.createElement(internal_default, { name: "caret-down-filled" })
        ) },
        import_react392.default.createElement("span", { id: headerId }, children)
      )
    ),
    expanded && import_react392.default.createElement("ul", { className: clsx_m_default(styles_css_default153["overflow-menu-list"], styles_css_default153["overflow-menu-list-submenu"]), "aria-labelledby": headerId }, definition.items.map((item, index) => {
      const isGroup5 = typeof item.items !== "undefined";
      return import_react392.default.createElement("li", { key: index, className: clsx_m_default(styles_css_default153[`overflow-menu-list-item`], styles_css_default153[`overflow-menu-list-item-dropdown-menu`]) }, dropdownComponentFactory(item, isGroup5, onItemClick));
    }))
  );
};
function utilityComponentFactory(utility, index, ref) {
  const label = utility.text || utility.title;
  const hasIcon = !!utility.iconName || !!utility.iconUrl || !!utility.iconAlt || !!utility.iconSvg;
  const startIcon = hasIcon && import_react392.default.createElement(internal_default, { name: utility.iconName, url: utility.iconUrl, alt: utility.iconAlt, svg: utility.iconSvg });
  switch (utility.type) {
    case "button": {
      const handleClick = (event) => {
        var _a;
        if (Boolean(utility.href) && isPlainLeftClick(event)) {
          fireCancelableEvent(utility.onFollow, { href: utility.href, target: utility.target }, event);
        }
        fireCancelableEvent(utility.onClick, {}, event);
        (_a = utility.onClose) === null || _a === void 0 ? void 0 : _a.call(utility);
      };
      const content = import_react392.default.createElement(
        import_react392.default.Fragment,
        null,
        label,
        utility.external && import_react392.default.createElement(
          import_react392.default.Fragment,
          null,
          " ",
          import_react392.default.createElement(
            "span",
            { "aria-label": utility.externalIconAriaLabel, role: utility.externalIconAriaLabel ? "img" : void 0 },
            import_react392.default.createElement(internal_default, { name: "external", size: "normal" })
          )
        )
      );
      if (!utility.href) {
        return import_react392.default.createElement(ButtonItem, { ref, startIcon, onClick: handleClick, testId: `__${index}` }, content);
      }
      return import_react392.default.createElement(LinkItem, { ref, startIcon, href: utility.href, external: utility.external, target: utility.target, rel: utility.rel, testId: `__${index}`, onClick: handleClick }, content);
    }
    case "menu-dropdown": {
      return import_react392.default.createElement(NavigationItem, Object.assign({ ref, startIcon, index }, utility, { testId: `__${index}` }), label);
    }
  }
}
function dropdownComponentFactory(item, expandable, onItemClick) {
  const label = item.text;
  const hasIcon = !!item.iconName || !!item.iconUrl || !!item.iconAlt || !!item.iconSvg;
  const isLink = isLinkItem(item);
  const startIcon = hasIcon && import_react392.default.createElement(internal_default, { name: item.iconName, url: item.iconUrl, alt: item.iconAlt, svg: item.iconSvg });
  if (expandable) {
    return import_react392.default.createElement(ExpandableItem, Object.assign({}, item, { onItemClick }), label);
  }
  return import_react392.default.createElement(
    LinkItem,
    { startIcon, href: isLink ? item.href : void 0, external: isLink ? item.external : void 0, context: "dropdown-menu", testId: item.id, onClick: (event) => onItemClick(event, item) },
    label,
    isLink && item.external && import_react392.default.createElement(
      import_react392.default.Fragment,
      null,
      " ",
      import_react392.default.createElement(
        "span",
        { "aria-label": item.externalIconAriaLabel, role: item.externalIconAriaLabel ? "img" : void 0 },
        import_react392.default.createElement(internal_default, { name: "external", size: "normal" })
      )
    )
  );
}
var UtilityMenuItem = (0, import_react392.forwardRef)((_a, ref) => {
  var { index } = _a, props2 = __rest(_a, ["index"]);
  return import_react392.default.createElement("li", { className: clsx_m_default(styles_css_default153[`overflow-menu-list-item`], styles_css_default153[`overflow-menu-list-item-utility`]) }, utilityComponentFactory(props2, index, ref));
});
var SubmenuItem = (props2) => {
  const expandable = typeof props2.items !== "undefined";
  return import_react392.default.createElement("li", { className: clsx_m_default(styles_css_default153[`overflow-menu-list-item`], styles_css_default153[`overflow-menu-list-item-submenu`], expandable && styles_css_default153[`overflow-menu-list-item-expandable`]) }, dropdownComponentFactory(props2, expandable, props2.onClick));
};

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/submenu.js
var SubmenuView = ({ onClose, utilityIndex, headerText, headerSecondaryText, dismissIconAriaLabel, backIconAriaLabel, definition }) => {
  const navigate = useNavigate();
  const headerId = useUniqueId("overflow-menu-header");
  return import_react393.default.createElement(
    focus_lock_default,
    { autoFocus: true },
    import_react393.default.createElement(
      header_default2,
      { secondaryText: headerSecondaryText, dismissIconAriaLabel, backIconAriaLabel, onClose, onBack: () => navigate("utilities", { utilityIndex }) },
      import_react393.default.createElement("span", { id: headerId }, headerText)
    ),
    import_react393.default.createElement("ul", { className: clsx_m_default(styles_css_default153["overflow-menu-list"], styles_css_default153["overflow-menu-list-submenu"]), "aria-labelledby": headerId }, definition.items.map((item, index) => import_react393.default.createElement(SubmenuItem, Object.assign({ key: index }, item, { onClick: (event, item2) => {
      if (item2.href && isPlainLeftClick(event)) {
        fireCancelableEvent(definition.onItemFollow, { id: item2.id, href: item2.href, external: item2.external }, event);
      }
      fireCancelableEvent(definition.onItemClick, { id: item2.id, href: item2.href, external: item2.external }, event);
      onClose === null || onClose === void 0 ? void 0 : onClose();
    } }))))
  );
};
var submenu_default = SubmenuView;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/utilities.js
var import_react394 = __toESM(require_react());
var UtilitiesView = ({ headerText, dismissIconAriaLabel, onClose, items = [], focusIndex }) => {
  const headerId = useUniqueId("overflow-menu-header");
  const ref = (0, import_react394.useRef)(null);
  (0, import_react394.useEffect)(() => {
    var _a;
    if (typeof focusIndex === "number") {
      (_a = ref.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }, [focusIndex]);
  return import_react394.default.createElement(
    focus_lock_default,
    { autoFocus: true },
    import_react394.default.createElement(
      header_default2,
      { dismissIconAriaLabel, onClose },
      import_react394.default.createElement("span", { id: headerId }, headerText)
    ),
    import_react394.default.createElement("ul", { className: styles_css_default153["overflow-menu-list"], "aria-labelledby": headerId }, items.map((utility, index) => import_react394.default.createElement(UtilityMenuItem, Object.assign({ key: index, index, ref: index === focusIndex ? ref : void 0, onClose }, utility))))
  );
};
var utilities_default = UtilitiesView;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/index.js
var OverflowMenu2 = ({ headerText, dismissIconAriaLabel, backIconAriaLabel, items = [], onClose }) => {
  const i18n = useInternalI18n("top-navigation");
  const renderedDismissIconAriaLabel = i18n("i18nStrings.overflowMenuDismissIconAriaLabel", dismissIconAriaLabel);
  const renderedBackIconAriaLabel = i18n("i18nStrings.overflowMenuBackIconAriaLabel", backIconAriaLabel);
  return import_react395.default.createElement(
    "div",
    { className: styles_css_default153["overflow-menu"], onKeyUp: (event) => {
      if (event.key === "Escape") {
        onClose === null || onClose === void 0 ? void 0 : onClose();
      }
    } },
    import_react395.default.createElement(
      router_default,
      null,
      import_react395.default.createElement(Route, { view: "utilities", element: (data) => import_react395.default.createElement(utilities_default, { headerText: i18n("i18nStrings.overflowMenuTitleText", headerText), items, focusIndex: data === null || data === void 0 ? void 0 : data.utilityIndex, dismissIconAriaLabel: renderedDismissIconAriaLabel, backIconAriaLabel: renderedBackIconAriaLabel, onClose }) }),
      import_react395.default.createElement(Route, { view: "dropdown-menu", element: (data) => import_react395.default.createElement(submenu_default, { headerText: data === null || data === void 0 ? void 0 : data.headerText, headerSecondaryText: data === null || data === void 0 ? void 0 : data.headerSecondaryText, dismissIconAriaLabel: renderedDismissIconAriaLabel, backIconAriaLabel: renderedBackIconAriaLabel, definition: data === null || data === void 0 ? void 0 : data.definition, utilityIndex: data === null || data === void 0 ? void 0 : data.utilityIndex, onClose }) })
    )
  );
};
var overflow_menu_default = OverflowMenu2;

// node_modules/@cloudscape-design/components/top-navigation/parts/utility.js
var import_react396 = __toESM(require_react());
function Utility({ hideText, definition, offsetRight }) {
  var _a;
  const hasIcon = !!definition.iconName || !!definition.iconUrl || !!definition.iconAlt || !!definition.iconSvg;
  const shouldHideText = hideText && !definition.disableTextCollapse && hasIcon;
  let ariaLabel = (_a = definition.ariaLabel) !== null && _a !== void 0 ? _a : definition.text;
  if (definition.type === "button") {
    ariaLabel = definition.ariaLabel ? definition.ariaLabel : joinStrings(definition.text, definition.externalIconAriaLabel);
    checkSafeUrl("TopNavigation", definition.href);
    if (definition.variant === "primary-button") {
      return import_react396.default.createElement(
        "span",
        { className: styles_css_default153[`offset-right-${offsetRight}`] },
        import_react396.default.createElement(InternalButton, { variant: "primary", href: definition.href, target: definition.external ? "_blank" : void 0, onClick: definition.onClick, onFollow: definition.onFollow, ariaLabel, iconName: definition.iconName, iconUrl: definition.iconUrl, iconAlt: definition.iconAlt, iconSvg: definition.iconSvg }, shouldHideText ? null : import_react396.default.createElement(
          import_react396.default.Fragment,
          null,
          definition.text,
          definition.external && import_react396.default.createElement(
            import_react396.default.Fragment,
            null,
            " ",
            import_react396.default.createElement(
              "span",
              { className: clsx_m_default(styles_css_default153["utility-button-external-icon"], styles_css_default153[`offset-right-${offsetRight}`]), "aria-label": definition.externalIconAriaLabel, role: definition.externalIconAriaLabel ? "img" : void 0 },
              import_react396.default.createElement(internal_default, { name: "external" })
            )
          )
        ))
      );
    } else {
      return import_react396.default.createElement(
        "span",
        { className: styles_css_default153[`offset-right-${offsetRight}`] },
        import_react396.default.createElement(
          internal_default10,
          { variant: "top-navigation", href: definition.href, target: definition.target, rel: definition.rel, external: definition.external, onFollow: (evt) => {
            fireCancelableEvent(definition.onFollow, { href: definition.href, target: definition.target, external: definition.external }, evt);
            fireCancelableEvent(definition.onClick, { href: definition.href, target: definition.target, external: definition.external }, evt);
          }, ariaLabel },
          hasIcon && import_react396.default.createElement(internal_default, { name: definition.iconName, url: definition.iconUrl, alt: definition.iconAlt, svg: definition.iconSvg, badge: definition.badge }),
          !shouldHideText && definition.text && import_react396.default.createElement("span", { className: hasIcon ? styles_css_default153["utility-link-icon"] : void 0 }, definition.text)
        )
      );
    }
  } else if (definition.type === "menu-dropdown") {
    const title = definition.title || definition.text;
    const shouldShowTitle = shouldHideText || !definition.text;
    const items = excludeCheckboxes(definition.items);
    checkSafeUrlRecursively(definition.items);
    return import_react396.default.createElement(menu_dropdown_default, Object.assign({}, definition, { items, title: shouldShowTitle ? title : "", ariaLabel, offsetRight }), !shouldHideText && definition.text);
  }
  return null;
}
function checkSafeUrlRecursively(itemOrGroup) {
  for (const item of itemOrGroup) {
    if (isLinkItem(item)) {
      checkSafeUrl("TopNavigation", item.href);
    }
    if ("items" in item) {
      checkSafeUrlRecursively(item.items);
    }
  }
}
function excludeCheckboxes(items) {
  return items.map((item) => {
    if (item.itemType === "checkbox") {
      return null;
    }
    if ("items" in item) {
      return Object.assign(Object.assign({}, item), { items: excludeCheckboxes(item.items) });
    }
    return item;
  }).filter((item) => item !== null);
}

// node_modules/@cloudscape-design/components/top-navigation/use-top-navigation.js
var import_react397 = __toESM(require_react());
var RESPONSIVENESS_BUFFER = 20;
function useTopNavigation({ identity: identity2, search, utilities }) {
  const mainRef = (0, import_react397.useRef)(null);
  const virtualRef = (0, import_react397.useRef)(null);
  const [breakpoint, breakpointRef] = useContainerBreakpoints(["xxs", "s"]);
  const hasSearch = !!search;
  const hasTitleWithLogo = identity2 && !!identity2.logo && !!identity2.title;
  const responsiveStates = (0, import_react397.useMemo)(() => {
    return generateResponsiveStateKeys(utilities, hasSearch, hasTitleWithLogo);
  }, [utilities, hasSearch, hasTitleWithLogo]);
  const [responsiveState, setResponsiveState] = (0, import_react397.useState)();
  const recalculateFit = (0, import_react397.useCallback)(() => {
    var _a, _b, _c, _d;
    if (!(mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) || !virtualRef.current) {
      setResponsiveState(responsiveStates[0]);
      return;
    }
    const availableWidth = getContentBoxWidth(mainRef.current.querySelector(`.${styles_css_default153["padding-box"]}`));
    if (availableWidth === 0) {
      setResponsiveState(responsiveStates[0]);
      return;
    }
    const sizeConfiguration = {
      hasSearch,
      availableWidth,
      // Get widths from the hidden top navigation
      fullIdentityWidth: virtualRef.current.querySelector(`.${styles_css_default153.identity}`).getBoundingClientRect().width,
      titleWidth: (_b = (_a = virtualRef.current.querySelector(`.${styles_css_default153.title}`)) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width) !== null && _b !== void 0 ? _b : 0,
      searchSlotWidth: (_d = (_c = virtualRef.current.querySelector(`.${styles_css_default153.search}`)) === null || _c === void 0 ? void 0 : _c.getBoundingClientRect().width) !== null && _d !== void 0 ? _d : 0,
      searchUtilityWidth: virtualRef.current.querySelector('[data-utility-special="search"]').getBoundingClientRect().width,
      utilitiesLeftPadding: parseFloat(getComputedStyle(virtualRef.current.querySelector(`.${styles_css_default153.utilities}`)).paddingLeft || "0px"),
      utilityWithLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(`[data-utility-hide="false"]`)).map((element) => element.getBoundingClientRect().width),
      utilityWithoutLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(`[data-utility-hide="true"]`)).map((element) => element.getBoundingClientRect().width),
      menuTriggerUtilityWidth: virtualRef.current.querySelector('[data-utility-special="menu-trigger"]').getBoundingClientRect().width
    };
    setResponsiveState(determineBestResponsiveState(responsiveStates, sizeConfiguration));
  }, [responsiveStates, hasSearch]);
  const [, containerQueryRef] = useContainerQuery(() => {
    recalculateFit();
  }, [recalculateFit]);
  const onVirtualMount = (0, import_react397.useCallback)((element) => {
    virtualRef.current = element;
    recalculateFit();
  }, [recalculateFit]);
  const [isSearchMinimized, setSearchMinimized] = (0, import_react397.useState)(true);
  const isSearchExpanded = !isSearchMinimized && hasSearch && (responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch);
  (0, import_react397.useEffect)(() => {
    if (!(responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch)) {
      setSearchMinimized(true);
    }
  }, [responsiveState]);
  (0, import_react397.useEffect)(() => {
    var _a, _b;
    if (isSearchExpanded) {
      (_b = (_a = mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`.${styles_css_default153.search} input`)) === null || _b === void 0 ? void 0 : _b.focus();
    }
  }, [isSearchExpanded, mainRef]);
  const mergedMainRef = useMergeRefs(mainRef, containerQueryRef, breakpointRef);
  return {
    mainRef: mergedMainRef,
    virtualRef: onVirtualMount,
    responsiveState: responsiveState !== null && responsiveState !== void 0 ? responsiveState : responsiveStates[0],
    breakpoint: breakpoint !== null && breakpoint !== void 0 ? breakpoint : "default",
    isSearchExpanded: !!isSearchExpanded,
    onSearchUtilityClick: () => setSearchMinimized((isSearchMinimized2) => !isSearchMinimized2)
  };
}
function getContentBoxWidth(element) {
  const style = getComputedStyle(element);
  return parseFloat(style.width || "0px") - parseFloat(style.paddingLeft || "0px") - parseFloat(style.paddingRight || "0px");
}
function generateResponsiveStateKeys(utilities, canHideSearch, canHideTitle) {
  const states = [{}];
  if (utilities.some((utility) => utility.text)) {
    states.push({ hideUtilityText: true });
  }
  if (canHideSearch) {
    states.push({
      hideUtilityText: true,
      hideSearch: true
    });
  }
  const hiddenUtilties = [];
  for (let i2 = 0; i2 < utilities.length; i2++) {
    if (!utilities[i2].disableUtilityCollapse) {
      hiddenUtilties.push(i2);
      states.push({
        hideUtilityText: true,
        hideSearch: canHideSearch || void 0,
        hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : void 0
      });
    }
  }
  if (canHideTitle) {
    states.push({
      hideUtilityText: true,
      hideSearch: canHideSearch || void 0,
      hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : void 0,
      hideTitle: true
    });
  }
  return states;
}
function determineBestResponsiveState(possibleStates, sizes) {
  const { hasSearch, availableWidth, utilitiesLeftPadding, fullIdentityWidth, titleWidth, searchSlotWidth, searchUtilityWidth, utilityWithLabelWidths, utilityWithoutLabelWidths, menuTriggerUtilityWidth } = sizes;
  for (const state of possibleStates) {
    const searchWidth = hasSearch ? state.hideSearch ? searchUtilityWidth : searchSlotWidth : 0;
    const utilitiesWidth = (state.hideUtilityText ? utilityWithoutLabelWidths : utilityWithLabelWidths).filter((_width, i2) => !state.hideUtilities || state.hideUtilities.indexOf(i2) === -1).reduce((sum2, width) => sum2 + width, 0);
    const menuTriggerWidth = state.hideUtilities ? menuTriggerUtilityWidth : 0;
    const identityWidth = state.hideTitle ? fullIdentityWidth - titleWidth : fullIdentityWidth;
    const expectedInnerWidth = identityWidth + searchWidth + utilitiesLeftPadding + utilitiesWidth + menuTriggerWidth;
    if (expectedInnerWidth <= availableWidth - RESPONSIVENESS_BUFFER) {
      return state;
    }
  }
  return possibleStates[possibleStates.length - 1];
}

// node_modules/@cloudscape-design/components/top-navigation/internal.js
function InternalTopNavigation(_a) {
  var { __internalRootRef, identity: identity2, i18nStrings, utilities, search } = _a, restProps = __rest(_a, ["__internalRootRef", "identity", "i18nStrings", "utilities", "search"]);
  checkSafeUrl("TopNavigation", identity2.href);
  const baseProps = getBaseProps(restProps);
  const { mainRef, virtualRef, breakpoint, responsiveState, isSearchExpanded, onSearchUtilityClick } = useTopNavigation({ identity: identity2, search, utilities });
  const [overflowMenuOpen, setOverflowMenuOpen] = (0, import_react398.useState)(false);
  const overflowMenuTriggerRef = (0, import_react398.useRef)(null);
  const isNarrowViewport = breakpoint === "default";
  const isMediumViewport = breakpoint === "xxs";
  const isLargeViewport = breakpoint === "s";
  const i18n = useInternalI18n("top-navigation");
  if (isDevelopment) {
    if (utilities.some((item) => item.type === "menu-dropdown" && hasCheckboxItems(item.items))) {
      warnOnce("TopNavigation", "The TopNavigation component does not support menu-dropdown items with `itemType` equal to `checkbox`.");
    }
  }
  const onIdentityClick = (event) => {
    if (isPlainLeftClick(event)) {
      fireCancelableEvent(identity2.onFollow, {}, event);
    }
  };
  const toggleOverflowMenu = () => {
    setOverflowMenuOpen((overflowMenuOpen2) => !overflowMenuOpen2);
  };
  const menuTriggerVisible = !isSearchExpanded && responsiveState.hideUtilities;
  (0, import_react398.useEffect)(() => {
    setOverflowMenuOpen(false);
  }, [menuTriggerVisible]);
  useEffectOnUpdate(() => {
    var _a2;
    if (!overflowMenuOpen) {
      (_a2 = overflowMenuTriggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [overflowMenuOpen]);
  const content = (isVirtual) => {
    var _a2, _b;
    const Wrapper = isVirtual ? "div" : "header";
    const showIdentity = isVirtual || !isSearchExpanded;
    const showTitle = isVirtual || !responsiveState.hideTitle;
    const showSearchSlot = search && (isVirtual || !responsiveState.hideSearch || isSearchExpanded);
    const showSearchUtility = isVirtual || search && responsiveState.hideSearch;
    const showUtilities = isVirtual || !isSearchExpanded;
    const showMenuTrigger = isVirtual || menuTriggerVisible;
    return import_react398.default.createElement(
      Wrapper,
      { ref: isVirtual ? virtualRef : mainRef, "aria-hidden": isVirtual ? true : void 0, className: clsx_m_default(styles_css_default153["top-navigation"], {
        [styles_css_default153.virtual]: isVirtual,
        [styles_css_default153.hidden]: isVirtual,
        [styles_css_default153.narrow]: isNarrowViewport,
        [styles_css_default153.medium]: isMediumViewport
      }) },
      import_react398.default.createElement(
        "div",
        { className: styles_css_default153["padding-box"] },
        showIdentity && import_react398.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default153.identity, !identity2.logo && styles_css_default153["no-logo"]) },
          import_react398.default.createElement(
            "a",
            { className: styles_css_default153["identity-link"], href: identity2.href, onClick: onIdentityClick },
            identity2.logo && import_react398.default.createElement("img", { role: "img", src: (_a2 = identity2.logo) === null || _a2 === void 0 ? void 0 : _a2.src, alt: (_b = identity2.logo) === null || _b === void 0 ? void 0 : _b.alt, className: clsx_m_default(styles_css_default153.logo, {
              [styles_css_default153.narrow]: isNarrowViewport
            }) }),
            showTitle && import_react398.default.createElement("span", { className: styles_css_default153.title }, identity2.title)
          )
        ),
        showSearchSlot && import_react398.default.createElement(
          "div",
          { className: styles_css_default153.inputs },
          import_react398.default.createElement("div", { className: clsx_m_default(styles_css_default153.search, !isVirtual && isSearchExpanded && styles_css_default153["search-expanded"]) }, search)
        ),
        import_react398.default.createElement(
          "div",
          { className: styles_css_default153.utilities },
          showSearchUtility && import_react398.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default153["utility-wrapper"], styles_css_default153["utility-type-button"], styles_css_default153["utility-type-button-link"], {
              [styles_css_default153.narrow]: isNarrowViewport,
              [styles_css_default153.medium]: isMediumViewport
            }), "data-utility-special": "search" },
            import_react398.default.createElement(Utility, { hideText: true, definition: {
              type: "button",
              iconName: isSearchExpanded ? "close" : "search",
              ariaLabel: isSearchExpanded ? i18n("i18nStrings.searchDismissIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.searchDismissIconAriaLabel) : i18n("i18nStrings.searchIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.searchIconAriaLabel),
              onClick: onSearchUtilityClick
            } })
          ),
          showUtilities && utilities.filter((_utility, i2) => isVirtual || !responsiveState.hideUtilities || responsiveState.hideUtilities.indexOf(i2) === -1).map((utility, i2) => {
            var _a3;
            const hideText = !!responsiveState.hideUtilityText;
            const isLast = (isVirtual || !showMenuTrigger) && i2 === utilities.length - 1;
            const offsetRight = isLast && isLargeViewport ? "xxl" : isLast ? "l" : void 0;
            return import_react398.default.createElement(
              "div",
              { key: i2, className: clsx_m_default(styles_css_default153["utility-wrapper"], styles_css_default153[`utility-type-${utility.type}`], utility.type === "button" && styles_css_default153[`utility-type-button-${(_a3 = utility.variant) !== null && _a3 !== void 0 ? _a3 : "link"}`], {
                [styles_css_default153.narrow]: isNarrowViewport,
                [styles_css_default153.medium]: isMediumViewport
              }), "data-utility-index": i2, "data-utility-hide": `${hideText}` },
              import_react398.default.createElement(Utility, { hideText, definition: utility, offsetRight })
            );
          }),
          isVirtual && utilities.map((utility, i2) => {
            var _a3;
            const hideText = !responsiveState.hideUtilityText;
            const isLast = !showMenuTrigger && i2 === utilities.length - 1;
            const offsetRight = isLast && isLargeViewport ? "xxl" : isLast ? "l" : void 0;
            return import_react398.default.createElement(
              "div",
              { key: i2, className: clsx_m_default(styles_css_default153["utility-wrapper"], styles_css_default153[`utility-type-${utility.type}`], utility.type === "button" && styles_css_default153[`utility-type-button-${(_a3 = utility.variant) !== null && _a3 !== void 0 ? _a3 : "link"}`], {
                [styles_css_default153.narrow]: isNarrowViewport,
                [styles_css_default153.medium]: isMediumViewport
              }), "data-utility-index": i2, "data-utility-hide": `${hideText}` },
              import_react398.default.createElement(Utility, { hideText, definition: utility, offsetRight })
            );
          }),
          showMenuTrigger && import_react398.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default153["utility-wrapper"], styles_css_default153["utility-type-menu-dropdown"], {
              [styles_css_default153.narrow]: isNarrowViewport,
              [styles_css_default153.medium]: isMediumViewport
            }), "data-utility-special": "menu-trigger" },
            import_react398.default.createElement(ButtonTrigger2, { expanded: overflowMenuOpen, onClick: toggleOverflowMenu, offsetRight: "l", ref: !isVirtual ? overflowMenuTriggerRef : void 0 }, i18n("i18nStrings.overflowMenuTriggerText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuTriggerText))
          )
        )
      )
    );
  };
  return import_react398.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef }),
    import_react398.default.createElement(
      VisualContext,
      { contextName: "top-navigation" },
      content(true),
      content(false),
      menuTriggerVisible && overflowMenuOpen && import_react398.default.createElement(
        "div",
        { className: styles_css_default153["overflow-menu-drawer"] },
        import_react398.default.createElement(overflow_menu_default, { headerText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuTitleText, dismissIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuDismissIconAriaLabel, backIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuBackIconAriaLabel, items: utilities.filter((utility, i2) => (!responsiveState.hideUtilities || responsiveState.hideUtilities.indexOf(i2) !== -1) && !utility.disableUtilityCollapse), onClose: toggleOverflowMenu })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/top-navigation/index.js
function TopNavigation(_a) {
  var { utilities = [] } = _a, restProps = __rest(_a, ["utilities"]);
  const baseComponentProps = useBaseComponent("TopNavigation");
  return import_react399.default.createElement(InternalTopNavigation, Object.assign({}, baseComponentProps, { utilities }, restProps));
}
applyDisplayName(TopNavigation, "TopNavigation");

// node_modules/@cloudscape-design/components/tree-view/index.js
var import_react402 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tree-view/internal.js
var import_react401 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tree-view/tree-item/index.js
var import_react400 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tree-view/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/tree-view/test-classes/styles.scoped.css";
var styles_css_default154 = {
  "root": "awsui_root_1js4f_l7ca9_5",
  "tree": "awsui_tree_1js4f_l7ca9_6",
  "treeitem": "awsui_treeitem_1js4f_l7ca9_7",
  "expandable": "awsui_expandable_1js4f_l7ca9_8",
  "expanded": "awsui_expanded_1js4f_l7ca9_9"
};

// node_modules/@cloudscape-design/components/tree-view/tree-item/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/tree-view/tree-item/styles.scoped.css";
var styles_css_default155 = {
  "treeitem-group": "awsui_treeitem-group_1agpu_1w0en_181",
  "treeitem": "awsui_treeitem_1agpu_1w0en_181",
  "expand-toggle-wrapper": "awsui_expand-toggle-wrapper_1agpu_1w0en_198",
  "toggle": "awsui_toggle_1agpu_1w0en_203",
  "structured-item-wrapper": "awsui_structured-item-wrapper_1agpu_1w0en_208"
};

// node_modules/@cloudscape-design/components/tree-view/tree-item/index.js
var InternalTreeItem = ({ item, index, level, i18nStrings, expandedItems = [], renderItemToggleIcon, renderItem, getItemId, getItemChildren, onItemToggle }) => {
  var _a, _b;
  const i18n = useInternalI18n("tree-view");
  const { icon, content, secondaryContent, actions, announcementLabel } = renderItem(item, index);
  const id = getItemId(item, index);
  const children = getItemChildren(item, index) || [];
  const isExpandable = children.length > 0;
  const isExpanded = isExpandable && expandedItems.includes(id);
  const nextLevel = level + 1;
  let customIcon = void 0;
  if (isExpandable && renderItemToggleIcon) {
    customIcon = renderItemToggleIcon({ expanded: isExpanded });
  }
  const itemLabelToAnnounce = announcementLabel ? announcementLabel : typeof content === "string" ? content : "";
  return import_react400.default.createElement(
    "li",
    { id, className: clsx_m_default(styles_css_default155.treeitem, styles_css_default154.treeitem, isExpandable && [styles_css_default154.expandable], isExpanded && [styles_css_default154.expanded]), "aria-expanded": isExpandable ? isExpanded : void 0, "aria-level": level, "data-testid": `awsui-treeitem-${id}` },
    import_react400.default.createElement("div", { className: styles_css_default155["expand-toggle-wrapper"] }, isExpandable && import_react400.default.createElement(
      "div",
      { className: styles_css_default155.toggle },
      import_react400.default.createElement(ExpandToggleButton, { isExpanded, customIcon, expandButtonLabel: joinStrings(i18n("i18nStrings.expandButtonLabel", (_a = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.expandButtonLabel) === null || _a === void 0 ? void 0 : _a.call(i18nStrings, item)), itemLabelToAnnounce), collapseButtonLabel: joinStrings(i18n("i18nStrings.collapseButtonLabel", (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.collapseButtonLabel) === null || _b === void 0 ? void 0 : _b.call(i18nStrings, item)), itemLabelToAnnounce), onExpandableItemToggle: () => onItemToggle({ id, item, expanded: !isExpanded }) })
    )),
    import_react400.default.createElement(
      "div",
      { className: styles_css_default155["structured-item-wrapper"] },
      import_react400.default.createElement(InternalStructuredItem, { icon, content, secondaryContent, actions, wrapActions: false })
    ),
    isExpanded && children.length && import_react400.default.createElement("ul", { className: styles_css_default155["treeitem-group"] }, children.map((child, index2) => {
      return import_react400.default.createElement(InternalTreeItem, { item: child, index: index2, key: `${nextLevel}-${index2}`, level: nextLevel, expandedItems, i18nStrings, onItemToggle, renderItem, getItemId, getItemChildren, renderItemToggleIcon });
    }))
  );
};
var tree_item_default = InternalTreeItem;

// node_modules/@cloudscape-design/components/tree-view/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/tree-view/styles.scoped.css";
var styles_css_default156 = {
  "root": "awsui_root_18gnm_17ax2_181",
  "tree": "awsui_tree_18gnm_17ax2_218"
};

// node_modules/@cloudscape-design/components/tree-view/internal.js
var InternalTreeView = (_a) => {
  var { expandedItems: controlledExpandedItems, items, renderItem, getItemId, getItemChildren, onItemToggle, renderItemToggleIcon, ariaLabel, ariaLabelledby, ariaDescribedby, i18nStrings, __internalRootRef } = _a, rest = __rest(_a, ["expandedItems", "items", "renderItem", "getItemId", "getItemChildren", "onItemToggle", "renderItemToggleIcon", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "i18nStrings", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const [expandedItems, setExpandedItems] = useControllable(controlledExpandedItems, onItemToggle, [], {
    componentName: "TreeView",
    controlledProp: "expandedItems",
    changeHandler: "onItemToggle"
  });
  const onToggle = ({ id, item, expanded }) => {
    if (expanded) {
      setExpandedItems([...expandedItems || [], id]);
    } else {
      setExpandedItems((expandedItems || []).filter((expandedId) => expandedId !== id));
    }
    fireNonCancelableEvent(onItemToggle, { id, item, expanded });
  };
  return import_react401.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default156.root, styles_css_default154.root) }),
    import_react401.default.createElement("ul", { className: clsx_m_default(styles_css_default156.tree, styles_css_default154.tree), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }, items.map((item, index) => {
      return import_react401.default.createElement(tree_item_default, { key: index, item, level: 1, index, expandedItems, i18nStrings, onItemToggle: onToggle, renderItem, getItemId, getItemChildren, renderItemToggleIcon });
    }))
  );
};
var internal_default31 = InternalTreeView;

// node_modules/@cloudscape-design/components/tree-view/index.js
var TreeView = (props2) => {
  const baseComponentProps = useBaseComponent("TreeView");
  const baseProps = getBaseProps(props2);
  const externalProps = getExternalProps(props2);
  return import_react402.default.createElement(internal_default31, Object.assign({}, baseProps, baseComponentProps, externalProps, props2));
};
applyDisplayName(TreeView, "TreeView");
var tree_view_default = TreeView;

// node_modules/@cloudscape-design/components/tutorial-panel/index.js
var import_react408 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/index.js
var import_react406 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/congratulation-screen.js
var import_react403 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/styles.scoped.css";
var styles_css_default157 = {
  "tutorial-list": "awsui_tutorial-list_1u70p_1bqgo_181",
  "tutorial-title": "awsui_tutorial-title_1u70p_1bqgo_217",
  "task": "awsui_task_1u70p_1bqgo_224",
  "task-title": "awsui_task-title_1u70p_1bqgo_232",
  "task-title--status": "awsui_task-title--status_1u70p_1bqgo_240",
  "current-task": "awsui_current-task_1u70p_1bqgo_244",
  "successful-task": "awsui_successful-task_1u70p_1bqgo_248",
  "congratulation-message": "awsui_congratulation-message_1u70p_1bqgo_252",
  "congratulation-message--status": "awsui_congratulation-message--status_1u70p_1bqgo_260",
  "plaintext-congratulation-description": "awsui_plaintext-congratulation-description_1u70p_1bqgo_265",
  "divider": "awsui_divider_1u70p_1bqgo_269",
  "step-list": "awsui_step-list_1u70p_1bqgo_273",
  "step": "awsui_step_1u70p_1bqgo_273",
  "expandable-section-wrapper": "awsui_expandable-section-wrapper_1u70p_1bqgo_284",
  "expandable-section-header": "awsui_expandable-section-header_1u70p_1bqgo_288",
  "step-title": "awsui_step-title_1u70p_1bqgo_293",
  "feedback-link": "awsui_feedback-link_1u70p_1bqgo_294",
  "dismiss-button": "awsui_dismiss-button_1u70p_1bqgo_295",
  "completion-screen-title": "awsui_completion-screen-title_1u70p_1bqgo_296",
  "completion-screen-description": "awsui_completion-screen-description_1u70p_1bqgo_297"
};

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/congratulation-screen.js
function CongratulationScreen({ children, onFeedbackClick, i18nStrings }) {
  return import_react403.default.createElement(
    internal_default4,
    { size: "xxl" },
    import_react403.default.createElement(
      internal_default4,
      { size: "xl" },
      import_react403.default.createElement(
        "div",
        { className: styles_css_default157["congratulation-message"] },
        import_react403.default.createElement(StatusIndicator, { __size: "inherit", type: "success", className: styles_css_default157["congratulation-message--status"] }),
        import_react403.default.createElement("div", { className: styles_css_default157["completion-screen-title"] }, i18nStrings.completionScreenTitle)
      ),
      import_react403.default.createElement(
        InternalBox,
        { color: "text-body-secondary" },
        import_react403.default.createElement("div", { className: clsx_m_default({
          [styles_css_default157["completion-screen-description"]]: true,
          [styles_css_default157["plaintext-congratulation-description"]]: typeof children === "string"
        }) }, children)
      )
    ),
    import_react403.default.createElement("div", { className: styles_css_default157.divider }),
    onFeedbackClick && import_react403.default.createElement(internal_default10, { onFollow: onFeedbackClick, className: styles_css_default157["feedback-link"], variant: "primary" }, i18nStrings.feedbackLinkText)
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/task-list.js
var import_react405 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/task.js
var import_react404 = __toESM(require_react());
function getStatusIndicatorType(taskIndex, currentTaskIndex) {
  if (taskIndex < currentTaskIndex) {
    return "success";
  }
  if (taskIndex === currentTaskIndex) {
    return "in-progress";
  }
  return "pending";
}
function Task({ task, taskIndex, currentTaskIndex, expanded, onToggleExpand, i18nStrings }) {
  const statusIndicatorType = getStatusIndicatorType(taskIndex, currentTaskIndex);
  const onExpandChange = (0, import_react404.useCallback)(() => {
    onToggleExpand(taskIndex);
  }, [onToggleExpand, taskIndex]);
  return import_react404.default.createElement(
    "li",
    { className: styles_css_default157.task },
    import_react404.default.createElement(
      internal_default4,
      { size: "xxs" },
      import_react404.default.createElement(
        "div",
        { className: styles_css_default157["task-title"] },
        import_react404.default.createElement(StatusIndicator, { __size: "inherit", type: statusIndicatorType, iconAriaLabel: i18nStrings.labelsTaskStatus[statusIndicatorType], className: styles_css_default157["task-title--status"] }),
        import_react404.default.createElement(InternalBox, { variant: "h3", padding: { left: "xxxs", vertical: "n" }, fontSize: "heading-s", color: taskIndex < currentTaskIndex ? "text-status-success" : "text-status-inactive" }, i18nStrings.taskTitle(taskIndex, task.title))
      ),
      import_react404.default.createElement(
        "div",
        { className: styles_css_default157["expandable-section-wrapper"] },
        import_react404.default.createElement(
          InternalExpandableSection,
          { header: import_react404.default.createElement("span", { className: styles_css_default157["expandable-section-header"] }, i18nStrings.labelTotalSteps(task.steps.length)), expanded, onChange: onExpandChange, headerAriaLabel: joinStrings(i18nStrings.taskTitle(taskIndex, task.title), i18nStrings.labelTotalSteps(task.steps.length)) },
          import_react404.default.createElement("ol", { className: styles_css_default157["step-list"] }, task.steps.map((step2, stepIndex) => import_react404.default.createElement(
            "li",
            { key: stepIndex, className: styles_css_default157.step },
            import_react404.default.createElement(InternalBox, { color: "text-body-secondary", fontSize: "body-m", padding: { left: "l" }, className: styles_css_default157["step-title"] }, i18nStrings.stepTitle(stepIndex, step2.title))
          )))
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/task-list.js
function TaskList({ tasks, onExitTutorial, currentGlobalStepIndex, i18nStrings }) {
  const currentTaskIndex = getStepInfo(tasks, currentGlobalStepIndex !== null && currentGlobalStepIndex !== void 0 ? currentGlobalStepIndex : 0).taskIndex;
  const [expandedTasks, setExpandedTasks] = (0, import_react405.useState)({ [currentTaskIndex]: true });
  const onToggleExpand = (0, import_react405.useCallback)((stepIndex) => {
    setExpandedTasks((prevTasks) => Object.assign(Object.assign({}, prevTasks), { [stepIndex]: !prevTasks[stepIndex] }));
  }, []);
  (0, import_react405.useEffect)(() => {
    setExpandedTasks({ [currentTaskIndex]: true });
  }, [currentTaskIndex]);
  return import_react405.default.createElement(
    internal_default4,
    { size: "xxl" },
    import_react405.default.createElement("ol", { className: styles_css_default157["tutorial-list"] }, tasks.map((task, index) => {
      var _a;
      return import_react405.default.createElement(Task, { task, key: index, taskIndex: index, currentTaskIndex, expanded: (_a = expandedTasks[index]) !== null && _a !== void 0 ? _a : false, onToggleExpand, i18nStrings });
    })),
    import_react405.default.createElement(
      InternalBox,
      { margin: { top: "xxxs" } },
      import_react405.default.createElement(InternalButton, { onClick: onExitTutorial, formAction: "none", className: styles_css_default157["dismiss-button"] }, i18nStrings.dismissTutorialButtonText)
    )
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/index.js
function TutorialDetailView({ tutorial, onExitTutorial: onExitTutorialHandler, currentStepIndex = 0, onFeedbackClick: onFeedbackClickHandler, i18nStrings }) {
  const isRefresh = useVisualRefresh();
  const onExitTutorial = (0, import_react406.useCallback)(() => {
    fireNonCancelableEvent(onExitTutorialHandler, { tutorial });
  }, [onExitTutorialHandler, tutorial]);
  const onFeedbackClick = (0, import_react406.useMemo)(() => onFeedbackClickHandler && (() => fireNonCancelableEvent(onFeedbackClickHandler, { tutorial })), [onFeedbackClickHandler, tutorial]);
  return import_react406.default.createElement(
    import_react406.default.Fragment,
    null,
    import_react406.default.createElement(
      internal_default4,
      { size: "xl" },
      import_react406.default.createElement(
        "div",
        { className: styles_css_default157["tutorial-title"] },
        import_react406.default.createElement(InternalButton, { variant: "icon", onClick: onExitTutorial, ariaLabel: i18nStrings.labelExitTutorial, formAction: "none", iconName: "arrow-left" }),
        import_react406.default.createElement(InternalBox, { variant: "h2", fontSize: isRefresh ? "heading-m" : "heading-l", padding: { top: "xxs" }, margin: { left: "s" } }, tutorial.title)
      ),
      import_react406.default.createElement(
        "div",
        null,
        import_react406.default.createElement("div", { role: "status" }, tutorial.completed && import_react406.default.createElement(CongratulationScreen, { onFeedbackClick, i18nStrings }, tutorial.completedScreenDescription)),
        !tutorial.completed && import_react406.default.createElement(TaskList, { tasks: tutorial.tasks, onExitTutorial, currentGlobalStepIndex: currentStepIndex, i18nStrings })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-list/index.js
var import_react407 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-list/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-list/styles.scoped.css";
var styles_css_default158 = {
  "content-enter": "awsui_content-enter_ig8mp_1s82y_193",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_ig8mp_1s82y_1",
  "tutorial-list": "awsui_tutorial-list_ig8mp_1s82y_215",
  "tutorial-box": "awsui_tutorial-box_ig8mp_1s82y_251",
  "tutorial-box-title": "awsui_tutorial-box-title_ig8mp_1s82y_295",
  "tutorial-description-plaintext": "awsui_tutorial-description-plaintext_ig8mp_1s82y_301",
  "tutorial-description": "awsui_tutorial-description_ig8mp_1s82y_301",
  "expandable-section": "awsui_expandable-section_ig8mp_1s82y_312",
  "expanded": "awsui_expanded_ig8mp_1s82y_316",
  "button-wrapper": "awsui_button-wrapper_ig8mp_1s82y_320",
  "start": "awsui_start_ig8mp_1s82y_325",
  "expand-button": "awsui_expand-button_ig8mp_1s82y_329",
  "collapse-button": "awsui_collapse-button_ig8mp_1s82y_333",
  "learn-more-link": "awsui_learn-more-link_ig8mp_1s82y_337",
  "title": "awsui_title_ig8mp_1s82y_341",
  "prerequisites-alert": "awsui_prerequisites-alert_ig8mp_1s82y_345",
  "completed": "awsui_completed_ig8mp_1s82y_349",
  "download-link": "awsui_download-link_ig8mp_1s82y_353"
};

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-list/index.js
function TutorialList({ i18nStrings, tutorials, loading = false, onStartTutorial, downloadUrl }) {
  checkSafeUrl("TutorialPanel", downloadUrl);
  const isRefresh = useVisualRefresh();
  return import_react407.default.createElement(
    import_react407.default.Fragment,
    null,
    import_react407.default.createElement(
      internal_default4,
      { size: "s" },
      import_react407.default.createElement(
        internal_default4,
        { size: "m" },
        import_react407.default.createElement(InternalBox, { variant: "h2", fontSize: isRefresh ? "heading-m" : "heading-l", padding: { bottom: "n" } }, i18nStrings.tutorialListTitle),
        import_react407.default.createElement(InternalBox, { variant: "p", color: "text-body-secondary", padding: "n" }, i18nStrings.tutorialListDescription)
      ),
      import_react407.default.createElement(
        internal_default4,
        { size: "l" },
        downloadUrl && import_react407.default.createElement(
          "a",
          { href: downloadUrl, target: "_blank", rel: "noopener noreferrer", className: styles_css_default158["download-link"], "aria-label": i18nStrings.labelTutorialListDownloadLink },
          import_react407.default.createElement(internal_default, { name: "download" }),
          import_react407.default.createElement(InternalBox, { padding: { left: "xs" }, color: "inherit", fontWeight: "bold", display: "inline" }, i18nStrings.tutorialListDownloadLinkText)
        ),
        loading ? import_react407.default.createElement(
          StatusIndicator,
          { type: "loading" },
          import_react407.default.createElement(internal_default2, { tagName: "span" }, i18nStrings.loadingText)
        ) : import_react407.default.createElement("ul", { className: styles_css_default158["tutorial-list"], role: "list" }, tutorials.map((tutorial, index) => import_react407.default.createElement(Tutorial, { tutorial, key: index, onStartTutorial, i18nStrings })))
      )
    )
  );
}
function Tutorial({ tutorial, onStartTutorial: onStartTutorialEventHandler, i18nStrings }) {
  var _a;
  checkSafeUrl("TutorialPanel", tutorial.learnMoreUrl);
  const controlId = useUniqueId();
  const triggerControldId = useUniqueId();
  const headerId = useUniqueId();
  const isRefresh = useVisualRefresh();
  const onStartTutorial = (0, import_react407.useCallback)(() => {
    fireNonCancelableEvent(onStartTutorialEventHandler, { tutorial });
  }, [onStartTutorialEventHandler, tutorial]);
  const [expanded, setExpanded] = (0, import_react407.useState)(!tutorial.prerequisitesNeeded && !tutorial.completed);
  const onClick = (0, import_react407.useCallback)(() => {
    setExpanded((expanded2) => !expanded2);
  }, []);
  return import_react407.default.createElement(
    "li",
    { className: styles_css_default158["tutorial-box"], role: "listitem" },
    import_react407.default.createElement(
      internal_default4,
      { size: "xs" },
      import_react407.default.createElement(
        "div",
        { className: styles_css_default158["tutorial-box-title"] },
        import_react407.default.createElement(InternalBox, { variant: "h3", fontSize: isRefresh ? "heading-s" : "heading-m", id: headerId, margin: { right: "xs" }, padding: "n", className: styles_css_default158.title }, tutorial.title),
        import_react407.default.createElement(
          "div",
          { className: styles_css_default158["button-wrapper"] },
          import_react407.default.createElement(InternalButton, { id: triggerControldId, variant: "icon", ariaExpanded: expanded, __nativeAttributes: {
            "aria-controls": controlId,
            "aria-labelledby": headerId
          }, formAction: "none", onClick, className: expanded ? styles_css_default158["collapse-button"] : styles_css_default158["expand-button"], iconName: expanded ? "angle-up" : "angle-down" })
        )
      ),
      tutorial.completed ? import_react407.default.createElement(StatusIndicator, { __size: "inherit", type: "success", className: styles_css_default158.completed, wrapText: true }, i18nStrings.tutorialCompletedText) : null
    ),
    import_react407.default.createElement(
      "div",
      { "aria-live": "polite" },
      import_react407.default.createElement(
        CSSTransition_default,
        { in: expanded, timeout: 30, classNames: { enter: styles_css_default158["content-enter"] } },
        import_react407.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default158["expandable-section"], expanded && styles_css_default158.expanded), id: controlId },
          import_react407.default.createElement(
            internal_default4,
            { size: "l" },
            import_react407.default.createElement(
              internal_default4,
              { size: "m" },
              tutorial.prerequisitesNeeded && tutorial.prerequisitesAlert && import_react407.default.createElement(internal_default8, { type: "info", className: styles_css_default158["prerequisites-alert"] }, tutorial.prerequisitesAlert),
              import_react407.default.createElement(
                internal_default4,
                { size: "s" },
                import_react407.default.createElement(
                  InternalBox,
                  { color: "text-body-secondary" },
                  import_react407.default.createElement("div", { className: clsx_m_default(styles_css_default158["tutorial-description"], typeof tutorial.description === "string" && styles_css_default158["tutorial-description-plaintext"]) }, tutorial.description)
                ),
                tutorial.learnMoreUrl && import_react407.default.createElement(internal_default10, { href: tutorial.learnMoreUrl, className: styles_css_default158["learn-more-link"], externalIconAriaLabel: i18nStrings.labelLearnMoreExternalIcon, ariaLabel: i18nStrings.labelLearnMoreLink, external: true, variant: "primary" }, i18nStrings.learnMoreLinkText)
              )
            ),
            import_react407.default.createElement(
              InternalBox,
              { margin: { bottom: "xxs" } },
              import_react407.default.createElement(InternalButton, { onClick: onStartTutorial, disabled: (_a = tutorial.prerequisitesNeeded) !== null && _a !== void 0 ? _a : false, formAction: "none", className: styles_css_default158.start }, tutorial.completed ? i18nStrings.restartTutorialButtonText : i18nStrings.startTutorialButtonText)
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/tutorial-panel/styles.scoped.css";
var styles_css_default159 = {
  "tutorial-panel": "awsui_tutorial-panel_1oin5_1h3mq_181"
};

// node_modules/@cloudscape-design/components/tutorial-panel/index.js
function TutorialPanel(_a) {
  var { i18nStrings, loading, tutorials, onFeedbackClick, downloadUrl } = _a, restProps = __rest(_a, ["i18nStrings", "loading", "tutorials", "onFeedbackClick", "downloadUrl"]);
  const { __internalRootRef } = useBaseComponent("TutorialPanel");
  const baseProps = getBaseProps(restProps);
  const context = (0, import_react408.useContext)(hotspotContext);
  return import_react408.default.createElement(
    import_react408.default.Fragment,
    null,
    import_react408.default.createElement("div", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default159["tutorial-panel"]), ref: __internalRootRef }), context.currentTutorial ? import_react408.default.createElement(TutorialDetailView, { i18nStrings, tutorial: context.currentTutorial, onExitTutorial: context.onExitTutorial, currentStepIndex: context.currentStepIndex, onFeedbackClick }) : import_react408.default.createElement(TutorialList, { i18nStrings, tutorials, loading, onStartTutorial: context.onStartTutorial, downloadUrl }))
  );
}
applyDisplayName(TutorialPanel, "TutorialPanel");

// node_modules/@cloudscape-design/components/wizard/index.js
var import_react416 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/analytics.js
var import_react409 = __toESM(require_react());
function useFunnelChangeEvent(funnelInteractionId, funnelIdentifier, steps) {
  const listenForStepChanges = (0, import_react409.useRef)(false);
  (0, import_react409.useEffect)(() => {
    const handle = setTimeout(() => listenForStepChanges.current = true, 0);
    return () => {
      clearTimeout(handle);
      listenForStepChanges.current = false;
    };
  }, [funnelInteractionId]);
  const stepTitles = steps.map((step2) => step2.title).join();
  (0, import_react409.useEffect)(() => {
    if (!funnelInteractionId || !listenForStepChanges.current) {
      return;
    }
    FunnelMetrics.funnelChange({
      funnelInteractionId,
      funnelIdentifier,
      stepConfiguration: getStepConfiguration(steps)
    });
  }, [funnelInteractionId, stepTitles]);
}
function getStepConfiguration(steps) {
  return steps.map((step2, index) => {
    var _a;
    const stepAnalyticsMetadata = getAnalyticsMetadataProps(step2);
    return {
      name: step2.title,
      number: index + 1,
      isOptional: (_a = step2.isOptional) !== null && _a !== void 0 ? _a : false,
      stepIdentifier: stepAnalyticsMetadata === null || stepAnalyticsMetadata === void 0 ? void 0 : stepAnalyticsMetadata.instanceIdentifier
    };
  });
}

// node_modules/@cloudscape-design/components/wizard/internal.js
var import_react415 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/wizard-form.js
var import_react413 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/wizard-actions.js
var import_react411 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/analytics-metadata/utils.js
var getNavigationActionDetail = (targetStepIndex, reason, addAction = false, label) => {
  const metadata = { detail: { targetStepIndex: `${targetStepIndex}`, reason } };
  if (addAction) {
    metadata.action = "navigate";
  }
  if (label) {
    metadata.detail.label = label;
  }
  return getAnalyticsMetadataAttribute(metadata);
};

// node_modules/@cloudscape-design/components/wizard/unmount.js
var import_react410 = __toESM(require_react());
var Unmount = class extends import_react410.default.Component {
  componentWillUnmount() {
    this.props.onUnmount();
  }
  render() {
    return this.props.children;
  }
};

// node_modules/@cloudscape-design/components/wizard/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/wizard/styles.scoped.css";
var styles_css_default160 = {
  "root": "awsui_root_1xupv_qcyqb_145",
  "wizard": "awsui_wizard_1xupv_qcyqb_177",
  "refresh": "awsui_refresh_1xupv_qcyqb_177",
  "small-container": "awsui_small-container_1xupv_qcyqb_184",
  "navigation": "awsui_navigation_1xupv_qcyqb_193",
  "number": "awsui_number_1xupv_qcyqb_226",
  "circle": "awsui_circle_1xupv_qcyqb_242",
  "title": "awsui_title_1xupv_qcyqb_253",
  "active": "awsui_active_1xupv_qcyqb_284",
  "disabled": "awsui_disabled_1xupv_qcyqb_295",
  "enabled": "awsui_enabled_1xupv_qcyqb_305",
  "form": "awsui_form_1xupv_qcyqb_349",
  "form-header": "awsui_form-header_1xupv_qcyqb_354",
  "form-header-content": "awsui_form-header-content_1xupv_qcyqb_369",
  "form-component": "awsui_form-component_1xupv_qcyqb_373",
  "hidden": "awsui_hidden_1xupv_qcyqb_387",
  "collapsed-steps": "awsui_collapsed-steps_1xupv_qcyqb_391",
  "collapsed-steps-hidden": "awsui_collapsed-steps-hidden_1xupv_qcyqb_396",
  "form-header-component-wrapper": "awsui_form-header-component-wrapper_1xupv_qcyqb_400",
  "form-header-component": "awsui_form-header-component_1xupv_qcyqb_400",
  "navigation-link": "awsui_navigation-link_1xupv_qcyqb_416",
  "navigation-link-item": "awsui_navigation-link-item_1xupv_qcyqb_417",
  "navigation-link-label": "awsui_navigation-link-label_1xupv_qcyqb_418",
  "navigation-link-active": "awsui_navigation-link-active_1xupv_qcyqb_422",
  "navigation-link-disabled": "awsui_navigation-link-disabled_1xupv_qcyqb_427",
  "cancel-button": "awsui_cancel-button_1xupv_qcyqb_431",
  "previous-button": "awsui_previous-button_1xupv_qcyqb_432",
  "primary-button": "awsui_primary-button_1xupv_qcyqb_433",
  "skip-to-button": "awsui_skip-to-button_1xupv_qcyqb_434",
  "action-buttons": "awsui_action-buttons_1xupv_qcyqb_438"
};

// node_modules/@cloudscape-design/components/wizard/wizard-actions.js
function WizardActions({ cancelButtonText, onCancelClick, isPrimaryLoading, primaryButtonText, primaryButtonLoadingText, onPrimaryClick, showPrevious, previousButtonText, onPreviousClick, showSkipTo, skipToButtonText, onSkipToClick, isLastStep, activeStepIndex, skipToStepIndex }) {
  const containerRef = (0, import_react411.useRef)(null);
  const primaryButtonRef = (0, import_react411.useRef)(null);
  const onPreviousUnmount = () => {
    var _a, _b;
    if (((_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`.${styles_css_default160["previous-button"]}`)) === document.activeElement) {
      (_b = primaryButtonRef.current) === null || _b === void 0 ? void 0 : _b.focus();
    }
  };
  const onSkipUnmount = () => {
    var _a, _b;
    if (((_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`.${styles_css_default160["skip-to-button"]}`)) === document.activeElement) {
      (_b = primaryButtonRef.current) === null || _b === void 0 ? void 0 : _b.focus();
    }
  };
  return import_react411.default.createElement(
    "div",
    { ref: containerRef },
    import_react411.default.createElement(
      internal_default4,
      { direction: "horizontal", size: "xs", className: styles_css_default160["action-buttons"] },
      import_react411.default.createElement(InternalButton, { className: styles_css_default160["cancel-button"], variant: "link", formAction: "none", onClick: onCancelClick, analyticsAction: "cancel" }, cancelButtonText),
      showSkipTo && skipToButtonText && import_react411.default.createElement(
        Unmount,
        { onUnmount: onSkipUnmount },
        import_react411.default.createElement(
          "span",
          Object.assign({}, getNavigationActionDetail(skipToStepIndex, "skip")),
          import_react411.default.createElement(InternalButton, { className: styles_css_default160["skip-to-button"], onClick: onSkipToClick, formAction: "none", disabled: isPrimaryLoading, analyticsAction: "navigate" }, skipToButtonText)
        )
      ),
      showPrevious && import_react411.default.createElement(
        Unmount,
        { onUnmount: onPreviousUnmount },
        import_react411.default.createElement(
          "span",
          Object.assign({}, getNavigationActionDetail(activeStepIndex - 1, "previous")),
          import_react411.default.createElement(InternalButton, { className: styles_css_default160["previous-button"], onClick: onPreviousClick, formAction: "none", disabled: isPrimaryLoading, analyticsAction: "navigate" }, previousButtonText)
        )
      ),
      import_react411.default.createElement(
        "span",
        Object.assign({}, isLastStep ? {} : getNavigationActionDetail(activeStepIndex + 1, "next")),
        import_react411.default.createElement(InternalButton, { ref: primaryButtonRef, className: styles_css_default160["primary-button"], variant: "primary", formAction: "none", onClick: onPrimaryClick, loading: isPrimaryLoading, loadingText: primaryButtonLoadingText, analyticsAction: isLastStep ? "submit" : "navigate" }, primaryButtonText)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/wizard/wizard-form-header.js
var import_react412 = __toESM(require_react());
function WizardFormHeader({ children }) {
  const isVisualRefresh = useVisualRefresh();
  return import_react412.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default160["form-header"], isVisualRefresh && styles_css_default160["form-header-refresh"]) },
    import_react412.default.createElement("div", { className: styles_css_default160["form-header-content"] }, children)
  );
}

// node_modules/@cloudscape-design/components/wizard/wizard-form.js
var STEP_NAME_SELECTOR = `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_STEP_NAME}"]`;
function WizardFormWithAnalytics(props2) {
  const analyticsMetadata = getAnalyticsMetadataProps(props2.steps[props2.activeStepIndex]);
  const __internalRootRef = useComponentMetadata("WizardForm", PACKAGE_VERSION, analyticsMetadata);
  const stepHeaderRef = (0, import_react413.useRef)(null);
  useEffectOnUpdate(() => {
    var _a;
    if (stepHeaderRef && stepHeaderRef.current) {
      (_a = stepHeaderRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }, [props2.activeStepIndex]);
  return import_react413.default.createElement(
    AnalyticsFunnelStep,
    { stepIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, stepErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, stepNameSelector: STEP_NAME_SELECTOR, stepNumber: props2.activeStepIndex + 1 },
    import_react413.default.createElement(WizardForm, Object.assign({ stepHeaderRef, __internalRootRef }, props2))
  );
}
function WizardForm({ __internalRootRef, stepHeaderRef, steps, activeStepIndex, showCollapsedSteps, i18nStrings, submitButtonText, isPrimaryLoading, allowSkipTo, secondaryActions, onCancelClick, onPreviousClick, onPrimaryClick, onSkipToClick }) {
  var _a;
  const { title, info, description, content, errorText, isOptional } = steps[activeStepIndex] || {};
  const isLastStep = activeStepIndex >= steps.length - 1;
  const skipToTargetIndex = findSkipToTargetIndex(steps, activeStepIndex);
  const { funnelInteractionId, funnelIdentifier } = useFunnel();
  const funnelStepInfo = useFunnelStepRef();
  const errorSlotId = useUniqueId("wizard-error-");
  const showSkipTo = allowSkipTo && skipToTargetIndex !== -1;
  const skipToButtonText = skipToTargetIndex !== -1 && i18nStrings.skipToButtonLabel ? i18nStrings.skipToButtonLabel(steps[skipToTargetIndex], skipToTargetIndex + 1) : void 0;
  (0, import_react413.useEffect)(() => {
    var _a2, _b;
    if (funnelInteractionId && errorText) {
      const stepName = getTextFromSelector(funnelStepInfo.current.stepNameSelector);
      FunnelMetrics.funnelStepError({
        funnelInteractionId,
        stepNumber: funnelStepInfo.current.stepNumber,
        stepNameSelector: funnelStepInfo.current.stepNameSelector,
        stepName,
        stepIdentifier: funnelStepInfo.current.stepIdentifier,
        currentDocument: (_a2 = __internalRootRef === null || __internalRootRef === void 0 ? void 0 : __internalRootRef.current) === null || _a2 === void 0 ? void 0 : _a2.ownerDocument,
        totalSubSteps: funnelStepInfo.current.subStepCount.current,
        funnelIdentifier,
        subStepAllSelector: getSubStepAllSelector(),
        errorContext: funnelStepInfo.current.stepErrorContext,
        subStepConfiguration: (_b = funnelStepInfo.current.subStepConfiguration.current) === null || _b === void 0 ? void 0 : _b.get(funnelStepInfo.current.stepNumber),
        stepErrorSelector: "#" + errorSlotId
      });
    }
  }, [funnelInteractionId, funnelIdentifier, isLastStep, errorText, __internalRootRef, errorSlotId, funnelStepInfo]);
  return import_react413.default.createElement(
    import_react413.default.Fragment,
    null,
    import_react413.default.createElement(
      WizardFormHeader,
      null,
      import_react413.default.createElement("div", { className: clsx_m_default(styles_css_default160["collapsed-steps"], !showCollapsedSteps && styles_css_default160["collapsed-steps-hidden"]) }, (_a = i18nStrings.collapsedStepsLabel) === null || _a === void 0 ? void 0 : _a.call(i18nStrings, activeStepIndex + 1, steps.length)),
      import_react413.default.createElement(
        InternalHeader,
        { className: styles_css_default160["form-header-component"], variant: "h1", description, info, __headingTagRef: stepHeaderRef, __headingTagTabIndex: -1 },
        import_react413.default.createElement(
          "span",
          { className: styles_css_default160["form-header-component-wrapper"] },
          import_react413.default.createElement("span", Object.assign({}, { [DATA_ATTR_FUNNEL_KEY]: FUNNEL_KEY_STEP_NAME }), title),
          isOptional && import_react413.default.createElement("i", null, ` - ${i18nStrings.optional}`)
        )
      )
    ),
    import_react413.default.createElement(InternalForm, Object.assign({ __internalRootRef, className: styles_css_default160["form-component"], actions: import_react413.default.createElement(WizardActions, { cancelButtonText: i18nStrings.cancelButton, primaryButtonText: isLastStep ? submitButtonText !== null && submitButtonText !== void 0 ? submitButtonText : i18nStrings.submitButton : i18nStrings.nextButton, primaryButtonLoadingText: isLastStep ? i18nStrings.submitButtonLoadingAnnouncement : i18nStrings.nextButtonLoadingAnnouncement, previousButtonText: i18nStrings.previousButton, onCancelClick, onPreviousClick, onPrimaryClick, onSkipToClick: () => onSkipToClick(skipToTargetIndex), showPrevious: activeStepIndex !== 0, isPrimaryLoading, showSkipTo, skipToButtonText, isLastStep, activeStepIndex, skipToStepIndex: skipToTargetIndex }), secondaryActions, errorText, __errorSlotId: errorSlotId, errorIconAriaLabel: i18nStrings.errorIconAriaLabel }, funnelStepInfo.current.funnelStepProps), content)
  );
}
function findSkipToTargetIndex(steps, activeStepIndex) {
  let nextRequiredStepIndex = activeStepIndex;
  do {
    nextRequiredStepIndex++;
  } while (nextRequiredStepIndex < steps.length - 1 && steps[nextRequiredStepIndex].isOptional);
  return nextRequiredStepIndex > activeStepIndex + 1 ? nextRequiredStepIndex : -1;
}

// node_modules/@cloudscape-design/components/wizard/wizard-navigation.js
var import_react414 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/wizard/analytics-metadata/styles.scoped.css";
var styles_css_default161 = {
  "step-title": "awsui_step-title_zr0a1_2uwax_5"
};

// node_modules/@cloudscape-design/components/wizard/wizard-navigation.js
var Statuses;
(function(Statuses2) {
  Statuses2["Active"] = "active";
  Statuses2["Unvisited"] = "unvisited";
  Statuses2["Visited"] = "visited";
  Statuses2["Next"] = "next";
})(Statuses || (Statuses = {}));
function Navigation2({ activeStepIndex, farthestStepIndex, allowSkipTo, hidden, i18nStrings, isLoadingNextStep, onStepClick, onSkipToClick, steps }) {
  const isVisualRefresh = useVisualRefresh();
  return import_react414.default.createElement(
    "nav",
    { className: clsx_m_default(styles_css_default160.navigation, hidden && styles_css_default160.hidden, isVisualRefresh && styles_css_default160.refresh), "aria-label": i18nStrings.navigationAriaLabel },
    import_react414.default.createElement("ul", { className: clsx_m_default(isVisualRefresh && styles_css_default160.refresh) }, steps.map((step2, index) => isVisualRefresh ? import_react414.default.createElement(NavigationStepVisualRefresh, { i18nStrings, index, key: index, onStepClick, onSkipToClick, status: getStatus(index), step: step2 }) : import_react414.default.createElement(NavigationStepClassic, { i18nStrings, index, key: index, onStepClick, onSkipToClick, status: getStatus(index), step: step2 })))
  );
  function getStatus(index) {
    if (activeStepIndex === index) {
      return Statuses.Active;
    }
    if (isLoadingNextStep) {
      return Statuses.Unvisited;
    }
    if (farthestStepIndex >= index) {
      return Statuses.Visited;
    }
    if (allowSkipTo && canSkip(activeStepIndex + 1, index)) {
      return Statuses.Next;
    }
    return Statuses.Unvisited;
  }
  function canSkip(fromIndex, toIndex) {
    let index = fromIndex;
    do {
      if (!steps[index].isOptional) {
        return false;
      }
      index++;
    } while (index < toIndex);
    return true;
  }
}
function NavigationStepVisualRefresh({ i18nStrings, index, onStepClick, onSkipToClick, status, step: step2 }) {
  function handleStepInteraction() {
    if (status === Statuses.Visited) {
      onStepClick(index);
    }
    if (status === Statuses.Next) {
      onSkipToClick(index);
    }
  }
  const state = {
    active: "active",
    unvisited: "disabled",
    visited: "enabled",
    next: "enabled"
  }[status];
  const linkClassName = clsx_m_default(styles_css_default160["navigation-link"], {
    [styles_css_default160["navigation-link-active"]]: status === Statuses.Active,
    [styles_css_default160["navigation-link-disabled"]]: status === Statuses.Unvisited
  });
  return import_react414.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default160[`${state}`], styles_css_default160["navigation-link-item"]) },
    import_react414.default.createElement("hr", null),
    import_react414.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default160.number, styles_css_default160["navigation-link-label"]) },
      i18nStrings.stepNumberLabel && i18nStrings.stepNumberLabel(index + 1),
      step2.isOptional && import_react414.default.createElement("i", null, ` - ${i18nStrings.optional}`)
    ),
    import_react414.default.createElement(
      "a",
      Object.assign({ className: linkClassName, "aria-current": status === Statuses.Active ? "step" : void 0, "aria-disabled": status === Statuses.Unvisited ? "true" : void 0, onClick: (event) => {
        event.preventDefault();
        handleStepInteraction();
      }, onKeyDown: (event) => {
        if (event.key === " " || event.key === "Enter") {
          event.preventDefault();
        }
        if (event.key === "Enter") {
          handleStepInteraction();
        }
      }, onKeyUp: (event) => {
        if (event.key === " ") {
          handleStepInteraction();
        }
      }, role: "button", tabIndex: status === Statuses.Visited || status === Statuses.Next ? 0 : void 0 }, status === Statuses.Unvisited ? {} : getNavigationActionDetail(index, "step", true, `.${styles_css_default161["step-title"]}`)),
      import_react414.default.createElement("div", { className: styles_css_default160.circle }),
      import_react414.default.createElement("span", { className: clsx_m_default(styles_css_default160.title, styles_css_default161["step-title"]) }, step2.title)
    )
  );
}
function NavigationStepClassic({ i18nStrings, index, onStepClick, onSkipToClick, status, step: step2 }) {
  const spanClassName = clsx_m_default(styles_css_default160["navigation-link"], status === Statuses.Active ? styles_css_default160["navigation-link-active"] : styles_css_default160["navigation-link-disabled"]);
  return import_react414.default.createElement(
    "li",
    Object.assign({ className: styles_css_default160["navigation-link-item"] }, status === Statuses.Unvisited ? {} : getNavigationActionDetail(index, "step", true, `.${styles_css_default161["step-title"]}`)),
    import_react414.default.createElement(
      InternalBox,
      { variant: "small", className: styles_css_default160["navigation-link-label"], display: "block", margin: { bottom: "xxs" } },
      i18nStrings.stepNumberLabel && i18nStrings.stepNumberLabel(index + 1),
      step2.isOptional && import_react414.default.createElement("i", null, ` - ${i18nStrings.optional}`)
    ),
    import_react414.default.createElement("div", null, status === Statuses.Visited || status === Statuses.Next ? import_react414.default.createElement(internal_default10, { className: clsx_m_default(styles_css_default160["navigation-link"], styles_css_default161["step-title"]), onFollow: (evt) => {
      evt.preventDefault();
      if (status === Statuses.Visited) {
        onStepClick(index);
      } else {
        onSkipToClick(index);
      }
    }, variant: "primary" }, step2.title) : import_react414.default.createElement("span", { className: clsx_m_default(spanClassName, styles_css_default161["step-title"]), "aria-current": status === Statuses.Active ? "step" : void 0, "aria-disabled": status === Statuses.Active ? void 0 : "true" }, step2.title))
  );
}

// node_modules/@cloudscape-design/components/wizard/internal.js
function InternalWizard(_a) {
  var _b, _c, _d, _e, _f, _g, _h, _j;
  var { steps, activeStepIndex: controlledActiveStepIndex, submitButtonText, isLoadingNextStep = false, allowSkipTo = false, secondaryActions, onCancel, onSubmit, onNavigate, __internalRootRef, __injectAnalyticsComponentMetadata = false } = _a, rest = __rest(_a, ["steps", "activeStepIndex", "submitButtonText", "isLoadingNextStep", "allowSkipTo", "secondaryActions", "onCancel", "onSubmit", "onNavigate", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  const baseProps = getBaseProps(rest);
  const [breakpoint, breakpointsRef] = useContainerBreakpoints(["xs"]);
  const ref = useMergeRefs(breakpointsRef, __internalRootRef);
  const smallContainer = breakpoint === "default";
  const [activeStepIndex, setActiveStepIndex] = useControllable(controlledActiveStepIndex, onNavigate, 0, {
    componentName: "Wizard",
    controlledProp: "activeStepIndex",
    changeHandler: "onNavigate"
  });
  const { funnelIdentifier, funnelInteractionId, funnelSubmit, funnelCancel, funnelProps, funnelNextOrSubmitAttempt } = useFunnel();
  const actualActiveStepIndex = activeStepIndex ? Math.min(activeStepIndex, steps.length - 1) : 0;
  const farthestStepIndex = (0, import_react415.useRef)(actualActiveStepIndex);
  farthestStepIndex.current = Math.max(farthestStepIndex.current, actualActiveStepIndex);
  const isVisualRefresh = useVisualRefresh();
  const isLastStep = actualActiveStepIndex >= steps.length - 1;
  const navigationEvent = (requestedStepIndex, reason) => {
    if (funnelInteractionId) {
      const stepName = getTextFromSelector(STEP_NAME_SELECTOR);
      FunnelMetrics.funnelStepNavigation({
        navigationType: reason,
        funnelInteractionId,
        stepNumber: actualActiveStepIndex + 1,
        stepName,
        stepNameSelector: STEP_NAME_SELECTOR,
        destinationStepNumber: requestedStepIndex + 1,
        subStepAllSelector: getSubStepAllSelector()
      });
    }
    setActiveStepIndex(requestedStepIndex);
    fireNonCancelableEvent(onNavigate, { requestedStepIndex, reason });
  };
  const onStepClick = (stepIndex) => navigationEvent(stepIndex, "step");
  const onSkipToClick = (stepIndex) => navigationEvent(stepIndex, "skip");
  const onCancelClick = () => {
    funnelCancel();
    fireNonCancelableEvent(onCancel);
  };
  const onPreviousClick = () => navigationEvent(actualActiveStepIndex - 1, "previous");
  const onPrimaryClick = () => {
    funnelNextOrSubmitAttempt();
    if (isLastStep) {
      funnelSubmit();
      fireNonCancelableEvent(onSubmit);
    } else {
      navigationEvent(actualActiveStepIndex + 1, "next");
    }
  };
  useFunnelChangeEvent(funnelInteractionId, funnelIdentifier, steps);
  const i18n = useInternalI18n("wizard");
  const skipToButtonLabel = i18n("i18nStrings.skipToButtonLabel", (_b = rest.i18nStrings) === null || _b === void 0 ? void 0 : _b.skipToButtonLabel, (format3) => (task) => format3({ task__title: task.title }));
  const i18nStrings = Object.assign(Object.assign({}, rest.i18nStrings), { skipToButtonLabel, stepNumberLabel: i18n("i18nStrings.stepNumberLabel", (_c = rest.i18nStrings) === null || _c === void 0 ? void 0 : _c.stepNumberLabel, (format3) => (stepNumber) => format3({ stepNumber })), collapsedStepsLabel: i18n("i18nStrings.collapsedStepsLabel", (_d = rest.i18nStrings) === null || _d === void 0 ? void 0 : _d.collapsedStepsLabel, (format3) => (stepNumber, stepsCount) => format3({ stepNumber, stepsCount })), navigationAriaLabel: i18n("i18nStrings.navigationAriaLabel", (_e = rest.i18nStrings) === null || _e === void 0 ? void 0 : _e.navigationAriaLabel), cancelButton: i18n("i18nStrings.cancelButton", (_f = rest.i18nStrings) === null || _f === void 0 ? void 0 : _f.cancelButton), previousButton: i18n("i18nStrings.previousButton", (_g = rest.i18nStrings) === null || _g === void 0 ? void 0 : _g.previousButton), nextButton: i18n("i18nStrings.nextButton", (_h = rest.i18nStrings) === null || _h === void 0 ? void 0 : _h.nextButton), optional: i18n("i18nStrings.optional", (_j = rest.i18nStrings) === null || _j === void 0 ? void 0 : _j.optional) });
  if (activeStepIndex && activeStepIndex >= steps.length) {
    warnOnce("Wizard", `You have set \`activeStepIndex\` to ${activeStepIndex} but you have provided only ${steps.length} steps. Its value is ignored and the component uses ${steps.length - 1} instead.`);
  }
  if (allowSkipTo && !skipToButtonLabel) {
    warnOnce("Wizard", `You have set \`allowSkipTo\` but you have not provided \`i18nStrings.skipToButtonLabel\`. The skip-to button will not be rendered.`);
  }
  const componentAnalyticsMetadata2 = {
    name: "awsui.Wizard",
    label: {
      root: "body",
      selector: `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_FUNNEL_NAME}"]`
    },
    properties: Object.assign({ stepsCount: `${(steps || []).length}`, activeStepIndex: `${activeStepIndex}`, activeStepLabel: `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_STEP_NAME}"]` }, rest.analyticsMetadata || {})
  };
  return import_react415.default.createElement(
    "div",
    Object.assign({}, baseProps, funnelProps, { ref, className: clsx_m_default(styles_css_default160.root, baseProps.className) }, __injectAnalyticsComponentMetadata ? getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 }) : {}),
    import_react415.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default160.wizard, isVisualRefresh && styles_css_default160.refresh, smallContainer && styles_css_default160["small-container"]) },
      import_react415.default.createElement(Navigation2, { activeStepIndex: actualActiveStepIndex, farthestStepIndex: farthestStepIndex.current, allowSkipTo, hidden: smallContainer, i18nStrings, isLoadingNextStep, onStepClick, onSkipToClick, steps }),
      import_react415.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default160.form, isVisualRefresh && styles_css_default160.refresh, smallContainer && styles_css_default160["small-container"]) },
        import_react415.default.createElement(WizardFormWithAnalytics, { steps, showCollapsedSteps: smallContainer, i18nStrings, submitButtonText, activeStepIndex: actualActiveStepIndex, isPrimaryLoading: isLoadingNextStep, allowSkipTo, secondaryActions, onCancelClick, onPreviousClick, onSkipToClick, onPrimaryClick })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/wizard/index.js
function Wizard(_a) {
  var { isLoadingNextStep = false, allowSkipTo = false } = _a, props2 = __rest(_a, ["isLoadingNextStep", "allowSkipTo"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const baseComponentProps = useBaseComponent("Wizard", {
    props: {
      allowSkipTo,
      flowType: analyticsMetadata.flowType
    },
    metadata: {
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier),
      hasResourceType: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType)
    }
  }, analyticsMetadata);
  const { wizardCount } = useFunnel();
  const externalProps = getExternalProps(props2);
  (0, import_react416.useEffect)(() => {
    wizardCount.current++;
    return () => void wizardCount.current--;
  }, [wizardCount]);
  return import_react416.default.createElement(
    AnalyticsFunnel,
    { funnelIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, funnelFlowType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.flowType, funnelErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, funnelResourceType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType, funnelType: "multi-page", optionalStepNumbers: props2.steps.map((step2, index) => step2.isOptional ? index + 1 : -1).filter((step2) => step2 !== -1), totalFunnelSteps: props2.steps.length, stepConfiguration: getStepConfiguration(props2.steps) },
    import_react416.default.createElement(InternalWizard, Object.assign({ isLoadingNextStep, allowSkipTo }, externalProps, baseComponentProps, { __injectAnalyticsComponentMetadata: true }))
  );
}
applyDisplayName(Wizard, "Wizard");
var wizard_default = Wizard;
export {
  alert_default as Alert,
  AnchorNavigation,
  AnnotationContext,
  app_layout_default as AppLayout,
  app_layout_toolbar_default as AppLayoutToolbar,
  area_chart_default as AreaChart,
  attribute_editor_default as AttributeEditor,
  autosuggest_default as Autosuggest,
  Badge,
  bar_chart_default as BarChart,
  Box,
  BreadcrumbGroup,
  button_default as Button,
  button_dropdown_default as ButtonDropdown,
  button_group_default as ButtonGroup,
  Calendar2 as Calendar,
  cards_default as Cards,
  checkbox_default as Checkbox,
  code_editor_default as CodeEditor,
  CollectionPreferences,
  ColumnLayout2 as ColumnLayout,
  container_default as Container,
  ContentLayout,
  CopyToClipboard,
  date_input_default as DateInput,
  date_picker_default as DatePicker,
  date_range_picker_default as DateRangePicker,
  Drawer2 as Drawer,
  ExpandableSection,
  FileDropzone,
  file_input_default as FileInput,
  file_token_group_default as FileTokenGroup,
  file_upload_default as FileUpload,
  flashbar_default as Flashbar,
  Form,
  FormField,
  Grid3 as Grid,
  Header,
  HelpPanel,
  Hotspot,
  Icon,
  input_default as Input,
  KeyValuePairs,
  line_chart_default as LineChart,
  link_default as Link,
  List,
  live_region_default as LiveRegion,
  mixed_line_bar_chart_default as MixedLineBarChart,
  Modal,
  multiselect_default as Multiselect,
  Pagination,
  pie_chart_default2 as PieChart,
  popover_default as Popover,
  ProgressBar,
  prompt_input_default as PromptInput,
  property_filter_default as PropertyFilter,
  radio_group_default as RadioGroup,
  s3_resource_selector_default as S3ResourceSelector,
  SegmentedControl,
  select_default as Select,
  SideNavigation,
  Slider,
  SpaceBetween,
  Spinner,
  SplitPanel2 as SplitPanel,
  StatusIndicator2 as StatusIndicator,
  steps_default as Steps,
  table_default as Table,
  Tabs,
  tag_editor_default as TagEditor,
  TextContent,
  text_filter_default as TextFilter,
  textarea_default as Textarea,
  tiles_default as Tiles,
  time_input_default as TimeInput,
  toggle_default as Toggle,
  toggle_button_default as ToggleButton,
  TokenGroup2 as TokenGroup,
  TopNavigation,
  tree_view_default as TreeView,
  TutorialPanel,
  wizard_default as Wizard
};
//# sourceMappingURL=@cloudscape-design_components.js.map
