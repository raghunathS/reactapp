import {
  require_react_dom
} from "./chunk-GKJBSOWT.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/tslib/tslib.es6.mjs
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/component-metadata.js
var import_react = __toESM(require_react());
var COMPONENT_METADATA_KEY = "__awsuiMetadata__";
function useComponentMetadata(componentName, packageMetadata, analyticsMetadata) {
  const elementRef = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(() => {
    if (elementRef.current) {
      const pkgMetadata = typeof packageMetadata === "string" ? { version: packageMetadata } : packageMetadata;
      const node = elementRef.current;
      const metadata = Object.assign(Object.assign({}, pkgMetadata), { name: componentName });
      if (analyticsMetadata && Object.keys(analyticsMetadata).length > 0) {
        metadata.analytics = analyticsMetadata;
      }
      Object.freeze(metadata);
      Object.defineProperty(node, COMPONENT_METADATA_KEY, { value: metadata, writable: false, configurable: true });
    }
  });
  return elementRef;
}

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/component-metrics.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/metrics/log-clients.js
var AWSUI_EVENT = "awsui";
function validateLength(value, maxLength) {
  return !value || value.length <= maxLength;
}
var CLogClient = class {
  /**
   * Sends metric but only if Console Platform client logging JS API is present in the page.
   */
  sendMetric(metricName, value, detail) {
    if (!metricName || !/^[a-zA-Z0-9_-]+$/.test(metricName)) {
      console.error(`Invalid metric name: ${metricName}`);
      return;
    }
    if (!validateLength(metricName, 1e3)) {
      console.error(`Metric name ${metricName} is too long`);
      return;
    }
    if (!validateLength(detail, 4e3)) {
      console.error(`Detail for metric ${metricName} is too long: ${detail}`);
      return;
    }
    const wasSent = new PanoramaClient().sendMetric({
      eventContext: metricName,
      eventDetail: detail,
      eventValue: `${value}`,
      timestamp: Date.now()
    });
    if (wasSent) {
      return;
    }
    const AWSC = this.findAWSC(window);
    if (typeof AWSC === "object" && typeof AWSC.Clog === "object" && typeof AWSC.Clog.log === "function") {
      AWSC.Clog.log(metricName, value, detail);
    }
  }
  findAWSC(currentWindow) {
    try {
      if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC) === "object") {
        return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC;
      }
      if (!currentWindow || currentWindow.parent === currentWindow) {
        return void 0;
      }
      return this.findAWSC(currentWindow.parent);
    } catch (ex) {
      return void 0;
    }
  }
};
var PanoramaClient = class {
  /**
   * Sends metric but only if Console Platform client v2 logging JS API is present in the page.
   */
  sendMetric(metric) {
    const panorama = this.findPanorama(window);
    if (!panorama) {
      return false;
    }
    const payload = Object.assign(Object.assign({ eventType: AWSUI_EVENT, timestamp: Date.now() }, metric), { eventDetail: typeof metric.eventDetail === "object" ? JSON.stringify(metric.eventDetail) : metric.eventDetail, eventValue: typeof metric.eventValue === "object" ? JSON.stringify(metric.eventValue) : metric.eventValue });
    if (!validateLength(payload.eventDetail, 4e3)) {
      this.onMetricError(`Event detail for metric is too long: ${payload.eventDetail}`);
      return true;
    }
    if (!validateLength(payload.eventValue, 4e3)) {
      this.onMetricError(`Event value for metric is too long: ${payload.eventValue}`);
      return true;
    }
    if (!validateLength(payload.eventContext, 4e3)) {
      this.onMetricError(`Event context for metric is too long: ${payload.eventContext}`);
      return true;
    }
    panorama("trackCustomEvent", payload);
    return true;
  }
  onMetricError(message) {
    console.error(message);
    const panorama = this.findPanorama(window);
    if (panorama) {
      panorama("trackCustomEvent", {
        eventType: AWSUI_EVENT,
        eventContext: "awsui-metric-error",
        eventDetail: message.slice(0, 4e3),
        timestamp: Date.now()
      });
    }
  }
  findPanorama(currentWindow) {
    try {
      if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.panorama) === "function") {
        return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.panorama;
      }
      const panoramaSymbol = Symbol.for("panorama");
      const symbolProperty = currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow[panoramaSymbol];
      if (typeof symbolProperty === "function") {
        return symbolProperty;
      }
      if (!currentWindow || currentWindow.parent === currentWindow) {
        return void 0;
      }
      return this.findPanorama(currentWindow.parent);
    } catch (ex) {
      return void 0;
    }
  }
};

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/metrics/formatters.js
function buildMetricDetail(detail, context) {
  const metricOrigin = typeof AWSUI_METRIC_ORIGIN !== "undefined" ? AWSUI_METRIC_ORIGIN : "main";
  const detailObject = Object.assign({
    o: metricOrigin,
    t: context.theme,
    // React is the only framework we're using.
    f: "react",
    // Remove spaces from the version string for compactness
    v: context.packageVersion.replace(/\s/g, "")
  }, detail);
  return jsonStringify(detailObject);
}
function buildComponentMetricDetail({ componentName, action, configuration }, context) {
  return buildMetricDetail({
    a: action,
    s: componentName,
    c: configuration
  }, context);
}
function jsonStringify(detailObject) {
  return JSON.stringify(detailObject, detailSerializer);
}
function detailSerializer(key, value) {
  if (typeof value === "number" && !Number.isFinite(value)) {
    return `${value}`;
  }
  return value;
}
function getMajorVersion(versionString) {
  const majorVersionMatch = versionString.match(/^(\d+\.\d+)/);
  return majorVersionMatch ? majorVersionMatch[1].replace(".", "") : "";
}

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/metrics/metrics.js
var oneTimeMetrics = /* @__PURE__ */ new Set();
var Metrics = class {
  constructor(...args) {
    this.clog = new CLogClient();
    this.panorama = new PanoramaClient();
    if (args.length === 1) {
      this.context = args[0];
    } else {
      const [packageSource, packageVersion] = args;
      this.context = { packageSource, packageVersion, theme: "unknown" };
    }
  }
  sendComponentMetric(metric) {
    this.sendMetricOnce(`awsui_${metric.componentName}_${this.context.theme.charAt(0)}${getMajorVersion(this.context.packageVersion)}`, 1, buildComponentMetricDetail(metric, this.context));
  }
  /*
   * Calls Console Platform's client logging only the first time the provided metricName is used.
   * Subsequent calls with the same metricName are ignored.
   */
  sendMetricOnce(metricName, value, detail) {
    const key = [metricName + value + detail].join("|");
    if (!oneTimeMetrics.has(key)) {
      this.clog.sendMetric(metricName, value, detail);
      oneTimeMetrics.add(key);
    }
  }
  /**
   * Calls Console Platform's client v2 logging JS API with provided metric name and detail.
   * Does nothing if Console Platform client logging JS is not present in page.
   */
  sendPanoramaMetric(metric) {
    this.panorama.sendMetric(metric);
  }
  sendOpsMetricObject(metricName, detail) {
    this.sendMetricOnce(metricName, 1, buildMetricDetail(detail, this.context));
  }
  sendOpsMetricValue(metricName, value) {
    this.sendMetricOnce(metricName, value);
  }
  /*
   * Reports a metric value 1 to Console Platform's client logging service to indicate that the
   * component was loaded. The component load event will only be reported as used to client logging
   * service once per page view.
   */
  logComponentsLoaded() {
    this.sendComponentMetric({ componentName: this.context.packageSource, action: "loaded" });
  }
  /*
   * Reports a metric value 1 to Console Platform's client logging service to indicate that the
   * component was used in the page.  A component will only be reported as used to client logging
   * service once per page view.
   */
  logComponentUsed(componentName, configuration) {
    this.sendComponentMetric({
      action: "used",
      componentName,
      configuration
    });
  }
};

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/component-metrics.js
function useComponentMetrics(componentName, settings, configuration = { props: {} }) {
  (0, import_react2.useEffect)(() => {
    const metrics2 = new Metrics(settings);
    if (typeof window !== "undefined") {
      metrics2.sendOpsMetricValue("awsui-viewport-width", window.innerWidth || 0);
      metrics2.sendOpsMetricValue("awsui-viewport-height", window.innerHeight || 0);
    }
    metrics2.logComponentsLoaded();
    metrics2.logComponentUsed(componentName.toLowerCase(), configuration);
  }, []);
}

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/init-awsui-versions.js
function initAwsUiVersions(source, packageVersion) {
  if (typeof window !== "undefined") {
    if (!window.awsuiVersions) {
      window.awsuiVersions = {};
    }
    if (!window.awsuiVersions[source]) {
      window.awsuiVersions[source] = [];
    }
    window.awsuiVersions[source].push(packageVersion);
  }
}

// node_modules/@cloudscape-design/component-toolkit/internal/container-queries/use-resize-observer.js
var import_react_dom = __toESM(require_react_dom());

// node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js
var resizeObservers = [];

// node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js
var hasActiveObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.activeTargets.length > 0;
  });
};

// node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js
var hasSkippedObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.skippedTargets.length > 0;
  });
};

// node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js
var msg = "ResizeObserver loop completed with undelivered notifications.";
var deliverResizeLoopError = function() {
  var event;
  if (typeof ErrorEvent === "function") {
    event = new ErrorEvent("error", {
      message: msg
    });
  } else {
    event = document.createEvent("Event");
    event.initEvent("error", false, false);
    event.message = msg;
  }
  window.dispatchEvent(event);
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js
var ResizeObserverBoxOptions;
(function(ResizeObserverBoxOptions2) {
  ResizeObserverBoxOptions2["BORDER_BOX"] = "border-box";
  ResizeObserverBoxOptions2["CONTENT_BOX"] = "content-box";
  ResizeObserverBoxOptions2["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));

// node_modules/@juggle/resize-observer/lib/utils/freeze.js
var freeze = function(obj) {
  return Object.freeze(obj);
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js
var ResizeObserverSize = /* @__PURE__ */ function() {
  function ResizeObserverSize2(inlineSize, blockSize) {
    this.inlineSize = inlineSize;
    this.blockSize = blockSize;
    freeze(this);
  }
  return ResizeObserverSize2;
}();

// node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js
var DOMRectReadOnly = function() {
  function DOMRectReadOnly2(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.top = this.y;
    this.left = this.x;
    this.bottom = this.top + this.height;
    this.right = this.left + this.width;
    return freeze(this);
  }
  DOMRectReadOnly2.prototype.toJSON = function() {
    var _a2 = this, x = _a2.x, y = _a2.y, top = _a2.top, right = _a2.right, bottom = _a2.bottom, left = _a2.left, width = _a2.width, height = _a2.height;
    return { x, y, top, right, bottom, left, width, height };
  };
  DOMRectReadOnly2.fromRect = function(rectangle) {
    return new DOMRectReadOnly2(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
  };
  return DOMRectReadOnly2;
}();

// node_modules/@juggle/resize-observer/lib/utils/element.js
var isSVG = function(target) {
  return target instanceof SVGElement && "getBBox" in target;
};
var isHidden = function(target) {
  if (isSVG(target)) {
    var _a2 = target.getBBox(), width = _a2.width, height = _a2.height;
    return !width && !height;
  }
  var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
  return !(offsetWidth || offsetHeight || target.getClientRects().length);
};
var isElement = function(obj) {
  var _a2;
  if (obj instanceof Element) {
    return true;
  }
  var scope = (_a2 = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a2 === void 0 ? void 0 : _a2.defaultView;
  return !!(scope && obj instanceof scope.Element);
};
var isReplacedElement = function(target) {
  switch (target.tagName) {
    case "INPUT":
      if (target.type !== "image") {
        break;
      }
    case "VIDEO":
    case "AUDIO":
    case "EMBED":
    case "OBJECT":
    case "CANVAS":
    case "IFRAME":
    case "IMG":
      return true;
  }
  return false;
};

// node_modules/@juggle/resize-observer/lib/utils/global.js
var global = typeof window !== "undefined" ? window : {};

// node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js
var cache = /* @__PURE__ */ new WeakMap();
var scrollRegexp = /auto|scroll/;
var verticalRegexp = /^tb|vertical/;
var IE = /msie|trident/i.test(global.navigator && global.navigator.userAgent);
var parseDimension = function(pixel) {
  return parseFloat(pixel || "0");
};
var size = function(inlineSize, blockSize, switchSizes) {
  if (inlineSize === void 0) {
    inlineSize = 0;
  }
  if (blockSize === void 0) {
    blockSize = 0;
  }
  if (switchSizes === void 0) {
    switchSizes = false;
  }
  return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
};
var zeroBoxes = freeze({
  devicePixelContentBoxSize: size(),
  borderBoxSize: size(),
  contentBoxSize: size(),
  contentRect: new DOMRectReadOnly(0, 0, 0, 0)
});
var calculateBoxSizes = function(target, forceRecalculation) {
  if (forceRecalculation === void 0) {
    forceRecalculation = false;
  }
  if (cache.has(target) && !forceRecalculation) {
    return cache.get(target);
  }
  if (isHidden(target)) {
    cache.set(target, zeroBoxes);
    return zeroBoxes;
  }
  var cs = getComputedStyle(target);
  var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();
  var removePadding = !IE && cs.boxSizing === "border-box";
  var switchSizes = verticalRegexp.test(cs.writingMode || "");
  var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || "");
  var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || "");
  var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
  var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
  var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
  var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
  var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);
  var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);
  var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);
  var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);
  var horizontalPadding = paddingLeft + paddingRight;
  var verticalPadding = paddingTop + paddingBottom;
  var horizontalBorderArea = borderLeft + borderRight;
  var verticalBorderArea = borderTop + borderBottom;
  var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
  var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
  var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
  var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
  var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
  var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
  var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
  var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
  var boxes = freeze({
    devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
    borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),
    contentBoxSize: size(contentWidth, contentHeight, switchSizes),
    contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
  });
  cache.set(target, boxes);
  return boxes;
};
var calculateBoxSize = function(target, observedBox, forceRecalculation) {
  var _a2 = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a2.borderBoxSize, contentBoxSize = _a2.contentBoxSize, devicePixelContentBoxSize = _a2.devicePixelContentBoxSize;
  switch (observedBox) {
    case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
      return devicePixelContentBoxSize;
    case ResizeObserverBoxOptions.BORDER_BOX:
      return borderBoxSize;
    default:
      return contentBoxSize;
  }
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js
var ResizeObserverEntry = /* @__PURE__ */ function() {
  function ResizeObserverEntry2(target) {
    var boxes = calculateBoxSizes(target);
    this.target = target;
    this.contentRect = boxes.contentRect;
    this.borderBoxSize = freeze([boxes.borderBoxSize]);
    this.contentBoxSize = freeze([boxes.contentBoxSize]);
    this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
  }
  return ResizeObserverEntry2;
}();

// node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js
var calculateDepthForNode = function(node) {
  if (isHidden(node)) {
    return Infinity;
  }
  var depth = 0;
  var parent = node.parentNode;
  while (parent) {
    depth += 1;
    parent = parent.parentNode;
  }
  return depth;
};

// node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js
var broadcastActiveObservations = function() {
  var shallowestDepth = Infinity;
  var callbacks2 = [];
  resizeObservers.forEach(function processObserver(ro) {
    if (ro.activeTargets.length === 0) {
      return;
    }
    var entries = [];
    ro.activeTargets.forEach(function processTarget(ot) {
      var entry = new ResizeObserverEntry(ot.target);
      var targetDepth = calculateDepthForNode(ot.target);
      entries.push(entry);
      ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
      if (targetDepth < shallowestDepth) {
        shallowestDepth = targetDepth;
      }
    });
    callbacks2.push(function resizeObserverCallback() {
      ro.callback.call(ro.observer, entries, ro.observer);
    });
    ro.activeTargets.splice(0, ro.activeTargets.length);
  });
  for (var _i = 0, callbacks_1 = callbacks2; _i < callbacks_1.length; _i++) {
    var callback = callbacks_1[_i];
    callback();
  }
  return shallowestDepth;
};

// node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js
var gatherActiveObservationsAtDepth = function(depth) {
  resizeObservers.forEach(function processObserver(ro) {
    ro.activeTargets.splice(0, ro.activeTargets.length);
    ro.skippedTargets.splice(0, ro.skippedTargets.length);
    ro.observationTargets.forEach(function processTarget(ot) {
      if (ot.isActive()) {
        if (calculateDepthForNode(ot.target) > depth) {
          ro.activeTargets.push(ot);
        } else {
          ro.skippedTargets.push(ot);
        }
      }
    });
  });
};

// node_modules/@juggle/resize-observer/lib/utils/process.js
var process2 = function() {
  var depth = 0;
  gatherActiveObservationsAtDepth(depth);
  while (hasActiveObservations()) {
    depth = broadcastActiveObservations();
    gatherActiveObservationsAtDepth(depth);
  }
  if (hasSkippedObservations()) {
    deliverResizeLoopError();
  }
  return depth > 0;
};

// node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js
var trigger;
var callbacks = [];
var notify = function() {
  return callbacks.splice(0).forEach(function(cb) {
    return cb();
  });
};
var queueMicroTask = function(callback) {
  if (!trigger) {
    var toggle_1 = 0;
    var el_1 = document.createTextNode("");
    var config = { characterData: true };
    new MutationObserver(function() {
      return notify();
    }).observe(el_1, config);
    trigger = function() {
      el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++);
    };
  }
  callbacks.push(callback);
  trigger();
};

// node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js
var queueResizeObserver = function(cb) {
  queueMicroTask(function ResizeObserver2() {
    requestAnimationFrame(cb);
  });
};

// node_modules/@juggle/resize-observer/lib/utils/scheduler.js
var watching = 0;
var isWatching = function() {
  return !!watching;
};
var CATCH_PERIOD = 250;
var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
var events = [
  "resize",
  "load",
  "transitionend",
  "animationend",
  "animationstart",
  "animationiteration",
  "keyup",
  "keydown",
  "mouseup",
  "mousedown",
  "mouseover",
  "mouseout",
  "blur",
  "focus"
];
var time = function(timeout) {
  if (timeout === void 0) {
    timeout = 0;
  }
  return Date.now() + timeout;
};
var scheduled = false;
var Scheduler = function() {
  function Scheduler2() {
    var _this = this;
    this.stopped = true;
    this.listener = function() {
      return _this.schedule();
    };
  }
  Scheduler2.prototype.run = function(timeout) {
    var _this = this;
    if (timeout === void 0) {
      timeout = CATCH_PERIOD;
    }
    if (scheduled) {
      return;
    }
    scheduled = true;
    var until = time(timeout);
    queueResizeObserver(function() {
      var elementsHaveResized = false;
      try {
        elementsHaveResized = process2();
      } finally {
        scheduled = false;
        timeout = until - time();
        if (!isWatching()) {
          return;
        }
        if (elementsHaveResized) {
          _this.run(1e3);
        } else if (timeout > 0) {
          _this.run(timeout);
        } else {
          _this.start();
        }
      }
    });
  };
  Scheduler2.prototype.schedule = function() {
    this.stop();
    this.run();
  };
  Scheduler2.prototype.observe = function() {
    var _this = this;
    var cb = function() {
      return _this.observer && _this.observer.observe(document.body, observerConfig);
    };
    document.body ? cb() : global.addEventListener("DOMContentLoaded", cb);
  };
  Scheduler2.prototype.start = function() {
    var _this = this;
    if (this.stopped) {
      this.stopped = false;
      this.observer = new MutationObserver(this.listener);
      this.observe();
      events.forEach(function(name) {
        return global.addEventListener(name, _this.listener, true);
      });
    }
  };
  Scheduler2.prototype.stop = function() {
    var _this = this;
    if (!this.stopped) {
      this.observer && this.observer.disconnect();
      events.forEach(function(name) {
        return global.removeEventListener(name, _this.listener, true);
      });
      this.stopped = true;
    }
  };
  return Scheduler2;
}();
var scheduler = new Scheduler();
var updateCount = function(n) {
  !watching && n > 0 && scheduler.start();
  watching += n;
  !watching && scheduler.stop();
};

// node_modules/@juggle/resize-observer/lib/ResizeObservation.js
var skipNotifyOnElement = function(target) {
  return !isSVG(target) && !isReplacedElement(target) && getComputedStyle(target).display === "inline";
};
var ResizeObservation = function() {
  function ResizeObservation2(target, observedBox) {
    this.target = target;
    this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
    this.lastReportedSize = {
      inlineSize: 0,
      blockSize: 0
    };
  }
  ResizeObservation2.prototype.isActive = function() {
    var size2 = calculateBoxSize(this.target, this.observedBox, true);
    if (skipNotifyOnElement(this.target)) {
      this.lastReportedSize = size2;
    }
    if (this.lastReportedSize.inlineSize !== size2.inlineSize || this.lastReportedSize.blockSize !== size2.blockSize) {
      return true;
    }
    return false;
  };
  return ResizeObservation2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js
var ResizeObserverDetail = /* @__PURE__ */ function() {
  function ResizeObserverDetail2(resizeObserver, callback) {
    this.activeTargets = [];
    this.skippedTargets = [];
    this.observationTargets = [];
    this.observer = resizeObserver;
    this.callback = callback;
  }
  return ResizeObserverDetail2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserverController.js
var observerMap = /* @__PURE__ */ new WeakMap();
var getObservationIndex = function(observationTargets, target) {
  for (var i = 0; i < observationTargets.length; i += 1) {
    if (observationTargets[i].target === target) {
      return i;
    }
  }
  return -1;
};
var ResizeObserverController = function() {
  function ResizeObserverController2() {
  }
  ResizeObserverController2.connect = function(resizeObserver, callback) {
    var detail = new ResizeObserverDetail(resizeObserver, callback);
    observerMap.set(resizeObserver, detail);
  };
  ResizeObserverController2.observe = function(resizeObserver, target, options) {
    var detail = observerMap.get(resizeObserver);
    var firstObservation = detail.observationTargets.length === 0;
    if (getObservationIndex(detail.observationTargets, target) < 0) {
      firstObservation && resizeObservers.push(detail);
      detail.observationTargets.push(new ResizeObservation(target, options && options.box));
      updateCount(1);
      scheduler.schedule();
    }
  };
  ResizeObserverController2.unobserve = function(resizeObserver, target) {
    var detail = observerMap.get(resizeObserver);
    var index = getObservationIndex(detail.observationTargets, target);
    var lastObservation = detail.observationTargets.length === 1;
    if (index >= 0) {
      lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
      detail.observationTargets.splice(index, 1);
      updateCount(-1);
    }
  };
  ResizeObserverController2.disconnect = function(resizeObserver) {
    var _this = this;
    var detail = observerMap.get(resizeObserver);
    detail.observationTargets.slice().forEach(function(ot) {
      return _this.unobserve(resizeObserver, ot.target);
    });
    detail.activeTargets.splice(0, detail.activeTargets.length);
  };
  return ResizeObserverController2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserver.js
var ResizeObserver = function() {
  function ResizeObserver2(callback) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (typeof callback !== "function") {
      throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
    }
    ResizeObserverController.connect(this, callback);
  }
  ResizeObserver2.prototype.observe = function(target, options) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (!isElement(target)) {
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
    }
    ResizeObserverController.observe(this, target, options);
  };
  ResizeObserver2.prototype.unobserve = function(target) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (!isElement(target)) {
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
    }
    ResizeObserverController.unobserve(this, target);
  };
  ResizeObserver2.prototype.disconnect = function() {
    ResizeObserverController.disconnect(this);
  };
  ResizeObserver2.toString = function() {
    return "function ResizeObserver () { [polyfill code] }";
  };
  return ResizeObserver2;
}();

// node_modules/@cloudscape-design/component-toolkit/internal/container-queries/use-resize-observer.js
var import_react4 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/internal/stable-callback/index.js
var import_react3 = __toESM(require_react());
function useStableCallback(fn) {
  const ref = (0, import_react3.useRef)();
  (0, import_react3.useEffect)(() => {
    ref.current = fn;
  });
  return (0, import_react3.useCallback)((...args) => {
    var _a2;
    return (_a2 = ref.current) === null || _a2 === void 0 ? void 0 : _a2.apply(void 0, args);
  }, []);
}

// node_modules/@cloudscape-design/component-toolkit/internal/container-queries/use-resize-observer.js
function useResizeObserver(elementRef, onObserve) {
  const stableOnObserve = useStableCallback(onObserve);
  (0, import_react4.useLayoutEffect)(
    () => {
      const element = typeof elementRef === "function" ? elementRef() : elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;
      if (element) {
        onObserve(convertResizeObserverEntry(new ResizeObserverEntry(element)));
      }
    },
    // This effect is only needed for the first render to provide a synchronous update.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  (0, import_react4.useEffect)(() => {
    const element = typeof elementRef === "function" ? elementRef() : elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;
    if (element) {
      let connected = true;
      const observer = new ResizeObserver((entries) => {
        if (connected) {
          (0, import_react_dom.unstable_batchedUpdates)(() => {
            stableOnObserve(convertResizeObserverEntry(entries[0]));
          });
        }
      });
      observer.observe(element);
      return () => {
        connected = false;
        observer.disconnect();
      };
    }
  }, [elementRef, stableOnObserve]);
}
function convertResizeObserverEntry(entry) {
  return {
    target: entry.target,
    contentBoxWidth: entry.contentBoxSize[0].inlineSize,
    contentBoxHeight: entry.contentBoxSize[0].blockSize,
    borderBoxWidth: entry.borderBoxSize[0].inlineSize,
    borderBoxHeight: entry.borderBoxSize[0].blockSize
  };
}

// node_modules/@cloudscape-design/component-toolkit/internal/singleton-handler/index.js
var import_react5 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());
function createSingletonHandler(factory) {
  const listeners = [];
  const callback = (value) => {
    (0, import_react_dom2.unstable_batchedUpdates)(() => {
      for (const listener of listeners) {
        listener(value);
      }
    });
  };
  let cleanup;
  return function useSingleton(listener) {
    (0, import_react5.useEffect)(() => {
      if (listeners.length === 0) {
        cleanup = factory(callback);
      }
      listeners.push(listener);
      return () => {
        listeners.splice(listeners.indexOf(listener), 1);
        if (listeners.length === 0) {
          cleanup();
          cleanup = void 0;
        }
      };
    }, []);
  };
}
function createSingletonState({ factory, initialState }) {
  const useSingleton = createSingletonHandler(factory);
  let value = initialState;
  return function useSingletonState() {
    const [state, setState] = (0, import_react5.useState)(value);
    useSingleton((newValue) => {
      value = newValue;
      setState(newValue);
    });
    return state;
  };
}

// node_modules/@cloudscape-design/component-toolkit/internal/visual-mode/index.js
var import_react6 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/dom/element-types.js
function isNode(target) {
  return target instanceof Node || target !== null && typeof target === "object" && "nodeType" in target && typeof target.nodeType === "number" && "nodeName" in target && typeof target.nodeName === "string" && "parentNode" in target && typeof target.parentNode === "object";
}
function isHTMLElement(target) {
  return target instanceof HTMLElement || isNode(target) && target.nodeType === Node.ELEMENT_NODE && "style" in target && typeof target.style === "object" && typeof target.ownerDocument === "object" && !isSVGElement(target);
}
function isSVGElement(target) {
  return target instanceof SVGElement || isNode(target) && target.nodeType === Node.ELEMENT_NODE && "ownerSVGElement" in target && typeof target.ownerSVGElement === "object";
}

// node_modules/@cloudscape-design/component-toolkit/dom/find-up-until.js
function findUpUntil(from, test) {
  let current = from;
  while (current && !test(current)) {
    current = current.parentElement;
    while (current && !isHTMLElement(current)) {
      current = current.parentElement;
    }
  }
  return current;
}

// node_modules/@cloudscape-design/component-toolkit/dom/node-contains.js
function nodeContains(parent, descendant) {
  if (!parent || !descendant || !isNode(descendant)) {
    return false;
  }
  return parent.contains(descendant);
}

// node_modules/@cloudscape-design/component-toolkit/dom/node-belongs.js
function nodeBelongs(container, target) {
  var _a2;
  if (!isNode(target)) {
    return false;
  }
  const portal = findUpUntil(target, (node) => node === container || isHTMLElement(node) && !!node.dataset.awsuiReferrerId);
  if (portal && portal === container) {
    return true;
  }
  const referrer = isHTMLElement(portal) ? document.getElementById((_a2 = portal.dataset.awsuiReferrerId) !== null && _a2 !== void 0 ? _a2 : "") : null;
  return referrer ? nodeContains(container, referrer) : nodeContains(container, target);
}

// node_modules/@cloudscape-design/component-toolkit/internal/is-development.js
var isDevelopment = true;

// node_modules/@cloudscape-design/component-toolkit/internal/logging.js
var messageCache = /* @__PURE__ */ new Set();
function warnOnce(component, message) {
  if (isDevelopment) {
    const warning = `[AwsUi] [${component}] ${message}`;
    if (!messageCache.has(warning)) {
      messageCache.add(warning);
      console.warn(warning);
    }
  }
}

// node_modules/@cloudscape-design/component-toolkit/internal/global-flags/index.js
var awsuiVisualRefreshFlag = Symbol.for("awsui-visual-refresh-flag");
var awsuiGlobalFlagsSymbol = Symbol.for("awsui-global-flags");
var getTopWindow = () => {
  return window.top;
};
function getGlobal() {
  return typeof window !== "undefined" ? window : globalThis;
}
function readFlag(holder, flagName) {
  var _a2;
  return (_a2 = holder === null || holder === void 0 ? void 0 : holder[awsuiGlobalFlagsSymbol]) === null || _a2 === void 0 ? void 0 : _a2[flagName];
}
var getGlobalFlag = (flagName) => {
  try {
    const ownFlag = readFlag(getGlobal(), flagName);
    if (ownFlag !== void 0) {
      return ownFlag;
    }
    return readFlag(getTopWindow(), flagName);
  } catch (e) {
    return void 0;
  }
};

// node_modules/@cloudscape-design/component-toolkit/internal/visual-mode/index.js
function safeMatchMedia(element, query) {
  var _a2, _b, _c, _d;
  try {
    const targetWindow = (_b = (_a2 = element.ownerDocument) === null || _a2 === void 0 ? void 0 : _a2.defaultView) !== null && _b !== void 0 ? _b : window;
    return (_d = (_c = targetWindow.matchMedia) === null || _c === void 0 ? void 0 : _c.call(targetWindow, query).matches) !== null && _d !== void 0 ? _d : false;
  } catch (error) {
    console.warn(error);
    return false;
  }
}
function isMotionDisabled(element) {
  return !!findUpUntil(element, (node) => node.classList.contains("awsui-motion-disabled")) || safeMatchMedia(element, "(prefers-reduced-motion: reduce)");
}
function useCurrentMode(elementRef) {
  const [value, setValue] = (0, import_react6.useState)("light");
  useMutationObserver(elementRef, (node) => {
    const darkModeParent = findUpUntil(node, (node2) => node2.classList.contains("awsui-polaris-dark-mode") || node2.classList.contains("awsui-dark-mode"));
    const newValue = darkModeParent ? "dark" : "light";
    if (newValue !== value) {
      setValue(newValue);
    }
  });
  return value;
}
function useDensityMode(elementRef) {
  const [value, setValue] = (0, import_react6.useState)("comfortable");
  useMutationObserver(elementRef, (node) => {
    const compactModeParent = findUpUntil(node, (node2) => node2.classList.contains("awsui-polaris-compact-mode") || node2.classList.contains("awsui-compact-mode"));
    const newValue = compactModeParent ? "compact" : "comfortable";
    if (newValue !== value) {
      setValue(newValue);
    }
  });
  return value;
}
function useReducedMotion(elementRef) {
  const [value, setValue] = (0, import_react6.useState)(false);
  useMutationObserver(elementRef, (node) => {
    const newValue = isMotionDisabled(node);
    if (newValue !== value) {
      setValue(newValue);
    }
  });
  return value;
}
var useMutationSingleton = createSingletonHandler((handler) => {
  const observer = new MutationObserver(() => handler());
  observer.observe(document.body, { attributes: true, subtree: true });
  return () => observer.disconnect();
});
function useMutationObserver(elementRef, onChange) {
  const handler = useStableCallback(() => {
    if (elementRef.current) {
      onChange(elementRef.current);
    }
  });
  useMutationSingleton(handler);
  (0, import_react6.useEffect)(() => {
    handler();
  }, [handler]);
}
var visualRefreshState = void 0;
function detectVisualRefreshClassName() {
  return typeof document !== "undefined" && !!document.querySelector(".awsui-visual-refresh");
}
function detectVisualRefreshFlag() {
  var _a2, _b;
  const global2 = getGlobal();
  return (_b = (_a2 = global2 === null || global2 === void 0 ? void 0 : global2[awsuiVisualRefreshFlag]) === null || _a2 === void 0 ? void 0 : _a2.call(global2)) !== null && _b !== void 0 ? _b : false;
}
function useRuntimeVisualRefresh() {
  if (visualRefreshState === void 0) {
    visualRefreshState = detectVisualRefreshClassName();
    if (!visualRefreshState) {
      if (detectVisualRefreshFlag()) {
        visualRefreshState = true;
        if (typeof document !== "undefined") {
          document.body.classList.add("awsui-visual-refresh");
        }
      }
    }
  }
  if (isDevelopment) {
    const newVisualRefreshState = detectVisualRefreshClassName() || detectVisualRefreshFlag();
    if (newVisualRefreshState !== visualRefreshState) {
      warnOnce("Visual Refresh", "Dynamic visual refresh change detected. This is not supported. Make sure `awsui-visual-refresh` is attached to the `<body>` element before initial React render");
    }
  }
  return visualRefreshState;
}

// node_modules/@cloudscape-design/component-toolkit/internal/direction/index.js
function getIsRtl(element) {
  if (!element) {
    return false;
  }
  return getComputedStyle(element).direction === "rtl";
}
function getOffsetInlineStart(element) {
  var _a2, _b;
  const offsetParentWidth = (_b = (_a2 = element.offsetParent) === null || _a2 === void 0 ? void 0 : _a2.clientWidth) !== null && _b !== void 0 ? _b : 0;
  return getIsRtl(element) ? offsetParentWidth - element.offsetWidth - element.offsetLeft : element.offsetLeft;
}
function getScrollInlineStart(element) {
  return getIsRtl(element) ? Math.floor(element.scrollLeft) * -1 : Math.ceil(element.scrollLeft);
}
function getLogicalClientX(event, IsRtl) {
  return IsRtl ? document.documentElement.clientWidth - event.clientX : event.clientX;
}
function getLogicalBoundingClientRect(element) {
  const boundingClientRect = element.getBoundingClientRect();
  const blockSize = boundingClientRect.height;
  const inlineSize = boundingClientRect.width;
  const insetBlockStart = boundingClientRect.top;
  const insetBlockEnd = boundingClientRect.bottom;
  const insetInlineStart = getIsRtl(element) ? document.documentElement.clientWidth - boundingClientRect.right : boundingClientRect.left;
  const insetInlineEnd = insetInlineStart + inlineSize;
  return {
    blockSize,
    inlineSize,
    insetBlockStart,
    insetBlockEnd,
    insetInlineStart,
    insetInlineEnd
  };
}
function getLogicalPageX(event) {
  return event.target instanceof HTMLElement && getIsRtl(event.target) ? document.documentElement.clientWidth - event.pageX : event.pageX;
}

// node_modules/@cloudscape-design/component-toolkit/internal/focus-visible/index.js
var import_react7 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/internal/keycode.js
var KeyCode;
(function(KeyCode2) {
  KeyCode2[KeyCode2["pageUp"] = 33] = "pageUp";
  KeyCode2[KeyCode2["pageDown"] = 34] = "pageDown";
  KeyCode2[KeyCode2["end"] = 35] = "end";
  KeyCode2[KeyCode2["home"] = 36] = "home";
  KeyCode2[KeyCode2["backspace"] = 8] = "backspace";
  KeyCode2[KeyCode2["space"] = 32] = "space";
  KeyCode2[KeyCode2["down"] = 40] = "down";
  KeyCode2[KeyCode2["left"] = 37] = "left";
  KeyCode2[KeyCode2["right"] = 39] = "right";
  KeyCode2[KeyCode2["up"] = 38] = "up";
  KeyCode2[KeyCode2["escape"] = 27] = "escape";
  KeyCode2[KeyCode2["enter"] = 13] = "enter";
  KeyCode2[KeyCode2["tab"] = 9] = "tab";
  KeyCode2[KeyCode2["shift"] = 16] = "shift";
  KeyCode2[KeyCode2["control"] = 17] = "control";
  KeyCode2[KeyCode2["alt"] = 18] = "alt";
  KeyCode2[KeyCode2["meta"] = 91] = "meta";
})(KeyCode || (KeyCode = {}));
function isModifierKey(event) {
  return [KeyCode.shift, KeyCode.alt, KeyCode.control, KeyCode.meta].indexOf(event.keyCode) > -1;
}

// node_modules/@cloudscape-design/component-toolkit/internal/focus-visible/index.js
function setIsKeyboard(active) {
  if (active) {
    document.body.setAttribute("data-awsui-focus-visible", "true");
  } else {
    document.body.removeAttribute("data-awsui-focus-visible");
  }
}
function handleMousedown() {
  return setIsKeyboard(false);
}
function handleKeydown(event) {
  if (!isModifierKey(event)) {
    setIsKeyboard(true);
  }
}
var componentsCount = 0;
function addListeners() {
  document.addEventListener("mousedown", handleMousedown);
  document.addEventListener("keydown", handleKeydown);
}
function removeListeners() {
  document.removeEventListener("mousedown", handleMousedown);
  document.removeEventListener("keydown", handleKeydown);
}
function useFocusVisible() {
  (0, import_react7.useEffect)(() => {
    if (componentsCount === 0) {
      addListeners();
    }
    componentsCount++;
    return () => {
      componentsCount--;
      if (componentsCount === 0) {
        removeListeners();
      }
    };
  }, []);
}

// node_modules/@cloudscape-design/component-toolkit/internal/single-tab-stop/index.js
var import_react8 = __toESM(require_react());
var defaultValue = {
  navigationActive: false,
  registerFocusable: () => () => {
  }
};
var SingleTabStopNavigationContext = (0, import_react8.createContext)(defaultValue);
var SingleTabStopNavigationProvider = (0, import_react8.forwardRef)(({ navigationActive, children, getNextFocusTarget, isElementSuppressed, onRegisterFocusable, onUnregisterActive }, ref) => {
  const focusables = (0, import_react8.useRef)(/* @__PURE__ */ new Set());
  const focusHandlers = (0, import_react8.useRef)(/* @__PURE__ */ new Map());
  const focusablesState = (0, import_react8.useRef)(/* @__PURE__ */ new WeakMap());
  const focusTarget = (0, import_react8.useRef)(null);
  function onUnregisterFocusable(focusableElement) {
    const isUnregisteringFocusedNode = nodeBelongs(focusableElement, document.activeElement);
    if (isUnregisteringFocusedNode) {
      setTimeout(() => onUnregisterActive === null || onUnregisterActive === void 0 ? void 0 : onUnregisterActive(focusableElement), 0);
    }
  }
  function registerFocusable(focusableElement, changeHandler) {
    focusables.current.add(focusableElement);
    focusHandlers.current.set(focusableElement, changeHandler);
    const isFocusable2 = !!focusablesState.current.get(focusableElement);
    const newIsFocusable = focusTarget.current === focusableElement || !!(isElementSuppressed === null || isElementSuppressed === void 0 ? void 0 : isElementSuppressed(focusableElement));
    if (newIsFocusable !== isFocusable2) {
      focusablesState.current.set(focusableElement, newIsFocusable);
      changeHandler(newIsFocusable);
    }
    onRegisterFocusable === null || onRegisterFocusable === void 0 ? void 0 : onRegisterFocusable(focusableElement);
    return () => unregisterFocusable(focusableElement);
  }
  function unregisterFocusable(focusableElement) {
    focusables.current.delete(focusableElement);
    focusHandlers.current.delete(focusableElement);
    onUnregisterFocusable === null || onUnregisterFocusable === void 0 ? void 0 : onUnregisterFocusable(focusableElement);
  }
  function updateFocusTarget() {
    var _a2;
    focusTarget.current = getNextFocusTarget();
    for (const focusableElement of focusables.current) {
      const isFocusable2 = (_a2 = focusablesState.current.get(focusableElement)) !== null && _a2 !== void 0 ? _a2 : false;
      const newIsFocusable = focusTarget.current === focusableElement || !!(isElementSuppressed === null || isElementSuppressed === void 0 ? void 0 : isElementSuppressed(focusableElement));
      if (newIsFocusable !== isFocusable2) {
        focusablesState.current.set(focusableElement, newIsFocusable);
        focusHandlers.current.get(focusableElement)(newIsFocusable);
      }
    }
  }
  function getFocusTarget() {
    return focusTarget.current;
  }
  function isRegistered(element) {
    return focusables.current.has(element);
  }
  (0, import_react8.useImperativeHandle)(ref, () => ({ updateFocusTarget, getFocusTarget, isRegistered }));
  return import_react8.default.createElement(SingleTabStopNavigationContext.Provider, { value: { navigationActive, registerFocusable } }, children);
});

// node_modules/@cloudscape-design/component-toolkit/internal/focus-lock-utils/utils.js
var tabbables = [
  "button:enabled",
  "select:enabled",
  "textarea:enabled",
  "input:enabled",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[tabindex]",
  "[contenteditable]",
  "[autofocus]"
].join(",");

// node_modules/@cloudscape-design/component-toolkit/internal/portal/index.js
var import_react9 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());
function manageDefaultContainer(setState) {
  const newContainer = document.createElement("div");
  document.body.appendChild(newContainer);
  setState(newContainer);
  return () => {
    document.body.removeChild(newContainer);
  };
}
function manageAsyncContainer(getContainer, removeContainer, setState) {
  let newContainer;
  getContainer().then((container) => {
    newContainer = container;
    setState(container);
  }, (error) => {
    console.warn("[AwsUi] [portal]: failed to load portal root", error);
  });
  return () => {
    removeContainer(newContainer);
  };
}
function Portal({ container, getContainer, removeContainer, children }) {
  const [activeContainer, setActiveContainer] = (0, import_react9.useState)(container !== null && container !== void 0 ? container : null);
  (0, import_react9.useLayoutEffect)(() => {
    if (container) {
      setActiveContainer(container);
      return;
    }
    if (isDevelopment) {
      if (getContainer && !removeContainer) {
        warnOnce("portal", "`removeContainer` is required when `getContainer` is provided");
      }
      if (!getContainer && removeContainer) {
        warnOnce("portal", "`getContainer` is required when `removeContainer` is provided");
      }
    }
    if (getContainer && removeContainer) {
      return manageAsyncContainer(getContainer, removeContainer, setActiveContainer);
    }
    return manageDefaultContainer(setActiveContainer);
  }, [container, getContainer, removeContainer]);
  return activeContainer && (0, import_react_dom3.createPortal)(children, activeContainer);
}

// node_modules/@cloudscape-design/component-toolkit/internal/use-merge-refs/index.js
var import_react10 = __toESM(require_react());
function useMergeRefs(...refs) {
  return (0, import_react10.useMemo)(() => {
    if (refs.every((ref) => ref === null || ref === void 0)) {
      return null;
    }
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref !== null && ref !== void 0) {
          ref.current = value;
        }
      });
    };
  }, refs);
}

// node_modules/@cloudscape-design/component-toolkit/internal/use-unique-id/index.js
var import_react11 = __toESM(require_react());
var _a;
var counter = 0;
var useRandomId = () => {
  const idRef = (0, import_react11.useRef)(null);
  if (!idRef.current) {
    idRef.current = `${counter++}-${Date.now()}-${Math.round(Math.random() * 1e4)}`;
  }
  return idRef.current;
};
var useId = (_a = import_react11.default.useId) !== null && _a !== void 0 ? _a : useRandomId;
function useUniqueId(prefix) {
  return `${prefix ? prefix : ""}` + useId();
}

// node_modules/@cloudscape-design/components/internal/environment.js
var PACKAGE_SOURCE = "components";
var PACKAGE_VERSION = "3.0.0 (25710725)";
var GIT_SHA = "25710725";
var THEME = "open-source-visual-refresh";
var SYSTEM = "console";
var ALWAYS_VISUAL_REFRESH = true;

// node_modules/@cloudscape-design/components/internal/is-development.js
var isDevelopment2 = true;

// node_modules/@cloudscape-design/components/internal/base-component/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/base-component/styles.scoped.css";

// node_modules/@cloudscape-design/components/internal/base-component/index.js
initAwsUiVersions(PACKAGE_SOURCE, PACKAGE_VERSION);
function getBaseProps(props) {
  const baseProps = {};
  Object.keys(props).forEach((prop) => {
    if (prop === "id" || prop === "className" || prop.match(/^data-/)) {
      baseProps[prop] = props[prop];
    }
  });
  return baseProps;
}
function validateProps(componentName, props, excludedProps, allowedEnums) {
  if (!isDevelopment2) {
    return;
  }
  for (const [prop, value] of Object.entries(props)) {
    if (excludedProps.includes(prop)) {
      throw new Error(`${componentName} does not support "${prop}" property when used in ${THEME} theme`);
    }
    if (value && allowedEnums[prop] && !allowedEnums[prop].includes(value)) {
      throw new Error(`${componentName} does not support "${prop}" with value "${value}" when used in ${THEME} theme`);
    }
  }
}
function getAnalyticsMetadataProps(props) {
  return Object.assign(Object.assign({}, props === null || props === void 0 ? void 0 : props.analyticsMetadata), props === null || props === void 0 ? void 0 : props.__analyticsMetadata);
}

// node_modules/@cloudscape-design/components/internal/utils/get-visual-theme.js
var getVisualTheme = (theme, isVR) => {
  if (theme === "polaris" && isVR) {
    return "vr";
  }
  return theme;
};

// node_modules/@cloudscape-design/components/internal/hooks/use-visual-mode/index.js
var useVisualRefresh = ALWAYS_VISUAL_REFRESH ? () => true : useRuntimeVisualRefresh;

// node_modules/@cloudscape-design/components/internal/hooks/use-base-component/styles-check.js
var import_react12 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/metrics.js
var metrics = new Metrics({ packageSource: PACKAGE_SOURCE, packageVersion: PACKAGE_VERSION, theme: THEME });

// node_modules/@cloudscape-design/components/internal/hooks/use-base-component/styles-check.js
function checkMissingStyles() {
  const result = getComputedStyle(document.body).getPropertyValue(`--awsui-version-info-${GIT_SHA}`);
  if (!result) {
    console.error(`Missing AWS-UI CSS for theme "${THEME}", version "${PACKAGE_VERSION}", and git sha "${GIT_SHA}".`);
    metrics.sendOpsMetricObject("awsui-missing-css-asset", {});
  }
}
function idleWithDelay(cb) {
  if (typeof requestIdleCallback !== "function") {
    return;
  }
  let aborted = false;
  setTimeout(() => {
    if (aborted) {
      return;
    }
    requestIdleCallback(() => {
      if (aborted) {
        return;
      }
      cb();
    });
  }, 1e3);
  return () => {
    aborted = true;
  };
}
var checked = false;
var checkMissingStylesOnce = () => {
  if (!checked) {
    checkMissingStyles();
    checked = true;
  }
};
function useMissingStylesCheck() {
  (0, import_react12.useEffect)(() => {
    return idleWithDelay(() => checkMissingStylesOnce());
  }, []);
}

// node_modules/@cloudscape-design/components/internal/hooks/use-base-component/index.js
function useBaseComponent(componentName, config, analyticsMetadata) {
  const isVisualRefresh = useVisualRefresh();
  const theme = getVisualTheme(THEME, isVisualRefresh);
  useComponentMetrics(componentName, { packageSource: PACKAGE_SOURCE, packageVersion: PACKAGE_VERSION, theme }, config);
  useFocusVisible();
  useMissingStylesCheck();
  const elementRef = useComponentMetadata(componentName, { packageName: PACKAGE_SOURCE, version: PACKAGE_VERSION, theme }, analyticsMetadata);
  return { __internalRootRef: elementRef };
}

// node_modules/@cloudscape-design/components/internal/utils/apply-display-name.js
function applyDisplayName(component, displayName) {
  component.displayName = displayName;
}

// node_modules/clsx/dist/clsx.m.js
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e) n += e;
  else if ("object" == typeof e) if (Array.isArray(e)) for (t = 0; t < e.length; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
  else for (t in e) e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = ""; f < arguments.length; ) (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_m_default = clsx;

export {
  __rest,
  __awaiter,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  getGlobalFlag,
  useComponentMetadata,
  ResizeObserver,
  useStableCallback,
  useResizeObserver,
  createSingletonHandler,
  createSingletonState,
  findUpUntil,
  nodeContains,
  isDevelopment,
  warnOnce,
  isMotionDisabled,
  useCurrentMode,
  useDensityMode,
  useReducedMotion,
  getIsRtl,
  getOffsetInlineStart,
  getScrollInlineStart,
  getLogicalClientX,
  getLogicalBoundingClientRect,
  getLogicalPageX,
  isModifierKey,
  Portal,
  useMergeRefs,
  useRandomId,
  useUniqueId,
  PACKAGE_VERSION,
  THEME,
  SYSTEM,
  ALWAYS_VISUAL_REFRESH,
  useVisualRefresh,
  isDevelopment2,
  getBaseProps,
  validateProps,
  getAnalyticsMetadataProps,
  metrics,
  useBaseComponent,
  applyDisplayName,
  clsx_m_default
};
//# sourceMappingURL=chunk-XHKPICKT.js.map
