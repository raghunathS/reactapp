import {
  Transition_default,
  require_react_is
} from "./chunk-WRO6O3WY.js";
import {
  AnalyticsFunnelSubStep,
  ComponentMetrics,
  FunnelMetrics,
  InternalContainer,
  PerformanceMetrics,
  findUpUntilMultiple,
  getContainingBlock,
  isContainingBlock,
  isHTMLElement,
  isSVGElement,
  nodeBelongs,
  useDebounceCallback,
  useFunnel,
  useFunnelStep,
  useFunnelSubStep,
  useModalContext
} from "./chunk-LAHF66CW.js";
import {
  CollectionLabelContext,
  InfoLinkLabelContext,
  TableComponentsContextProvider,
  styles_css_default
} from "./chunk-7TAKUPNF.js";
import {
  DATA_ATTR_FIELD_ERROR,
  DATA_ATTR_FIELD_LABEL,
  DATA_ATTR_FUNNEL_VALUE,
  StickyHeaderContext,
  calculateScroll,
  copyAnalyticsMetadataAttribute,
  getAnalyticsLabelAttribute,
  getAnalyticsMetadataAttribute,
  getFieldSlotSeletor,
  getFirstScrollableParent,
  getFunnelValueSelector,
  getMatchingBreakpoint,
  getOverflowParents,
  getSubStepAllSelector,
  getTextFromSelector,
  global_vars_default,
  matchBreakpointMapping,
  scrollElementIntoView,
  scrollRectangleIntoView,
  useMobile
} from "./chunk-S55FUYQK.js";
import {
  ALWAYS_VISUAL_REFRESH,
  Portal,
  ResizeObserver,
  SYSTEM,
  __awaiter,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __rest,
  applyDisplayName,
  clsx_m_default,
  createSingletonHandler,
  findUpUntil,
  getAnalyticsMetadataProps,
  getBaseProps,
  getIsRtl,
  getLogicalBoundingClientRect,
  getLogicalPageX,
  getScrollInlineStart,
  isDevelopment2 as isDevelopment,
  nodeContains,
  useBaseComponent,
  useCurrentMode,
  useDensityMode,
  useMergeRefs,
  useRandomId,
  useReducedMotion,
  useResizeObserver,
  useStableCallback,
  useUniqueId,
  useVisualRefresh,
  warnOnce
} from "./chunk-XHKPICKT.js";
import {
  require_react_dom
} from "./chunk-GKJBSOWT.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@cloudscape-design/components/table/index.js
var import_react75 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/collection-preferences-metadata-context.js
var import_react = __toESM(require_react());
var CollectionPreferencesMetadata = (0, import_react.createContext)({});

// node_modules/@cloudscape-design/components/table/header-cell/utils.js
var stateToIcon = {
  sortable: "caret-down",
  ascending: "caret-up-filled",
  descending: "caret-down-filled"
};
var getSortingStatus = (sortable, sorted, descending, disabled) => {
  if (sorted) {
    if (descending) {
      return "descending";
    }
    return "ascending";
  }
  if (sortable && !disabled) {
    return "sortable";
  }
  return void 0;
};
var getSortingIconName = (sortingState) => stateToIcon[sortingState];
var isSorted = (column, sortingColumn) => column === sortingColumn || column.sortingField !== void 0 && column.sortingField === sortingColumn.sortingField || column.sortingComparator !== void 0 && column.sortingComparator === sortingColumn.sortingComparator;
var getSortingColumnId = (columnDefinitions = [], sortingColumn) => {
  if (!sortingColumn) {
    return null;
  }
  for (let i = 0; i < columnDefinitions.length; i++) {
    if (isSorted(columnDefinitions[i], sortingColumn)) {
      return columnDefinitions[i].id || null;
    }
  }
  return null;
};

// node_modules/@cloudscape-design/components/table/internal.js
var import_react74 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/container-queries/use-container-query.js
var import_react2 = __toESM(require_react());
function useContainerQuery(mapFn, deps = []) {
  const elementRef = (0, import_react2.useRef)(null);
  const [state, setState] = (0, import_react2.useState)(null);
  const getElement = (0, import_react2.useCallback)(() => elementRef.current, deps);
  useResizeObserver(getElement, (entry) => setState((prevState) => mapFn(entry, prevState)));
  return [state, elementRef];
}

// node_modules/@cloudscape-design/component-toolkit/use-controllable-state/use-controllable-state.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/visual-context/index.js
var import_react4 = __toESM(require_react());
var contextMatch = /awsui-context-([\w-]+)/;
function useVisualContext(elementRef) {
  const [value, setValue] = (0, import_react4.useState)("");
  (0, import_react4.useLayoutEffect)(() => {
    var _a;
    if (elementRef.current) {
      const contextParent = findUpUntil(elementRef.current, (node) => !!node.className.match(contextMatch));
      setValue((_a = contextParent === null || contextParent === void 0 ? void 0 : contextParent.className.match(contextMatch)[1]) !== null && _a !== void 0 ? _a : "");
    }
  }, [elementRef]);
  return value;
}
function getVisualContextClassname(contextName) {
  return `awsui-context-${contextName}`;
}
function VisualContext({ contextName, className, children }) {
  return import_react4.default.createElement("div", { className: clsx_m_default(getVisualContextClassname(contextName), className) }, children);
}

// node_modules/@cloudscape-design/components/internal/context/link-default-variant-context.js
var import_react5 = __toESM(require_react());
var defaultValue = {
  defaultVariant: "secondary"
};
var LinkDefaultVariantContext = (0, import_react5.createContext)(defaultValue);

// node_modules/@cloudscape-design/components/internal/events/index.js
var CustomEventStub = class {
  constructor(cancelable = false, detail = null) {
    this.cancelable = cancelable;
    this.detail = detail;
    this.defaultPrevented = false;
    this.cancelBubble = false;
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
  stopPropagation() {
    this.cancelBubble = true;
  }
};
function createCustomEvent({ cancelable, detail }) {
  return new CustomEventStub(cancelable, detail);
}
function fireNonCancelableEvent(handler, detail) {
  if (!handler) {
    return;
  }
  const event = createCustomEvent({ cancelable: false, detail });
  handler(event);
}
function fireCancelableEvent(handler, detail, sourceEvent) {
  if (!handler) {
    return false;
  }
  const event = createCustomEvent({ cancelable: true, detail });
  handler(event);
  if (event.defaultPrevented && sourceEvent) {
    sourceEvent.preventDefault();
  }
  if (event.cancelBubble && sourceEvent) {
    sourceEvent.stopPropagation();
  }
  return event.defaultPrevented;
}
function fireKeyboardEvent(handler, reactEvent) {
  return fireCancelableEvent(handler, {
    keyCode: reactEvent.keyCode,
    key: reactEvent.key,
    ctrlKey: reactEvent.ctrlKey,
    shiftKey: reactEvent.shiftKey,
    altKey: reactEvent.altKey,
    metaKey: reactEvent.metaKey,
    isComposing: reactEvent.nativeEvent.isComposing
  }, reactEvent);
}
var isMouseEvent = (e) => {
  return e.button !== void 0;
};
function hasModifierKeys(event) {
  return event.ctrlKey || event.altKey || event.shiftKey || event.metaKey;
}
function isPlainLeftClick(event) {
  return event && (!isMouseEvent(event) || event.button === 0) && !hasModifierKeys(event);
}

// node_modules/@cloudscape-design/components/internal/hooks/use-mouse-down-target.js
var import_react6 = __toESM(require_react());
var useEventListenersSingleton = createSingletonHandler((setTarget) => {
  function handleMouseDown(event) {
    setTarget(event.target);
  }
  function handleKeyDown() {
    setTarget(null);
  }
  const controller = new AbortController();
  window.addEventListener("mousedown", handleMouseDown, { signal: controller.signal });
  window.addEventListener("keydown", handleKeyDown, { signal: controller.signal });
  return () => {
    controller.abort();
  };
});
function useMouseDownTarget() {
  const mouseDownTargetRef = (0, import_react6.useRef)(null);
  useEventListenersSingleton((target) => {
    mouseDownTargetRef.current = target;
  });
  return () => mouseDownTargetRef.current;
}

// node_modules/@cloudscape-design/components/internal/hooks/use-performance-marks/index.js
var import_react9 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-dom-attribute/index.js
var import_react7 = __toESM(require_react());
function useDOMAttribute(elementRef, attributeName, value) {
  const attributeValueRef = (0, import_react7.useRef)();
  (0, import_react7.useEffect)(() => {
    var _a;
    attributeValueRef.current = value;
    (_a = elementRef.current) === null || _a === void 0 ? void 0 : _a.setAttribute(attributeName, value);
  }, [attributeName, value, elementRef]);
  return {
    [attributeName]: attributeValueRef.current
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-effect-on-update.js
var import_react8 = __toESM(require_react());
function useEffectOnUpdate(callback, deps) {
  const isFirstRender = (0, import_react8.useRef)(true);
  (0, import_react8.useEffect)(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else {
      return callback();
    }
  }, deps);
}

// node_modules/@cloudscape-design/components/internal/hooks/use-performance-marks/is-in-viewport.js
var map = /* @__PURE__ */ new WeakMap();
var MANUAL_TRIGGER_DELAY = 150;
function isInViewport(element, callback) {
  let resolve = (value) => {
    resolve = () => {
    };
    callback(value);
  };
  map.set(element, (inViewport) => resolve(inViewport));
  observer.observe(element);
  const timeoutHandle = setTimeout(() => resolve(false), MANUAL_TRIGGER_DELAY);
  return () => {
    clearTimeout(timeoutHandle);
    map.delete(element);
    observer.unobserve(element);
  };
}
function createIntersectionObserver(callback) {
  if (typeof IntersectionObserver === "undefined") {
    return {
      observe: () => {
      },
      unobserve: () => {
      }
    };
  }
  return new IntersectionObserver(callback);
}
var observer = createIntersectionObserver(function isInViewportObserver(entries) {
  var _a;
  for (const entry of entries) {
    observer.unobserve(entry.target);
    (_a = map.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry.isIntersecting);
    map.delete(entry.target);
  }
});

// node_modules/@cloudscape-design/components/internal/hooks/use-performance-marks/index.js
var EVALUATE_COMPONENT_VISIBILITY_EVENT = "awsui-evaluate-component-visibility";
var useEvaluateComponentVisibility = () => {
  const [evaluateComponentVisibility, setEvaluateComponentVisibility] = (0, import_react9.useState)(false);
  (0, import_react9.useEffect)(() => {
    const handleEvaluateComponentVisibility = () => {
      setEvaluateComponentVisibility((prev) => !prev);
    };
    document.addEventListener(EVALUATE_COMPONENT_VISIBILITY_EVENT, handleEvaluateComponentVisibility);
    return () => {
      document.removeEventListener(EVALUATE_COMPONENT_VISIBILITY_EVENT, handleEvaluateComponentVisibility);
    };
  }, []);
  return evaluateComponentVisibility;
};
function usePerformanceMarks(name, enabled, elementRef, getDetails, dependencies) {
  const id = useRandomId();
  const { isInModal } = useModalContext();
  const attributes = useDOMAttribute(elementRef, "data-analytics-performance-mark", id);
  const evaluateComponentVisibility = useEvaluateComponentVisibility();
  (0, import_react9.useEffect)(() => {
    if (!enabled() || !elementRef.current || isInModal) {
      return;
    }
    const elementVisible = elementRef.current.offsetWidth > 0 && elementRef.current.offsetHeight > 0 && getComputedStyle(elementRef.current).visibility !== "hidden";
    if (!elementVisible) {
      return;
    }
    const timestamp = performance.now();
    const cleanup = isInViewport(elementRef.current, (inViewport) => {
      performance.mark(`${name}Rendered`, {
        startTime: timestamp,
        detail: Object.assign({ source: "awsui", instanceIdentifier: id, inViewport }, getDetails())
      });
    });
    return cleanup;
  }, []);
  useEffectOnUpdate(() => {
    if (!enabled() || !elementRef.current || isInModal) {
      return;
    }
    const elementVisible = elementRef.current.offsetWidth > 0 && elementRef.current.offsetHeight > 0 && getComputedStyle(elementRef.current).visibility !== "hidden";
    if (!elementVisible) {
      return;
    }
    const timestamp = performance.now();
    const cleanup = isInViewport(elementRef.current, (inViewport) => {
      performance.mark(`${name}Updated`, {
        startTime: timestamp,
        detail: Object.assign({ source: "awsui", instanceIdentifier: id, inViewport }, getDetails())
      });
    });
    return cleanup;
  }, [evaluateComponentVisibility, ...dependencies]);
  return attributes;
}

// node_modules/@cloudscape-design/components/internal/hooks/use-previous/index.js
var import_react10 = __toESM(require_react());
var usePrevious = (value) => {
  const ref = (0, import_react10.useRef)();
  (0, import_react10.useEffect)(() => {
    ref.current = value;
  });
  return ref.current;
};

// node_modules/@cloudscape-design/components/internal/hooks/use-scroll-sync/index.js
var import_react11 = __toESM(require_react());
function useScrollSync(refs) {
  const activeElement = (0, import_react11.useRef)(null);
  return (event) => {
    const targetElement = event.currentTarget;
    if (targetElement && (activeElement.current === null || activeElement.current === targetElement)) {
      requestAnimationFrame(() => {
        activeElement.current = targetElement;
        refs.forEach((ref) => {
          const element = ref.current;
          if (element && element !== targetElement) {
            element.scrollLeft = targetElement.scrollLeft;
          }
        });
        requestAnimationFrame(() => {
          activeElement.current = null;
        });
      });
    }
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-table-interaction-metrics/index.js
var import_react12 = __toESM(require_react());
var USER_ACTION_TIME_LIMIT = 1e3;
function useTableInteractionMetrics({ elementRef, items, itemCount, instanceIdentifier, getComponentIdentifier, getComponentConfiguration, loading = false, interactionMetadata }) {
  const taskInteractionId = useRandomId();
  const tableInteractionAttributes = useDOMAttribute(elementRef, "data-analytics-task-interaction-id", taskInteractionId);
  const { isInFunnel } = useFunnel();
  const lastUserAction = (0, import_react12.useRef)(null);
  const capturedUserAction = (0, import_react12.useRef)(null);
  const loadingStartTime = (0, import_react12.useRef)(null);
  const metadata = (0, import_react12.useRef)({ itemCount, getComponentIdentifier, getComponentConfiguration, interactionMetadata });
  metadata.current = { itemCount, getComponentIdentifier, getComponentConfiguration, interactionMetadata };
  (0, import_react12.useEffect)(() => {
    if (isInFunnel) {
      return;
    }
    ComponentMetrics.componentMounted({
      taskInteractionId,
      componentName: "table",
      componentConfiguration: metadata.current.getComponentConfiguration()
    });
  }, [taskInteractionId, isInFunnel]);
  (0, import_react12.useEffect)(() => {
    if (loading) {
      loadingStartTime.current = performance.now();
      if (lastUserAction.current && lastUserAction.current.time > performance.now() - USER_ACTION_TIME_LIMIT) {
        capturedUserAction.current = lastUserAction.current.name;
      } else {
        capturedUserAction.current = null;
      }
    }
  }, [loading]);
  useEffectOnUpdate(() => {
    var _a;
    if (!loading && loadingStartTime.current !== null) {
      const loadingDuration = performance.now() - loadingStartTime.current;
      loadingStartTime.current = null;
      PerformanceMetrics.tableInteraction({
        userAction: (_a = capturedUserAction.current) !== null && _a !== void 0 ? _a : "",
        interactionTime: Math.round(loadingDuration),
        interactionMetadata: metadata.current.interactionMetadata(),
        componentIdentifier: metadata.current.getComponentIdentifier(),
        instanceIdentifier,
        noOfResourcesInTable: metadata.current.itemCount
      });
    }
  }, [instanceIdentifier, loading, taskInteractionId, isInFunnel]);
  const debouncedUpdated = useDebounceCallback(() => {
    var _a, _b;
    ComponentMetrics.componentUpdated({
      taskInteractionId,
      componentName: "table",
      actionType: (_b = (_a = lastUserAction.current) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : "",
      componentConfiguration: metadata.current.getComponentConfiguration()
    });
  });
  useEffectOnUpdate(() => {
    if (isInFunnel || loading) {
      return;
    }
    debouncedUpdated();
  }, [taskInteractionId, isInFunnel, loading, items, debouncedUpdated]);
  return {
    tableInteractionAttributes,
    setLastUserAction: (name) => void (lastUserAction.current = { name, time: performance.now() })
  };
}

// node_modules/@cloudscape-design/components/live-region/internal.js
var import_react13 = __toESM(require_react());

// node_modules/@cloudscape-design/components/live-region/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/live-region/styles.scoped.css";
var styles_css_default2 = {
  "root": "awsui_root_1iee7_xy9l5_145",
  "announcer": "awsui_announcer_1iee7_xy9l5_153"
};

// node_modules/@cloudscape-design/components/live-region/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/live-region/test-classes/styles.scoped.css";
var styles_css_default3 = {
  "root": "awsui_root_1pc7b_1k8pp_5",
  "announcer": "awsui_announcer_1pc7b_1k8pp_9"
};

// node_modules/@cloudscape-design/components/live-region/controller.js
var LiveRegionController = class _LiveRegionController {
  constructor(politeness, delay = _LiveRegionController.defaultDelay) {
    this.politeness = politeness;
    this.delay = delay;
    this._addedTerminalPeriod = false;
    this._nextAnnouncement = "";
    this._element = document.createElement("div");
    this._element.className = `${styles_css_default2.announcer} ${styles_css_default3.announcer}`;
    this._element.setAttribute("aria-live", this.politeness);
    this._element.setAttribute("aria-atomic", "true");
    document.body.appendChild(this._element);
  }
  /**
   * Reset the state of the controller and clear any active announcements.
   */
  destroy() {
    var _a;
    (_a = this._element) === null || _a === void 0 ? void 0 : _a.remove();
    if (this._timeoutId !== void 0) {
      clearTimeout(this._timeoutId);
      this._timeoutId = void 0;
    }
  }
  announce({ message, forceReannounce = false }) {
    if (!message) {
      return;
    }
    this._nextAnnouncement = message.trim();
    if (this.delay === 0 || forceReannounce) {
      return this._updateElement(forceReannounce);
    }
    if (this._timeoutId === void 0) {
      this._timeoutId = setTimeout(() => this._updateElement(false), this.delay * 1e3);
    }
  }
  _updateElement(forceReannounce) {
    if (this._nextAnnouncement !== this._lastAnnouncement) {
      this._element.textContent = this._nextAnnouncement;
      this._addedTerminalPeriod = false;
    } else if (forceReannounce) {
      this._element.textContent = this._nextAnnouncement + (this._addedTerminalPeriod ? "" : ".");
      this._addedTerminalPeriod = !this._addedTerminalPeriod;
    }
    this._lastAnnouncement = this._nextAnnouncement;
    this._timeoutId = void 0;
  }
};
LiveRegionController.defaultDelay = 2;

// node_modules/@cloudscape-design/components/live-region/internal.js
var internal_default = import_react13.default.forwardRef(function InternalLiveRegion(_a, ref) {
  var { assertive = false, hidden = false, tagName: TagName = "div", delay, sources, children, __internalRootRef, className } = _a, restProps = __rest(_a, ["assertive", "hidden", "tagName", "delay", "sources", "children", "__internalRootRef", "className"]);
  const baseProps = getBaseProps(restProps);
  const childrenRef = (0, import_react13.useRef)(null);
  const mergedRef = useMergeRefs(childrenRef, __internalRootRef);
  (0, import_react13.useEffect)(() => {
    if (childrenRef.current) {
      childrenRef.current.inert = hidden;
    }
  }, [hidden]);
  const liveRegionControllerRef = (0, import_react13.useRef)();
  (0, import_react13.useEffect)(() => {
    const liveRegionController = new LiveRegionController(assertive ? "assertive" : "polite");
    liveRegionControllerRef.current = liveRegionController;
    return () => {
      liveRegionController.destroy();
      liveRegionControllerRef.current = void 0;
    };
  }, [assertive]);
  const getContent = () => {
    if (sources) {
      return getSourceContent(sources);
    }
    if (childrenRef.current) {
      return extractTextContent(childrenRef.current);
    }
  };
  (0, import_react13.useEffect)(() => {
    var _a2;
    (_a2 = liveRegionControllerRef.current) === null || _a2 === void 0 ? void 0 : _a2.announce({ message: getContent(), delay });
  });
  (0, import_react13.useImperativeHandle)(ref, () => ({
    reannounce() {
      var _a2;
      (_a2 = liveRegionControllerRef.current) === null || _a2 === void 0 ? void 0 : _a2.announce({ message: getContent(), delay, forceReannounce: true });
    }
  }));
  return import_react13.default.createElement(TagName, Object.assign({ ref: mergedRef }, baseProps, { className: clsx_m_default(styles_css_default2.root, styles_css_default3.root, className), hidden }), children);
});
var processNode = (childNode) => {
  if (childNode.nodeType === Node.TEXT_NODE) {
    return childNode.textContent || "";
  }
  if (childNode.nodeType === Node.ELEMENT_NODE) {
    return extractTextContent(childNode);
  }
  return "";
};
function extractTextContent(node) {
  var _a;
  if (!node || !((_a = node === null || node === void 0 ? void 0 : node.childNodes) === null || _a === void 0 ? void 0 : _a.length)) {
    return "";
  }
  return Array.from(node.childNodes, processNode).join(" ").replace(/\s+/g, " ").trim();
}
function getSourceContent(source) {
  return source.map((item) => {
    if (!item || typeof item === "string") {
      return item;
    }
    if (item.current) {
      return extractTextContent(item.current);
    }
  }).filter(Boolean).join(" ");
}

// node_modules/@cloudscape-design/components/table/body-cell/index.js
var import_react47 = __toESM(require_react());

// node_modules/@cloudscape-design/components/i18n/context.js
var import_react14 = __toESM(require_react());
var InternalI18nContext = import_react14.default.createContext({
  locale: null,
  format: (_namespace, _component, _key, provided) => provided
});
function useLocale() {
  return (0, import_react14.useContext)(InternalI18nContext).locale;
}
function useInternalI18n(componentName) {
  const { format } = (0, import_react14.useContext)(InternalI18nContext);
  return (key, provided, customHandler) => {
    return format("@cloudscape-design/components", componentName, key, provided, customHandler);
  };
}

// node_modules/@cloudscape-design/components/icon/internal.js
var import_react16 = __toESM(require_react());

// node_modules/@cloudscape-design/components/icon/generated/icons.js
var import_react15 = __toESM(require_react());
var icons = {
  "add-plus": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M2.01 8h12M8 14l.01-12" })
  ),
  "anchor-link": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M5 8h6M7 12H5c-2.21 0-4-1.79-4-4s1.79-4 4-4h2M9 12h2c2.21 0 4-1.79 4-4s-1.79-4-4-4H9", className: "stroke-linejoin-round" })
  ),
  "angle-down": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m2 5 6 6 6-6", className: "stroke-linejoin-round" })
  ),
  "angle-left-double": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M8 2 2 8l6 6", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M13 2 7 8l6 6", className: "stroke-linejoin-round" })
  ),
  "angle-left": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M11 2 5 8l6 6", className: "stroke-linejoin-round" })
  ),
  "angle-right-double": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m8 2 6 6-6 6", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "m3 2 6 6-6 6", className: "stroke-linejoin-round" })
  ),
  "angle-right": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m5 2 6 6-6 6", className: "stroke-linejoin-round" })
  ),
  "angle-up": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m2 11 6-6 6 6", className: "stroke-linejoin-round" })
  ),
  "arrow-down": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m3 9 5 5 5-5M8 14V1", className: "stroke-linejoin-round" })
  ),
  "arrow-left": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M7 3 2 8l5 5M2 8h13", className: "stroke-linejoin-round" })
  ),
  "arrow-right": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m9 3 5 5-5 5M14 8H1", className: "stroke-linejoin-round" })
  ),
  "arrow-up": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M13 7 8 2 3 7M8 2v13", className: "stroke-linejoin-round" })
  ),
  "audio-full": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M6.47 13.707 4 10.997H1v-6h3l2.47-2.71c.54-.59 1.53-.21 1.53.59v10.23c0 .8-.99 1.19-1.53.59v.01Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M10 12.997c2.76 0 5-2.24 5-5s-2.24-5-5-5" }),
    import_react15.default.createElement("path", { d: "M10 9.997c1.1 0 2-.9 2-2s-.9-2-2-2" })
  ),
  "audio-half": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M7.47 13.41 5 10.7H2v-6h3l2.47-2.71C8.01 1.4 9 1.78 9 2.58v10.23c0 .8-.99 1.19-1.53.59v.01Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M11 9.71c1.1 0 2-.9 2-2s-.9-2-2-2" })
  ),
  "audio-off": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M6.47 13.41 4 10.7H1v-6h3l2.47-2.71C7.01 1.4 8 1.78 8 2.58v10.23c0 .8-.99 1.19-1.53.59v.01ZM11 5.71l3.99 4M15 5.71 11 9.7", className: "stroke-linejoin-round" })
  ),
  "backward-10-seconds": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M5.95 14.01h-.96c-.56 0-1.02-.46-1.02-1.02v-2.96c0-.56.45-1.01 1.01-1.02h.96c.56 0 1.02.45 1.02 1.02v2.96c0 .56-.46 1.02-1.02 1.02h.01Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M1 9v5", className: "stroke-linecap-square" }),
    import_react15.default.createElement("path", { d: "M1 0v5h5", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M9.976 15A7.154 7.154 0 0 0 15 8.164C15 4.204 11.804 1 7.852 1A7.148 7.148 0 0 0 1.5 4.875", className: "stroke-linejoin-round" })
  ),
  "bug": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M12 5.71a4 4 0 0 0-8 0v4a4 4 0 1 0 8 0v-4ZM15 8.71h-3M4 8.71H1M12 6H4M15 3.63l-3 2.08M15 13.78l-3-2.07M1 3.63l3 2.08M1 13.78l3-2.07" })
  ),
  "calendar": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M14 2H2v12h12V2Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M4 6V4h2v2H4ZM7 6V4h2v2H7ZM10 6V4h2v2h-2ZM4 9V7h2v2H4ZM7 9V7h2v2H7ZM4 12v-2h2v2H4ZM7 12v-2h2v2H7ZM10 9V7h2v2h-2Z", className: "filled no-stroke" })
  ),
  "call": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M13.99 7.083c0-2.76-2.24-5-5-5M11.07 10.002c-.6.58-1.55.61-2.14.02l-2.88-2.88a1.49 1.49 0 0 1 0-2.12c.52-.52.52-1.36 0-1.88l-.85-.85a.996.996 0 0 0-1.41 0l-.38.38a4.83 4.83 0 0 0 0 6.82l3.17 3.17a4.83 4.83 0 0 0 6.82 0l.38-.38a.996.996 0 0 0 0-1.41l-.85-.85c-.51-.51-1.34-.52-1.86-.02Z", className: "stroke-linejoin-round" })
  ),
  "caret-down-filled": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m8 11 4-6H4l4 6Z", className: "filled stroke-linejoin-round" })
  ),
  "caret-down": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m8 11 4-6H4l4 6Z", className: "stroke-linejoin-round" })
  ),
  "caret-left-filled": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m5 8 6 4V4L5 8Z", className: "filled stroke-linejoin-round" })
  ),
  "caret-right-filled": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m11 8-6 4V4l6 4Z", className: "filled stroke-linejoin-round" })
  ),
  "caret-up-filled": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m8 5 4 6H4l4-6Z", className: "filled stroke-linejoin-round" })
  ),
  "caret-up": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m8 5 4 6H4l4-6Z", className: "stroke-linejoin-round" })
  ),
  "check": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m1 9 4 4L15 2", className: "stroke-linejoin-round" })
  ),
  "close": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m2 1.71 12 12M2 13.71l12-12", className: "stroke-linejoin-round" })
  ),
  "closed-caption-unavailable": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 1H1v14h14V1Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M7.51 10H5c-.55 0-.99-.44-.99-.99V7c0-.55.44-.99.99-.99h1.01M13 10h-2.51c-.55 0-.99-.44-.99-.99V7c0-.55.44-.99.99-.99H13M1 1l14 14", className: "stroke-linejoin-round" })
  ),
  "closed-caption": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 1H1v14h14V1Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M7.51 10H5c-.55 0-.99-.44-.99-.99V7c0-.55.44-.99.99-.99h2.51M13 10h-2.51c-.55 0-.99-.44-.99-.99V7c0-.55.44-.99.99-.99H13", className: "stroke-linejoin-round" })
  ),
  "command-prompt": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 1H1v14h14V1ZM12 11H9", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M4.71 11.3 8 8 4.71 4.71", className: "stroke-linejoin-round" })
  ),
  "contact": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M14 12c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1H2c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1h4v3l4-3h4Z", className: "stroke-linejoin-round" })
  ),
  "copy": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 5H5v10h10V5Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M13 1H1v11", className: "stroke-linejoin-round" })
  ),
  "delete-marker": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M3 7V1h6l4 4v10h-3", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M8 1v5h5M2 15l6-6M2 9.01l6.01 6", className: "stroke-linejoin-round" })
  ),
  "download": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M1 15h14M13 6l-5 5-5-5M8 10V1", className: "stroke-linejoin-round" })
  ),
  "drag-indicator": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "5.5", cy: "2.5", r: "1.5", className: "filled no-stroke" }),
    import_react15.default.createElement("circle", { cx: "5.5", cy: "13.5", r: "1.5", className: "filled no-stroke" }),
    import_react15.default.createElement("circle", { cx: "5.5", cy: "8", r: "1.5", className: "filled no-stroke" }),
    import_react15.default.createElement("circle", { cx: "10.5", cy: "2.5", r: "1.5", className: "filled no-stroke" }),
    import_react15.default.createElement("circle", { cx: "10.5", cy: "13.5", r: "1.5", className: "filled no-stroke" }),
    import_react15.default.createElement("circle", { cx: "10.5", cy: "8", r: "1.5", className: "filled no-stroke" })
  ),
  "edit": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m6.19 13.275-4.19.7.7-4.19 7.2-7.2c.78-.78 2.05-.78 2.83 0l.66.66c.78.78.78 2.05 0 2.83l-7.2 7.2ZM9 3.995l3 3", className: "stroke-linejoin-round" })
  ),
  "ellipsis": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "2.5", r: "1.5", className: "filled no-stroke" }),
    import_react15.default.createElement("circle", { cx: "8", cy: "13.5", r: "1.5", className: "filled no-stroke" }),
    import_react15.default.createElement("circle", { cx: "8", cy: "8", r: "1.5", className: "filled no-stroke" })
  ),
  "envelope": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m1 3 7 6 7-6", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M15 3H1v10h14V3Z", className: "stroke-linejoin-round" })
  ),
  "exit-full-screen": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M1 10.01h5V15M10 15v-5h5M6 1v5H1M15 6h-5V1", className: "stroke-linejoin-round" })
  ),
  "expand": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M14 7V2H9M10 6l4-4M6.99 14H2V9M6 10l-4 4M9 14h5V9M10 10l4 4M2 6.99V2h5M6 6 2 2", className: "stroke-linejoin-round" })
  ),
  "external": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M14 8.01v-6H8M14.02 2 8 8.01M6 2.01H2v12h12v-3.99", className: "stroke-linejoin-round" })
  ),
  "face-happy-filled": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M7.995 1.103a6.887 6.887 0 0 0-6.892 6.892 6.887 6.887 0 0 0 6.892 6.892 6.887 6.887 0 0 0 6.892-6.892 6.887 6.887 0 0 0-6.892-6.892Zm-2.002 7.61A2.148 2.148 0 0 0 8 10.134c.914 0 1.706-.592 2.007-1.423l1.646.596c-.54 1.489-1.966 2.577-3.653 2.577-1.686 0-3.114-1.088-3.653-2.577l1.646-.596ZM7.148 6.03a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Zm3.95 0a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Z", className: "filled no-stroke" }),
    import_react15.default.createElement("path", { d: "M8 .5A7.495 7.495 0 0 0 .5 8c0 4.146 3.354 7.5 7.5 7.5s7.5-3.354 7.5-7.5S12.146.5 8 .5Zm0 1.559c3.61 0 6.008 2.566 6.008 5.941 0 2.404-2.044 6.014-6.008 6.014-3.818 0-6.01-2.9-6.01-6.014 0-2.603 1.712-5.941 6.01-5.941Z", className: "filled no-stroke" })
  ),
  "face-happy": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react15.default.createElement("path", { d: "M6 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2ZM10.01 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z", className: "filled no-stroke" }),
    import_react15.default.createElement("path", { d: "M10.83 9.01c-.42 1.16-1.53 2-2.83 2s-2.41-.84-2.83-2", className: "stroke-linejoin-round" })
  ),
  "face-neutral-filled": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M7.995 1.103a6.887 6.887 0 0 0-6.892 6.892 6.887 6.887 0 0 0 6.892 6.892 6.887 6.887 0 0 0 6.892-6.892 6.887 6.887 0 0 0-6.892-6.892ZM11 10.875H5v-1.75h6v1.75ZM7.148 6.03a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Zm3.95 0a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Z", className: "filled no-stroke" }),
    import_react15.default.createElement("path", { d: "M8 .5A7.495 7.495 0 0 0 .5 8c0 4.146 3.354 7.5 7.5 7.5s7.5-3.354 7.5-7.5S12.146.5 8 .5Zm0 1.559c3.61 0 6.008 2.566 6.008 5.941 0 2.404-2.044 6.014-6.008 6.014-3.818 0-6.01-2.9-6.01-6.014 0-2.603 1.712-5.941 6.01-5.941Z", className: "filled no-stroke" })
  ),
  "face-neutral": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react15.default.createElement("path", { d: "M6 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2ZM10.01 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z", className: "filled no-stroke" }),
    import_react15.default.createElement("path", { d: "M5 10h6", className: "stroke-linejoin-round" })
  ),
  "face-sad-filled": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M7.995 1.103a6.887 6.887 0 0 0-6.892 6.892 6.887 6.887 0 0 0 6.892 6.892 6.887 6.887 0 0 0 6.892-6.892 6.887 6.887 0 0 0-6.892-6.892Zm-3.648 9.6C4.887 9.212 6.314 8.124 8 8.124c1.687 0 3.114 1.088 3.653 2.577l-1.646.596A2.148 2.148 0 0 0 8 9.875c-.913 0-1.706.592-2.007 1.423l-1.646-.596ZM7.148 6.03a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Zm3.95 0a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Z", className: "filled no-stroke" }),
    import_react15.default.createElement("path", { d: "M8 .5A7.495 7.495 0 0 0 .5 8c0 4.146 3.354 7.5 7.5 7.5s7.5-3.354 7.5-7.5S12.146.5 8 .5Zm0 1.559c3.61 0 6.008 2.566 6.008 5.941 0 2.404-2.044 6.014-6.008 6.014-3.818 0-6.01-2.9-6.01-6.014 0-2.603 1.712-5.941 6.01-5.941Z", className: "filled no-stroke" })
  ),
  "face-sad": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react15.default.createElement("path", { d: "M6 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2ZM10.01 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z", className: "filled no-stroke" }),
    import_react15.default.createElement("path", { d: "M10.83 11C10.41 9.84 9.3 9 8 9s-2.41.84-2.83 2", className: "stroke-linejoin-round" })
  ),
  "file-open": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M13 15H3V1h6l4 4v10Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M8 1v5h5M3 8l7 7", className: "stroke-linejoin-round" })
  ),
  "file": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M13 15H3V1h6l4 4v10Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M8 1v5h5", className: "stroke-linejoin-round" })
  ),
  "filter": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m1 3 5 5v7l4-2V8l5-5V1H1v2Z", className: "stroke-linejoin-round" })
  ),
  "flag": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M1.99 16V1M2 2.14c4 2.71 8-2.99 12-.28v7.28c-4-2.89-8 2.61-12-.28", className: "stroke-linejoin-round" })
  ),
  "folder-open": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M6 14h8l-3-7H1l2 7h3Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M2 7V2h6l1 2h5c.55 0 1 .45 1 1v8c0 .55-.45 1-1 1h-1", className: "stroke-linejoin-round" })
  ),
  "folder": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 5v9H2V2h6l1 2h5c.55 0 1 .45 1 1Z", className: "stroke-linejoin-round" })
  ),
  "forward-10-seconds": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M13.95 14.01h-.96c-.56 0-1.02-.46-1.02-1.02v-2.96c0-.56.45-1.01 1.01-1.02h.96c.56 0 1.02.45 1.02 1.02v2.96c0 .56-.46 1.02-1.02 1.02h.01Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M9 9v5", className: "stroke-linecap-square" }),
    import_react15.default.createElement("path", { d: "M15 0v5h-5", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M6.024 15A7.154 7.154 0 0 1 1 8.164C1 4.204 4.196 1 8.148 1A7.148 7.148 0 0 1 14.5 4.875", className: "stroke-linejoin-round" })
  ),
  "full-screen": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M6 15H1v-5M15 10v5h-5M1 6V1h5M10 1h5v5", className: "stroke-linejoin-round" })
  ),
  "gen-ai": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M6.15 10.365 8 15.005l1.86-4.64 4.64-1.86-4.64-1.85L8 2.005l-1.85 4.65-4.65 1.85 4.65 1.86Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M2.38 4.915c.02.05.07.08.12.08.05 0 .12-.08.12-.08l.66-1.64 1.64-.66a.13.13 0 0 0 .08-.12c0-.05-.08-.12-.08-.12l-1.64-.66-.66-1.64c-.04-.1-.2-.1-.24 0l-.66 1.64-1.64.66a.13.13 0 0 0-.08.12c0 .05.08.12.08.12l1.64.66.66 1.64Z", className: "filled no-stroke" })
  ),
  "globe": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react15.default.createElement("path", { d: "M8 15c1.657 0 3-3.134 3-7S9.657 1 8 1 5 4.134 5 8s1.343 7 3 7ZM1 8h14", className: "stroke-linejoin-round" })
  ),
  "grid-view": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M6 10H2v4h4v-4ZM14 10h-4v4h4v-4ZM6 2H2v4h4V2ZM14 2h-4v4h4V2Z", className: "stroke-linejoin-round" })
  ),
  "group-active": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "11", cy: "7", r: "3", className: "filled no-stroke" }),
    import_react15.default.createElement("circle", { cx: "4.25", cy: "4.25", r: "2.75", className: "filled no-stroke" }),
    import_react15.default.createElement("path", { d: "M6 14a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v2H6v-2Z", className: "filled no-stroke" }),
    import_react15.default.createElement("path", { d: "M7.126 8H3a3 3 0 0 0-3 3v3h5a4 4 0 0 1 3.405-3.956A4 4 0 0 1 7.126 8Z", className: "filled no-stroke" })
  ),
  "group": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 16v-2a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2" }),
    import_react15.default.createElement("circle", { cx: "11.25", cy: "6.75", r: "2.25" }),
    import_react15.default.createElement("path", { d: "M6.254 8.99H3a2.005 2.005 0 0 0-2.005 2.005v2h.01v-2C1.005 9.893 1.898 9 3 9h3.261a8.678 8.678 0 0 1-.007-.01Z", className: "filled" }),
    import_react15.default.createElement("circle", { cx: "4.25", cy: "4.25", r: "2.25" })
  ),
  "heart-filled": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M13.49 3.546C12.124 2.31 10.312 2.689 9 4L8 5 7 4c-1.301-1.302-3.114-1.69-4.491-.454a3.409 3.409 0 0 0-.133 4.95L7.952 14s.067.028.086 0l5.576-5.505a3.409 3.409 0 0 0-.133-4.95h.01Z", className: "filled stroke-linejoin-round" })
  ),
  "heart": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M13.752 2.873c-1.44-1.3-3.7-1.1-5.08.28l-.7.7-.7-.7c-1.37-1.37-3.63-1.58-5.08-.28a3.588 3.588 0 0 0-.14 5.21l5.87 5.87s.07.03.09 0l5.87-5.87a3.588 3.588 0 0 0-.14-5.21h.01Z", className: "stroke-linejoin-round" })
  ),
  "insert-row": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M6 11H1V2h14v4M12 7v8M8 11h8", className: "stroke-linejoin-round" })
  ),
  "key": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M10 1a5.002 5.002 0 0 0-4.6 6.96L1 12.36v2.65h4v-2h3v-2.42c.61.27 1.29.42 2 .42 2.76 0 5-2.24 5-5s-2.24-5-5-5V1Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M10.5 7a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z", className: "filled no-stroke" })
  ),
  "keyboard": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 2H1v12h14V2ZM4 11h8M4 8h2M4 5h2M7 8h2M7 5h2M10 8h2M10 5h2" })
  ),
  "list-view": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M5 3h10M5 8h10M5 13h10" }),
    import_react15.default.createElement("path", { d: "M2.01 3.01H2V3h.01v.01ZM2.01 8.01H2V8h.01v.01ZM2.01 13.01H2V13h.01v.01Z", className: "filled" })
  ),
  "location-pin": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M8 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M12.01 9c.63-.83 1-1.87 1-3 0-2.76-2.24-5-5-5a5.002 5.002 0 0 0-4 8l4 6 4-6Z", className: "stroke-linejoin-round" })
  ),
  "lock-private": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M12 7H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1ZM5 7V4c0-1.65 1.35-3 3-3s3 1.35 3 3v3", className: "stroke-linejoin-round" })
  ),
  "map": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M2 12.8V2l3.61 1.21V14L2 12.8ZM10.4 12.8V2L14 3.05V14l-3.6-1.2ZM5.61 14l4.79-1.2M5.61 3.21 10.4 2", className: "stroke-linejoin-round" })
  ),
  "menu": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 3H1M15 8H1M15 13H1", className: "stroke-linejoin-round" })
  ),
  "microphone-off": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M3 15.01h10M8 15v-3" }),
    import_react15.default.createElement("path", { d: "M6.6 8.43c.36.36.86.59 1.41.59 1.1 0 2-.9 2-2v-2L6.6 8.43Z", className: "filled" }),
    import_react15.default.createElement("path", { d: "M13 7.01c0 2.76-2.24 5-5 5-1.28 0-2.45-.48-3.33-1.28M3 12.01l10-10" }),
    import_react15.default.createElement("path", { d: "M8.01 1.01c-1.1 0-2 .9-2 2v1.67l3.23-3.23c-.34-.27-.77-.44-1.23-.44Z", className: "filled" }),
    import_react15.default.createElement("path", { d: "M3.01 7.01c0 .482-.162 1.263.33 1.75" })
  ),
  "microphone": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M3 15h10M8 15v-3M10 3a2 2 0 1 0-4 0v4a2 2 0 1 0 4 0V3Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M13 7c0 2.76-2.24 5-5 5S3 9.76 3 7", className: "stroke-linejoin-round" })
  ),
  "mini-player": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M14 10.01H8v4h6v-4Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M5 14H2V2h12v5", className: "stroke-linejoin-round" })
  ),
  "multiscreen": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 5H5v7h10V5Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M11 3V1.01L1.01 1 1 8h1.998M10 12v3M7 15h6", className: "stroke-linejoin-round" })
  ),
  "notification": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M14 12H2c-.39 0-.63-.44-.41-.76L4 8V5c0-2.21 1.79-4 4-4s4 1.79 4 4v3l2.41 3.24c.22.33-.02.76-.41.76ZM6 13c0 1.1.9 2 2 2s2-.9 2-2", className: "stroke-linejoin-round" })
  ),
  "pause": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M5 2v12M11 2v12", className: "stroke-linejoin-round" })
  ),
  "play": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m4 13.03 8-5-8-5v10Z", className: "stroke-linejoin-round filled" })
  ),
  "redo": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m11 2 4 4-4 4", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M14 6H5.5C3.01 6 1 8.01 1 10.5S3.01 15 5.5 15H8", className: "stroke-linejoin-round" })
  ),
  "refresh": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 0v5l-5-.04", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M15 8c0 3.87-3.13 7-7 7s-7-3.13-7-7 3.13-7 7-7c2.79 0 5.2 1.63 6.33 4" })
  ),
  "remove": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M1 5h14M13 5l-1 10H4L3 5M5 5V2h6v3", className: "stroke-linejoin-round" })
  ),
  "resize-area": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M14 4 4 14M10 14l4-4", className: "stroke-linejoin-round" })
  ),
  "script": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M5 4 1 8l4 4M11 4l4 4-4 4", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M7 13 9 3" })
  ),
  "search": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m11 11 4 4M7 12A5 5 0 1 0 7 2a5 5 0 0 0 0 10Z", className: "stroke-linejoin-round" })
  ),
  "security": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M8 1C6.29 2.53 4.13 3.32 2 3.48v3.48c0 2.05.76 3.88 1.71 5.14.92 1.22 2.32 2.21 4.29 2.9 1.97-.69 3.37-1.68 4.29-2.9A8.684 8.684 0 0 0 14 6.96V3.48C11.87 3.32 9.71 2.52 8 1Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M8 4v5M8 10v2" })
  ),
  "send": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m1 1 14 6.92L1 15l3-7-3-7ZM4 8h11", className: "stroke-linejoin-round" })
  ),
  "settings": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M6.11 1.729c.07-.42.44-.729.86-.729h2.02c.43 0 .79.31.86.729l.17.999c.05.29.24.529.5.679.06.03.11.06.17.1.25.15.56.2.84.1l.95-.35c.4-.15.85 0 1.07.38l1.01 1.747c.21.37.13.839-.2 1.108l-.78.64c-.23.189-.34.479-.33.768v.2c0 .29.11.579.33.769l.78.639c.33.27.42.739.2 1.108l-1.01 1.748c-.21.37-.66.529-1.06.38l-.95-.35a.966.966 0 0 0-.84.1c-.06.03-.11.07-.17.1-.26.14-.45.389-.5.679l-.17.998A.878.878 0 0 1 9 15H6.98a.87.87 0 0 1-.86-.729l-.17-.998a.988.988 0 0 0-.5-.68c-.06-.03-.11-.06-.17-.1a.996.996 0 0 0-.84-.1l-.95.35c-.4.15-.85 0-1.06-.38l-1.01-1.747a.873.873 0 0 1 .2-1.108l.78-.64c.23-.189.34-.479.33-.768v-.2c0-.3-.11-.579-.33-.769l-.78-.639a.861.861 0 0 1-.2-1.108l1.01-1.748c.21-.37.66-.529 1.07-.38l.95.35c.28.1.58.06.84-.1.06-.03.11-.07.17-.1.26-.14.45-.379.5-.678l.15-1Z", className: "stroke-linecap-round stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M10 8c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2Z", className: "stroke-linecap-round stroke-linejoin-round" })
  ),
  "share": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M3.5 11a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM12.5 6a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM12.5 15a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM10.326 4.7 5.678 7.293M10.223 11.483l-4.448-1.96" })
  ),
  "shrink": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M10 1v5h5M10.71 5.29 15 1M1 10h5v5M5.3 10.7 1 15", className: "stroke-linejoin-round" })
  ),
  "star-filled": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m8 1 2.16 4.38 4.84.71-3.5 3.41.83 4.81L8 12.04l-4.33 2.27.83-4.81L1 6.09l4.84-.71L8 1Z", className: "filled stroke-linejoin-round" })
  ),
  "star-half": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M8 1v11.04l-4.33 2.27.83-4.81L1 6.09l4.84-.71L8 1Z", className: "filled no-stroke" }),
    import_react15.default.createElement("path", { d: "m8 1 2.16 4.38 4.84.71-3.5 3.41.83 4.81L8 12.04l-4.33 2.27.83-4.81L1 6.09l4.84-.71L8 1Z", className: "stroke-linejoin-round" })
  ),
  "star": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m8 1 2.16 4.38 4.84.71-3.5 3.41.83 4.81L8 12.04l-4.33 2.27.83-4.81L1 6.09l4.84-.71L8 1Z", className: "stroke-linejoin-round" })
  ),
  "status-in-progress": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react15.default.createElement("path", { d: "M9 7H7v2h2V7ZM6 7H4v2h2V7ZM12 7h-2v2h2V7Z", className: "filled no-stroke" })
  ),
  "status-info": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react15.default.createElement("path", { d: "M8 12V7M8 6V4" })
  ),
  "status-negative": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react15.default.createElement("path", { d: "m5.5 5.5 5 5M10.5 5.5l-5 5" })
  ),
  "status-pending": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react15.default.createElement("path", { d: "M8 4v5H4", className: "stroke-linejoin-round" })
  ),
  "status-positive": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react15.default.createElement("path", { d: "M4.5 7.5 7 10l4-5", className: "stroke-linejoin-round" })
  ),
  "status-stopped": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react15.default.createElement("path", { d: "M5 8h6" })
  ),
  "status-warning": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M8 5v4M8 10v2M6.52 1.88l-5.33 9.76c-.13.23-.19.5-.19.76 0 .88.71 1.59 1.59 1.59H13.4c.88 0 1.59-.71 1.59-1.59 0-.27-.07-.53-.19-.76L9.48 1.88C9.18 1.34 8.62 1 8 1s-1.18.34-1.48.88Z", className: "stroke-linejoin-round" })
  ),
  "subtract-minus": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M2 8h12", className: "stroke-linejoin-round" })
  ),
  "suggestions": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M8.12 15h-2l-.99-5.02C3.92 9.07 3.12 7.63 3.12 6c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.07-2.01 3.98L10.12 15h-2ZM11.12 12h-6", className: "stroke-linejoin-round" })
  ),
  "support": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react15.default.createElement("path", { d: "M5.75 6.338c.13-1.178.811-2.339 2.37-2.339 1.472 0 2.435 1.312 2.042 2.468-.215.633-.916 1.132-1.385 1.578C8.162 8.631 8 9.2 8 10" }),
    import_react15.default.createElement("path", { d: "M8 12.01h.01V12H8v.01Z", className: "filled" })
  ),
  "thumbs-down-filled": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M1 1h2.01v9H1c-.55 0-1-.45-1-1V2c0-.55.45-1 1-1Zm14.14 6.22-1.69-5.03C13.21 1.48 12.54 1 11.79 1H4.01v9l3.23 3.88c.6.72 1.77.29 1.77-.64V9h4.86c.92 0 1.57-.91 1.28-1.78h-.01Z", className: "filled no-stroke" })
  ),
  "thumbs-down": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M9 13.13V9h4.12c.6 0 1.02-.59.83-1.16l-1.6-4.77A1.58 1.58 0 0 0 10.86 2H1v8h4l2.41 3.61c.48.72 1.59.38 1.59-.48ZM5 2v8", className: "stroke-linejoin-round" })
  ),
  "thumbs-up-filled": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M3 15.001H1c-.55 0-1-.45-1-1v-7c0-.55.45-1 1-1h2v9Zm10.86-8H9v-4.24c0-.93-1.17-1.36-1.77-.64L4 6.001v9h7.78c.75 0 1.42-.48 1.66-1.19l1.69-5.03c.29-.87-.36-1.78-1.28-1.78h.01Z", className: "filled no-stroke" })
  ),
  "thumbs-up": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M9 2.871v4.13h4.12c.6 0 1.02.59.83 1.16l-1.6 4.77a1.58 1.58 0 0 1-1.49 1.07H1v-8h4l2.41-3.61c.48-.72 1.59-.38 1.59.48ZM5 14.001v-8", className: "stroke-linejoin-round" })
  ),
  "ticket": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M13 8c0-1.1.9-2 2-2V3H1v3c1.1 0 2 .9 2 2s-.9 2-2 2v3h14v-3c-1.1 0-2-.9-2-2Z", className: "stroke-linejoin-round" })
  ),
  "transcript": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 1H1v14h14V1ZM9 10H4M12 6H4", className: "stroke-linejoin-round" })
  ),
  "treeview-collapse": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M14 2H2v12h12V2ZM5 8h6", className: "stroke-linejoin-round" })
  ),
  "treeview-expand": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M14 2H2v12h12V2ZM8 5v6M5 8h6", className: "stroke-linejoin-round" })
  ),
  "undo": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M5 2 1 6l4 4", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M2 6h8.5c2.49 0 4.5 2.01 4.5 4.5S12.99 15 10.5 15H8", className: "stroke-linejoin-round" })
  ),
  "unlocked": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M11 7H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1ZM9 7V4c0-1.65 1.35-3 3-3s3 1.35 3 3", className: "stroke-linejoin-round" })
  ),
  "upload-download": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m7 7-3 3-3-3M4 9V1M15 9l-3-3-3 3M12 7v8M0 14h8M8 2h8", className: "stroke-linejoin-round" })
  ),
  "upload": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M1 1h14M13 10 8 5l-5 5M8 6v9", className: "stroke-linejoin-round" })
  ),
  "user-profile-active": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M8 6a2.5 2.5 0 0 0 0-5 2.5 2.5 0 0 0 0 5ZM2 15.5v-3c0-1.66 1.34-3 3-3h6c1.66 0 3 1.34 3 3v3", className: "filled" }),
    import_react15.default.createElement("path", { d: "M2 15.5v-3c0-1.66 1.34-3 3-3h6c1.66 0 3 1.34 3 3v3", className: "stroke-linejoin-round" })
  ),
  "user-profile": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M8 7c1.66 0 3-1.34 3-3S9.66 1 8 1 5 2.34 5 4s1.34 3 3 3Z" }),
    import_react15.default.createElement("path", { d: "M2 16v-3c0-1.66 1.34-3 3-3h6c1.66 0 3 1.34 3 3v3", className: "stroke-linejoin-round" })
  ),
  "video-camera-off": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M11 6V3H1v9.97h10V9.98L15 13V3.04L11 6ZM4 6l4 4M8 6.01 4 10", className: "stroke-linejoin-round" })
  ),
  "video-camera-on": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M11 6V3H1v9.97L11 13v-3l4 3V3.04L11 6Z", className: "stroke-linejoin-round" })
  ),
  "video-camera-unavailable": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M11 5.99V3H1v9.97h10V9.98L15 13V3.04l-4 2.95ZM4 8h4", className: "stroke-linejoin-round" })
  ),
  "video-off": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "7", r: "5" }),
    import_react15.default.createElement("path", { d: "M3 15h10M8 15v-3M6.01 5.01 10 9M10 5 6 9", className: "stroke-linejoin-round" })
  ),
  "video-on": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "7", r: "5" }),
    import_react15.default.createElement("circle", { cx: "8", cy: "7", r: "2", className: "filled no-stroke" }),
    import_react15.default.createElement("path", { d: "M3 15h10M8 15v-3" })
  ),
  "video-unavailable": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "8", cy: "7", r: "5" }),
    import_react15.default.createElement("path", { d: "M3 15h10M6 7h4M8 15v-3" })
  ),
  "view-full": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 1H1v14h14V1Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M11.5 4h-7a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.5-.5Z", className: "filled no-stroke" })
  ),
  "view-horizontal": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 15V1H1v14h14Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M11.5 7h-7a.5.5 0 0 0-.5.5v4a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 0-.5-.5Z", className: "filled no-stroke" })
  ),
  "view-vertical": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M15 1H1v14h14V1Z", className: "stroke-linejoin-round" }),
    import_react15.default.createElement("path", { d: "M11.5 4h-4a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.5-.5Z", className: "filled no-stroke" })
  ),
  "zoom-in": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("circle", { cx: "7", cy: "7", r: "6" }),
    import_react15.default.createElement("path", { d: "m11 11 4 4M7 4v6M4 7l6 .01" })
  ),
  "zoom-out": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "m11 11 4 4" }),
    import_react15.default.createElement("circle", { cx: "7", cy: "7", r: "6" }),
    import_react15.default.createElement("path", { d: "m4 7 6 .01" })
  ),
  "zoom-to-fit": import_react15.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react15.default.createElement("path", { d: "M11 5H5v6h6V5ZM6 1H1v5M10 1h5v5M6 15H1v-5M10 15h5v-5", className: "stroke-linejoin-round" })
  )
};
var icons_default = icons;

// node_modules/@cloudscape-design/components/icon/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/icon/styles.scoped.css";
var styles_css_default4 = {
  "icon": "awsui_icon_h11ix_6vdye_189",
  "icon-flex-height": "awsui_icon-flex-height_h11ix_6vdye_197",
  "size-small": "awsui_size-small_h11ix_6vdye_225",
  "size-small-mapped-height": "awsui_size-small-mapped-height_h11ix_6vdye_229",
  "size-normal": "awsui_size-normal_h11ix_6vdye_244",
  "size-normal-mapped-height": "awsui_size-normal-mapped-height_h11ix_6vdye_248",
  "size-medium": "awsui_size-medium_h11ix_6vdye_263",
  "size-medium-mapped-height": "awsui_size-medium-mapped-height_h11ix_6vdye_267",
  "size-big": "awsui_size-big_h11ix_6vdye_282",
  "size-big-mapped-height": "awsui_size-big-mapped-height_h11ix_6vdye_286",
  "size-large": "awsui_size-large_h11ix_6vdye_301",
  "size-large-mapped-height": "awsui_size-large-mapped-height_h11ix_6vdye_305",
  "variant-normal": "awsui_variant-normal_h11ix_6vdye_320",
  "variant-disabled": "awsui_variant-disabled_h11ix_6vdye_323",
  "variant-inverted": "awsui_variant-inverted_h11ix_6vdye_326",
  "variant-subtle": "awsui_variant-subtle_h11ix_6vdye_329",
  "variant-warning": "awsui_variant-warning_h11ix_6vdye_332",
  "variant-error": "awsui_variant-error_h11ix_6vdye_335",
  "variant-success": "awsui_variant-success_h11ix_6vdye_338",
  "variant-link": "awsui_variant-link_h11ix_6vdye_341",
  "name-angle-left-double": "awsui_name-angle-left-double_h11ix_6vdye_344",
  "name-angle-left": "awsui_name-angle-left_h11ix_6vdye_344",
  "name-angle-right-double": "awsui_name-angle-right-double_h11ix_6vdye_346",
  "name-angle-right": "awsui_name-angle-right_h11ix_6vdye_346",
  "name-arrow-left": "awsui_name-arrow-left_h11ix_6vdye_348",
  "name-arrow-right": "awsui_name-arrow-right_h11ix_6vdye_349",
  "name-caret-left-filled": "awsui_name-caret-left-filled_h11ix_6vdye_350",
  "name-caret-right-filled": "awsui_name-caret-right-filled_h11ix_6vdye_351",
  "name-audio-full": "awsui_name-audio-full_h11ix_6vdye_352",
  "name-audio-half": "awsui_name-audio-half_h11ix_6vdye_353",
  "name-audio-off": "awsui_name-audio-off_h11ix_6vdye_354",
  "name-external": "awsui_name-external_h11ix_6vdye_355",
  "name-redo": "awsui_name-redo_h11ix_6vdye_356",
  "name-resize-area": "awsui_name-resize-area_h11ix_6vdye_357",
  "name-send": "awsui_name-send_h11ix_6vdye_358",
  "name-shrink": "awsui_name-shrink_h11ix_6vdye_359",
  "name-undo": "awsui_name-undo_h11ix_6vdye_360",
  "name-view-vertical": "awsui_name-view-vertical_h11ix_6vdye_361",
  "badge": "awsui_badge_h11ix_6vdye_385"
};

// node_modules/@cloudscape-design/components/icon/internal.js
function iconSizeMap(height) {
  if (height === null) {
    return "normal";
  }
  if (height >= 50) {
    return "large";
  } else if (height >= 36) {
    return "big";
  } else if (height >= 24) {
    return "medium";
  } else if (height <= 16) {
    return "small";
  } else {
    return "normal";
  }
}
var InternalIcon = (_a) => {
  var { name, size = "normal", variant = "normal", url, alt, ariaLabel, svg, badge, __internalRootRef = null } = _a, props = __rest(_a, ["name", "size", "variant", "url", "alt", "ariaLabel", "svg", "badge", "__internalRootRef"]);
  const iconRef = (0, import_react16.useRef)(null);
  useVisualRefresh();
  const [parentHeight, setParentHeight] = (0, import_react16.useState)(null);
  const contextualSize = size === "inherit";
  const iconSize = contextualSize ? iconSizeMap(parentHeight) : size;
  const inlineStyles = contextualSize && parentHeight !== null ? { height: `${parentHeight}px` } : {};
  const baseProps = getBaseProps(props);
  baseProps.className = clsx_m_default(baseProps.className, styles_css_default4.icon, contextualSize && styles_css_default4["icon-flex-height"], badge && styles_css_default4.badge, !contextualSize && styles_css_default4[`size-${iconSize}-mapped-height`], styles_css_default4[`size-${iconSize}`], styles_css_default4[`variant-${variant}`], styles_css_default4[`name-${name}`]);
  (0, import_react16.useLayoutEffect)(() => {
    if (!contextualSize || !iconRef.current) {
      return;
    }
    const { lineHeight } = getComputedStyle(iconRef.current);
    const newParentHeight = parseInt(lineHeight, 10);
    setParentHeight(newParentHeight);
  });
  const mergedRef = useMergeRefs(iconRef, __internalRootRef);
  const hasAriaLabel = typeof ariaLabel === "string";
  const labelAttributes = hasAriaLabel ? { role: "img", "aria-label": ariaLabel } : {};
  if (svg) {
    if (url) {
      warnOnce("Icon", "You have specified both `url` and `svg`. `svg` will take precedence and `url` will be ignored.");
    }
    return import_react16.default.createElement("span", Object.assign({}, baseProps, labelAttributes, { ref: mergedRef, "aria-hidden": !hasAriaLabel, style: inlineStyles }), svg);
  }
  if (url) {
    return import_react16.default.createElement(
      "span",
      Object.assign({}, baseProps, { ref: mergedRef, style: inlineStyles }),
      import_react16.default.createElement("img", { src: url, alt: ariaLabel !== null && ariaLabel !== void 0 ? ariaLabel : alt })
    );
  }
  const validIcon = name && Object.prototype.hasOwnProperty.call(icons_default, name);
  function iconMap(name2) {
    if (name2 === "gen-ai" && iconSize === "small") {
      return import_react16.default.createElement(
        "svg",
        { width: "12", height: "12", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true", "data-testid": "gen-ai-filled" },
        import_react16.default.createElement("path", { d: "m8 4.4 1.018 2.582L11.6 8 9.018 9.018 8 11.6 6.982 9.018 4.4 8l2.582-1.018L8 4.4ZM2.405 2.41l.002-.003.003-.002-.003-.002-.002-.003-.002.003-.003.002.003.002.002.003Z", className: "filled" })
      );
    } else {
      return icons_default[name2];
    }
  }
  return import_react16.default.createElement("span", Object.assign({}, baseProps, labelAttributes, { ref: mergedRef, style: inlineStyles }), validIcon ? iconMap(name) : void 0);
};
var internal_default2 = InternalIcon;

// node_modules/@cloudscape-design/components/internal/context/single-tab-stop-navigation-context.js
var import_react17 = __toESM(require_react());
var defaultValue2 = {
  navigationActive: false,
  registerFocusable: () => () => {
  }
};
var SingleTabStopNavigationContext = (0, import_react17.createContext)(defaultValue2);
function useSingleTabStopNavigation(focusable, options) {
  var _a;
  const { navigationActive: contextNavigationActive, registerFocusable } = (0, import_react17.useContext)(SingleTabStopNavigationContext);
  const [focusTargetActive, setFocusTargetActive] = (0, import_react17.useState)(false);
  const navigationDisabled = (options === null || options === void 0 ? void 0 : options.tabIndex) && (options === null || options === void 0 ? void 0 : options.tabIndex) < 0;
  const navigationActive = contextNavigationActive && !navigationDisabled;
  (0, import_react17.useLayoutEffect)(() => {
    if (navigationActive && focusable && focusable.current) {
      const unregister = registerFocusable(focusable.current, (isFocusable2) => setFocusTargetActive(isFocusable2));
      return () => unregister();
    }
  });
  let tabIndex = options === null || options === void 0 ? void 0 : options.tabIndex;
  if (navigationActive) {
    tabIndex = !focusTargetActive ? -1 : (_a = options === null || options === void 0 ? void 0 : options.tabIndex) !== null && _a !== void 0 ? _a : 0;
  }
  return { navigationActive, tabIndex };
}
var SingleTabStopNavigationProvider = (0, import_react17.forwardRef)(({ navigationActive, children, getNextFocusTarget, isElementSuppressed, onRegisterFocusable, onUnregisterActive }, ref) => {
  const focusables = (0, import_react17.useRef)(/* @__PURE__ */ new Set());
  const focusHandlers = (0, import_react17.useRef)(/* @__PURE__ */ new Map());
  const focusablesState = (0, import_react17.useRef)(/* @__PURE__ */ new WeakMap());
  const focusTarget = (0, import_react17.useRef)(null);
  function onUnregisterFocusable(focusableElement) {
    const isUnregisteringFocusedNode = nodeBelongs(focusableElement, document.activeElement);
    if (isUnregisteringFocusedNode) {
      setTimeout(() => onUnregisterActive === null || onUnregisterActive === void 0 ? void 0 : onUnregisterActive(focusableElement), 0);
    }
  }
  function registerFocusable(focusableElement, changeHandler) {
    focusables.current.add(focusableElement);
    focusHandlers.current.set(focusableElement, changeHandler);
    const isFocusable2 = !!focusablesState.current.get(focusableElement);
    const newIsFocusable = focusTarget.current === focusableElement || !!(isElementSuppressed === null || isElementSuppressed === void 0 ? void 0 : isElementSuppressed(focusableElement));
    if (newIsFocusable !== isFocusable2) {
      focusablesState.current.set(focusableElement, newIsFocusable);
      changeHandler(newIsFocusable);
    }
    onRegisterFocusable === null || onRegisterFocusable === void 0 ? void 0 : onRegisterFocusable(focusableElement);
    return () => unregisterFocusable(focusableElement);
  }
  function unregisterFocusable(focusableElement) {
    focusables.current.delete(focusableElement);
    focusHandlers.current.delete(focusableElement);
    onUnregisterFocusable === null || onUnregisterFocusable === void 0 ? void 0 : onUnregisterFocusable(focusableElement);
  }
  function updateFocusTarget() {
    var _a;
    focusTarget.current = getNextFocusTarget();
    for (const focusableElement of focusables.current) {
      const isFocusable2 = (_a = focusablesState.current.get(focusableElement)) !== null && _a !== void 0 ? _a : false;
      const newIsFocusable = focusTarget.current === focusableElement || !!(isElementSuppressed === null || isElementSuppressed === void 0 ? void 0 : isElementSuppressed(focusableElement));
      if (newIsFocusable !== isFocusable2) {
        focusablesState.current.set(focusableElement, newIsFocusable);
        focusHandlers.current.get(focusableElement)(newIsFocusable);
      }
    }
  }
  function getFocusTarget() {
    return focusTarget.current;
  }
  function isRegistered(element) {
    return focusables.current.has(element);
  }
  (0, import_react17.useImperativeHandle)(ref, () => ({ updateFocusTarget, getFocusTarget, isRegistered }));
  return import_react17.default.createElement(SingleTabStopNavigationContext.Provider, { value: { navigationActive, registerFocusable } }, children);
});

// node_modules/@cloudscape-design/components/table/body-cell/disabled-inline-editor.js
var import_react40 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-hidden-description/index.js
var import_react18 = __toESM(require_react());
function useHiddenDescription(description) {
  const id = useUniqueId();
  return {
    targetProps: {
      "aria-describedby": description ? id : void 0
    },
    descriptionEl: description ? import_react18.default.createElement("span", { id, hidden: true }, description) : null,
    descriptionId: id
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-portal-mode-classes/index.js
function usePortalModeClasses(ref) {
  const colorMode = useCurrentMode(ref);
  const densityMode = useDensityMode(ref);
  const context = useVisualContext(ref);
  const visualRefreshWithClass = useVisualRefresh() && !ALWAYS_VISUAL_REFRESH;
  return clsx_m_default({
    "awsui-polaris-dark-mode awsui-dark-mode": colorMode === "dark",
    "awsui-polaris-compact-mode awsui-compact-mode": densityMode === "compact",
    "awsui-visual-refresh": visualRefreshWithClass,
    [`awsui-context-${context}`]: context
  });
}

// node_modules/@cloudscape-design/components/popover/arrow.js
var import_react19 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/popover/styles.scoped.css";
var styles_css_default5 = {
  "arrow": "awsui_arrow_xjuzf_f2x4x_153",
  "arrow-outer": "awsui_arrow-outer_xjuzf_f2x4x_157",
  "arrow-inner": "awsui_arrow-inner_xjuzf_f2x4x_157",
  "arrow-position-right-top": "awsui_arrow-position-right-top_xjuzf_f2x4x_199",
  "arrow-position-right-bottom": "awsui_arrow-position-right-bottom_xjuzf_f2x4x_199",
  "arrow-position-left-top": "awsui_arrow-position-left-top_xjuzf_f2x4x_202",
  "arrow-position-left-bottom": "awsui_arrow-position-left-bottom_xjuzf_f2x4x_202",
  "arrow-position-top-center": "awsui_arrow-position-top-center_xjuzf_f2x4x_205",
  "arrow-position-top-right": "awsui_arrow-position-top-right_xjuzf_f2x4x_205",
  "arrow-position-top-left": "awsui_arrow-position-top-left_xjuzf_f2x4x_205",
  "arrow-position-top-responsive": "awsui_arrow-position-top-responsive_xjuzf_f2x4x_205",
  "arrow-position-bottom-center": "awsui_arrow-position-bottom-center_xjuzf_f2x4x_208",
  "arrow-position-bottom-right": "awsui_arrow-position-bottom-right_xjuzf_f2x4x_208",
  "arrow-position-bottom-left": "awsui_arrow-position-bottom-left_xjuzf_f2x4x_208",
  "arrow-position-bottom-responsive": "awsui_arrow-position-bottom-responsive_xjuzf_f2x4x_208",
  "body": "awsui_body_xjuzf_f2x4x_220",
  "body-overflow-visible": "awsui_body-overflow-visible_xjuzf_f2x4x_256",
  "body-variant-chart": "awsui_body-variant-chart_xjuzf_f2x4x_259",
  "has-dismiss": "awsui_has-dismiss_xjuzf_f2x4x_264",
  "dismiss": "awsui_dismiss_xjuzf_f2x4x_269",
  "dismiss-control": "awsui_dismiss-control_xjuzf_f2x4x_277",
  "header-row": "awsui_header-row_xjuzf_f2x4x_281",
  "header": "awsui_header_xjuzf_f2x4x_281",
  "content": "awsui_content_xjuzf_f2x4x_306",
  "content-overflow-visible": "awsui_content-overflow-visible_xjuzf_f2x4x_314",
  "container": "awsui_container_xjuzf_f2x4x_326",
  "container-arrow-position-bottom-left": "awsui_container-arrow-position-bottom-left_xjuzf_f2x4x_337",
  "container-arrow-position-bottom-center": "awsui_container-arrow-position-bottom-center_xjuzf_f2x4x_337",
  "container-arrow-position-bottom-right": "awsui_container-arrow-position-bottom-right_xjuzf_f2x4x_337",
  "container-arrow-position-top-left": "awsui_container-arrow-position-top-left_xjuzf_f2x4x_342",
  "container-arrow-position-top-center": "awsui_container-arrow-position-top-center_xjuzf_f2x4x_342",
  "container-arrow-position-top-right": "awsui_container-arrow-position-top-right_xjuzf_f2x4x_342",
  "container-arrow-position-right-top": "awsui_container-arrow-position-right-top_xjuzf_f2x4x_347",
  "container-arrow-position-right-bottom": "awsui_container-arrow-position-right-bottom_xjuzf_f2x4x_347",
  "container-arrow-position-left-top": "awsui_container-arrow-position-left-top_xjuzf_f2x4x_352",
  "container-arrow-position-left-bottom": "awsui_container-arrow-position-left-bottom_xjuzf_f2x4x_352",
  "container-body": "awsui_container-body_xjuzf_f2x4x_358",
  "container-body-variant-annotation": "awsui_container-body-variant-annotation_xjuzf_f2x4x_398",
  "container-body-size-small": "awsui_container-body-size-small_xjuzf_f2x4x_403",
  "fixed-width": "awsui_fixed-width_xjuzf_f2x4x_406",
  "container-body-size-medium": "awsui_container-body-size-medium_xjuzf_f2x4x_410",
  "container-body-size-large": "awsui_container-body-size-large_xjuzf_f2x4x_417",
  "container-arrow": "awsui_container-arrow_xjuzf_f2x4x_337",
  "container-arrow-position-top-responsive": "awsui_container-arrow-position-top-responsive_xjuzf_f2x4x_467",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_xjuzf_f2x4x_1",
  "refresh": "awsui_refresh_xjuzf_f2x4x_525",
  "root": "awsui_root_xjuzf_f2x4x_547",
  "no-wrap": "awsui_no-wrap_xjuzf_f2x4x_579",
  "root-filtering-token": "awsui_root-filtering-token_xjuzf_f2x4x_583",
  "trigger": "awsui_trigger_xjuzf_f2x4x_587",
  "overflow-ellipsis": "awsui_overflow-ellipsis_xjuzf_f2x4x_594",
  "trigger-type-text-inline": "awsui_trigger-type-text-inline_xjuzf_f2x4x_602",
  "trigger-type-text": "awsui_trigger-type-text_xjuzf_f2x4x_602",
  "trigger-type-filtering-token": "awsui_trigger-type-filtering-token_xjuzf_f2x4x_670",
  "popover-inline-content": "awsui_popover-inline-content_xjuzf_f2x4x_674",
  "hover-area": "awsui_hover-area_xjuzf_f2x4x_678"
};

// node_modules/@cloudscape-design/components/popover/arrow.js
var Arrow = (props) => {
  const isVisualRefresh = useVisualRefresh();
  return import_react19.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default5.arrow, props.position && styles_css_default5[`arrow-position-${props.position}`]) },
    import_react19.default.createElement("div", { className: styles_css_default5["arrow-outer"] }),
    import_react19.default.createElement("div", { className: clsx_m_default(styles_css_default5["arrow-inner"], isVisualRefresh && styles_css_default5.refresh) })
  );
};
var arrow_default = import_react19.default.memo(Arrow);

// node_modules/@cloudscape-design/components/popover/body.js
var import_react32 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button/internal.js
var import_react29 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/tooltip/index.js
var import_react24 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/container.js
var import_react21 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/use-popover-position.js
var import_react20 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/utils/positions.js
var ARROW_OFFSET = 12;
var PRIORITY_MAPPING = {
  top: [
    "top-center",
    "top-right",
    "top-left",
    "bottom-center",
    "bottom-right",
    "bottom-left",
    "right-top",
    "right-bottom",
    "left-top",
    "left-bottom"
  ],
  bottom: [
    "bottom-center",
    "bottom-right",
    "bottom-left",
    "top-center",
    "top-right",
    "top-left",
    "right-top",
    "right-bottom",
    "left-top",
    "left-bottom"
  ],
  left: [
    "left-top",
    "left-bottom",
    "right-top",
    "right-bottom",
    "bottom-center",
    "top-center",
    "bottom-left",
    "top-left",
    "bottom-right",
    "top-right"
  ],
  right: [
    "right-top",
    "right-bottom",
    "left-top",
    "left-bottom",
    "bottom-center",
    "top-center",
    "bottom-right",
    "top-right",
    "bottom-left",
    "top-left"
  ]
};
var RECTANGLE_CALCULATIONS = {
  "top-center": ({ body, trigger, arrow }) => {
    return {
      insetBlockStart: trigger.insetBlockStart - body.blockSize - arrow.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 - body.inlineSize / 2,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "top-right": ({ body, trigger, arrow }) => {
    return {
      insetBlockStart: trigger.insetBlockStart - body.blockSize - arrow.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 - ARROW_OFFSET - arrow.inlineSize / 2,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "top-left": ({ body, trigger, arrow }) => {
    return {
      insetBlockStart: trigger.insetBlockStart - body.blockSize - arrow.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 + ARROW_OFFSET + arrow.inlineSize / 2 - body.inlineSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "bottom-center": ({ body, trigger, arrow }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize + arrow.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 - body.inlineSize / 2,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "bottom-right": ({ body, trigger, arrow }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize + arrow.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 - ARROW_OFFSET - arrow.inlineSize / 2,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "bottom-left": ({ body, trigger, arrow }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize + arrow.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 + ARROW_OFFSET + arrow.inlineSize / 2 - body.inlineSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "right-top": ({ body, trigger, arrow }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize / 2 - ARROW_OFFSET - arrow.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize + arrow.blockSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "right-bottom": ({ body, trigger, arrow }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize / 2 - body.blockSize + ARROW_OFFSET + arrow.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize + arrow.blockSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "left-top": ({ body, trigger, arrow }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize / 2 - ARROW_OFFSET - arrow.blockSize,
      insetInlineStart: trigger.insetInlineStart - body.inlineSize - arrow.blockSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "left-bottom": ({ body, trigger, arrow }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize / 2 - body.blockSize + ARROW_OFFSET + arrow.blockSize,
      insetInlineStart: trigger.insetInlineStart - body.inlineSize - arrow.blockSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  }
};
function fitIntoContainer(inner, outer) {
  let { insetInlineStart, inlineSize, insetBlockStart, blockSize } = inner;
  if (insetInlineStart < outer.insetInlineStart) {
    inlineSize = insetInlineStart + inlineSize - outer.insetInlineStart;
    insetInlineStart = outer.insetInlineStart;
  } else if (insetInlineStart + inlineSize > outer.insetInlineStart + outer.inlineSize) {
    inlineSize = outer.insetInlineStart + outer.inlineSize - insetInlineStart;
  }
  if (insetBlockStart < outer.insetBlockStart) {
    blockSize = insetBlockStart + blockSize - outer.insetBlockStart;
    insetBlockStart = outer.insetBlockStart;
  } else if (insetBlockStart + blockSize > outer.insetBlockStart + outer.blockSize) {
    blockSize = outer.insetBlockStart + outer.blockSize - insetBlockStart;
  }
  return { insetInlineStart, inlineSize, insetBlockStart, blockSize };
}
function getTallestRect(rect1, rect2) {
  return rect1.blockSize >= rect2.blockSize ? rect1 : rect2;
}
function getIntersection(rectangles) {
  let boundingBox = null;
  for (const currentRect of rectangles) {
    if (!boundingBox) {
      boundingBox = currentRect;
      continue;
    }
    const insetInlineStart = Math.max(boundingBox.insetInlineStart, currentRect.insetInlineStart);
    const insetBlockStart = Math.max(boundingBox.insetBlockStart, currentRect.insetBlockStart);
    const insetInlineEnd = Math.min(boundingBox.insetInlineStart + boundingBox.inlineSize, currentRect.insetInlineStart + currentRect.inlineSize);
    const insetBlockEnd = Math.min(boundingBox.insetBlockStart + boundingBox.blockSize, currentRect.insetBlockStart + currentRect.blockSize);
    if (insetInlineEnd < insetInlineStart || insetBlockEnd < insetBlockStart) {
      return null;
    }
    boundingBox = {
      insetInlineStart,
      insetBlockStart,
      inlineSize: insetInlineEnd - insetInlineStart,
      blockSize: insetBlockEnd - insetBlockStart
    };
  }
  return boundingBox;
}
function calculatePosition({
  preferredPosition,
  fixedInternalPosition,
  trigger,
  arrow,
  body,
  container,
  viewport,
  // the popover is only bound by the viewport if it is rendered in a portal
  renderWithPortal,
  allowVerticalOverflow,
  minVisibleBlockSize
}) {
  let bestOption = null;
  const preferredInternalPositions = fixedInternalPosition ? [fixedInternalPosition] : PRIORITY_MAPPING[preferredPosition];
  for (const internalPosition2 of preferredInternalPositions) {
    const rect2 = RECTANGLE_CALCULATIONS[internalPosition2]({ body, trigger, arrow });
    const visibleArea = renderWithPortal ? getIntersection([rect2, viewport]) : getIntersection([rect2, viewport, container]);
    const fitsBlockSize = minVisibleBlockSize === void 0 ? visibleArea && visibleArea.blockSize === body.blockSize : visibleArea && visibleArea.blockSize >= Math.min(body.blockSize, minVisibleBlockSize);
    const fitsInlineSize = visibleArea && visibleArea.inlineSize === body.inlineSize;
    if (fitsBlockSize && fitsInlineSize) {
      const scrollable2 = visibleArea && visibleArea.blockSize < body.blockSize;
      return { internalPosition: internalPosition2, rect: scrollable2 ? fitIntoContainer(rect2, viewport) : rect2, scrollable: scrollable2 };
    }
    const newOption = { rect: rect2, internalPosition: internalPosition2, visibleArea };
    bestOption = getBestOption(newOption, bestOption);
  }
  const internalPosition = (bestOption === null || bestOption === void 0 ? void 0 : bestOption.internalPosition) || "right-top";
  const rect = RECTANGLE_CALCULATIONS[internalPosition]({ body, trigger, arrow });
  const tallestBoundingContainer = getTallestRect(viewport, container);
  const boundingContainer = allowVerticalOverflow && isTopOrBottom(internalPosition) ? {
    insetBlockStart: tallestBoundingContainer.insetBlockStart,
    blockSize: tallestBoundingContainer.blockSize,
    insetInlineStart: viewport.insetInlineStart,
    inlineSize: viewport.inlineSize
  } : viewport;
  const optimizedRect = fitIntoContainer(rect, boundingContainer);
  const scrollable = optimizedRect.blockSize < rect.blockSize;
  return { internalPosition, rect: optimizedRect, scrollable };
}
function getBestOption(option1, option2) {
  if (!(option2 === null || option2 === void 0 ? void 0 : option2.visibleArea)) {
    return option1;
  }
  if (!option1.visibleArea) {
    return option2;
  }
  if (option1.visibleArea.inlineSize === option2.visibleArea.inlineSize) {
    return option1.visibleArea.blockSize > option2.visibleArea.blockSize ? option1 : option2;
  }
  return option1.visibleArea.inlineSize > option2.visibleArea.inlineSize ? option1 : option2;
}
function getOffsetDimensions(element) {
  return { offsetHeight: element.offsetHeight, offsetWidth: element.offsetWidth };
}
function getDimensions(element) {
  const computedStyle = getComputedStyle(element);
  return {
    inlineSize: parseFloat(computedStyle.inlineSize),
    blockSize: parseFloat(computedStyle.blockSize)
  };
}
function isTopOrBottom(internalPosition) {
  return ["top", "bottom"].includes(internalPosition.split("-")[0]);
}
function isCenterOutside(child, parent) {
  const childCenter = child.insetBlockStart + child.blockSize / 2;
  const overflowsBlockStart = childCenter < parent.insetBlockStart;
  const overflowsBlockEnd = childCenter > parent.insetBlockEnd;
  return overflowsBlockStart || overflowsBlockEnd;
}

// node_modules/@cloudscape-design/components/popover/use-popover-position.js
function usePopoverPosition({ popoverRef, bodyRef, arrowRef, getTrack, contentRef, allowScrollToFit, allowVerticalOverflow, preferredPosition, renderWithPortal, keepPosition, hideOnOverscroll, minVisibleBlockSize }) {
  const previousInternalPositionRef = (0, import_react20.useRef)(null);
  const [popoverStyle, setPopoverStyle] = (0, import_react20.useState)({});
  const [internalPosition, setInternalPosition] = (0, import_react20.useState)(null);
  const [isOverscrolling, setIsOverscrolling] = (0, import_react20.useState)(false);
  const positionHandlerRef = (0, import_react20.useRef)(() => {
  });
  const scrollableContainerRectRef = (0, import_react20.useRef)(null);
  const updatePositionHandler = (0, import_react20.useCallback)((onContentResize = false) => {
    var _a;
    const track = getTrack();
    if (!track || !popoverRef.current || !bodyRef.current || !contentRef.current || !arrowRef.current) {
      return;
    }
    const popover = popoverRef.current;
    const body = bodyRef.current;
    const arrow = arrowRef.current;
    const document2 = popover.ownerDocument;
    const { offsetWidth, offsetHeight } = getOffsetDimensions(popover);
    if (offsetWidth === 0 || offsetHeight === 0 || !nodeContains(document2.body, track)) {
      return;
    }
    const prevInsetBlockStart = popover.style.insetBlockStart;
    const prevInsetInlineStart = popover.style.insetInlineStart;
    popover.style.insetBlockStart = "0";
    popover.style.insetInlineStart = "0";
    body.style.maxBlockSize = "";
    body.style.overflowX = "";
    body.style.overflowY = "";
    const viewportRect = getViewportRect(document2.defaultView);
    const trackRect = getLogicalBoundingClientRect(track);
    const arrowRect = getDimensions(arrow);
    const { containingBlock, boundary } = findUpUntilMultiple({
      startElement: popover,
      tests: {
        containingBlock: isContainingBlock,
        boundary: (element) => isContainingBlock(element) || isBoundary(element)
      }
    });
    const containingBlockRect = containingBlock ? getLogicalBoundingClientRect(containingBlock) : viewportRect;
    const boundaryRect = boundary ? getLogicalBoundingClientRect(boundary) : getDocumentRect(document2);
    const bodyBorderWidth = getBorderWidth(body);
    const contentRect = getLogicalBoundingClientRect(contentRef.current);
    const contentBoundingBox = {
      inlineSize: contentRect.inlineSize + 2 * bodyBorderWidth,
      blockSize: contentRect.blockSize + 2 * bodyBorderWidth
    };
    const shouldKeepPosition = keepPosition && onContentResize && !!previousInternalPositionRef.current;
    const fixedInternalPosition = (_a = shouldKeepPosition && previousInternalPositionRef.current) !== null && _a !== void 0 ? _a : void 0;
    const { scrollable, internalPosition: newInternalPosition, rect } = calculatePosition({
      preferredPosition,
      fixedInternalPosition,
      trigger: trackRect,
      arrow: arrowRect,
      body: contentBoundingBox,
      container: boundaryRect,
      viewport: viewportRect,
      renderWithPortal,
      allowVerticalOverflow,
      minVisibleBlockSize
    });
    const popoverOffset = toRelativePosition(rect, containingBlockRect);
    const trackRelativeOffset = toRelativePosition(popoverOffset, toRelativePosition(trackRect, containingBlockRect));
    popover.style.insetBlockStart = prevInsetBlockStart;
    popover.style.insetInlineStart = prevInsetInlineStart;
    if (scrollable) {
      body.style.maxBlockSize = rect.blockSize + "px";
      body.style.overflowX = "hidden";
      body.style.overflowY = "auto";
    }
    previousInternalPositionRef.current = newInternalPosition;
    setInternalPosition(newInternalPosition);
    const shouldScroll = allowScrollToFit && !shouldKeepPosition;
    const insetBlockStart = shouldScroll ? popoverOffset.insetBlockStart + calculateScroll(rect) : popoverOffset.insetBlockStart;
    setPopoverStyle({ insetBlockStart, insetInlineStart: popoverOffset.insetInlineStart });
    if (shouldScroll) {
      const scrollableParent = getFirstScrollableParent(popover);
      scrollRectangleIntoView(rect, scrollableParent);
    }
    if (hideOnOverscroll && track instanceof HTMLElement) {
      const scrollableContainer = getFirstScrollableParent(track);
      if (scrollableContainer) {
        scrollableContainerRectRef.current = getLogicalBoundingClientRect(scrollableContainer);
      }
    }
    positionHandlerRef.current = () => {
      const track2 = getTrack();
      if (!track2) {
        return;
      }
      const trackRect2 = getLogicalBoundingClientRect(track2);
      const newTrackOffset = toRelativePosition(trackRect2, containingBlock ? getLogicalBoundingClientRect(containingBlock) : viewportRect);
      setPopoverStyle({
        insetBlockStart: newTrackOffset.insetBlockStart + trackRelativeOffset.insetBlockStart,
        insetInlineStart: newTrackOffset.insetInlineStart + trackRelativeOffset.insetInlineStart
      });
      if (hideOnOverscroll && scrollableContainerRectRef.current) {
        setIsOverscrolling(isCenterOutside(trackRect2, scrollableContainerRectRef.current));
      }
    };
  }, [
    getTrack,
    popoverRef,
    bodyRef,
    contentRef,
    arrowRef,
    keepPosition,
    preferredPosition,
    renderWithPortal,
    allowVerticalOverflow,
    allowScrollToFit,
    hideOnOverscroll,
    minVisibleBlockSize
  ]);
  return { updatePositionHandler, popoverStyle, internalPosition, positionHandlerRef, isOverscrolling };
}
function getBorderWidth(element) {
  return parseInt(getComputedStyle(element).borderWidth) || 0;
}
function toRelativePosition(element, parent) {
  return {
    insetBlockStart: element.insetBlockStart - parent.insetBlockStart,
    insetInlineStart: element.insetInlineStart - parent.insetInlineStart
  };
}
function getViewportRect(window2) {
  var _a, _b, _c, _d;
  return {
    insetBlockStart: 0,
    insetInlineStart: 0,
    inlineSize: (_b = (_a = window2.visualViewport) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : window2.innerWidth,
    blockSize: (_d = (_c = window2.visualViewport) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : window2.innerHeight
  };
}
function getDocumentRect(document2) {
  const { insetBlockStart, insetInlineStart } = getLogicalBoundingClientRect(document2.documentElement);
  return {
    insetBlockStart,
    insetInlineStart,
    inlineSize: document2.documentElement.scrollWidth,
    blockSize: document2.documentElement.scrollHeight
  };
}
function isBoundary(element) {
  const computedStyle = getComputedStyle(element);
  return !!computedStyle.clipPath && computedStyle.clipPath !== "none";
}

// node_modules/@cloudscape-design/components/popover/container.js
function PopoverContainer({ position, trackRef, getTrack: externalGetTrack, trackKey, minVisibleBlockSize, arrow, children, zIndex, renderWithPortal, size, fixedWidth, variant, keepPosition, allowScrollToFit, allowVerticalOverflow, hideOnOverscroll, hoverArea, className }) {
  const bodyRef = (0, import_react21.useRef)(null);
  const contentRef = (0, import_react21.useRef)(null);
  const popoverRef = (0, import_react21.useRef)(null);
  const arrowRef = (0, import_react21.useRef)(null);
  const isRefresh = useVisualRefresh();
  const getTrack = (0, import_react21.useRef)(() => {
    if (trackRef) {
      return trackRef.current;
    }
    if (externalGetTrack) {
      return externalGetTrack();
    }
    throw new Error("Invariant violation: must provide either trackRef or getTrack.");
  });
  const { updatePositionHandler, popoverStyle, internalPosition, positionHandlerRef, isOverscrolling } = usePopoverPosition({
    popoverRef,
    bodyRef,
    arrowRef,
    getTrack: getTrack.current,
    contentRef,
    allowScrollToFit,
    allowVerticalOverflow,
    preferredPosition: position,
    renderWithPortal,
    keepPosition,
    hideOnOverscroll,
    minVisibleBlockSize
  });
  (0, import_react21.useLayoutEffect)(() => {
    updatePositionHandler();
  }, [updatePositionHandler, trackKey]);
  useResizeObserver(contentRef, () => {
    updatePositionHandler(true);
  });
  (0, import_react21.useLayoutEffect)(() => {
    const controller = new AbortController();
    const onClick = (event) => __awaiter(this, void 0, void 0, function* () {
      if (
        // Do not update position if keepPosition is true.
        keepPosition || // If the click was on the trigger, this will make the popover appear or disappear,
        // so no need to update its position either in this case.
        nodeContains(getTrack.current(), event.target)
      ) {
        return;
      }
      const popoverOffset = popoverRef.current && getLogicalBoundingClientRect(popoverRef.current);
      if (!popoverOffset || popoverOffset.insetBlockStart < 0 || popoverOffset.insetBlockEnd > window.innerHeight) {
        return;
      }
      const targetTime = performance.now() + 1e3;
      while (performance.now() < targetTime) {
        if (controller.signal.aborted) {
          break;
        }
        updatePositionHandler();
        if (typeof requestIdleCallback !== "undefined") {
          yield new Promise((r) => requestIdleCallback(r));
        } else {
          yield new Promise((r) => setTimeout(r, 50));
        }
      }
    });
    const updatePositionOnResize = () => requestAnimationFrame(() => updatePositionHandler());
    const refreshPosition = () => requestAnimationFrame(() => positionHandlerRef.current());
    window.addEventListener("click", onClick, { signal: controller.signal });
    window.addEventListener("resize", updatePositionOnResize, { signal: controller.signal });
    window.addEventListener("scroll", refreshPosition, { capture: true, signal: controller.signal });
    return () => {
      controller.abort();
    };
  }, [hideOnOverscroll, keepPosition, positionHandlerRef, trackRef, updatePositionHandler]);
  return isOverscrolling ? null : import_react21.default.createElement(
    "div",
    { ref: popoverRef, style: Object.assign(Object.assign({}, popoverStyle), { zIndex }), className: clsx_m_default(styles_css_default5.container, isRefresh && styles_css_default5.refresh, className) },
    import_react21.default.createElement("div", { ref: arrowRef, className: clsx_m_default(styles_css_default5[`container-arrow`], styles_css_default5[`container-arrow-position-${internalPosition}`]), "aria-hidden": true }, arrow(internalPosition)),
    import_react21.default.createElement("div", { ref: bodyRef, className: clsx_m_default(styles_css_default5["container-body"], styles_css_default5[`container-body-size-${size}`], {
      [styles_css_default5["fixed-width"]]: fixedWidth,
      [styles_css_default5[`container-body-variant-${variant}`]]: variant
    }) }, hoverArea ? import_react21.default.createElement(
      "div",
      { className: styles_css_default5["hover-area"] },
      import_react21.default.createElement("div", { ref: contentRef }, children)
    ) : import_react21.default.createElement("div", { ref: contentRef }, children))
  );
}

// node_modules/@cloudscape-design/components/internal/components/transition/index.js
var import_react22 = __toESM(require_react());
var import_react23 = __toESM(require_react());
function Transition(_a) {
  var { in: isIn, children, exit = true, onStatusChange = () => void 0, disabled = false, transitionChangeDelay } = _a, rest = __rest(_a, ["in", "children", "exit", "onStatusChange", "disabled", "transitionChangeDelay"]);
  const transitionRootElement = (0, import_react23.useRef)(null);
  const [transitionState, setTransitionState] = (0, import_react22.useState)(isIn ? "entered" : "exited");
  const motionDisabled = useReducedMotion(transitionRootElement) || disabled;
  const addTransitionEndListener = (0, import_react23.useCallback)((done) => {
    const node = transitionRootElement.current;
    if (node === null) {
      return;
    }
    const controller = new AbortController();
    const listener = (e) => {
      if (e.target === node) {
        controller.abort();
        done();
      }
    };
    node.addEventListener("transitionend", listener, { signal: controller.signal });
    node.addEventListener("animationend", listener, { signal: controller.signal });
  }, []);
  return import_react22.default.createElement(Transition_default, Object.assign({ addEndListener: addTransitionEndListener, timeout: motionDisabled ? 0 : void 0, in: isIn, nodeRef: transitionRootElement, exit, onEnter: (isAppearing) => {
    if (!isAppearing) {
      setTransitionState("enter");
      onStatusChange("enter");
    }
  }, onEntering: (isAppearing) => {
    var _a2;
    if (!isAppearing) {
      void ((_a2 = transitionRootElement.current) === null || _a2 === void 0 ? void 0 : _a2.offsetHeight);
      if (transitionChangeDelay === null || transitionChangeDelay === void 0 ? void 0 : transitionChangeDelay.entering) {
        setTimeout(() => {
          setTransitionState("entering");
          onStatusChange("entering");
        }, transitionChangeDelay === null || transitionChangeDelay === void 0 ? void 0 : transitionChangeDelay.entering);
      } else {
        setTransitionState("entering");
        onStatusChange("entering");
      }
    }
  }, onEntered: (isAppearing) => {
    if (!isAppearing) {
      setTransitionState("entered");
      onStatusChange("entered");
    }
  }, onExit: () => {
    setTransitionState("exit");
    onStatusChange("exit");
  }, onExiting: () => {
    setTransitionState("exiting");
    onStatusChange("exiting");
  }, onExited: () => {
    setTransitionState("exited");
    onStatusChange("exited");
  } }, rest), () => children(transitionState, transitionRootElement));
}

// node_modules/@cloudscape-design/components/internal/components/tooltip/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/tooltip/styles.scoped.css";
var styles_css_default6 = {
  "root": "awsui_root_1qprf_160mh_5"
};

// node_modules/@cloudscape-design/components/internal/components/tooltip/index.js
function Tooltip({ value, trackRef, trackKey, className, contentAttributes = {}, position = "top", size = "small", hideOnOverscroll, onDismiss }) {
  if (!trackKey && (typeof value === "string" || typeof value === "number")) {
    trackKey = value;
  }
  (0, import_react24.useEffect)(() => {
    const controller = new AbortController();
    window.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        event.stopPropagation();
        onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss();
      }
    }, {
      // The tooltip is often activated on mouseover, which means the focus can
      // be anywhere else on the page. Capture also means that this gets called
      // before any wrapper modals or dialogs can detect it and act on it.
      capture: true,
      signal: controller.signal
    });
    return () => {
      controller.abort();
    };
  }, [onDismiss]);
  return import_react24.default.createElement(
    Portal,
    null,
    import_react24.default.createElement(
      "div",
      Object.assign({ className: styles_css_default6.root }, contentAttributes, { "data-testid": trackKey }),
      import_react24.default.createElement(Transition, { in: true }, () => import_react24.default.createElement(
        PopoverContainer,
        { trackRef, trackKey, size, fixedWidth: false, position, zIndex: 7e3, arrow: (position2) => import_react24.default.createElement(arrow_default, { position: position2 }), hideOnOverscroll, className },
        import_react24.default.createElement(PopoverBody, { dismissButton: false, dismissAriaLabel: void 0, onDismiss: void 0, header: void 0 }, value)
      ))
    )
  );
}

// node_modules/@cloudscape-design/components/internal/context/button-context.js
var import_react25 = __toESM(require_react());
var ButtonContext = (0, import_react25.createContext)({
  onClick: () => {
  }
});
function useButtonContext() {
  return (0, import_react25.useContext)(ButtonContext);
}

// node_modules/@cloudscape-design/components/internal/generated/custom-css-properties/index.js
var customCSSPropertiesMap = {
  "maxContentWidth": "--awsui-max-content-width-kcc2gu",
  "minContentWidth": "--awsui-min-content-width-kcc2gu",
  "breadcrumbsGap": "--awsui-breadcrumbs-gap-kcc2gu",
  "contentGapLeft": "--awsui-content-gap-left-kcc2gu",
  "contentGapRight": "--awsui-content-gap-right-kcc2gu",
  "contentHeight": "--awsui-content-height-kcc2gu",
  "contentLayoutDefaultHorizontalPadding": "--awsui-content-layout-default-horizontal-padding-kcc2gu",
  "contentLayoutMaxContentWidth": "--awsui-content-layout-max-content-width-kcc2gu",
  "contentLayoutMainGap": "--awsui-content-layout-main-gap-kcc2gu",
  "defaultMaxContentWidth": "--awsui-default-max-content-width-kcc2gu",
  "defaultMinContentWidth": "--awsui-default-min-content-width-kcc2gu",
  "drawerSize": "--awsui-drawer-size-kcc2gu",
  "footerHeight": "--awsui-footer-height-kcc2gu",
  "headerGap": "--awsui-header-gap-kcc2gu",
  "headerHeight": "--awsui-header-height-kcc2gu",
  "layoutWidth": "--awsui-layout-width-kcc2gu",
  "mainGap": "--awsui-main-gap-kcc2gu",
  "mainOffsetLeft": "--awsui-main-offset-left-kcc2gu",
  "mainTemplateRows": "--awsui-main-template-rows-kcc2gu",
  "mobileBarHeight": "--awsui-mobile-bar-height-kcc2gu",
  "notificationsHeight": "--awsui-notifications-height-kcc2gu",
  "offsetTop": "--awsui-offset-top-kcc2gu",
  "overlapHeight": "--awsui-overlap-height-kcc2gu",
  "navigationWidth": "--awsui-navigation-width-kcc2gu",
  "splitPanelReportedHeaderSize": "--awsui-split-panel-reported-header-size-kcc2gu",
  "splitPanelReportedSize": "--awsui-split-panel-reported-size-kcc2gu",
  "splitPanelHeight": "--awsui-split-panel-height-kcc2gu",
  "splitPanelMinWidth": "--awsui-split-panel-min-width-kcc2gu",
  "splitPanelMaxWidth": "--awsui-split-panel-max-width-kcc2gu",
  "toolsMaxWidth": "--awsui-tools-max-width-kcc2gu",
  "toolsWidth": "--awsui-tools-width-kcc2gu",
  "toolsAnimationStartingOpacity": "--awsui-tools-animation-starting-opacity-kcc2gu",
  "contentScrollMargin": "--awsui-content-scroll-margin-kcc2gu",
  "flashbarStackDepth": "--awsui-flashbar-stack-depth-kcc2gu",
  "flashbarStackIndex": "--awsui-flashbar-stack-index-kcc2gu",
  "flashbarStickyBottomMargin": "--awsui-flashbar-sticky-bottom-margin-kcc2gu",
  "stackedNotificationsBottomMargin": "--awsui-stacked-notifications-bottom-margin-kcc2gu",
  "stackedNotificationsDefaultBottomMargin": "--awsui-stacked-notifications-default-bottom-margin-kcc2gu",
  "dropdownDefaultMaxWidth": "--awsui-dropdown-default-max-width-kcc2gu",
  "spinnerRotatorFrom": "--awsui-spinner-rotator-from-kcc2gu",
  "spinnerRotatorTo": "--awsui-spinner-rotator-to-kcc2gu",
  "spinnerLineLeftFrom": "--awsui-spinner-line-left-from-kcc2gu",
  "spinnerLineLeftTo": "--awsui-spinner-line-left-to-kcc2gu",
  "spinnerLineRightFrom": "--awsui-spinner-line-right-from-kcc2gu",
  "spinnerLineRightTo": "--awsui-spinner-line-right-to-kcc2gu",
  "sliderLabelCount": "--awsui-slider-label-count-kcc2gu",
  "sliderTickCount": "--awsui-slider-tick-count-kcc2gu",
  "sliderReferenceColumn": "--awsui-slider-reference-column-kcc2gu",
  "sliderNextReferenceColumn": "--awsui-slider-next-reference-column-kcc2gu",
  "sliderMaxStart": "--awsui-slider-max-start-kcc2gu",
  "sliderMinEnd": "--awsui-slider-min-end-kcc2gu",
  "sliderRangeInlineSize": "--awsui-slider-range-inline-size-kcc2gu",
  "sliderTooltipPosition": "--awsui-slider-tooltip-position-kcc2gu",
  "togglesLeftWidth": "--awsui-toggles-left-width-kcc2gu",
  "togglesRightWidth": "--awsui-toggles-right-width-kcc2gu",
  "promptInputMaxRows": "--awsui-prompt-input-max-rows-kcc2gu",
  "promptInputScrollHeight": "--awsui-prompt-input-scroll-height-kcc2gu",
  "dragHandleAnimationInlineOffset": "--awsui-drag-handle-animation-inline-offset-kcc2gu",
  "dragHandleAnimationBlockOffset": "--awsui-drag-handle-animation-block-offset-kcc2gu",
  "styleBackgroundActive": "--awsui-style-background-active-kcc2gu",
  "styleBackgroundDefault": "--awsui-style-background-default-kcc2gu",
  "styleBackgroundDisabled": "--awsui-style-background-disabled-kcc2gu",
  "styleBackgroundHover": "--awsui-style-background-hover-kcc2gu",
  "styleBorderColorActive": "--awsui-style-border-color-active-kcc2gu",
  "styleBorderColorDefault": "--awsui-style-border-color-default-kcc2gu",
  "styleBorderColorDisabled": "--awsui-style-border-color-disabled-kcc2gu",
  "styleBorderColorHover": "--awsui-style-border-color-hover-kcc2gu",
  "styleColorActive": "--awsui-style-color-active-kcc2gu",
  "styleColorDefault": "--awsui-style-color-default-kcc2gu",
  "styleColorDisabled": "--awsui-style-color-disabled-kcc2gu",
  "styleColorHover": "--awsui-style-color-hover-kcc2gu",
  "styleFocusRingBorderColor": "--awsui-style-focus-ring-border-color-kcc2gu",
  "styleFocusRingBorderRadius": "--awsui-style-focus-ring-border-radius-kcc2gu",
  "styleFocusRingBorderWidth": "--awsui-style-focus-ring-border-width-kcc2gu",
  "styleFocusRingBoxShadow": "--awsui-style-focus-ring-box-shadow-kcc2gu"
};
var custom_css_properties_default = customCSSPropertiesMap;

// node_modules/@cloudscape-design/components/internal/hooks/forward-focus/index.js
var import_react26 = __toESM(require_react());
function useForwardFocus(mainRef, controlRef) {
  (0, import_react26.useImperativeHandle)(mainRef, () => ({
    focus(...args) {
      var _a;
      (_a = controlRef.current) === null || _a === void 0 ? void 0 : _a.focus(...args);
    }
  }), [controlRef]);
}

// node_modules/@cloudscape-design/components/internal/hooks/use-modal-component-analytics/index.js
var import_react27 = __toESM(require_react());
var useModalContextLoadingButtonComponent = (isPrimaryButton, loading) => {
  const modalContext = useModalContext();
  (0, import_react27.useEffect)(() => {
    if (!isPrimaryButton || !modalContext.isInModal) {
      return;
    }
    if (loading) {
      modalContext.componentLoadingCount.current++;
      return () => {
        modalContext.componentLoadingCount.current--;
        modalContext.emitTimeToContentReadyInModal(performance.now());
      };
    }
  }, [loading]);
};
var useModalContextLoadingComponent = () => {
  const modalContext = useModalContext();
  (0, import_react27.useEffect)(() => {
    if (!modalContext.isInModal) {
      return;
    }
    modalContext.componentLoadingCount.current++;
    return () => {
      modalContext.componentLoadingCount.current--;
      modalContext.emitTimeToContentReadyInModal(performance.now());
    };
  }, []);
};

// node_modules/@cloudscape-design/components/internal/utils/check-safe-url.js
var allowedJavascriptUrls = ["javascript:void(0)", "javascript:void(0);", "javascript:;"];
function checkSafeUrl(component, url) {
  if (!url) {
    return;
  }
  if (allowedJavascriptUrls.indexOf(url.toLowerCase()) !== -1) {
    return;
  }
  let parsedUrl;
  try {
    parsedUrl = new URL(url);
  } catch (e) {
    return;
  }
  if (parsedUrl.protocol === "javascript:") {
    warnOnce(component, `A javascript: URL was blocked as a security precaution. The URL was "${url}".`);
    throw new Error(`A javascript: URL was blocked as a security precaution.`);
  }
  return;
}

// node_modules/@cloudscape-design/components/button/icon-helper.js
var React13 = __toESM(require_react());

// node_modules/@cloudscape-design/components/spinner/internal.js
var import_react28 = __toESM(require_react());

// node_modules/@cloudscape-design/components/spinner/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/spinner/styles.scoped.css";
var styles_css_default7 = {
  "root": "awsui_root_1612d_152xz_183",
  "spinner-rotator": "awsui_spinner-rotator_1612d_152xz_1",
  "size-normal": "awsui_size-normal_1612d_152xz_198",
  "size-big": "awsui_size-big_1612d_152xz_206",
  "size-large": "awsui_size-large_1612d_152xz_214",
  "variant-normal": "awsui_variant-normal_1612d_152xz_222",
  "variant-disabled": "awsui_variant-disabled_1612d_152xz_225",
  "variant-inverted": "awsui_variant-inverted_1612d_152xz_228",
  "circle": "awsui_circle_1612d_152xz_240",
  "circle-left": "awsui_circle-left_1612d_152xz_268",
  "spinner-line-left": "awsui_spinner-line-left_1612d_152xz_1",
  "circle-right": "awsui_circle-right_1612d_152xz_273",
  "spinner-line-right": "awsui_spinner-line-right_1612d_152xz_1"
};

// node_modules/@cloudscape-design/components/spinner/internal.js
function InternalSpinner(_a) {
  var { size = "normal", variant = "normal", __internalRootRef } = _a, props = __rest(_a, ["size", "variant", "__internalRootRef"]);
  const baseProps = getBaseProps(props);
  useModalContextLoadingComponent();
  return import_react28.default.createElement(
    "span",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default7.root, styles_css_default7[`size-${size}`], styles_css_default7[`variant-${variant}`]), ref: __internalRootRef }),
    import_react28.default.createElement("span", { className: clsx_m_default(styles_css_default7.circle, styles_css_default7["circle-left"]) }),
    import_react28.default.createElement("span", { className: clsx_m_default(styles_css_default7.circle, styles_css_default7["circle-right"]) })
  );
}

// node_modules/@cloudscape-design/components/button/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/button/styles.scoped.css";
var styles_css_default8 = {
  "content": "awsui_content_vjswe_1tif4_153",
  "button": "awsui_button_vjswe_1tif4_157",
  "variant-normal": "awsui_variant-normal_vjswe_1tif4_206",
  "disabled": "awsui_disabled_vjswe_1tif4_224",
  "variant-primary": "awsui_variant-primary_vjswe_1tif4_231",
  "variant-link": "awsui_variant-link_vjswe_1tif4_256",
  "variant-icon": "awsui_variant-icon_vjswe_1tif4_281",
  "variant-inline-icon": "awsui_variant-inline-icon_vjswe_1tif4_306",
  "variant-inline-icon-pointer-target": "awsui_variant-inline-icon-pointer-target_vjswe_1tif4_331",
  "variant-inline-link": "awsui_variant-inline-link_vjswe_1tif4_356",
  "variant-modal-dismiss": "awsui_variant-modal-dismiss_vjswe_1tif4_385",
  "variant-flashbar-icon": "awsui_variant-flashbar-icon_vjswe_1tif4_410",
  "variant-breadcrumb-group": "awsui_variant-breadcrumb-group_vjswe_1tif4_435",
  "variant-menu-trigger": "awsui_variant-menu-trigger_vjswe_1tif4_465",
  "button-no-text": "awsui_button-no-text_vjswe_1tif4_557",
  "button-no-wrap": "awsui_button-no-wrap_vjswe_1tif4_561",
  "full-width": "awsui_full-width_vjswe_1tif4_564",
  "icon-left": "awsui_icon-left_vjswe_1tif4_586",
  "icon-right": "awsui_icon-right_vjswe_1tif4_591",
  "icon": "awsui_icon_vjswe_1tif4_586",
  "link": "awsui_link_vjswe_1tif4_610",
  "disabled-with-reason": "awsui_disabled-with-reason_vjswe_1tif4_610"
};

// node_modules/@cloudscape-design/components/button/icon-helper.js
function getIconAlign(props) {
  const standalone = props.variant === "icon" || props.variant === "inline-icon";
  return standalone ? "left" : props.iconAlign;
}
function IconWrapper(_a) {
  var { iconName, iconUrl, iconAlt, iconSvg, iconSize, badge } = _a, props = __rest(_a, ["iconName", "iconUrl", "iconAlt", "iconSvg", "iconSize", "badge"]);
  if (!iconName && !iconUrl && !iconSvg) {
    return null;
  }
  return React13.createElement(internal_default2, { className: clsx_m_default(styles_css_default8.icon, styles_css_default8[`icon-${getIconAlign(props)}`], props.iconClass), name: iconName, url: iconUrl, svg: iconSvg, alt: iconAlt, size: iconSize, badge });
}
function LeftIcon(props) {
  if (props.loading) {
    return React13.createElement(InternalSpinner, { className: clsx_m_default(styles_css_default8.icon, styles_css_default8["icon-left"]) });
  } else if (getIconAlign(props) === "left") {
    return React13.createElement(IconWrapper, Object.assign({}, props));
  }
  return null;
}
function RightIcon(props) {
  if (getIconAlign(props) === "right") {
    return React13.createElement(IconWrapper, Object.assign({}, props));
  }
  return null;
}

// node_modules/@cloudscape-design/components/button/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/button/analytics-metadata/styles.scoped.css";
var styles_css_default9 = {
  "label": "awsui_label_1f1d4_ocied_5"
};

// node_modules/@cloudscape-design/components/button/test-classes/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/button/test-classes/styles.scoped.css";
var styles_css_default10 = {
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_1ueyk_ca6yt_5",
  "external-icon": "awsui_external-icon_1ueyk_ca6yt_9"
};

// node_modules/@cloudscape-design/components/button/internal.js
var InternalButton = import_react29.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;
  var { children, iconName, __iconClass, onClick, onFollow, iconAlign = "left", iconUrl, iconSvg, iconAlt, variant = "normal", loading = false, loadingText, disabled = false, disabledReason, wrapText = true, href, external, target: targetOverride, rel, download, formAction = "submit", ariaLabel, ariaDescribedby, ariaExpanded, ariaControls, fullWidth, badge, i18nStrings, style, __nativeAttributes, __internalRootRef = null, __focusable = false, __injectAnalyticsComponentMetadata = false, __title, __emitPerformanceMarks = true, analyticsAction = "click" } = _a, props = __rest(_a, ["children", "iconName", "__iconClass", "onClick", "onFollow", "iconAlign", "iconUrl", "iconSvg", "iconAlt", "variant", "loading", "loadingText", "disabled", "disabledReason", "wrapText", "href", "external", "target", "rel", "download", "formAction", "ariaLabel", "ariaDescribedby", "ariaExpanded", "ariaControls", "fullWidth", "badge", "i18nStrings", "style", "__nativeAttributes", "__internalRootRef", "__focusable", "__injectAnalyticsComponentMetadata", "__title", "__emitPerformanceMarks", "analyticsAction"]);
  const [showTooltip, setShowTooltip] = (0, import_react29.useState)(false);
  checkSafeUrl("Button", href);
  const isAnchor = Boolean(href);
  const target = targetOverride !== null && targetOverride !== void 0 ? targetOverride : external ? "_blank" : void 0;
  const isNotInteractive = loading || disabled;
  const isDisabledWithReason = (variant === "normal" || variant === "primary" || variant === "icon") && !!disabledReason && disabled;
  const hasAriaDisabled = loading && !disabled || disabled && __focusable || isDisabledWithReason;
  const shouldHaveContent = children && ["icon", "inline-icon", "flashbar-icon", "modal-dismiss", "inline-icon-pointer-target"].indexOf(variant) === -1;
  if ((iconName || iconUrl || iconSvg) && iconAlign === "right" && external) {
    warnOnce("Button", "A right-aligned icon should not be combined with an external icon.");
  }
  const buttonRef = (0, import_react29.useRef)(null);
  useForwardFocus(ref, buttonRef);
  const buttonContext = useButtonContext();
  const i18n = useInternalI18n("button");
  const uniqueId = useUniqueId("button");
  const { funnelInteractionId } = useFunnel();
  const { stepNumber, stepNameSelector } = useFunnelStep();
  const { subStepSelector, subStepNameSelector } = useFunnelSubStep();
  const performanceMarkAttributes = usePerformanceMarks("primaryButton", () => variant === "primary" && __emitPerformanceMarks && !loading && !disabled, buttonRef, () => {
    var _a2;
    return {
      loading,
      disabled,
      text: (_a2 = buttonRef.current) === null || _a2 === void 0 ? void 0 : _a2.innerText
    };
  }, [loading, disabled]);
  useModalContextLoadingButtonComponent(variant === "primary", loading);
  const { targetProps, descriptionEl } = useHiddenDescription(disabledReason);
  const handleClick = (event) => {
    if (isNotInteractive) {
      return event.preventDefault();
    }
    if (isAnchor && isPlainLeftClick(event)) {
      fireCancelableEvent(onFollow, { href, target }, event);
      if ((iconName === "external" || target === "_blank") && funnelInteractionId) {
        const stepName = getTextFromSelector(stepNameSelector);
        const subStepName = getTextFromSelector(subStepNameSelector);
        FunnelMetrics.externalLinkInteracted({
          funnelInteractionId,
          stepNumber,
          stepName,
          stepNameSelector,
          subStepSelector,
          subStepName,
          subStepNameSelector,
          elementSelector: getFunnelValueSelector(uniqueId),
          subStepAllSelector: getSubStepAllSelector()
        });
      }
    }
    const { altKey, button, ctrlKey, metaKey, shiftKey } = event;
    fireCancelableEvent(onClick, { altKey, button, ctrlKey, metaKey, shiftKey }, event);
    buttonContext.onClick({ variant });
  };
  const buttonClass = clsx_m_default(props.className, styles_css_default8.button, styles_css_default8[`variant-${variant}`], {
    [styles_css_default8.disabled]: isNotInteractive,
    [styles_css_default8["disabled-with-reason"]]: isDisabledWithReason,
    [styles_css_default8["button-no-wrap"]]: !wrapText,
    [styles_css_default8["button-no-text"]]: !shouldHaveContent,
    [styles_css_default8["full-width"]]: shouldHaveContent && fullWidth,
    [styles_css_default8.link]: isAnchor
  });
  const explicitTabIndex = __nativeAttributes && "tabIndex" in __nativeAttributes ? __nativeAttributes.tabIndex : void 0;
  const { tabIndex } = useSingleTabStopNavigation(buttonRef, {
    tabIndex: isAnchor && isNotInteractive && !isDisabledWithReason ? -1 : explicitTabIndex
  });
  const analyticsMetadata = disabled ? {} : {
    action: analyticsAction,
    detail: { label: { root: "self" } }
  };
  if (__injectAnalyticsComponentMetadata) {
    analyticsMetadata.component = {
      name: "awsui.Button",
      label: { root: "self" },
      properties: { variant, disabled: `${disabled}` }
    };
  }
  const buttonProps = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, props), __nativeAttributes), performanceMarkAttributes), {
    tabIndex,
    // https://github.com/microsoft/TypeScript/issues/36659
    ref: useMergeRefs(buttonRef, __internalRootRef),
    "aria-label": ariaLabel,
    "aria-describedby": ariaDescribedby,
    "aria-expanded": ariaExpanded,
    "aria-controls": ariaControls,
    // add ariaLabel as `title` as visible hint text
    title: __title !== null && __title !== void 0 ? __title : ariaLabel,
    className: buttonClass,
    onClick: handleClick,
    [DATA_ATTR_FUNNEL_VALUE]: uniqueId
  }), getAnalyticsMetadataAttribute(analyticsMetadata)), getAnalyticsLabelAttribute(shouldHaveContent ? `.${styles_css_default9.label}` : ""));
  const iconProps = {
    loading,
    iconName,
    iconAlign,
    iconUrl,
    iconSvg,
    iconAlt,
    variant,
    badge,
    iconClass: __iconClass,
    iconSize: variant === "modal-dismiss" ? "medium" : "normal"
  };
  const buttonContent = import_react29.default.createElement(
    import_react29.default.Fragment,
    null,
    import_react29.default.createElement(LeftIcon, Object.assign({}, iconProps)),
    shouldHaveContent && import_react29.default.createElement(
      import_react29.default.Fragment,
      null,
      import_react29.default.createElement("span", { className: clsx_m_default(styles_css_default8.content, styles_css_default9.label) }, children),
      external && import_react29.default.createElement(
        import_react29.default.Fragment,
        null,
        " ",
        import_react29.default.createElement(internal_default2, { name: "external", className: styles_css_default10["external-icon"], ariaLabel: i18n("i18nStrings.externalIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.externalIconAriaLabel) })
      )
    ),
    import_react29.default.createElement(RightIcon, Object.assign({}, iconProps))
  );
  const { loadingButtonCount } = useFunnel();
  (0, import_react29.useEffect)(() => {
    if (loading) {
      loadingButtonCount.current++;
      return () => {
        loadingButtonCount.current--;
      };
    }
  }, [loading, loadingButtonCount]);
  const disabledReasonProps = Object.assign({ onFocus: isDisabledWithReason ? () => setShowTooltip(true) : void 0, onBlur: isDisabledWithReason ? () => setShowTooltip(false) : void 0, onMouseEnter: isDisabledWithReason ? () => setShowTooltip(true) : void 0, onMouseLeave: isDisabledWithReason ? () => setShowTooltip(false) : void 0 }, isDisabledWithReason ? targetProps : {});
  const disabledReasonContent = import_react29.default.createElement(
    import_react29.default.Fragment,
    null,
    descriptionEl,
    showTooltip && import_react29.default.createElement(Tooltip, { className: styles_css_default10["disabled-reason-tooltip"], trackRef: buttonRef, value: disabledReason, onDismiss: () => setShowTooltip(false) })
  );
  const stylePropertiesAndVariables = SYSTEM === "core" ? Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ borderRadius: (_b = style === null || style === void 0 ? void 0 : style.root) === null || _b === void 0 ? void 0 : _b.borderRadius, borderWidth: (_c = style === null || style === void 0 ? void 0 : style.root) === null || _c === void 0 ? void 0 : _c.borderWidth, paddingBlock: (_d = style === null || style === void 0 ? void 0 : style.root) === null || _d === void 0 ? void 0 : _d.paddingBlock, paddingInline: (_e = style === null || style === void 0 ? void 0 : style.root) === null || _e === void 0 ? void 0 : _e.paddingInline }, ((_f = style === null || style === void 0 ? void 0 : style.root) === null || _f === void 0 ? void 0 : _f.background) && {
    [custom_css_properties_default.styleBackgroundActive]: (_g = style.root.background) === null || _g === void 0 ? void 0 : _g.active,
    [custom_css_properties_default.styleBackgroundDefault]: (_h = style.root.background) === null || _h === void 0 ? void 0 : _h.default,
    [custom_css_properties_default.styleBackgroundDisabled]: (_j = style.root.background) === null || _j === void 0 ? void 0 : _j.disabled,
    [custom_css_properties_default.styleBackgroundHover]: (_k = style.root.background) === null || _k === void 0 ? void 0 : _k.hover
  }), ((_l = style === null || style === void 0 ? void 0 : style.root) === null || _l === void 0 ? void 0 : _l.borderColor) && {
    [custom_css_properties_default.styleBorderColorActive]: (_m = style.root.borderColor) === null || _m === void 0 ? void 0 : _m.active,
    [custom_css_properties_default.styleBorderColorDefault]: (_o = style.root.borderColor) === null || _o === void 0 ? void 0 : _o.default,
    [custom_css_properties_default.styleBorderColorDisabled]: (_p = style.root.borderColor) === null || _p === void 0 ? void 0 : _p.disabled,
    [custom_css_properties_default.styleBorderColorHover]: (_q = style.root.borderColor) === null || _q === void 0 ? void 0 : _q.hover
  }), ((_r = style === null || style === void 0 ? void 0 : style.root) === null || _r === void 0 ? void 0 : _r.color) && {
    [custom_css_properties_default.styleColorActive]: (_s = style.root.color) === null || _s === void 0 ? void 0 : _s.active,
    [custom_css_properties_default.styleColorDefault]: (_t = style.root.color) === null || _t === void 0 ? void 0 : _t.default,
    [custom_css_properties_default.styleColorDisabled]: (_u = style.root.color) === null || _u === void 0 ? void 0 : _u.disabled,
    [custom_css_properties_default.styleColorHover]: (_v = style.root.color) === null || _v === void 0 ? void 0 : _v.hover
  }), ((_w = style === null || style === void 0 ? void 0 : style.root) === null || _w === void 0 ? void 0 : _w.focusRing) && {
    [custom_css_properties_default.styleFocusRingBorderColor]: (_x = style.root.focusRing) === null || _x === void 0 ? void 0 : _x.borderColor,
    [custom_css_properties_default.styleFocusRingBorderRadius]: (_y = style.root.focusRing) === null || _y === void 0 ? void 0 : _y.borderRadius,
    [custom_css_properties_default.styleFocusRingBorderWidth]: (_z = style.root.focusRing) === null || _z === void 0 ? void 0 : _z.borderWidth
  }), ((_1 = (_0 = style === null || style === void 0 ? void 0 : style.root) === null || _0 === void 0 ? void 0 : _0.focusRing) === null || _1 === void 0 ? void 0 : _1.borderRadius) && {
    [custom_css_properties_default.styleFocusRingBorderRadius]: style.root.focusRing.borderRadius
  }) : void 0;
  if (isAnchor) {
    return import_react29.default.createElement(
      import_react29.default.Fragment,
      null,
      import_react29.default.createElement(
        "a",
        Object.assign({}, buttonProps, {
          href,
          target,
          // security recommendation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target
          rel: rel !== null && rel !== void 0 ? rel : target === "_blank" ? "noopener noreferrer" : void 0,
          "aria-disabled": isNotInteractive ? true : void 0,
          download
        }, disabledReasonProps, { style: stylePropertiesAndVariables }),
        buttonContent,
        isDisabledWithReason && disabledReasonContent
      ),
      loading && loadingText && import_react29.default.createElement(internal_default, { tagName: "span", hidden: true }, loadingText)
    );
  }
  return import_react29.default.createElement(
    import_react29.default.Fragment,
    null,
    import_react29.default.createElement(
      "button",
      Object.assign({}, buttonProps, { type: formAction === "none" ? "button" : "submit", disabled: disabled && !__focusable && !isDisabledWithReason, "aria-disabled": hasAriaDisabled ? true : void 0 }, disabledReasonProps, { style: stylePropertiesAndVariables }),
      buttonContent,
      isDisabledWithReason && disabledReasonContent
    ),
    loading && loadingText && import_react29.default.createElement(internal_default, { tagName: "span", hidden: true }, loadingText)
  );
});
var internal_default3 = InternalButton;

// node_modules/@cloudscape-design/components/internal/components/focus-lock/index.js
var import_react31 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/tab-trap/index.js
var import_react30 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/tab-trap/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/tab-trap/styles.scoped.css";
var styles_css_default11 = {
  "root": "awsui_root_oip5a_160mh_5"
};

// node_modules/@cloudscape-design/components/internal/components/tab-trap/index.js
function TabTrap({ focusNextCallback, disabled = false }) {
  return import_react30.default.createElement("div", { className: styles_css_default11.root, tabIndex: disabled ? -1 : 0, onFocus: focusNextCallback });
}

// node_modules/@cloudscape-design/components/internal/components/focus-lock/utils.js
var tabbables = [
  "button:enabled",
  "select:enabled",
  "textarea:enabled",
  "input:enabled",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[tabindex]",
  "[contenteditable]",
  "[autofocus]"
].join(",");
function isFocusable(element) {
  return element.matches(tabbables);
}
function getAllFocusables(container) {
  return Array.prototype.slice.call(container.querySelectorAll(tabbables));
}
function getFocusables(container) {
  return getAllFocusables(container).filter((element) => element.tabIndex !== -1);
}
function getFirstFocusable(container) {
  var _a;
  const focusables = getFocusables(container);
  return (_a = focusables[0]) !== null && _a !== void 0 ? _a : null;
}
function getLastFocusable(container) {
  var _a;
  const focusables = getFocusables(container);
  return (_a = focusables[focusables.length - 1]) !== null && _a !== void 0 ? _a : null;
}

// node_modules/@cloudscape-design/components/internal/components/focus-lock/index.js
function FocusLock({ className, disabled, autoFocus, restoreFocus, children }, ref) {
  const returnFocusToRef = (0, import_react31.useRef)(null);
  const containerRef = (0, import_react31.useRef)(null);
  const focusFirst = () => {
    var _a;
    if (containerRef.current) {
      (_a = getFirstFocusable(containerRef.current)) === null || _a === void 0 ? void 0 : _a.focus();
    }
  };
  const focusLast = () => {
    var _a;
    if (containerRef.current) {
      (_a = getLastFocusable(containerRef.current)) === null || _a === void 0 ? void 0 : _a.focus();
    }
  };
  (0, import_react31.useEffect)(() => {
    if (autoFocus && !disabled) {
      returnFocusToRef.current = document.activeElement;
      focusFirst();
    }
  }, [autoFocus, disabled]);
  const [previouslyDisabled, setPreviouslyDisabled] = (0, import_react31.useState)(!!disabled);
  (0, import_react31.useEffect)(() => {
    var _a;
    if (previouslyDisabled !== !!disabled) {
      setPreviouslyDisabled(!!disabled);
      if (restoreFocus && disabled) {
        (_a = returnFocusToRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        returnFocusToRef.current = null;
      }
    }
  }, [previouslyDisabled, disabled, restoreFocus]);
  const restoreFocusHandler = (0, import_react31.useCallback)((elem) => {
    var _a;
    if (elem === null && restoreFocus) {
      (_a = returnFocusToRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      returnFocusToRef.current = null;
    }
  }, [restoreFocus]);
  (0, import_react31.useImperativeHandle)(ref, () => ({ focusFirst }));
  const mergedRef = useMergeRefs(containerRef, restoreFocusHandler);
  return import_react31.default.createElement(
    import_react31.default.Fragment,
    null,
    import_react31.default.createElement(TabTrap, { disabled, focusNextCallback: focusLast }),
    import_react31.default.createElement("div", { className, ref: mergedRef }, children),
    import_react31.default.createElement(TabTrap, { disabled, focusNextCallback: focusFirst })
  );
}
var focus_lock_default = import_react31.default.forwardRef(FocusLock);

// node_modules/@cloudscape-design/components/internal/keycode.js
var KeyCode;
(function(KeyCode2) {
  KeyCode2[KeyCode2["pageUp"] = 33] = "pageUp";
  KeyCode2[KeyCode2["pageDown"] = 34] = "pageDown";
  KeyCode2[KeyCode2["end"] = 35] = "end";
  KeyCode2[KeyCode2["home"] = 36] = "home";
  KeyCode2[KeyCode2["backspace"] = 8] = "backspace";
  KeyCode2[KeyCode2["space"] = 32] = "space";
  KeyCode2[KeyCode2["down"] = 40] = "down";
  KeyCode2[KeyCode2["left"] = 37] = "left";
  KeyCode2[KeyCode2["right"] = 39] = "right";
  KeyCode2[KeyCode2["up"] = 38] = "up";
  KeyCode2[KeyCode2["escape"] = 27] = "escape";
  KeyCode2[KeyCode2["enter"] = 13] = "enter";
  KeyCode2[KeyCode2["tab"] = 9] = "tab";
})(KeyCode || (KeyCode = {}));

// node_modules/@cloudscape-design/components/popover/body.js
function PopoverBody({ dismissButton: showDismissButton, dismissAriaLabel, header, children, onDismiss, variant, overflowVisible, className, ariaLabelledby, closeAnalyticsAction }) {
  const i18n = useInternalI18n("popover");
  const labelledById = useUniqueId("awsui-popover-");
  const dismissButtonFocused = (0, import_react32.useRef)(false);
  const dismissButtonRef = (0, import_react32.useRef)(null);
  const onKeyDown = (0, import_react32.useCallback)((event) => {
    if (event.keyCode === KeyCode.escape) {
      event.stopPropagation();
      onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss();
    }
  }, [onDismiss]);
  (0, import_react32.useEffect)(() => {
    var _a;
    if (showDismissButton && !dismissButtonFocused.current) {
      (_a = dismissButtonRef.current) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });
    }
    dismissButtonFocused.current = showDismissButton;
  }, [showDismissButton]);
  const dismissButton = (showDismissButton !== null && showDismissButton !== void 0 ? showDismissButton : null) && import_react32.default.createElement(
    "div",
    Object.assign({ className: styles_css_default5.dismiss }, closeAnalyticsAction ? getAnalyticsMetadataAttribute({ action: closeAnalyticsAction }) : {}),
    import_react32.default.createElement(InternalButton, { variant: "icon", formAction: "none", iconName: "close", className: styles_css_default5["dismiss-control"], ariaLabel: i18n("dismissAriaLabel", dismissAriaLabel), onClick: () => onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(), ref: dismissButtonRef })
  );
  const isDialog = showDismissButton;
  const shouldTrapFocus = showDismissButton && variant !== "annotation";
  const dialogProps = isDialog ? {
    role: "dialog",
    "aria-labelledby": ariaLabelledby !== null && ariaLabelledby !== void 0 ? ariaLabelledby : header ? labelledById : void 0
  } : {};
  return import_react32.default.createElement(
    "div",
    Object.assign({ className: clsx_m_default(styles_css_default5.body, styles_css_default5[`body-variant-${variant}`], className, {
      [styles_css_default5["body-overflow-visible"]]: overflowVisible === "both"
    }), onKeyDown }, dialogProps),
    import_react32.default.createElement(
      focus_lock_default,
      { disabled: !shouldTrapFocus, autoFocus: false },
      header && import_react32.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default5["header-row"], showDismissButton && styles_css_default5["has-dismiss"]) },
        dismissButton,
        import_react32.default.createElement(
          "div",
          { className: styles_css_default5.header, id: labelledById },
          import_react32.default.createElement("h2", null, header)
        )
      ),
      import_react32.default.createElement(
        "div",
        { className: !header && showDismissButton ? styles_css_default5["has-dismiss"] : void 0 },
        !header && dismissButton,
        import_react32.default.createElement("div", { className: clsx_m_default(styles_css_default5.content, { [styles_css_default5["content-overflow-visible"]]: !!overflowVisible }) }, children)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/table/body-cell/click-away.js
var import_react33 = __toESM(require_react());
function useClickAway(onClick) {
  const awayRef = (0, import_react33.useRef)(null);
  const onClickStable = useStableCallback(onClick);
  (0, import_react33.useEffect)(() => {
    function handleClick(event) {
      if (!nodeBelongs(awayRef.current, event.target)) {
        onClickStable();
      }
    }
    document.addEventListener("click", handleClick, { capture: true });
    return () => document.removeEventListener("click", handleClick, { capture: true });
  }, [onClickStable]);
  return awayRef;
}

// node_modules/@cloudscape-design/components/table/body-cell/td-element.js
var import_react39 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/expand-toggle-button/index.js
var import_react34 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/expand-toggle-button/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/expand-toggle-button/styles.scoped.css";
var styles_css_default12 = {
  "expand-toggle-icon": "awsui_expand-toggle-icon_1xe88_13yei_153",
  "expand-toggle-icon-expanded": "awsui_expand-toggle-icon-expanded_1xe88_13yei_174",
  "expand-toggle": "awsui_expand-toggle_1xe88_13yei_153"
};

// node_modules/@cloudscape-design/components/internal/components/expand-toggle-button/index.js
function ExpandToggleButton({ isExpanded, onExpandableItemToggle, expandButtonLabel, collapseButtonLabel, customIcon }) {
  const buttonRef = (0, import_react34.useRef)(null);
  const { tabIndex } = useSingleTabStopNavigation(buttonRef);
  return import_react34.default.createElement("button", { type: "button", ref: buttonRef, tabIndex, "aria-label": isExpanded ? collapseButtonLabel : expandButtonLabel, "aria-expanded": isExpanded, className: styles_css_default12["expand-toggle"], onClick: onExpandableItemToggle }, customIcon !== null && customIcon !== void 0 ? customIcon : import_react34.default.createElement(internal_default2, { size: "small", name: "caret-down-filled", className: clsx_m_default(styles_css_default12["expand-toggle-icon"], isExpanded && styles_css_default12["expand-toggle-icon-expanded"]) }));
}

// node_modules/@cloudscape-design/components/table/sticky-columns/use-sticky-columns.js
var import_react36 = __toESM(require_react());

// node_modules/@cloudscape-design/components/area-chart/async-store/index.js
var import_react35 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var AsyncStore = class {
  constructor(state) {
    this._listeners = [];
    this._state = state;
  }
  get() {
    return this._state;
  }
  set(cb) {
    const prevState = this._state;
    const newState = cb(prevState);
    this._state = newState;
    (0, import_react_dom.unstable_batchedUpdates)(() => {
      for (const [selector, listener] of this._listeners) {
        if (selector(prevState) !== selector(newState)) {
          listener(newState, prevState);
        }
      }
    });
  }
  subscribe(selector, listener) {
    this._listeners.push([selector, listener]);
    return () => this.unsubscribe(listener);
  }
  unsubscribe(listener) {
    for (let index = 0; index < this._listeners.length; index++) {
      const [, storedListener] = this._listeners[index];
      if (storedListener === listener) {
        this._listeners.splice(index, 1);
        break;
      }
    }
  }
};
function useReaction(store, selector, effect) {
  (0, import_react35.useLayoutEffect)(
    () => {
      const unsubscribe = store.subscribe(selector, (newState, prevState) => effect(selector(newState), selector(prevState)));
      return unsubscribe;
    },
    // ignoring selector and effect as they are expected to stay constant
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [store]
  );
}
function useSelector(store, selector) {
  const [state, setState] = (0, import_react35.useState)(selector(store.get()));
  useReaction(store, selector, (newState) => {
    setState(newState);
  });
  const prevStore = usePrevious(store);
  if (prevStore !== null && prevStore !== store) {
    return selector(store.get());
  }
  return state;
}

// node_modules/@cloudscape-design/components/table/sticky-columns/utils.js
function isCellStatesEqual(s1, s2) {
  if (s1 && s2) {
    return s1.padInlineStart === s2.padInlineStart && s1.lastInsetInlineStart === s2.lastInsetInlineStart && s1.lastInsetInlineEnd === s2.lastInsetInlineEnd && s1.offset.insetInlineStart === s2.offset.insetInlineStart && s1.offset.insetInlineEnd === s2.offset.insetInlineEnd;
  }
  return s1 === s2;
}
function isWrapperStatesEqual(s1, s2) {
  return s1.scrollPaddingInlineStart === s2.scrollPaddingInlineStart && s1.scrollPaddingInlineEnd === s2.scrollPaddingInlineEnd;
}
function updateCellOffsets(cells, props) {
  var _a, _b, _c, _d;
  const totalColumns = props.visibleColumns.length;
  const firstColumnsWidths = [];
  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsFirst); i++) {
    const element = cells.get(props.visibleColumns[i]);
    const cellWidth = element ? getLogicalBoundingClientRect(element).inlineSize : 0;
    firstColumnsWidths[i] = ((_a = firstColumnsWidths[i - 1]) !== null && _a !== void 0 ? _a : 0) + cellWidth;
  }
  const lastColumnsWidths = [];
  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsLast); i++) {
    const element = cells.get(props.visibleColumns[totalColumns - 1 - i]);
    const cellWidth = element ? getLogicalBoundingClientRect(element).inlineSize : 0;
    lastColumnsWidths[i] = ((_b = lastColumnsWidths[i - 1]) !== null && _b !== void 0 ? _b : 0) + cellWidth;
  }
  const stickyWidthInlineStart = (_c = firstColumnsWidths[props.stickyColumnsFirst - 1]) !== null && _c !== void 0 ? _c : 0;
  const stickyWidthInlineEnd = (_d = lastColumnsWidths[props.stickyColumnsLast - 1]) !== null && _d !== void 0 ? _d : 0;
  const offsets = props.visibleColumns.reduce((map2, columnId, columnIndex) => {
    var _a2, _b2;
    return map2.set(columnId, {
      first: (_a2 = firstColumnsWidths[columnIndex - 1]) !== null && _a2 !== void 0 ? _a2 : 0,
      last: (_b2 = lastColumnsWidths[totalColumns - 1 - columnIndex - 1]) !== null && _b2 !== void 0 ? _b2 : 0
    });
  }, /* @__PURE__ */ new Map());
  return { offsets, stickyWidthInlineStart, stickyWidthInlineEnd };
}

// node_modules/@cloudscape-design/components/table/sticky-columns/use-sticky-columns.js
var MINIMUM_SCROLLABLE_SPACE = 148;
function useStickyColumns({ visibleColumns, stickyColumnsFirst, stickyColumnsLast }) {
  const store = (0, import_react36.useMemo)(() => new StickyColumnsStore(), []);
  const wrapperRef = (0, import_react36.useRef)(null);
  const tableRef = (0, import_react36.useRef)(null);
  const cellsRef = (0, import_react36.useRef)(/* @__PURE__ */ new Map());
  const hasStickyColumns = stickyColumnsFirst + stickyColumnsLast > 0;
  const updateStickyStyles = useStableCallback(() => {
    if (wrapperRef.current && tableRef.current) {
      store.updateCellStyles({
        wrapper: wrapperRef.current,
        table: tableRef.current,
        cells: cellsRef.current,
        visibleColumns,
        stickyColumnsFirst,
        stickyColumnsLast
      });
    }
  });
  useResizeObserver(wrapperRef, updateStickyStyles);
  useResizeObserver(tableRef, updateStickyStyles);
  (0, import_react36.useEffect)(() => {
    if (wrapperRef.current && tableRef.current) {
      store.updateCellStyles({
        wrapper: wrapperRef.current,
        table: tableRef.current,
        cells: cellsRef.current,
        visibleColumns,
        stickyColumnsFirst,
        stickyColumnsLast
      });
    }
  }, [store, stickyColumnsFirst, stickyColumnsLast, visibleColumns]);
  (0, import_react36.useEffect)(() => {
    if (!hasStickyColumns) {
      return;
    }
    const selector = (state) => state.wrapperState;
    const updateWrapperStyles = (state, prev) => {
      if (isWrapperStatesEqual(state, prev)) {
        return;
      }
      if (wrapperRef.current) {
        wrapperRef.current.style.scrollPaddingInlineStart = state.scrollPaddingInlineStart + "px";
        wrapperRef.current.style.scrollPaddingInlineEnd = state.scrollPaddingInlineEnd + "px";
      }
    };
    const unsubscribe = store.subscribe(selector, (newState, prevState) => updateWrapperStyles(selector(newState), selector(prevState)));
    return unsubscribe;
  }, [store, hasStickyColumns]);
  const setWrapper = (0, import_react36.useCallback)((node) => {
    if (wrapperRef.current) {
      wrapperRef.current.removeEventListener("scroll", updateStickyStyles);
    }
    if (node && hasStickyColumns) {
      node.addEventListener("scroll", updateStickyStyles);
    }
    wrapperRef.current = node;
  }, [hasStickyColumns, updateStickyStyles]);
  const setTable = (0, import_react36.useCallback)((node) => {
    tableRef.current = node;
  }, []);
  const setCell = (0, import_react36.useCallback)((columnId, node) => {
    if (node) {
      cellsRef.current.set(columnId, node);
    } else {
      cellsRef.current.delete(columnId);
    }
  }, []);
  return {
    store,
    style: {
      // Provide wrapper styles as props so that a re-render won't cause invalidation.
      wrapper: hasStickyColumns ? Object.assign({}, store.get().wrapperState) : void 0
    },
    refs: { wrapper: setWrapper, table: setTable, cell: setCell }
  };
}
function useStickyCellStyles({ stickyColumns, columnId, getClassName }) {
  var _a;
  const setCell = stickyColumns.refs.cell;
  const unsubscribeRef = (0, import_react36.useRef)(null);
  const refCallback = (0, import_react36.useCallback)(
    (cellElement) => {
      if (unsubscribeRef.current) {
        unsubscribeRef.current();
      }
      setCell(columnId, cellElement);
      const selector = (state) => {
        var _a2;
        return (_a2 = state.cellState.get(columnId)) !== null && _a2 !== void 0 ? _a2 : null;
      };
      const updateCellStyles = (state, prev) => {
        if (isCellStatesEqual(state, prev)) {
          return;
        }
        const className = getClassName(state);
        if (cellElement) {
          Object.keys(className).forEach((key) => {
            if (className[key]) {
              cellElement.classList.add(key);
            } else {
              cellElement.classList.remove(key);
            }
          });
          cellElement.style.insetInlineStart = (state === null || state === void 0 ? void 0 : state.offset.insetInlineStart) !== void 0 ? `${state.offset.insetInlineStart}px` : "";
          cellElement.style.insetInlineEnd = (state === null || state === void 0 ? void 0 : state.offset.insetInlineEnd) !== void 0 ? `${state.offset.insetInlineEnd}px` : "";
        }
      };
      if (cellElement) {
        unsubscribeRef.current = stickyColumns.store.subscribe(selector, (newState, prevState) => {
          updateCellStyles(selector(newState), selector(prevState));
        });
      }
    },
    // getClassName is expected to be pure
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [columnId, setCell, stickyColumns.store]
  );
  const cellStyles = stickyColumns.store.get().cellState.get(columnId);
  return {
    ref: refCallback,
    className: cellStyles ? clsx_m_default(getClassName(cellStyles)) : void 0,
    style: (_a = cellStyles === null || cellStyles === void 0 ? void 0 : cellStyles.offset) !== null && _a !== void 0 ? _a : void 0
  };
}
var StickyColumnsStore = class extends AsyncStore {
  constructor() {
    super({ cellState: /* @__PURE__ */ new Map(), wrapperState: { scrollPaddingInlineStart: 0, scrollPaddingInlineEnd: 0 } });
    this.cellOffsets = {
      offsets: /* @__PURE__ */ new Map(),
      stickyWidthInlineStart: 0,
      stickyWidthInlineEnd: 0
    };
    this.isStuckToTheInlineStart = false;
    this.isStuckToTheInlineEnd = false;
    this.padInlineStart = false;
    this.generateCellStyles = (props) => {
      const isEnabled = this.isEnabled(props);
      const lastLeftStickyColumnIndex = props.stickyColumnsFirst - 1;
      const lastRightStickyColumnIndex = props.visibleColumns.length - props.stickyColumnsLast;
      return props.visibleColumns.reduce((acc, columnId, index) => {
        var _a, _b, _c, _d;
        let stickySide = "non-sticky";
        if (index < props.stickyColumnsFirst) {
          stickySide = "inline-start";
        } else if (index >= props.visibleColumns.length - props.stickyColumnsLast) {
          stickySide = "inline-end";
        }
        if (!isEnabled || stickySide === "non-sticky") {
          return acc;
        }
        const isFirstColumn = index === 0;
        const stickyColumnOffsetLeft = (_b = (_a = this.cellOffsets.offsets.get(columnId)) === null || _a === void 0 ? void 0 : _a.first) !== null && _b !== void 0 ? _b : 0;
        const stickyColumnOffsetRight = (_d = (_c = this.cellOffsets.offsets.get(columnId)) === null || _c === void 0 ? void 0 : _c.last) !== null && _d !== void 0 ? _d : 0;
        acc.set(columnId, {
          padInlineStart: isFirstColumn && this.padInlineStart,
          lastInsetInlineStart: this.isStuckToTheInlineStart && lastLeftStickyColumnIndex === index,
          lastInsetInlineEnd: this.isStuckToTheInlineEnd && lastRightStickyColumnIndex === index,
          offset: {
            insetInlineStart: stickySide === "inline-start" ? stickyColumnOffsetLeft : void 0,
            insetInlineEnd: stickySide === "inline-end" ? stickyColumnOffsetRight : void 0
          }
        });
        return acc;
      }, /* @__PURE__ */ new Map());
    };
    this.updateCellOffsets = (props) => {
      this.cellOffsets = updateCellOffsets(props.cells, props);
    };
    this.isEnabled = (props) => {
      const noStickyColumns = props.stickyColumnsFirst + props.stickyColumnsLast === 0;
      if (noStickyColumns) {
        return false;
      }
      const wrapperWidth = getLogicalBoundingClientRect(props.wrapper).inlineSize;
      const tableWidth = getLogicalBoundingClientRect(props.table).inlineSize;
      const isWrapperScrollable = tableWidth > wrapperWidth;
      if (!isWrapperScrollable) {
        return false;
      }
      const totalStickySpace = this.cellOffsets.stickyWidthInlineStart + this.cellOffsets.stickyWidthInlineEnd;
      const tablePaddingLeft = parseFloat(getComputedStyle(props.table).paddingLeft) || 0;
      const tablePaddingRight = parseFloat(getComputedStyle(props.table).paddingRight) || 0;
      const hasEnoughScrollableSpace = totalStickySpace + MINIMUM_SCROLLABLE_SPACE + tablePaddingLeft + tablePaddingRight < wrapperWidth;
      if (!hasEnoughScrollableSpace) {
        return false;
      }
      return true;
    };
  }
  updateCellStyles(props) {
    const hasStickyColumns = props.stickyColumnsFirst + props.stickyColumnsLast > 0;
    const hadStickyColumns = this.cellOffsets.offsets.size > 0;
    if (hasStickyColumns || hadStickyColumns) {
      this.updateScroll(props);
      this.updateCellOffsets(props);
      this.set(() => ({
        cellState: this.generateCellStyles(props),
        wrapperState: {
          scrollPaddingInlineStart: this.cellOffsets.stickyWidthInlineStart,
          scrollPaddingInlineEnd: this.cellOffsets.stickyWidthInlineEnd
        }
      }));
    }
  }
  updateScroll(props) {
    const wrapperScrollInlineStart = getScrollInlineStart(props.wrapper);
    const wrapperScrollWidth = props.wrapper.scrollWidth;
    const wrapperClientWidth = props.wrapper.clientWidth;
    const tablePaddingInlineStart = parseFloat(getComputedStyle(props.table).paddingInlineStart) || 0;
    const tablePaddingInlineEnd = parseFloat(getComputedStyle(props.table).paddingInlineEnd) || 0;
    this.isStuckToTheInlineStart = wrapperScrollInlineStart > tablePaddingInlineStart;
    this.isStuckToTheInlineEnd = Math.ceil(wrapperScrollInlineStart) < wrapperScrollWidth - wrapperClientWidth - tablePaddingInlineEnd;
    this.padInlineStart = tablePaddingInlineStart !== 0 && this.isStuckToTheInlineStart;
  }
};

// node_modules/@cloudscape-design/components/table/table-role/table-role-helper.js
var stateToAriaSort = {
  sortable: "none",
  ascending: "ascending",
  descending: "descending"
};
var getAriaSort = (sortingState) => stateToAriaSort[sortingState];
function getTableRoleProps(options) {
  const nativeProps = {};
  nativeProps.role = options.tableRole === "grid-default" ? "grid" : options.tableRole;
  nativeProps["aria-label"] = options.ariaLabel;
  nativeProps["aria-labelledby"] = options.ariaLabelledby;
  nativeProps["aria-rowcount"] = typeof options.totalItemsCount === "number" ? options.totalItemsCount + 1 : -1;
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-colcount"] = options.totalColumnsCount;
  }
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps.tabIndex = -1;
  }
  return nativeProps;
}
function getTableWrapperRoleProps(options) {
  const nativeProps = {};
  if (options.isScrollable) {
    nativeProps.role = "region";
    nativeProps.tabIndex = 0;
    nativeProps["aria-label"] = options.ariaLabel;
    nativeProps["aria-labelledby"] = options.ariaLabelledby;
  }
  return nativeProps;
}
function getTableHeaderRowRoleProps(options) {
  const nativeProps = {};
  if (options.tableRole === "grid" || options.tableRole === "grid-default" || options.tableRole === "treegrid") {
    nativeProps["aria-rowindex"] = 1;
  }
  return nativeProps;
}
function getTableRowRoleProps(options) {
  const nativeProps = {};
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-rowindex"] = (options.firstIndex || 1) + options.rowIndex + 1;
  } else if (options.firstIndex !== void 0) {
    nativeProps["aria-rowindex"] = options.firstIndex + options.rowIndex + 1;
  }
  if (options.tableRole === "treegrid" && options.level && options.level !== 0) {
    nativeProps["aria-level"] = options.level;
  }
  if (options.tableRole === "treegrid" && options.setSize) {
    nativeProps["aria-setsize"] = options.setSize;
  }
  if (options.tableRole === "treegrid" && options.posInSet) {
    nativeProps["aria-posinset"] = options.posInSet;
  }
  return nativeProps;
}
function getTableColHeaderRoleProps(options) {
  const nativeProps = {};
  nativeProps.scope = "col";
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-colindex"] = options.colIndex + 1;
  }
  if (options.sortingStatus) {
    nativeProps["aria-sort"] = getAriaSort(options.sortingStatus);
  }
  return nativeProps;
}
function getTableCellRoleProps(options) {
  const nativeProps = {};
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-colindex"] = options.colIndex + 1;
  }
  if (options.isRowHeader) {
    nativeProps.scope = "row";
  }
  return nativeProps;
}

// node_modules/@cloudscape-design/components/table/table-role/grid-navigation.js
var import_react37 = __toESM(require_react());
var import_react38 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/handle-key.js
function isEventLike(event) {
  return isHTMLElement(event.currentTarget) || isSVGElement(event.currentTarget);
}
function handleKey(event, { onActivate, onBlockEnd, onBlockStart, onDefault, onEnd, onEscape, onHome, onInlineEnd, onInlineStart, onPageDown, onPageUp }) {
  switch (event.keyCode) {
    case KeyCode.down:
      onBlockEnd === null || onBlockEnd === void 0 ? void 0 : onBlockEnd();
      break;
    case KeyCode.end:
      onEnd === null || onEnd === void 0 ? void 0 : onEnd();
      break;
    case KeyCode.enter:
    case KeyCode.space:
      onActivate === null || onActivate === void 0 ? void 0 : onActivate();
      break;
    case KeyCode.escape:
      onEscape === null || onEscape === void 0 ? void 0 : onEscape();
      break;
    case KeyCode.home:
      onHome === null || onHome === void 0 ? void 0 : onHome();
      break;
    case KeyCode.left:
      getIsRtl(event.currentTarget) ? onInlineEnd === null || onInlineEnd === void 0 ? void 0 : onInlineEnd() : onInlineStart === null || onInlineStart === void 0 ? void 0 : onInlineStart();
      break;
    case KeyCode.pageDown:
      onPageDown === null || onPageDown === void 0 ? void 0 : onPageDown();
      break;
    case KeyCode.pageUp:
      onPageUp === null || onPageUp === void 0 ? void 0 : onPageUp();
      break;
    case KeyCode.right:
      getIsRtl(event.currentTarget) ? onInlineStart === null || onInlineStart === void 0 ? void 0 : onInlineStart() : onInlineEnd === null || onInlineEnd === void 0 ? void 0 : onInlineEnd();
      break;
    case KeyCode.up:
      onBlockStart === null || onBlockStart === void 0 ? void 0 : onBlockStart();
      break;
    default:
      onDefault === null || onDefault === void 0 ? void 0 : onDefault();
      break;
  }
}

// node_modules/@cloudscape-design/components/table/table-role/utils.js
function getClosestCell(element) {
  return element.closest("td,th");
}
function isElementDisabled(element) {
  if (element instanceof HTMLInputElement || element instanceof HTMLButtonElement) {
    return element.disabled;
  }
  return false;
}
function defaultIsSuppressed(target) {
  let current = target;
  while (current) {
    if (isTableCell(current)) {
      return false;
    }
    if (current.getAttribute("role") === "dialog" || current.getAttribute("data-awsui-table-suppress-navigation") === "true") {
      return true;
    }
    current = current.parentElement;
  }
  return false;
}
function findTableRowByAriaRowIndex(table, targetAriaRowIndex, delta) {
  var _a;
  let targetRow = null;
  const rowElements = Array.from(table.querySelectorAll("tr[aria-rowindex]"));
  if (delta < 0) {
    rowElements.reverse();
  }
  for (const element of rowElements) {
    const rowIndex = parseInt((_a = element.getAttribute("aria-rowindex")) !== null && _a !== void 0 ? _a : "");
    targetRow = element;
    if (rowIndex === targetAriaRowIndex) {
      break;
    }
    if (delta >= 0 && rowIndex > targetAriaRowIndex) {
      break;
    }
    if (delta < 0 && rowIndex < targetAriaRowIndex) {
      break;
    }
  }
  return targetRow;
}
function findTableRowCellByAriaColIndex(tableRow, targetAriaColIndex, delta) {
  var _a;
  let targetCell = null;
  const cellElements = Array.from(tableRow.querySelectorAll("td[aria-colindex],th[aria-colindex]"));
  if (delta < 0) {
    cellElements.reverse();
  }
  for (const element of cellElements) {
    const columnIndex = parseInt((_a = element.getAttribute("aria-colindex")) !== null && _a !== void 0 ? _a : "");
    targetCell = element;
    if (columnIndex === targetAriaColIndex) {
      break;
    }
    if (delta >= 0 && columnIndex > targetAriaColIndex) {
      break;
    }
    if (delta < 0 && columnIndex < targetAriaColIndex) {
      break;
    }
  }
  return targetCell;
}
function isTableCell(element) {
  return element.tagName === "TD" || element.tagName === "TH";
}
function focusNextElement(element) {
  if (element) {
    if (isTableCell(element) && element.tabIndex !== 0) {
      element.tabIndex = -1;
    }
    element.focus();
  }
}

// node_modules/@cloudscape-design/components/table/table-role/grid-navigation.js
function GridNavigationProvider({ keyboardNavigation, pageSize, getTable, children }) {
  const navigationAPI = (0, import_react37.useRef)(null);
  const gridNavigation = (0, import_react38.useMemo)(() => new GridNavigationProcessor(navigationAPI), []);
  const getTableStable = useStableCallback(getTable);
  (0, import_react38.useEffect)(() => {
    if (keyboardNavigation) {
      const table = getTableStable();
      if (table) {
        gridNavigation.init(table);
      }
    }
    return () => gridNavigation.cleanup();
  }, [keyboardNavigation, gridNavigation, getTableStable]);
  (0, import_react38.useEffect)(() => {
    gridNavigation.update({ pageSize });
  }, [gridNavigation, pageSize]);
  (0, import_react38.useEffect)(() => {
    if (keyboardNavigation) {
      gridNavigation.refresh();
    }
  });
  return import_react37.default.createElement(SingleTabStopNavigationProvider, { ref: navigationAPI, navigationActive: keyboardNavigation, getNextFocusTarget: gridNavigation.getNextFocusTarget, isElementSuppressed: gridNavigation.isElementSuppressed, onRegisterFocusable: gridNavigation.onRegisterFocusable, onUnregisterActive: gridNavigation.onUnregisterActive }, children);
}
var GridNavigationProcessor = class {
  constructor(navigationAPI) {
    this._pageSize = 0;
    this._table = null;
    this.focusedCell = null;
    this.focusInside = false;
    this.keepUserIndex = false;
    this.onRegisterFocusable = (focusableElement) => {
      var _a;
      if (!this.focusInside) {
        return;
      }
      const focusedElement = (_a = this.focusedCell) === null || _a === void 0 ? void 0 : _a.element;
      if (focusedElement && isTableCell(focusedElement) && focusedElement.contains(focusableElement)) {
        focusableElement.focus({ preventScroll: true });
      }
    };
    this.onUnregisterActive = () => {
      if (this.focusedCell && !nodeBelongs(this.table, this.focusedCell.element)) {
        this.moveFocusBy(this.focusedCell, { x: 0, y: 0 });
      }
    };
    this.getNextFocusTarget = () => {
      var _a;
      const cell = this.focusedCell;
      const firstTableCell = this.table.querySelector("td,th");
      let focusTarget = (_a = firstTableCell && this.getFocusablesFrom(firstTableCell)[0]) !== null && _a !== void 0 ? _a : firstTableCell;
      if (cell) {
        focusTarget = this.getNextFocusable(cell, { x: 0, y: 0 });
      }
      return focusTarget;
    };
    this.isElementSuppressed = (element) => {
      if (!this.focusedCell) {
        return false;
      }
      return !element || defaultIsSuppressed(element);
    };
    this.onFocusin = (event) => {
      var _a;
      this.focusInside = true;
      if (!(event.target instanceof HTMLElement)) {
        return;
      }
      this.updateFocusedCell(event.target);
      if (!this.focusedCell) {
        return;
      }
      (_a = this._navigationAPI.current) === null || _a === void 0 ? void 0 : _a.updateFocusTarget();
      const focusedElement = this.focusedCell.element;
      const nextTarget = isTableCell(focusedElement) ? this.getFocusablesFrom(focusedElement)[0] : null;
      if (nextTarget) {
        nextTarget.focus({ preventScroll: true });
      } else {
        this.keepUserIndex = false;
      }
    };
    this.onFocusout = () => {
      this.focusInside = false;
    };
    this.onKeydown = (event) => {
      if (!this.focusedCell) {
        return;
      }
      const keys = [
        KeyCode.up,
        KeyCode.down,
        KeyCode.left,
        KeyCode.right,
        KeyCode.pageUp,
        KeyCode.pageDown,
        KeyCode.home,
        KeyCode.end
      ];
      const ctrlKey = event.ctrlKey ? 1 : 0;
      const altKey = event.altKey ? 1 : 0;
      const shiftKey = event.shiftKey ? 1 : 0;
      const metaKey = event.metaKey ? 1 : 0;
      const modifiersPressed = ctrlKey + altKey + shiftKey + metaKey;
      const invalidModifierCombination = modifiersPressed && !event.ctrlKey || event.ctrlKey && event.keyCode !== KeyCode.home && event.keyCode !== KeyCode.end;
      if (invalidModifierCombination || this.isElementSuppressed(document.activeElement) || !this.isRegistered(document.activeElement) || keys.indexOf(event.keyCode) === -1) {
        return;
      }
      const from = this.focusedCell;
      event.preventDefault();
      if (isEventLike(event)) {
        handleKey(event, {
          onBlockStart: () => this.moveFocusBy(from, { y: -1, x: 0 }),
          onBlockEnd: () => this.moveFocusBy(from, { y: 1, x: 0 }),
          onInlineStart: () => this.moveFocusBy(from, { y: 0, x: -1 }),
          onInlineEnd: () => this.moveFocusBy(from, { y: 0, x: 1 }),
          onPageUp: () => this.moveFocusBy(from, { y: -this.pageSize, x: 0 }),
          onPageDown: () => this.moveFocusBy(from, { y: this.pageSize, x: 0 }),
          onHome: () => event.ctrlKey ? this.moveFocusBy(from, { y: -Infinity, x: -Infinity }) : this.moveFocusBy(from, { y: 0, x: -Infinity }),
          onEnd: () => event.ctrlKey ? this.moveFocusBy(from, { y: Infinity, x: Infinity }) : this.moveFocusBy(from, { y: 0, x: Infinity })
        });
      }
    };
    this._navigationAPI = navigationAPI;
  }
  init(table) {
    this._table = table;
    const controller = new AbortController();
    this.table.addEventListener("focusin", this.onFocusin, { signal: controller.signal });
    this.table.addEventListener("focusout", this.onFocusout, { signal: controller.signal });
    this.table.addEventListener("keydown", this.onKeydown, { signal: controller.signal });
    this.cleanup = () => {
      controller.abort();
    };
  }
  cleanup() {
  }
  update({ pageSize }) {
    this._pageSize = pageSize;
  }
  refresh() {
    setTimeout(() => {
      var _a, _b;
      if (this._table) {
        this.updateFocusedCell((_a = this.focusedCell) === null || _a === void 0 ? void 0 : _a.element);
        (_b = this._navigationAPI.current) === null || _b === void 0 ? void 0 : _b.updateFocusTarget();
      }
    }, 0);
  }
  get pageSize() {
    return this._pageSize;
  }
  get table() {
    if (!this._table) {
      throw new Error("Invariant violation: GridNavigationProcessor is used before initialization.");
    }
    return this._table;
  }
  moveFocusBy(cell, delta) {
    if (delta.y !== 0 && delta.x === 0) {
      this.keepUserIndex = true;
    }
    focusNextElement(this.getNextFocusable(cell, delta));
  }
  isRegistered(element) {
    var _a, _b;
    return !element || ((_b = (_a = this._navigationAPI.current) === null || _a === void 0 ? void 0 : _a.isRegistered(element)) !== null && _b !== void 0 ? _b : false);
  }
  updateFocusedCell(focusedElement) {
    var _a, _b, _c, _d, _e, _f;
    if (!focusedElement) {
      return;
    }
    const cellElement = getClosestCell(focusedElement);
    const rowElement = cellElement === null || cellElement === void 0 ? void 0 : cellElement.closest("tr");
    if (!cellElement || !rowElement) {
      return;
    }
    const colIndex = parseInt((_a = cellElement.getAttribute("aria-colindex")) !== null && _a !== void 0 ? _a : "");
    const rowIndex = parseInt((_b = rowElement.getAttribute("aria-rowindex")) !== null && _b !== void 0 ? _b : "");
    if (isNaN(colIndex) || isNaN(rowIndex)) {
      return;
    }
    const cellFocusables = this.getFocusablesFrom(cellElement);
    const elementIndex = cellFocusables.indexOf(focusedElement);
    const prevColIndex = (_d = (_c = this.focusedCell) === null || _c === void 0 ? void 0 : _c.colIndex) !== null && _d !== void 0 ? _d : -1;
    const prevElementIndex = (_f = (_e = this.focusedCell) === null || _e === void 0 ? void 0 : _e.elementIndex) !== null && _f !== void 0 ? _f : -1;
    this.focusedCell = {
      rowIndex,
      colIndex: this.keepUserIndex && prevColIndex !== -1 ? prevColIndex : colIndex,
      elementIndex: this.keepUserIndex && prevElementIndex !== -1 ? prevElementIndex : elementIndex,
      element: focusedElement
    };
  }
  getNextFocusable(from, delta) {
    var _a;
    const targetAriaRowIndex = from.rowIndex + delta.y;
    const targetRow = findTableRowByAriaRowIndex(this.table, targetAriaRowIndex, delta.y);
    if (!targetRow) {
      return null;
    }
    const cellElement = getClosestCell(from.element);
    const cellFocusables = cellElement ? this.getFocusablesFrom(cellElement) : [];
    const nextElementIndex = from.elementIndex + delta.x;
    const isValidDirection = !!delta.x;
    const isValidIndex = from.elementIndex !== -1 && 0 <= nextElementIndex && nextElementIndex < cellFocusables.length;
    const isTargetDifferent = from.element !== cellFocusables[nextElementIndex];
    if (isValidDirection && isValidIndex && isTargetDifferent) {
      return cellFocusables[nextElementIndex];
    }
    const targetAriaColIndex = from.colIndex + delta.x;
    const targetCell = findTableRowCellByAriaColIndex(targetRow, targetAriaColIndex, delta.x);
    if (!targetCell) {
      return null;
    }
    if (targetCell === cellElement && delta.x !== 0) {
      return null;
    }
    const targetCellFocusables = this.getFocusablesFrom(targetCell);
    let focusIndex = from.elementIndex;
    if (isFinite(delta.x) && delta.x > 0 || delta.x === -Infinity) {
      focusIndex = 0;
    }
    if (isFinite(delta.x) && delta.x < 0 || delta.x === Infinity) {
      focusIndex = targetCellFocusables.length - 1;
    }
    return (_a = targetCellFocusables[focusIndex]) !== null && _a !== void 0 ? _a : targetCell;
  }
  getFocusablesFrom(target) {
    const isElementRegistered = (element) => {
      var _a;
      return (_a = this._navigationAPI.current) === null || _a === void 0 ? void 0 : _a.isRegistered(element);
    };
    return getAllFocusables(target).filter((el) => isElementRegistered(el) && !isElementDisabled(el));
  }
};

// node_modules/@cloudscape-design/components/table/utils.js
var applyTrackBy = (trackBy, item) => {
  if (typeof trackBy === "function") {
    return trackBy(item);
  }
  return item[trackBy];
};
var getItemKey = (trackBy, item, index) => {
  if (!trackBy) {
    return index;
  }
  return applyTrackBy(trackBy, item);
};
var getTrackableValue = (trackBy, item) => {
  if (!trackBy) {
    return item;
  }
  return applyTrackBy(trackBy, item);
};
var getColumnKey = (column, index) => {
  return column.id || index;
};
var toContainerVariant = (variant) => {
  const isDefaultVariant = !variant || variant === "container";
  return isDefaultVariant ? "default" : variant === "borderless" ? "embedded" : variant;
};
function checkSortingState(columnDefinitions, sortingComparator) {
  const matchedColumn = columnDefinitions.filter((column) => column.sortingComparator === sortingComparator)[0];
  if (!matchedColumn) {
    warnOnce("Table", "Currently active sorting comparator was not found in any columns. Make sure to provide the same comparator function instance on each render.");
  }
}
function getVisibleColumnDefinitions({ columnDisplay, visibleColumns, columnDefinitions }) {
  if (columnDisplay) {
    return getVisibleColumnDefinitionsFromColumnDisplay({ columnDisplay, columnDefinitions });
  } else if (visibleColumns) {
    return getVisibleColumnDefinitionsFromVisibleColumns({ visibleColumns, columnDefinitions });
  } else {
    return columnDefinitions;
  }
}
function getVisibleColumnDefinitionsFromColumnDisplay({ columnDisplay, columnDefinitions }) {
  const columnDefinitionsById = columnDefinitions.reduce((accumulator, item) => item.id === void 0 ? accumulator : Object.assign(Object.assign({}, accumulator), { [item.id]: item }), {});
  return columnDisplay.filter((item) => item.visible).map((item) => columnDefinitionsById[item.id]).filter(Boolean);
}
function getVisibleColumnDefinitionsFromVisibleColumns({ visibleColumns, columnDefinitions }) {
  const ids = new Set(visibleColumns);
  return columnDefinitions.filter(({ id }) => id !== void 0 && ids.has(id));
}
function getStickyClassNames(styles, props) {
  return {
    [styles["sticky-cell"]]: !!props,
    [styles["sticky-cell-pad-inline-start"]]: !!(props === null || props === void 0 ? void 0 : props.padInlineStart),
    [styles["sticky-cell-last-inline-start"]]: !!(props === null || props === void 0 ? void 0 : props.lastInsetInlineStart),
    [styles["sticky-cell-last-inline-end"]]: !!(props === null || props === void 0 ? void 0 : props.lastInsetInlineEnd)
  };
}

// node_modules/@cloudscape-design/components/table/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/table/styles.scoped.css";
var styles_css_default13 = {
  "root": "awsui_root_wih1l_1dnvt_153",
  "tools": "awsui_tools_wih1l_1dnvt_164",
  "tools-filtering": "awsui_tools-filtering_wih1l_1dnvt_172",
  "tools-align-right": "awsui_tools-align-right_wih1l_1dnvt_186",
  "tools-pagination": "awsui_tools-pagination_wih1l_1dnvt_190",
  "tools-preferences": "awsui_tools-preferences_wih1l_1dnvt_190",
  "tools-small": "awsui_tools-small_wih1l_1dnvt_196",
  "table": "awsui_table_wih1l_1dnvt_202",
  "table-layout-fixed": "awsui_table-layout-fixed_wih1l_1dnvt_208",
  "wrapper": "awsui_wrapper_wih1l_1dnvt_212",
  "variant-stacked": "awsui_variant-stacked_wih1l_1dnvt_219",
  "wrapper-content-measure": "awsui_wrapper-content-measure_wih1l_1dnvt_219",
  "variant-container": "awsui_variant-container_wih1l_1dnvt_219",
  "has-footer": "awsui_has-footer_wih1l_1dnvt_222",
  "has-header": "awsui_has-header_wih1l_1dnvt_225",
  "cell-merged": "awsui_cell-merged_wih1l_1dnvt_242",
  "cell-merged-content": "awsui_cell-merged-content_wih1l_1dnvt_254",
  "empty": "awsui_empty_wih1l_1dnvt_270",
  "loading": "awsui_loading_wih1l_1dnvt_274",
  "selection-control": "awsui_selection-control_wih1l_1dnvt_283",
  "selection-control-header": "awsui_selection-control-header_wih1l_1dnvt_290",
  "header-secondary": "awsui_header-secondary_wih1l_1dnvt_296",
  "variant-full-page": "awsui_variant-full-page_wih1l_1dnvt_308",
  "table-has-header": "awsui_table-has-header_wih1l_1dnvt_314",
  "header-controls": "awsui_header-controls_wih1l_1dnvt_325",
  "variant-embedded": "awsui_variant-embedded_wih1l_1dnvt_334",
  "variant-borderless": "awsui_variant-borderless_wih1l_1dnvt_334",
  "footer-wrapper": "awsui_footer-wrapper_wih1l_1dnvt_339",
  "footer": "awsui_footer_wih1l_1dnvt_339",
  "footer-with-pagination": "awsui_footer-with-pagination_wih1l_1dnvt_347",
  "footer-pagination": "awsui_footer-pagination_wih1l_1dnvt_355",
  "thead-active": "awsui_thead-active_wih1l_1dnvt_359",
  "row": "awsui_row_wih1l_1dnvt_360",
  "row-selected": "awsui_row-selected_wih1l_1dnvt_361"
};

// node_modules/@cloudscape-design/components/table/body-cell/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/table/body-cell/styles.scoped.css";
var styles_css_default14 = {
  "expandable-toggle-wrapper": "awsui_expandable-toggle-wrapper_c6tup_m7a2f_145",
  "body-cell": "awsui_body-cell_c6tup_m7a2f_152",
  "body-cell-content": "awsui_body-cell-content_c6tup_m7a2f_160",
  "expandable-level-0": "awsui_expandable-level-0_c6tup_m7a2f_166",
  "expandable-level-1": "awsui_expandable-level-1_c6tup_m7a2f_173",
  "expandable-level-2": "awsui_expandable-level-2_c6tup_m7a2f_180",
  "expandable-level-3": "awsui_expandable-level-3_c6tup_m7a2f_187",
  "expandable-level-4": "awsui_expandable-level-4_c6tup_m7a2f_194",
  "expandable-level-5": "awsui_expandable-level-5_c6tup_m7a2f_201",
  "expandable-level-6": "awsui_expandable-level-6_c6tup_m7a2f_208",
  "expandable-level-7": "awsui_expandable-level-7_c6tup_m7a2f_215",
  "expandable-level-8": "awsui_expandable-level-8_c6tup_m7a2f_222",
  "expandable-level-9": "awsui_expandable-level-9_c6tup_m7a2f_229",
  "expandable-level-next": "awsui_expandable-level-next_c6tup_m7a2f_236",
  "body-cell-align-top": "awsui_body-cell-align-top_c6tup_m7a2f_254",
  "body-cell-wrap": "awsui_body-cell-wrap_c6tup_m7a2f_260",
  "is-visual-refresh": "awsui_is-visual-refresh_c6tup_m7a2f_357",
  "body-cell-edit-active": "awsui_body-cell-edit-active_c6tup_m7a2f_447",
  "body-cell-expandable": "awsui_body-cell-expandable_c6tup_m7a2f_447",
  "body-cell-editable": "awsui_body-cell-editable_c6tup_m7a2f_447",
  "has-striped-rows": "awsui_has-striped-rows_c6tup_m7a2f_530",
  "sticky-cell-pad-inline-start": "awsui_sticky-cell-pad-inline-start_c6tup_m7a2f_696",
  "has-selection": "awsui_has-selection_c6tup_m7a2f_862",
  "body-cell-first-row": "awsui_body-cell-first-row_c6tup_m7a2f_1031",
  "body-cell-last-row": "awsui_body-cell-last-row_c6tup_m7a2f_1034",
  "body-cell-selected": "awsui_body-cell-selected_c6tup_m7a2f_1034",
  "has-footer": "awsui_has-footer_c6tup_m7a2f_1034",
  "body-cell-shaded": "awsui_body-cell-shaded_c6tup_m7a2f_1044",
  "sticky-cell": "awsui_sticky-cell_c6tup_m7a2f_696",
  "table-variant-full-page": "awsui_table-variant-full-page_c6tup_m7a2f_1095",
  "sticky-cell-last-inline-end": "awsui_sticky-cell-last-inline-end_c6tup_m7a2f_1112",
  "sticky-cell-last-inline-start": "awsui_sticky-cell-last-inline-start_c6tup_m7a2f_1121",
  "body-cell-next-selected": "awsui_body-cell-next-selected_c6tup_m7a2f_1143",
  "body-cell-prev-selected": "awsui_body-cell-prev-selected_c6tup_m7a2f_1150",
  "body-cell-editor-wrapper": "awsui_body-cell-editor-wrapper_c6tup_m7a2f_1176",
  "body-cell-success": "awsui_body-cell-success_c6tup_m7a2f_1181",
  "body-cell-editor": "awsui_body-cell-editor_c6tup_m7a2f_1176",
  "body-cell-editor-disabled": "awsui_body-cell-editor-disabled_c6tup_m7a2f_1206",
  "body-cell-editor-row": "awsui_body-cell-editor-row_c6tup_m7a2f_1215",
  "body-cell-editor-controls": "awsui_body-cell-editor-controls_c6tup_m7a2f_1225",
  "body-cell-editor-row-editor": "awsui_body-cell-editor-row-editor_c6tup_m7a2f_1228",
  "body-cell-editor-focusable": "awsui_body-cell-editor-focusable_c6tup_m7a2f_1231",
  "body-cell-editor-icon": "awsui_body-cell-editor-icon_c6tup_m7a2f_1255",
  "resizable-columns": "awsui_resizable-columns_c6tup_m7a2f_1367",
  "expandable-cell-content": "awsui_expandable-cell-content_c6tup_m7a2f_1370",
  "body-cell-edit-disabled-popover": "awsui_body-cell-edit-disabled-popover_c6tup_m7a2f_1421",
  "body-cell-has-success": "awsui_body-cell-has-success_c6tup_m7a2f_1424"
};

// node_modules/@cloudscape-design/components/table/body-cell/td-element.js
var TableTdElement = import_react39.default.forwardRef((_a, ref) => {
  var { children, wrapLines, isRowHeader, isFirstRow, isLastRow, isSelected, isNextSelected, isPrevSelected, nativeAttributes, onClick, onFocus, onBlur, isEvenRow, stripedRows, isSelection, hasSelection, hasFooter, columnId, colIndex, stickyState, tableRole, level, isExpandable, isExpanded, onExpandableItemToggle, expandButtonLabel, collapseButtonLabel, verticalAlign, resizableColumns, resizableStyle, isEditable, isEditing, isEditingDisabled, hasSuccessIcon, tableVariant } = _a, rest = __rest(_a, ["children", "wrapLines", "isRowHeader", "isFirstRow", "isLastRow", "isSelected", "isNextSelected", "isPrevSelected", "nativeAttributes", "onClick", "onFocus", "onBlur", "isEvenRow", "stripedRows", "isSelection", "hasSelection", "hasFooter", "columnId", "colIndex", "stickyState", "tableRole", "level", "isExpandable", "isExpanded", "onExpandableItemToggle", "expandButtonLabel", "collapseButtonLabel", "verticalAlign", "resizableColumns", "resizableStyle", "isEditable", "isEditing", "isEditingDisabled", "hasSuccessIcon", "tableVariant"]);
  const Element = isRowHeader ? "th" : "td";
  const isVisualRefresh = useVisualRefresh();
  resizableStyle = resizableColumns ? {} : resizableStyle;
  nativeAttributes = Object.assign(Object.assign({}, nativeAttributes), getTableCellRoleProps({ tableRole, isRowHeader, colIndex }));
  const stickyStyles = useStickyCellStyles({
    stickyColumns: stickyState,
    columnId,
    getClassName: (props) => getStickyClassNames(styles_css_default14, props)
  });
  const cellRefObject = (0, import_react39.useRef)(null);
  const mergedRef = useMergeRefs(stickyStyles.ref, ref, cellRefObject);
  const { tabIndex: cellTabIndex } = useSingleTabStopNavigation(cellRefObject);
  const isEditingActive = isEditing && !isEditingDisabled;
  return import_react39.default.createElement(
    Element,
    Object.assign({ style: Object.assign(Object.assign({}, resizableStyle), stickyStyles.style), className: clsx_m_default(styles_css_default14["body-cell"], isFirstRow && styles_css_default14["body-cell-first-row"], isLastRow && styles_css_default14["body-cell-last-row"], isSelected && styles_css_default14["body-cell-selected"], isNextSelected && styles_css_default14["body-cell-next-selected"], isPrevSelected && styles_css_default14["body-cell-prev-selected"], !isEvenRow && stripedRows && styles_css_default14["body-cell-shaded"], stripedRows && styles_css_default14["has-striped-rows"], isVisualRefresh && styles_css_default14["is-visual-refresh"], isSelection && styles_css_default13["selection-control"], hasSelection && styles_css_default14["has-selection"], hasFooter && styles_css_default14["has-footer"], resizableColumns && styles_css_default14["resizable-columns"], verticalAlign === "top" && styles_css_default14["body-cell-align-top"], isEditable && styles_css_default14["body-cell-editable"], isEditing && !isEditingDisabled && styles_css_default14["body-cell-edit-active"], isEditing && isEditingDisabled && styles_css_default14["body-cell-edit-disabled-popover"], hasSuccessIcon && styles_css_default14["body-cell-has-success"], level !== void 0 && !isEditingActive && styles_css_default14["body-cell-expandable"], level !== void 0 && !isEditingActive && styles_css_default14[`expandable-level-${getLevelClassSuffix(level)}`], tableVariant && styles_css_default14[`table-variant-${tableVariant}`], stickyStyles.className), onClick, onFocus, onBlur, ref: mergedRef }, nativeAttributes, { tabIndex: cellTabIndex === -1 ? void 0 : cellTabIndex }, copyAnalyticsMetadataAttribute(rest)),
    level !== void 0 && isExpandable && !isEditingActive && import_react39.default.createElement(
      "div",
      { className: styles_css_default14["expandable-toggle-wrapper"] },
      import_react39.default.createElement(ExpandToggleButton, { isExpanded, onExpandableItemToggle, expandButtonLabel, collapseButtonLabel })
    ),
    import_react39.default.createElement("div", { className: clsx_m_default(styles_css_default14["body-cell-content"], wrapLines && styles_css_default14["body-cell-wrap"]) }, children)
  );
});
function getLevelClassSuffix(level) {
  return 0 <= level && level <= 9 ? level : "next";
}

// node_modules/@cloudscape-design/components/table/body-cell/disabled-inline-editor.js
function DisabledInlineEditor(_a) {
  var _b;
  var { item, column, ariaLabels, isEditing, onEditStart, onEditEnd, editDisabledReason } = _a, rest = __rest(_a, ["item", "column", "ariaLabels", "isEditing", "onEditStart", "onEditEnd", "editDisabledReason"]);
  const isExpandableColumn = rest.level !== void 0;
  const clickAwayRef = useClickAway(() => {
    if (isEditing) {
      onEditEnd(true);
    }
  });
  const iconRef = (0, import_react40.useRef)(null);
  const buttonRef = (0, import_react40.useRef)(null);
  const portalRef = (0, import_react40.useRef)(null);
  function handleEscape(event) {
    if (event.key === "Escape") {
      onEditEnd(true);
    }
  }
  const onClick = () => {
    var _a2;
    onEditStart();
    (_a2 = buttonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  };
  const { targetProps, descriptionEl } = useHiddenDescription(editDisabledReason);
  const portalClasses = usePortalModeClasses(portalRef);
  const { tabIndex } = useSingleTabStopNavigation(buttonRef);
  return import_react40.default.createElement(
    TableTdElement,
    Object.assign({}, rest, { nativeAttributes: { "data-inline-editing-active": isEditing.toString() }, isEditing, isEditingDisabled: true, onClick: !isEditing && !isExpandableColumn ? onClick : void 0, ref: !isExpandableColumn ? clickAwayRef : void 0 }),
    column.cell(item),
    import_react40.default.createElement(
      "div",
      { className: styles_css_default14["body-cell-editor-wrapper"] },
      import_react40.default.createElement(
        "div",
        { ref: isExpandableColumn ? clickAwayRef : void 0 },
        import_react40.default.createElement(
          "button",
          Object.assign({ ref: buttonRef, tabIndex, className: clsx_m_default(styles_css_default14["body-cell-editor"], styles_css_default14["body-cell-editor-disabled"], isExpandableColumn && styles_css_default14["body-cell-editor-focusable"]), onClick: !isEditing && isExpandableColumn ? onClick : void 0, "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column, item), "aria-haspopup": "dialog", "aria-disabled": "true", onKeyDown: handleEscape }, targetProps),
          import_react40.default.createElement(
            "span",
            { className: styles_css_default14["body-cell-editor-icon"] },
            import_react40.default.createElement(internal_default2, { name: "lock-private", variant: "normal", __internalRootRef: iconRef })
          ),
          descriptionEl
        )
      )
    ),
    isEditing && import_react40.default.createElement(
      "span",
      { ref: portalRef },
      import_react40.default.createElement(
        Portal,
        null,
        import_react40.default.createElement(
          "span",
          { className: portalClasses },
          import_react40.default.createElement(
            PopoverContainer,
            { size: "medium", fixedWidth: false, position: "top", trackRef: iconRef, arrow: (position) => import_react40.default.createElement(arrow_default, { position }), renderWithPortal: true, zIndex: 7e3 },
            import_react40.default.createElement(
              PopoverBody,
              { dismissButton: false, dismissAriaLabel: void 0, header: null, onDismiss: () => {
              }, overflowVisible: "both" },
              import_react40.default.createElement(internal_default, { tagName: "span" }, editDisabledReason)
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/table/body-cell/inline-editor.js
var import_react46 = __toESM(require_react());

// node_modules/@cloudscape-design/components/form-field/internal.js
var import_react44 = __toESM(require_react());

// node_modules/@cloudscape-design/components/grid/internal.js
var import_react42 = __toESM(require_react());

// node_modules/react-keyed-flatten-children/dist/esm/index.js
var import_react41 = __toESM(require_react());
var import_react_is = __toESM(require_react_is());
function flattenChildren(children, depth, keys) {
  if (depth === void 0) {
    depth = 0;
  }
  if (keys === void 0) {
    keys = [];
  }
  return import_react41.Children.toArray(children).reduce(function(acc, node, nodeIndex) {
    if ((0, import_react_is.isFragment)(node)) {
      acc.push.apply(acc, flattenChildren(node.props.children, depth + 1, keys.concat(node.key || nodeIndex)));
    } else {
      if ((0, import_react41.isValidElement)(node)) {
        acc.push((0, import_react41.cloneElement)(node, {
          key: keys.concat(String(node.key)).join(".")
        }));
      } else if (typeof node === "string" || typeof node === "number") {
        acc.push(node);
      }
    }
    return acc;
  }, []);
}

// node_modules/@cloudscape-design/components/internal/hooks/container-queries/use-container-breakpoints.js
function useContainerBreakpoints(triggers) {
  const triggersDep = triggers === null || triggers === void 0 ? void 0 : triggers.join();
  return useContainerQuery((rect) => getMatchingBreakpoint(rect.contentBoxWidth, triggers), [triggersDep]);
}

// node_modules/@cloudscape-design/components/grid/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/grid/styles.scoped.css";
var styles_css_default15 = {
  "grid": "awsui_grid_14yj0_y2kz6_145",
  "no-gutters": "awsui_no-gutters_14yj0_y2kz6_181",
  "grid-column": "awsui_grid-column_14yj0_y2kz6_186",
  "colspan-1": "awsui_colspan-1_14yj0_y2kz6_197",
  "push-1": "awsui_push-1_14yj0_y2kz6_201",
  "pull-1": "awsui_pull-1_14yj0_y2kz6_204",
  "colspan-2": "awsui_colspan-2_14yj0_y2kz6_207",
  "push-2": "awsui_push-2_14yj0_y2kz6_211",
  "pull-2": "awsui_pull-2_14yj0_y2kz6_214",
  "colspan-3": "awsui_colspan-3_14yj0_y2kz6_217",
  "push-3": "awsui_push-3_14yj0_y2kz6_221",
  "pull-3": "awsui_pull-3_14yj0_y2kz6_224",
  "colspan-4": "awsui_colspan-4_14yj0_y2kz6_227",
  "push-4": "awsui_push-4_14yj0_y2kz6_231",
  "pull-4": "awsui_pull-4_14yj0_y2kz6_234",
  "colspan-5": "awsui_colspan-5_14yj0_y2kz6_237",
  "push-5": "awsui_push-5_14yj0_y2kz6_241",
  "pull-5": "awsui_pull-5_14yj0_y2kz6_244",
  "colspan-6": "awsui_colspan-6_14yj0_y2kz6_247",
  "push-6": "awsui_push-6_14yj0_y2kz6_251",
  "pull-6": "awsui_pull-6_14yj0_y2kz6_254",
  "colspan-7": "awsui_colspan-7_14yj0_y2kz6_257",
  "push-7": "awsui_push-7_14yj0_y2kz6_261",
  "pull-7": "awsui_pull-7_14yj0_y2kz6_264",
  "colspan-8": "awsui_colspan-8_14yj0_y2kz6_267",
  "push-8": "awsui_push-8_14yj0_y2kz6_271",
  "pull-8": "awsui_pull-8_14yj0_y2kz6_274",
  "colspan-9": "awsui_colspan-9_14yj0_y2kz6_277",
  "push-9": "awsui_push-9_14yj0_y2kz6_281",
  "pull-9": "awsui_pull-9_14yj0_y2kz6_284",
  "colspan-10": "awsui_colspan-10_14yj0_y2kz6_287",
  "push-10": "awsui_push-10_14yj0_y2kz6_291",
  "pull-10": "awsui_pull-10_14yj0_y2kz6_294",
  "colspan-11": "awsui_colspan-11_14yj0_y2kz6_297",
  "push-11": "awsui_push-11_14yj0_y2kz6_301",
  "pull-11": "awsui_pull-11_14yj0_y2kz6_304",
  "colspan-12": "awsui_colspan-12_14yj0_y2kz6_307",
  "push-12": "awsui_push-12_14yj0_y2kz6_311",
  "pull-12": "awsui_pull-12_14yj0_y2kz6_314",
  "push-0": "awsui_push-0_14yj0_y2kz6_317",
  "pull-0": "awsui_pull-0_14yj0_y2kz6_320",
  "offset-1": "awsui_offset-1_14yj0_y2kz6_323",
  "offset-2": "awsui_offset-2_14yj0_y2kz6_326",
  "offset-3": "awsui_offset-3_14yj0_y2kz6_329",
  "offset-4": "awsui_offset-4_14yj0_y2kz6_332",
  "offset-5": "awsui_offset-5_14yj0_y2kz6_335",
  "offset-6": "awsui_offset-6_14yj0_y2kz6_338",
  "offset-7": "awsui_offset-7_14yj0_y2kz6_341",
  "offset-8": "awsui_offset-8_14yj0_y2kz6_344",
  "offset-9": "awsui_offset-9_14yj0_y2kz6_347",
  "offset-10": "awsui_offset-10_14yj0_y2kz6_350",
  "offset-11": "awsui_offset-11_14yj0_y2kz6_353",
  "restore-pointer-events": "awsui_restore-pointer-events_14yj0_y2kz6_357"
};

// node_modules/@cloudscape-design/components/grid/internal.js
var InternalGrid = import_react42.default.forwardRef((_a, ref) => {
  var { __breakpoint, gridDefinition = [], disableGutters = false, children, __tagOverride, __responsiveClassName, __internalRootRef = null } = _a, restProps = __rest(_a, ["__breakpoint", "gridDefinition", "disableGutters", "children", "__tagOverride", "__responsiveClassName", "__internalRootRef"]);
  let [defaultBreakpoint, defaultRef] = useContainerBreakpoints(void 0);
  if (__breakpoint !== void 0) {
    defaultBreakpoint = __breakpoint;
    defaultRef = ref;
  }
  const baseProps = getBaseProps(restProps);
  const flattenedChildren = flattenChildren(children);
  const Tag = __tagOverride !== null && __tagOverride !== void 0 ? __tagOverride : "div";
  if (isDevelopment) {
    const columnCount = gridDefinition.length;
    const childCount = flattenedChildren.length;
    if (columnCount !== childCount) {
      warnOnce("Grid", `The number of children (${childCount}) does not match the number of columns defined (${columnCount}).`);
    }
  }
  const mergedRef = useMergeRefs(defaultRef, __internalRootRef);
  return import_react42.default.createElement(Tag, Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default15.grid, baseProps.className, { [styles_css_default15["no-gutters"]]: disableGutters }, __responsiveClassName ? __responsiveClassName(defaultBreakpoint) : null), ref: mergedRef }), flattenedChildren.map((child, i) => {
    var _a2, _b, _c, _d;
    const key = child.key;
    return import_react42.default.createElement(
      "div",
      { key: key ? String(key) : void 0, className: clsx_m_default(styles_css_default15["grid-column"], getColumnClassNames("colspan", (_a2 = gridDefinition[i]) === null || _a2 === void 0 ? void 0 : _a2.colspan, defaultBreakpoint), getColumnClassNames("offset", (_b = gridDefinition[i]) === null || _b === void 0 ? void 0 : _b.offset, defaultBreakpoint), getColumnClassNames("pull", (_c = gridDefinition[i]) === null || _c === void 0 ? void 0 : _c.pull, defaultBreakpoint), getColumnClassNames("push", (_d = gridDefinition[i]) === null || _d === void 0 ? void 0 : _d.push, defaultBreakpoint)) },
      import_react42.default.createElement("div", { className: styles_css_default15["restore-pointer-events"] }, child)
    );
  }));
});
function getColumnClassNames(prop, mapping, breakpoint) {
  if (typeof mapping === "number") {
    return styles_css_default15[`${prop}-${mapping}`];
  }
  if (breakpoint === null || mapping === void 0) {
    return null;
  }
  return styles_css_default15[`${prop}-${matchBreakpointMapping(mapping, breakpoint)}`];
}
var internal_default4 = InternalGrid;

// node_modules/@cloudscape-design/components/internal/context/form-field-context.js
var import_react43 = __toESM(require_react());
var FormFieldContext = (0, import_react43.createContext)({});
function applyDefault(fields, defaults, keys) {
  const result = {};
  keys.forEach((key) => {
    result[key] = fields[key] === void 0 ? defaults[key] : fields[key];
  });
  return result;
}
function useFormFieldContext(props) {
  const context = (0, import_react43.useContext)(FormFieldContext);
  return applyDefault(props, context, ["invalid", "warning", "controlId", "ariaLabelledby", "ariaDescribedby"]);
}

// node_modules/@cloudscape-design/components/internal/utils/strings/join-strings.js
function joinStrings(...strings) {
  return strings.filter(Boolean).join(" ") || void 0;
}

// node_modules/@cloudscape-design/components/internal/utils/strings/pad-left-zeros.js
function padLeftZeros(text, length) {
  while (text.length < length) {
    text = `0${text}`;
  }
  return text;
}

// node_modules/@cloudscape-design/components/form-field/util.js
function makeSlotId(prop, formFieldId, propName) {
  if (!prop) {
    return void 0;
  }
  return `${formFieldId}-${propName}`;
}
function getSlotIds(formFieldId, label, description, constraintText, errorText, warningText) {
  const ids = {
    label: makeSlotId(label, formFieldId, "label"),
    description: makeSlotId(description, formFieldId, "description"),
    constraint: makeSlotId(constraintText, formFieldId, "constraint"),
    error: makeSlotId(errorText, formFieldId, "error"),
    warning: makeSlotId(warningText, formFieldId, "warning")
  };
  return ids;
}
function getAriaDescribedBy({ error, warning, description, constraint }) {
  const describedByAttributes = [error, warning, description, constraint].filter((e) => !!e);
  const describedBy = describedByAttributes.length ? describedByAttributes.join(" ") : void 0;
  return describedBy;
}
function getGridDefinition(stretch, secondaryControlPresent, isRefresh) {
  let columns;
  if (stretch) {
    columns = [{ colspan: 12 }, { colspan: 12 }];
  } else if (isRefresh) {
    columns = [{ colspan: { default: 12, xs: 8 } }, { colspan: { default: 12, xs: 4 } }];
  } else {
    columns = [{ colspan: { default: 12, xs: 9 } }, { colspan: { default: 12, xs: 3 } }];
  }
  if (!secondaryControlPresent) {
    return [columns[0]];
  }
  return columns;
}

// node_modules/@cloudscape-design/components/form-field/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/form-field/analytics-metadata/styles.scoped.css";
var styles_css_default16 = {
  "label": "awsui_label_aqu00_ocied_5"
};

// node_modules/@cloudscape-design/components/form-field/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/form-field/styles.scoped.css";
var styles_css_default17 = {
  "error-icon-shake-wrapper": "awsui_error-icon-shake-wrapper_14mhv_fzxwy_153",
  "warning-icon-shake-wrapper": "awsui_warning-icon-shake-wrapper_14mhv_fzxwy_154",
  "awsui-motion-shake-horizontally": "awsui_awsui-motion-shake-horizontally_14mhv_fzxwy_1",
  "error-icon-scale-wrapper": "awsui_error-icon-scale-wrapper_14mhv_fzxwy_184",
  "warning-icon-scale-wrapper": "awsui_warning-icon-scale-wrapper_14mhv_fzxwy_185",
  "awsui-motion-scale-popup": "awsui_awsui-motion-scale-popup_14mhv_fzxwy_1",
  "warning": "awsui_warning_14mhv_fzxwy_154",
  "error": "awsui_error_14mhv_fzxwy_153",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_14mhv_fzxwy_1",
  "root": "awsui_root_14mhv_fzxwy_236",
  "label": "awsui_label_14mhv_fzxwy_269",
  "info": "awsui_info_14mhv_fzxwy_285",
  "description": "awsui_description_14mhv_fzxwy_291",
  "constraint": "awsui_constraint_14mhv_fzxwy_292",
  "hints": "awsui_hints_14mhv_fzxwy_299",
  "constraint-has-validation-text": "awsui_constraint-has-validation-text_14mhv_fzxwy_300",
  "secondary-control": "awsui_secondary-control_14mhv_fzxwy_304",
  "controls": "awsui_controls_14mhv_fzxwy_308",
  "label-hidden": "awsui_label-hidden_14mhv_fzxwy_308",
  "label-wrapper": "awsui_label-wrapper_14mhv_fzxwy_311",
  "control": "awsui_control_14mhv_fzxwy_308",
  "error__message": "awsui_error__message_14mhv_fzxwy_338",
  "warning__message": "awsui_warning__message_14mhv_fzxwy_339",
  "visually-hidden": "awsui_visually-hidden_14mhv_fzxwy_343"
};

// node_modules/@cloudscape-design/components/form-field/internal.js
function FormFieldError({ id, children, errorIconAriaLabel }) {
  const i18n = useInternalI18n("form-field");
  const contentRef = (0, import_react44.useRef)(null);
  const i18nErrorIconAriaLabel = i18n("i18nStrings.errorIconAriaLabel", errorIconAriaLabel);
  return import_react44.default.createElement(
    import_react44.default.Fragment,
    null,
    import_react44.default.createElement(
      "div",
      { id, className: styles_css_default17.error },
      import_react44.default.createElement(
        "div",
        { className: styles_css_default17["error-icon-shake-wrapper"] },
        import_react44.default.createElement(
          "div",
          { className: styles_css_default17["error-icon-scale-wrapper"] },
          import_react44.default.createElement(internal_default2, { name: "status-negative", size: "small", ariaLabel: i18nErrorIconAriaLabel })
        )
      ),
      import_react44.default.createElement("span", { className: styles_css_default17.error__message, ref: contentRef }, children)
    ),
    import_react44.default.createElement(internal_default, { assertive: true, tagName: "span", sources: [i18nErrorIconAriaLabel, contentRef] })
  );
}
function FormFieldWarning({ id, children, warningIconAriaLabel }) {
  const i18n = useInternalI18n("form-field");
  const contentRef = (0, import_react44.useRef)(null);
  const i18nWarningIconAriaLabel = i18n("i18nStrings.warningIconAriaLabel", warningIconAriaLabel);
  return import_react44.default.createElement(
    import_react44.default.Fragment,
    null,
    import_react44.default.createElement(
      "div",
      { id, className: styles_css_default17.warning },
      import_react44.default.createElement(
        "div",
        { className: styles_css_default17["warning-icon-shake-wrapper"] },
        import_react44.default.createElement(
          "div",
          { className: styles_css_default17["warning-icon-scale-wrapper"] },
          import_react44.default.createElement(internal_default2, { name: "status-warning", size: "small", ariaLabel: i18nWarningIconAriaLabel })
        )
      ),
      import_react44.default.createElement("span", { className: styles_css_default17.warning__message, ref: contentRef }, children)
    ),
    import_react44.default.createElement(internal_default, { assertive: true, tagName: "span", sources: [i18nWarningIconAriaLabel, contentRef] })
  );
}
function ConstraintText({ id, hasValidationText, children }) {
  return import_react44.default.createElement("div", { id, className: clsx_m_default(styles_css_default17.constraint, hasValidationText && styles_css_default17["constraint-has-validation-text"]) }, children);
}
function InternalFormField(_a) {
  var { controlId, stretch = false, label, info, i18nStrings, children, secondaryControl, description, constraintText, errorText, warningText, __hideLabel, __internalRootRef = null, __disableGutters = false, __analyticsMetadata = void 0, __style = {} } = _a, rest = __rest(_a, ["controlId", "stretch", "label", "info", "i18nStrings", "children", "secondaryControl", "description", "constraintText", "errorText", "warningText", "__hideLabel", "__internalRootRef", "__disableGutters", "__analyticsMetadata", "__style"]);
  const baseProps = getBaseProps(rest);
  const isRefresh = useVisualRefresh();
  const instanceUniqueId = useUniqueId("formField");
  const generatedControlId = controlId || instanceUniqueId;
  const formFieldId = controlId || generatedControlId;
  const { funnelIdentifier, funnelInteractionId, submissionAttempt, funnelState, errorCount } = useFunnel();
  const { stepIdentifier, stepNumber, stepNameSelector } = useFunnelStep();
  const { subStepIdentifier, subStepSelector, subStepNameSelector } = useFunnelSubStep();
  const showWarning = warningText && !errorText;
  if (warningText && errorText) {
    warnOnce("FileUpload", "Both `errorText` and `warningText` exist. `warningText` will not be shown.");
  }
  const slotIds = getSlotIds(formFieldId, label, description, constraintText, errorText, showWarning ? warningText : void 0);
  const ariaDescribedBy = getAriaDescribedBy(slotIds);
  const gridDefinition = getGridDefinition(stretch, !!secondaryControl, isRefresh);
  const { ariaLabelledby: parentAriaLabelledby, ariaDescribedby: parentAriaDescribedby, invalid: parentInvalid, warning: parentWarning } = useFormFieldContext({});
  const contextValuesWithoutControlId = {
    ariaLabelledby: joinStrings(parentAriaLabelledby, slotIds.label) || void 0,
    ariaDescribedby: joinStrings(parentAriaDescribedby, ariaDescribedBy) || void 0,
    invalid: !!errorText || !!parentInvalid,
    warning: !!warningText && !errorText || !!parentWarning && !parentInvalid
  };
  const analyticsAttributes = {
    [DATA_ATTR_FIELD_LABEL]: slotIds.label ? getFieldSlotSeletor(slotIds.label) : void 0,
    [DATA_ATTR_FIELD_ERROR]: slotIds.error ? getFieldSlotSeletor(slotIds.error) : void 0
  };
  (0, import_react44.useEffect)(() => {
    var _a2, _b, _c;
    if (funnelInteractionId && errorText && funnelState.current !== "complete") {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      errorCount.current++;
      const errorIsVisible = ((_c = (_b = (_a2 = __internalRootRef === null || __internalRootRef === void 0 ? void 0 : __internalRootRef.current) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0) > 0;
      if (errorIsVisible) {
        FunnelMetrics.funnelSubStepError({
          funnelInteractionId,
          funnelIdentifier,
          subStepSelector,
          subStepName,
          subStepNameSelector,
          subStepIdentifier,
          stepNumber,
          stepName,
          stepNameSelector,
          stepIdentifier,
          fieldErrorSelector: `${getFieldSlotSeletor(slotIds.error)} .${styles_css_default17.error__message}`,
          fieldLabelSelector: getFieldSlotSeletor(slotIds.label),
          subStepAllSelector: getSubStepAllSelector(),
          fieldIdentifier: __analyticsMetadata === null || __analyticsMetadata === void 0 ? void 0 : __analyticsMetadata.instanceIdentifier,
          errorContext: __analyticsMetadata === null || __analyticsMetadata === void 0 ? void 0 : __analyticsMetadata.errorContext
        });
      }
      return () => {
        errorCount.current--;
      };
    }
  }, [funnelInteractionId, errorText, submissionAttempt, errorCount]);
  return import_react44.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default17.root), style: __style, ref: __internalRootRef }, analyticsAttributes, copyAnalyticsMetadataAttribute(rest)),
    import_react44.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default17["label-wrapper"], __hideLabel && styles_css_default17["visually-hidden"]) },
      label && import_react44.default.createElement("label", { className: clsx_m_default(styles_css_default17.label, styles_css_default16.label), id: slotIds.label, htmlFor: generatedControlId }, label),
      import_react44.default.createElement(InfoLinkLabelContext.Provider, { value: slotIds.label }, !__hideLabel && info && import_react44.default.createElement("span", { className: styles_css_default17.info }, info))
    ),
    description && import_react44.default.createElement("div", { className: styles_css_default17.description, id: slotIds.description }, description),
    import_react44.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default17.controls, __hideLabel && styles_css_default17["label-hidden"]) },
      import_react44.default.createElement(
        internal_default4,
        { gridDefinition, disableGutters: __disableGutters },
        import_react44.default.createElement(FormFieldContext.Provider, { value: Object.assign({ controlId: generatedControlId }, contextValuesWithoutControlId) }, children && import_react44.default.createElement("div", { className: styles_css_default17.control }, children)),
        secondaryControl && import_react44.default.createElement(
          FormFieldContext.Provider,
          { value: contextValuesWithoutControlId },
          import_react44.default.createElement("div", { className: styles_css_default17["secondary-control"] }, secondaryControl)
        )
      )
    ),
    (constraintText || errorText || warningText) && import_react44.default.createElement(
      "div",
      { className: styles_css_default17.hints },
      errorText && import_react44.default.createElement(FormFieldError, { id: slotIds.error, errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel }, errorText),
      showWarning && import_react44.default.createElement(FormFieldWarning, { id: slotIds.warning, warningIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel }, warningText),
      constraintText && import_react44.default.createElement(ConstraintText, { id: slotIds.constraint, hasValidationText: !!errorText || !!warningText }, constraintText)
    )
  );
}

// node_modules/@cloudscape-design/components/space-between/internal.js
var import_react45 = __toESM(require_react());

// node_modules/@cloudscape-design/components/space-between/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/space-between/styles.scoped.css";
var styles_css_default18 = {
  "root": "awsui_root_18582_1jqoe_145",
  "child": "awsui_child_18582_1jqoe_149",
  "horizontal": "awsui_horizontal_18582_1jqoe_160",
  "horizontal-xxxs": "awsui_horizontal-xxxs_18582_1jqoe_164",
  "horizontal-xxs": "awsui_horizontal-xxs_18582_1jqoe_167",
  "horizontal-xs": "awsui_horizontal-xs_18582_1jqoe_170",
  "horizontal-s": "awsui_horizontal-s_18582_1jqoe_173",
  "horizontal-m": "awsui_horizontal-m_18582_1jqoe_176",
  "horizontal-l": "awsui_horizontal-l_18582_1jqoe_179",
  "horizontal-xl": "awsui_horizontal-xl_18582_1jqoe_182",
  "horizontal-xxl": "awsui_horizontal-xxl_18582_1jqoe_185",
  "vertical": "awsui_vertical_18582_1jqoe_192",
  "vertical-xxxs": "awsui_vertical-xxxs_18582_1jqoe_195",
  "vertical-xxs": "awsui_vertical-xxs_18582_1jqoe_198",
  "vertical-xs": "awsui_vertical-xs_18582_1jqoe_201",
  "vertical-s": "awsui_vertical-s_18582_1jqoe_204",
  "vertical-m": "awsui_vertical-m_18582_1jqoe_207",
  "vertical-l": "awsui_vertical-l_18582_1jqoe_210",
  "vertical-xl": "awsui_vertical-xl_18582_1jqoe_213",
  "vertical-xxl": "awsui_vertical-xxl_18582_1jqoe_216",
  "align-center": "awsui_align-center_18582_1jqoe_220",
  "align-start": "awsui_align-start_18582_1jqoe_224",
  "align-end": "awsui_align-end_18582_1jqoe_228"
};

// node_modules/@cloudscape-design/components/space-between/internal.js
var InternalSpaceBetween = (0, import_react45.forwardRef)((_a, ref) => {
  var { direction = "vertical", size, children, alignItems, __internalRootRef } = _a, props = __rest(_a, ["direction", "size", "children", "alignItems", "__internalRootRef"]);
  const mergedRef = useMergeRefs(ref, __internalRootRef);
  const baseProps = getBaseProps(props);
  const flattenedChildren = flattenChildren(children);
  return import_react45.default.createElement("div", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default18.root, styles_css_default18[direction], styles_css_default18[`${direction}-${size}`], alignItems && styles_css_default18[`align-${alignItems}`]), ref: mergedRef }), flattenedChildren.map((child) => {
    const key = typeof child === "object" ? child.key : void 0;
    return import_react45.default.createElement("div", { key, className: styles_css_default18.child }, child);
  }));
});
var internal_default5 = InternalSpaceBetween;

// node_modules/@cloudscape-design/components/table/body-cell/inline-editor.js
var noop = () => void 0;
function InlineEditor({ ariaLabels, item, column, onEditEnd, submitEdit, __onRender }) {
  var _a, _b, _c, _d;
  const [currentEditLoading, setCurrentEditLoading] = (0, import_react46.useState)(false);
  const [currentEditValue, setCurrentEditValue] = (0, import_react46.useState)();
  const i18n = useInternalI18n("table");
  const focusLockRef = (0, import_react46.useRef)(null);
  function finishEdit({ cancelled = false, refocusCell = true } = {}) {
    if (!cancelled) {
      setCurrentEditValue(void 0);
    }
    onEditEnd({ cancelled, refocusCell });
  }
  function handleSubmit() {
    var _a2;
    return __awaiter(this, void 0, void 0, function* () {
      if (currentEditValue === void 0) {
        finishEdit();
        return;
      }
      setCurrentEditLoading(true);
      try {
        yield submitEdit(item, column, currentEditValue);
        setCurrentEditLoading(false);
        finishEdit();
      } catch (e) {
        setCurrentEditLoading(false);
        (_a2 = focusLockRef.current) === null || _a2 === void 0 ? void 0 : _a2.focusFirst();
      }
    });
  }
  function onFormSubmit(evt) {
    evt.preventDefault();
    evt.stopPropagation();
    handleSubmit();
  }
  function onCancel({ reFocusEditedCell = true } = {}) {
    if (currentEditLoading) {
      return;
    }
    finishEdit({ cancelled: true, refocusCell: reFocusEditedCell });
  }
  function handleEscape(event) {
    if (event.key === "Escape") {
      onCancel();
    }
  }
  const clickAwayRef = useClickAway(() => onCancel({ reFocusEditedCell: false }));
  (0, import_react46.useEffect)(() => {
    if (__onRender) {
      const timer = setTimeout(__onRender, 1);
      return () => clearTimeout(timer);
    }
  }, [__onRender]);
  const { ariaLabel = void 0, validation = noop, errorIconAriaLabel, constraintText, editingCell, disableNativeForm } = column.editConfig;
  const cellContext = {
    currentValue: currentEditValue,
    setValue: setCurrentEditValue,
    submitValue: handleSubmit
  };
  const FormElement = disableNativeForm ? "div" : "form";
  return import_react46.default.createElement(
    focus_lock_default,
    { restoreFocus: true, ref: focusLockRef },
    import_react46.default.createElement(
      "div",
      { role: "dialog", ref: clickAwayRef, "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, column, item), onKeyDown: handleEscape },
      import_react46.default.createElement(
        FormElement,
        { onSubmit: disableNativeForm ? void 0 : onFormSubmit },
        import_react46.default.createElement(
          InternalFormField,
          { stretch: true, label: ariaLabel, constraintText, __hideLabel: true, __disableGutters: true, i18nStrings: { errorIconAriaLabel }, errorText: validation(item, currentEditValue) },
          import_react46.default.createElement(
            "div",
            { className: styles_css_default14["body-cell-editor-row"] },
            import_react46.default.createElement("div", { className: styles_css_default14["body-cell-editor-row-editor"] }, editingCell(item, cellContext)),
            import_react46.default.createElement(
              "span",
              { className: styles_css_default14["body-cell-editor-controls"] },
              import_react46.default.createElement(
                internal_default5,
                { direction: "horizontal", size: "xxs" },
                !currentEditLoading ? import_react46.default.createElement(internal_default3, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.cancelEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column), formAction: "none", iconName: "close", variant: "inline-icon", onClick: () => onCancel() }) : null,
                import_react46.default.createElement(internal_default3, { ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.submitEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column), formAction: disableNativeForm ? "none" : "submit", onClick: disableNativeForm ? handleSubmit : void 0, iconName: "check", variant: "inline-icon", loading: currentEditLoading })
              ),
              import_react46.default.createElement(internal_default, { tagName: "span", hidden: true }, currentEditLoading ? i18n("ariaLabels.submittingEditText", (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.submittingEditText) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column)) : "")
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/table/body-cell/index.js
var submitHandlerFallback = () => {
  throw new Error("The function `handleSubmit` is required for editable columns");
};
function TableCellEditable(_a) {
  var _b, _c, _d;
  var { item, column, isEditing, onEditStart, onEditEnd, submitEdit, ariaLabels, successfulEdit = false } = _a, rest = __rest(_a, ["item", "column", "isEditing", "onEditStart", "onEditEnd", "submitEdit", "ariaLabels", "successfulEdit"]);
  const i18n = useInternalI18n("table");
  const editActivateRef = (0, import_react47.useRef)(null);
  const tdNativeAttributes = {
    "data-inline-editing-active": isEditing.toString()
  };
  const isFocusMoveNeededRef = (0, import_react47.useRef)(false);
  const isExpandableColumn = rest.level !== void 0;
  (0, import_react47.useEffect)(() => {
    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {
      isFocusMoveNeededRef.current = false;
      editActivateRef.current.focus();
    }
  }, [isEditing]);
  const [hasFocus, setHasFocus] = (0, import_react47.useState)(false);
  const prevSuccessfulEdit = usePrevious(successfulEdit);
  const prevHasFocus = usePrevious(hasFocus);
  const [showSuccessIcon, setShowSuccessIcon] = (0, import_react47.useState)(false);
  (0, import_react47.useEffect)(() => {
    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {
      setShowSuccessIcon(false);
    }
    if (successfulEdit && !prevSuccessfulEdit) {
      setShowSuccessIcon(true);
    }
  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);
  const { tabIndex: editActivateTabIndex } = useSingleTabStopNavigation(editActivateRef);
  return import_react47.default.createElement(TableTdElement, Object.assign({}, rest, { nativeAttributes: tdNativeAttributes, isEditing, hasSuccessIcon: showSuccessIcon && hasFocus, onClick: !isEditing && !isExpandableColumn ? onEditStart : void 0, onFocus: () => setHasFocus(true), onBlur: () => setHasFocus(false) }), isEditing && column.editConfig ? import_react47.default.createElement(InlineEditor, { ariaLabels, column, item, onEditEnd: (options) => {
    setShowSuccessIcon(false);
    isFocusMoveNeededRef.current = options.refocusCell;
    onEditEnd(options.cancelled);
  }, submitEdit: submitEdit !== null && submitEdit !== void 0 ? submitEdit : submitHandlerFallback }) : import_react47.default.createElement(
    import_react47.default.Fragment,
    null,
    column.cell(item),
    showSuccessIcon && hasFocus && import_react47.default.createElement(
      import_react47.default.Fragment,
      null,
      import_react47.default.createElement(
        "span",
        { className: styles_css_default14["body-cell-success"], onMouseDown: (e) => {
          e.preventDefault();
        } },
        import_react47.default.createElement(internal_default2, { name: "status-positive", variant: "success", ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column) })
      ),
      import_react47.default.createElement(internal_default, { tagName: "span", hidden: true }, i18n("ariaLabels.successfulEditLabel", (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column)))
    ),
    import_react47.default.createElement(
      "div",
      { className: styles_css_default14["body-cell-editor-wrapper"] },
      import_react47.default.createElement(
        "button",
        { className: clsx_m_default(styles_css_default14["body-cell-editor"], isExpandableColumn && styles_css_default14["body-cell-editor-focusable"]), "aria-label": (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column, item), ref: editActivateRef, onClick: !isEditing && isExpandableColumn ? onEditStart : void 0, tabIndex: editActivateTabIndex },
        import_react47.default.createElement(
          "span",
          { className: styles_css_default14["body-cell-editor-icon"] },
          import_react47.default.createElement(internal_default2, { name: "edit" })
        )
      )
    )
  ));
}
function TableBodyCell(props) {
  var _a, _b;
  const editDisabledReason = (_b = (_a = props.column.editConfig) === null || _a === void 0 ? void 0 : _a.disabledReason) === null || _b === void 0 ? void 0 : _b.call(_a, props.item);
  if (editDisabledReason) {
    return import_react47.default.createElement(DisabledInlineEditor, Object.assign({ editDisabledReason }, props));
  }
  if (props.isEditable || props.isEditing) {
    return import_react47.default.createElement(TableCellEditable, Object.assign({}, props));
  }
  const { column, item } = props;
  return import_react47.default.createElement(TableTdElement, Object.assign({}, props, { isEditable: false }), column.cell(item));
}

// node_modules/@cloudscape-design/components/table/column-widths-utils.js
function checkColumnWidths(columnDefinitions) {
  for (const column of columnDefinitions) {
    checkProperty(column, "minWidth");
    checkProperty(column, "width");
  }
}
function setElementWidths(element, styles) {
  function setProperty(property) {
    const value = styles[property];
    let widthCssValue = "";
    if (typeof value === "number") {
      widthCssValue = value + "px";
    }
    if (typeof value === "string") {
      widthCssValue = value;
    }
    if (element.style[property] !== widthCssValue) {
      element.style[property] = widthCssValue;
    }
  }
  setProperty("width");
  setProperty("minWidth");
  setProperty("maxWidth");
}
function checkProperty(column, name) {
  const value = column[name];
  if (typeof value !== "number" && typeof value !== "undefined") {
    warnOnce("Table", `resizableColumns feature requires ${name} property to be a number, got ${value}. The component may work incorrectly.`);
  }
}

// node_modules/@cloudscape-design/components/table/selection/utils.js
var SELECTION_ITEM = "selection-item";
var SELECTION_ROOT = "selection-root";
var ItemSet = class {
  constructor(trackBy, items) {
    this.map = /* @__PURE__ */ new Map();
    this.put = (item) => this.map.set.call(this.map, getTrackableValue(this.trackBy, item), item);
    this.has = (item) => this.map.has.call(this.map, getTrackableValue(this.trackBy, item));
    this.forEach = this.map.forEach.bind(this.map);
    this.trackBy = trackBy;
    items.forEach(this.put);
  }
};
var focusMarkers = {
  item: { ["data-" + SELECTION_ITEM]: "item" },
  all: { ["data-" + SELECTION_ITEM]: "all" },
  root: { ["data-" + SELECTION_ROOT]: "true" }
};

// node_modules/@cloudscape-design/components/table/expandable-rows/expandable-rows-utils.js
function useExpandableTableProps({ items, expandableRows, trackBy, ariaLabels }) {
  var _a;
  const i18n = useInternalI18n("table");
  const isExpandable = !!expandableRows;
  const expandedSet = new ItemSet(trackBy, (_a = expandableRows === null || expandableRows === void 0 ? void 0 : expandableRows.expandedItems) !== null && _a !== void 0 ? _a : []);
  let allItems = items;
  const itemToDetail = /* @__PURE__ */ new Map();
  const getItemLevel = (item) => {
    var _a2, _b;
    return (_b = (_a2 = itemToDetail.get(item)) === null || _a2 === void 0 ? void 0 : _a2.level) !== null && _b !== void 0 ? _b : 0;
  };
  if (isExpandable) {
    const visibleItems = new Array();
    const traverse = (item, detail) => {
      const children = expandableRows.getItemChildren(item);
      itemToDetail.set(item, Object.assign(Object.assign({}, detail), { children }));
      visibleItems.push(item);
      if (expandedSet.has(item)) {
        children.forEach((child, index) => traverse(child, { level: detail.level + 1, setSize: children.length, posInSet: index + 1, parent: item }));
      }
    };
    items.forEach((item, index) => traverse(item, { level: 1, setSize: items.length, posInSet: index + 1, parent: null }));
    for (let index = 0; index < visibleItems.length; index++) {
      const item = visibleItems[index];
      if (expandedSet.has(item)) {
        let insertionIndex = index + 1;
        for (insertionIndex; insertionIndex < visibleItems.length; insertionIndex++) {
          const insertionItem = visibleItems[insertionIndex];
          if (getItemLevel(item) >= getItemLevel(insertionItem)) {
            break;
          }
        }
        insertionIndex--;
      }
    }
    allItems = visibleItems;
  }
  const getExpandableItemProps = (item) => {
    var _a2, _b, _c, _d;
    const { level = 1, setSize = 1, posInSet = 1, parent = null, children = [] } = (_a2 = itemToDetail.get(item)) !== null && _a2 !== void 0 ? _a2 : {};
    return {
      level,
      setSize,
      posInSet,
      isExpandable: (_b = expandableRows === null || expandableRows === void 0 ? void 0 : expandableRows.isItemExpandable(item)) !== null && _b !== void 0 ? _b : true,
      isExpanded: expandedSet.has(item),
      onExpandableItemToggle: () => fireNonCancelableEvent(expandableRows === null || expandableRows === void 0 ? void 0 : expandableRows.onExpandableItemToggle, { item, expanded: !expandedSet.has(item) }),
      expandButtonLabel: i18n("ariaLabels.expandButtonLabel", (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.expandButtonLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, item)),
      collapseButtonLabel: i18n("ariaLabels.collapseButtonLabel", (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.collapseButtonLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, item)),
      parent,
      children
    };
  };
  return { isExpandable, allItems, getExpandableItemProps };
}

// node_modules/@cloudscape-design/components/table/no-data-cell.js
var import_react49 = __toESM(require_react());

// node_modules/@cloudscape-design/components/status-indicator/internal.js
var import_react48 = __toESM(require_react());

// node_modules/@cloudscape-design/components/status-indicator/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/status-indicator/styles.scoped.css";
var styles_css_default19 = {
  "icon-shake": "awsui_icon-shake_1cbgc_12wag_153",
  "awsui-motion-shake-horizontally": "awsui_awsui-motion-shake-horizontally_1cbgc_12wag_1",
  "container-fade-in": "awsui_container-fade-in_1cbgc_12wag_181",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_1cbgc_12wag_1",
  "root": "awsui_root_1cbgc_12wag_203",
  "status-error": "awsui_status-error_1cbgc_12wag_212",
  "status-warning": "awsui_status-warning_1cbgc_12wag_215",
  "status-success": "awsui_status-success_1cbgc_12wag_218",
  "status-info": "awsui_status-info_1cbgc_12wag_221",
  "status-stopped": "awsui_status-stopped_1cbgc_12wag_224",
  "status-pending": "awsui_status-pending_1cbgc_12wag_227",
  "status-in-progress": "awsui_status-in-progress_1cbgc_12wag_230",
  "status-loading": "awsui_status-loading_1cbgc_12wag_233",
  "color-override-red": "awsui_color-override-red_1cbgc_12wag_236",
  "color-override-grey": "awsui_color-override-grey_1cbgc_12wag_239",
  "color-override-blue": "awsui_color-override-blue_1cbgc_12wag_242",
  "color-override-green": "awsui_color-override-green_1cbgc_12wag_245",
  "color-override-yellow": "awsui_color-override-yellow_1cbgc_12wag_248",
  "container": "awsui_container_1cbgc_12wag_181",
  "display-inline": "awsui_display-inline_1cbgc_12wag_252",
  "icon": "awsui_icon_1cbgc_12wag_153",
  "display-inline-block": "awsui_display-inline-block_1cbgc_12wag_260",
  "overflow-ellipsis": "awsui_overflow-ellipsis_1cbgc_12wag_269"
};

// node_modules/@cloudscape-design/components/status-indicator/internal.js
var typeToIcon = (size) => ({
  error: import_react48.default.createElement(internal_default2, { name: "status-negative", size }),
  warning: import_react48.default.createElement(internal_default2, { name: "status-warning", size }),
  success: import_react48.default.createElement(internal_default2, { name: "status-positive", size }),
  info: import_react48.default.createElement(internal_default2, { name: "status-info", size }),
  stopped: import_react48.default.createElement(internal_default2, { name: "status-stopped", size }),
  pending: import_react48.default.createElement(internal_default2, { name: "status-pending", size }),
  "in-progress": import_react48.default.createElement(internal_default2, { name: "status-in-progress", size }),
  loading: import_react48.default.createElement(InternalSpinner, null)
});
function StatusIndicator(_a) {
  var { type, children, iconAriaLabel, colorOverride, wrapText = true, __animate = false, __internalRootRef, __size = "normal", __display = "inline-block" } = _a, rest = __rest(_a, ["type", "children", "iconAriaLabel", "colorOverride", "wrapText", "__animate", "__internalRootRef", "__size", "__display"]);
  const baseProps = getBaseProps(rest);
  return import_react48.default.createElement(
    "span",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default19.root, styles_css_default19[`status-${type}`], {
      [styles_css_default19[`color-override-${colorOverride}`]]: colorOverride
    }, baseProps.className), ref: __internalRootRef }),
    import_react48.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default19.container, styles_css_default19[`display-${__display}`], wrapText === false && styles_css_default19["overflow-ellipsis"], __animate && styles_css_default19["container-fade-in"]) },
      import_react48.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default19.icon, __animate && styles_css_default19["icon-shake"]), "aria-label": iconAriaLabel, role: iconAriaLabel ? "img" : void 0 },
        typeToIcon(__size)[type],
        __display === "inline" && import_react48.default.createElement(import_react48.default.Fragment, null, " ")
      ),
      children
    )
  );
}

// node_modules/@cloudscape-design/components/table/no-data-cell.js
function NoDataCell({ totalColumnsCount, hasFooter, loading, loadingText, empty, tableRef, containerRef }) {
  const cellContentRef = (0, import_react49.useRef)(null);
  useResizeObserver(containerRef, ({ contentBoxWidth: containerInlineSize }) => {
    if (tableRef.current && cellContentRef.current) {
      const tablePaddingInlineStart = parseFloat(getComputedStyle(tableRef.current).paddingInlineStart) || 0;
      const tablePaddingInlineEnd = parseFloat(getComputedStyle(tableRef.current).paddingInlineEnd) || 0;
      const inlineSize = containerInlineSize + tablePaddingInlineStart + tablePaddingInlineEnd;
      cellContentRef.current.style.inlineSize = Math.floor(inlineSize) + "px";
    }
  });
  return import_react49.default.createElement(
    "td",
    { colSpan: totalColumnsCount, className: clsx_m_default(styles_css_default13["cell-merged"], hasFooter && styles_css_default13["has-footer"]) },
    import_react49.default.createElement("div", { ref: cellContentRef, className: styles_css_default13["cell-merged-content"], "data-awsui-table-suppress-navigation": true }, loading ? import_react49.default.createElement(
      StatusIndicator,
      { type: "loading", className: styles_css_default13.loading, wrapText: true },
      import_react49.default.createElement(internal_default, { tagName: "span" }, loadingText)
    ) : import_react49.default.createElement("div", { className: styles_css_default13.empty }, empty))
  );
}

// node_modules/@cloudscape-design/components/table/progressive-loading/items-loader.js
var import_react50 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/progressive-loading/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/table/progressive-loading/styles.scoped.css";
var styles_css_default20 = {
  "items-loader": "awsui_items-loader_115pt_16l07_5"
};

// node_modules/@cloudscape-design/components/table/progressive-loading/items-loader.js
function ItemsLoader({ item, trackBy, children }) {
  let parentTrackId = item && trackBy ? applyTrackBy(trackBy, item) : void 0;
  parentTrackId = typeof parentTrackId === "string" ? parentTrackId : void 0;
  return import_react50.default.createElement("div", { "data-root": item ? "false" : "true", "data-parentrow": parentTrackId, className: styles_css_default20["items-loader"] }, children);
}
function getLoaderContent({ item, loadingStatus, renderLoaderPending, renderLoaderLoading, renderLoaderError, renderLoaderEmpty }) {
  let content = null;
  if (loadingStatus === "pending" && renderLoaderPending) {
    content = renderLoaderPending({ item });
  } else if (loadingStatus === "loading" && renderLoaderLoading) {
    content = import_react50.default.createElement(internal_default, { tagName: "span" }, renderLoaderLoading({ item }));
  } else if (loadingStatus === "error" && renderLoaderError) {
    content = import_react50.default.createElement(internal_default, { tagName: "span" }, renderLoaderError({ item }));
  } else if (loadingStatus === "finished" && renderLoaderEmpty && item) {
    content = import_react50.default.createElement(internal_default, { tagName: "span" }, renderLoaderEmpty({ item }));
  } else {
    warnOnce("Table", "Must define `renderLoaderPending`, `renderLoaderLoading`, `renderLoaderError`, or `renderLoaderEmpty` when using corresponding loading status.");
  }
  return content;
}

// node_modules/@cloudscape-design/components/table/progressive-loading/loader-cell.js
var import_react51 = __toESM(require_react());
function TableLoaderCell(_a) {
  var { item, trackBy, children } = _a, props = __rest(_a, ["item", "trackBy", "children"]);
  return import_react51.default.createElement(TableTdElement, Object.assign({}, props, { isEditable: false, isEditing: false }), props.isRowHeader ? import_react51.default.createElement(ItemsLoader, { item, trackBy }, children) : null);
}

// node_modules/@cloudscape-design/components/table/progressive-loading/progressive-loading-utils.js
function useProgressiveLoadingProps({ items, getLoadingStatus, getExpandableItemProps }) {
  const allRows = new Array();
  const getItemParent = (item) => getExpandableItemProps(item).parent;
  const getItemChildren = (item) => getExpandableItemProps(item).children;
  const getItemLevel = (item) => item ? getExpandableItemProps(item).level : 0;
  const isItemExpanded = (item) => getExpandableItemProps(item).isExpanded;
  for (let i = 0; i < items.length; i++) {
    allRows.push({ type: "data", item: items[i] });
    if (isItemExpanded(items[i]) && getItemChildren(items[i]).length === 0) {
      const status = getLoadingStatus === null || getLoadingStatus === void 0 ? void 0 : getLoadingStatus(items[i]);
      if (status === "loading" || status === "finished" || status === "error") {
        allRows.push({ type: "loader", item: items[i], level: getItemLevel(items[i]), status, from: 0 });
      } else {
        warnOnce("Table", 'Expanded items without children must have "loading", "finished", or "error" loading status.');
      }
    }
    let currentParent = getItemParent(items[i]);
    let levelsDiff = getItemLevel(items[i]) - getItemLevel(items[i + 1]);
    while (currentParent && levelsDiff > 0) {
      const status = getLoadingStatus === null || getLoadingStatus === void 0 ? void 0 : getLoadingStatus(currentParent);
      if (status && status !== "finished") {
        const level = currentParent ? getItemLevel(currentParent) : 0;
        const children = currentParent ? getItemChildren(currentParent) : [];
        allRows.push({ type: "loader", item: currentParent, level, status, from: children.length });
      }
      currentParent = currentParent && getItemParent(currentParent);
      levelsDiff--;
    }
    const rootLoadingStatus = getLoadingStatus === null || getLoadingStatus === void 0 ? void 0 : getLoadingStatus(null);
    if (i === items.length - 1 && rootLoadingStatus && rootLoadingStatus !== "finished") {
      allRows.push({ type: "loader", item: null, level: 0, status: rootLoadingStatus, from: items.length });
    }
  }
  return { allRows };
}

// node_modules/@cloudscape-design/components/table/resizer/index.js
var import_react53 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/use-column-widths.js
var import_react52 = __toESM(require_react());
var DEFAULT_COLUMN_WIDTH = 120;
function readWidths(getCell, visibleColumns) {
  const result = /* @__PURE__ */ new Map();
  for (let index = 0; index < visibleColumns.length; index++) {
    const column = visibleColumns[index];
    let width = column.width || 0;
    const minWidth = column.minWidth || width || DEFAULT_COLUMN_WIDTH;
    if (!width && // read width from the DOM if it is missing in the config
    index !== visibleColumns.length - 1) {
      const colEl = getCell(column.id);
      width = colEl ? getLogicalBoundingClientRect(colEl).inlineSize : DEFAULT_COLUMN_WIDTH;
    }
    result.set(column.id, Math.max(width, minWidth));
  }
  return result;
}
function updateWidths(visibleColumns, oldWidths, newWidth, columnId) {
  const column = visibleColumns.find((column2) => column2.id === columnId);
  let minWidth = DEFAULT_COLUMN_WIDTH;
  if (typeof (column === null || column === void 0 ? void 0 : column.width) === "number" && column.width < DEFAULT_COLUMN_WIDTH) {
    minWidth = column === null || column === void 0 ? void 0 : column.width;
  }
  if (typeof (column === null || column === void 0 ? void 0 : column.minWidth) === "number") {
    minWidth = column === null || column === void 0 ? void 0 : column.minWidth;
  }
  newWidth = Math.max(newWidth, minWidth);
  if (oldWidths.get(columnId) === newWidth) {
    return oldWidths;
  }
  const newWidths = new Map(oldWidths);
  newWidths.set(columnId, newWidth);
  return newWidths;
}
var WidthsContext = (0, import_react52.createContext)({
  getColumnStyles: () => ({}),
  columnWidths: /* @__PURE__ */ new Map(),
  updateColumn: () => {
  },
  setCell: () => {
  }
});
function ColumnWidthsProvider({ visibleColumns, resizableColumns, containerRef, children }) {
  const visibleColumnsRef = (0, import_react52.useRef)(null);
  const containerWidthRef = (0, import_react52.useRef)(0);
  const [columnWidths, setColumnWidths] = (0, import_react52.useState)(null);
  const cellsRef = (0, import_react52.useRef)(/* @__PURE__ */ new Map());
  const stickyCellsRef = (0, import_react52.useRef)(/* @__PURE__ */ new Map());
  const getCell = (columnId) => {
    var _a;
    return (_a = cellsRef.current.get(columnId)) !== null && _a !== void 0 ? _a : null;
  };
  const setCell = (sticky, columnId, node) => {
    const ref = sticky ? stickyCellsRef : cellsRef;
    if (node) {
      ref.current.set(columnId, node);
    } else {
      ref.current.delete(columnId);
    }
  };
  const getColumnStyles = (sticky, columnId) => {
    var _a, _b, _c;
    const column = visibleColumns.find((column2) => column2.id === columnId);
    if (!column) {
      return {};
    }
    if (sticky) {
      return {
        width: ((_a = cellsRef.current.get(column.id)) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width) || ((_b = columnWidths === null || columnWidths === void 0 ? void 0 : columnWidths.get(column.id)) !== null && _b !== void 0 ? _b : column.width)
      };
    }
    if (resizableColumns && columnWidths) {
      const isLastColumn = column.id === ((_c = visibleColumns[visibleColumns.length - 1]) === null || _c === void 0 ? void 0 : _c.id);
      const totalWidth = visibleColumns.reduce((sum, { id }) => sum + (columnWidths.get(id) || DEFAULT_COLUMN_WIDTH), 0);
      if (isLastColumn && containerWidthRef.current > totalWidth) {
        return { width: "auto", minWidth: column === null || column === void 0 ? void 0 : column.minWidth };
      } else {
        return { width: columnWidths.get(column.id), minWidth: column === null || column === void 0 ? void 0 : column.minWidth };
      }
    }
    return {
      width: column.width,
      minWidth: column.minWidth,
      maxWidth: !resizableColumns ? column.maxWidth : void 0
    };
  };
  const updateColumnWidths = useStableCallback(() => {
    for (const { id } of visibleColumns) {
      const element = cellsRef.current.get(id);
      if (element) {
        setElementWidths(element, getColumnStyles(false, id));
      }
    }
    for (const { id } of visibleColumns) {
      const element = stickyCellsRef.current.get(id);
      if (element) {
        setElementWidths(element, getColumnStyles(true, id));
      }
    }
  });
  useResizeObserver(containerRef, ({ contentBoxWidth: containerWidth }) => {
    containerWidthRef.current = containerWidth;
    requestAnimationFrame(() => updateColumnWidths());
  });
  (0, import_react52.useEffect)(() => {
    updateColumnWidths();
    if (!resizableColumns) {
      return;
    }
    let updated = false;
    const newColumnWidths = new Map(columnWidths);
    const lastVisible = visibleColumnsRef.current;
    if (lastVisible) {
      for (let index = 0; index < visibleColumns.length; index++) {
        const column = visibleColumns[index];
        if (!(columnWidths === null || columnWidths === void 0 ? void 0 : columnWidths.get(column.id)) && lastVisible.indexOf(column.id) === -1) {
          updated = true;
          newColumnWidths.set(column.id, column.width || DEFAULT_COLUMN_WIDTH);
        }
      }
      if (updated) {
        setColumnWidths(newColumnWidths);
      }
    }
    visibleColumnsRef.current = visibleColumns.map((column) => column.id);
  }, [columnWidths, resizableColumns, visibleColumns, updateColumnWidths]);
  (0, import_react52.useEffect)(() => {
    if (!resizableColumns) {
      return;
    }
    setColumnWidths(() => readWidths(getCell, visibleColumns));
  }, []);
  function updateColumn(columnId, newWidth) {
    setColumnWidths((columnWidths2) => updateWidths(visibleColumns, columnWidths2 !== null && columnWidths2 !== void 0 ? columnWidths2 : /* @__PURE__ */ new Map(), newWidth, columnId));
  }
  return import_react52.default.createElement(WidthsContext.Provider, { value: { getColumnStyles, columnWidths: columnWidths !== null && columnWidths !== void 0 ? columnWidths : /* @__PURE__ */ new Map(), updateColumn, setCell } }, children);
}
function useColumnWidths() {
  return (0, import_react52.useContext)(WidthsContext);
}

// node_modules/@cloudscape-design/components/table/resizer/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/table/resizer/styles.scoped.css";
var styles_css_default21 = {
  "resize-active": "awsui_resize-active_x7peu_m370p_145",
  "resize-active-with-focus": "awsui_resize-active-with-focus_x7peu_m370p_145",
  "divider": "awsui_divider_x7peu_m370p_150",
  "divider-interactive": "awsui_divider-interactive_x7peu_m370p_151",
  "divider-disabled": "awsui_divider-disabled_x7peu_m370p_165",
  "divider-interactive-disabled": "awsui_divider-interactive-disabled_x7peu_m370p_166",
  "divider-active": "awsui_divider-active_x7peu_m370p_169",
  "divider-interactive-active": "awsui_divider-interactive-active_x7peu_m370p_170",
  "is-visual-refresh": "awsui_is-visual-refresh_x7peu_m370p_174",
  "resizer": "awsui_resizer_x7peu_m370p_178",
  "has-focus": "awsui_has-focus_x7peu_m370p_228",
  "tracker": "awsui_tracker_x7peu_m370p_257"
};

// node_modules/@cloudscape-design/components/table/resizer/resizer-lookup.js
function getResizerElements(resizerElement) {
  if (!resizerElement) {
    return null;
  }
  const header = findUpUntil(resizerElement, (element) => element.tagName.toLowerCase() === "th");
  if (!header) {
    return null;
  }
  const tableRoot = findUpUntil(header, (element) => element.className.indexOf(styles_css_default13.root) > -1);
  if (!tableRoot) {
    return null;
  }
  const table = tableRoot.querySelector(`table`);
  if (!table) {
    return null;
  }
  const tracker = tableRoot.querySelector(`.${styles_css_default21.tracker}`);
  if (!tracker) {
    return null;
  }
  const scrollParent = getOverflowParents(header)[0];
  if (!scrollParent) {
    return null;
  }
  return { header, table, tracker, scrollParent };
}
function getHeaderWidth(resizerElement) {
  const header = resizerElement && findUpUntil(resizerElement, (element) => element.tagName.toLowerCase() === "th");
  return header ? getLogicalBoundingClientRect(header).inlineSize : 0;
}

// node_modules/@cloudscape-design/components/table/resizer/index.js
var AUTO_GROW_START_TIME = 10;
var AUTO_GROW_INTERVAL = 10;
var AUTO_GROW_INCREMENT = 5;
function Divider({ className }) {
  return import_react53.default.createElement("span", { className: clsx_m_default(styles_css_default21.divider, styles_css_default21["divider-disabled"], className) });
}
function Resizer({ onWidthUpdate, onWidthUpdateCommit, ariaLabelledby, minWidth = DEFAULT_COLUMN_WIDTH, tabIndex, showFocusRing, focusId, roleDescription }) {
  onWidthUpdate = useStableCallback(onWidthUpdate);
  onWidthUpdateCommit = useStableCallback(onWidthUpdateCommit);
  const isVisualRefresh = useVisualRefresh();
  const separatorId = useUniqueId();
  const resizerToggleRef = (0, import_react53.useRef)(null);
  const resizerSeparatorRef = (0, import_react53.useRef)(null);
  const [isDragging, setIsDragging] = (0, import_react53.useState)(false);
  const [isKeyboardDragging, setIsKeyboardDragging] = (0, import_react53.useState)(false);
  const autoGrowTimeout = (0, import_react53.useRef)();
  const [resizerHasFocus, setResizerHasFocus] = (0, import_react53.useState)(false);
  const [headerCellWidth, setHeaderCellWidth] = (0, import_react53.useState)(0);
  (0, import_react53.useEffect)(() => {
    setHeaderCellWidth(getHeaderWidth(resizerToggleRef.current));
  }, []);
  (0, import_react53.useEffect)(() => {
    var _a, _b;
    const elements = getResizerElements(resizerToggleRef.current);
    const document2 = (_b = (_a = resizerToggleRef.current) === null || _a === void 0 ? void 0 : _a.ownerDocument) !== null && _b !== void 0 ? _b : window.document;
    if (!isDragging && !resizerHasFocus || !elements) {
      return;
    }
    const { insetInlineStart: inlineStartEdge, insetInlineEnd: inlineEndEdge } = getLogicalBoundingClientRect(elements.scrollParent);
    const updateTrackerPosition = (newOffset) => {
      const { insetInlineStart: scrollParentInsetInlineStart } = getLogicalBoundingClientRect(elements.table);
      elements.tracker.style.insetBlockStart = getLogicalBoundingClientRect(elements.header).blockSize + "px";
      elements.tracker.style.insetInlineStart = newOffset - scrollParentInsetInlineStart - 1 + "px";
    };
    const updateColumnWidth = (newWidth) => {
      const { insetInlineEnd, inlineSize } = getLogicalBoundingClientRect(elements.header);
      const updatedWidth = newWidth < minWidth ? minWidth : newWidth;
      updateTrackerPosition(insetInlineEnd + updatedWidth - inlineSize);
      if (newWidth >= minWidth) {
        setHeaderCellWidth(newWidth);
      }
      onWidthUpdate(newWidth);
    };
    const resizeColumn = (offset) => {
      if (offset > inlineStartEdge) {
        const cellLeft = getLogicalBoundingClientRect(elements.header).insetInlineStart;
        const newWidth = offset - cellLeft;
        updateColumnWidth(newWidth);
      }
    };
    const onAutoGrow = () => {
      const inlineSize = getLogicalBoundingClientRect(elements.header).inlineSize;
      autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_INTERVAL);
      updateColumnWidth(inlineSize + AUTO_GROW_INCREMENT);
      elements.scrollParent.scrollLeft += AUTO_GROW_INCREMENT * (getIsRtl(elements.scrollParent) ? -1 : 1);
    };
    const onMouseMove = (event) => {
      clearTimeout(autoGrowTimeout.current);
      const offset = getLogicalPageX(event);
      if (offset > inlineEndEdge) {
        autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_START_TIME);
      } else {
        resizeColumn(offset);
      }
    };
    const onMouseUp = (event) => {
      resizeColumn(getLogicalPageX(event));
      setIsDragging(false);
      onWidthUpdateCommit();
      clearTimeout(autoGrowTimeout.current);
    };
    const onKeyDown = (event) => {
      if (isKeyboardDragging) {
        const keys = [KeyCode.left, KeyCode.right, KeyCode.enter, KeyCode.right, KeyCode.space, KeyCode.escape];
        if (keys.indexOf(event.keyCode) !== -1) {
          event.preventDefault();
          if (isEventLike(event)) {
            handleKey(event, {
              onActivate: () => {
                var _a2;
                setIsKeyboardDragging(false);
                (_a2 = resizerToggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
              },
              onEscape: () => {
                var _a2;
                setIsKeyboardDragging(false);
                (_a2 = resizerToggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
              },
              onInlineStart: () => updateColumnWidth(getLogicalBoundingClientRect(elements.header).inlineSize - 10),
              onInlineEnd: () => updateColumnWidth(getLogicalBoundingClientRect(elements.header).inlineSize + 10)
            });
          }
        }
      } else if (event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) {
        event.preventDefault();
        if (isEventLike(event)) {
          handleKey(event, {
            onActivate: () => {
              var _a2;
              setIsKeyboardDragging(true);
              (_a2 = resizerSeparatorRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
            }
          });
        }
      }
    };
    updateTrackerPosition(getLogicalBoundingClientRect(elements.header).insetInlineEnd);
    const controller = new AbortController();
    if (isDragging) {
      document2.body.classList.add(styles_css_default21["resize-active"]);
      document2.addEventListener("mousemove", onMouseMove, { signal: controller.signal });
      document2.addEventListener("mouseup", onMouseUp, { signal: controller.signal });
    }
    if (resizerHasFocus) {
      document2.body.classList.add(styles_css_default21["resize-active-with-focus"]);
      elements.header.addEventListener("keydown", onKeyDown, { signal: controller.signal });
    }
    if (isKeyboardDragging) {
      document2.body.classList.add(styles_css_default21["resize-active"]);
    }
    return () => {
      clearTimeout(autoGrowTimeout.current);
      document2.body.classList.remove(styles_css_default21["resize-active"]);
      document2.body.classList.remove(styles_css_default21["resize-active-with-focus"]);
      controller.abort();
    };
  }, [minWidth, isDragging, isKeyboardDragging, resizerHasFocus, onWidthUpdate, onWidthUpdateCommit]);
  const { tabIndex: resizerTabIndex } = useSingleTabStopNavigation(resizerToggleRef, { tabIndex });
  return import_react53.default.createElement(
    import_react53.default.Fragment,
    null,
    import_react53.default.createElement("button", { ref: resizerToggleRef, className: clsx_m_default(styles_css_default21.resizer, (resizerHasFocus || showFocusRing || isKeyboardDragging) && styles_css_default21["has-focus"], isVisualRefresh && styles_css_default21["is-visual-refresh"]), onMouseDown: (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      setIsDragging(true);
    }, onClick: () => {
      var _a;
      setIsDragging(false);
      setResizerHasFocus(true);
      setIsKeyboardDragging(true);
      (_a = resizerSeparatorRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, onFocus: () => {
      setHeaderCellWidth(getHeaderWidth(resizerToggleRef.current));
      setResizerHasFocus(true);
    }, onBlur: (event) => {
      if (event.relatedTarget !== resizerSeparatorRef.current) {
        setResizerHasFocus(false);
      }
    }, "aria-roledescription": roleDescription, "aria-labelledby": ariaLabelledby, tabIndex: resizerTabIndex, "data-focus-id": focusId }),
    import_react53.default.createElement("span", { className: clsx_m_default(styles_css_default21["divider-interactive"], isDragging && styles_css_default21["divider-active"], isVisualRefresh && styles_css_default21["is-visual-refresh"]), "data-awsui-table-suppress-navigation": true, ref: resizerSeparatorRef, id: separatorId, role: "slider", tabIndex: -1, "aria-labelledby": ariaLabelledby, "aria-hidden": !isKeyboardDragging, "aria-valuemin": minWidth, "aria-valuemax": Number.MAX_SAFE_INTEGER, "aria-valuenow": headerCellWidth, "data-focus-id": focusId, onBlur: () => {
      setResizerHasFocus(false);
      if (isKeyboardDragging) {
        setIsKeyboardDragging(false);
      }
      onWidthUpdateCommit();
    } })
  );
}
function ResizeTracker() {
  return import_react53.default.createElement("span", { className: styles_css_default21.tracker });
}

// node_modules/@cloudscape-design/components/table/selection/selection-control.js
var import_react58 = __toESM(require_react());

// node_modules/@cloudscape-design/components/checkbox/internal.js
var import_react56 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/index.js
var import_react54 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/abstract-switch/analytics-metadata/styles.scoped.css";
var styles_css_default22 = {
  "label": "awsui_label_13tpe_9w8pd_5",
  "native-input": "awsui_native-input_13tpe_9w8pd_6"
};

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/abstract-switch/styles.scoped.css";
var styles_css_default23 = {
  "content": "awsui_content_1wepg_fp1bh_145",
  "description": "awsui_description_1wepg_fp1bh_146",
  "label": "awsui_label_1wepg_fp1bh_147",
  "outline": "awsui_outline_1wepg_fp1bh_155",
  "show-outline": "awsui_show-outline_1wepg_fp1bh_158",
  "native-input": "awsui_native-input_1wepg_fp1bh_162",
  "wrapper": "awsui_wrapper_1wepg_fp1bh_166",
  "label-wrapper": "awsui_label-wrapper_1wepg_fp1bh_172",
  "empty-content": "awsui_empty-content_1wepg_fp1bh_183",
  "description-bottom-padding": "awsui_description-bottom-padding_1wepg_fp1bh_193",
  "label-disabled": "awsui_label-disabled_1wepg_fp1bh_201",
  "description-disabled": "awsui_description-disabled_1wepg_fp1bh_202",
  "control": "awsui_control_1wepg_fp1bh_206"
};

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/index.js
function joinString(values) {
  return values.filter((value) => !!value).join(" ");
}
function AbstractSwitch(_a) {
  var { controlId, controlClassName, outlineClassName, showOutline, disabled, readOnly, nativeControl, styledControl, label, description, descriptionBottomPadding, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, onClick, __internalRootRef } = _a, rest = __rest(_a, ["controlId", "controlClassName", "outlineClassName", "showOutline", "disabled", "readOnly", "nativeControl", "styledControl", "label", "description", "descriptionBottomPadding", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "ariaControls", "onClick", "__internalRootRef"]);
  const uniqueId = useUniqueId();
  const id = controlId || uniqueId;
  const labelId = `${id}-label`;
  const descriptionId = `${id}-description`;
  const ariaLabelledByIds = [];
  if (label && !ariaLabel) {
    ariaLabelledByIds.push(labelId);
  }
  if (ariaLabelledby) {
    ariaLabelledByIds.push(ariaLabelledby);
  }
  const ariaDescriptions = [];
  if (ariaDescribedby) {
    ariaDescriptions.push(ariaDescribedby);
  }
  if (description) {
    ariaDescriptions.push(descriptionId);
  }
  return import_react54.default.createElement(
    "span",
    Object.assign({}, rest, { className: clsx_m_default(styles_css_default23.wrapper, rest.className), ref: __internalRootRef }, getAnalyticsLabelAttribute(label ? `.${styles_css_default22.label}` : `.${styles_css_default22["native-input"]}`)),
    import_react54.default.createElement(
      "span",
      Object.assign({ className: styles_css_default23["label-wrapper"], "aria-disabled": disabled ? "true" : void 0, onClick: disabled || readOnly ? void 0 : onClick }, getAnalyticsMetadataAttribute(disabled || readOnly ? {} : {
        action: "select",
        detail: {
          label: label ? `.${styles_css_default22.label}` : `.${styles_css_default22["native-input"]}`
        }
      })),
      import_react54.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default23.control, controlClassName) },
        styledControl,
        nativeControl({
          id,
          disabled,
          className: clsx_m_default(styles_css_default23["native-input"], styles_css_default22["native-input"]),
          "aria-describedby": ariaDescriptions.length ? joinString(ariaDescriptions) : void 0,
          "aria-labelledby": ariaLabelledByIds.length ? joinString(ariaLabelledByIds) : void 0,
          "aria-label": ariaLabel,
          "aria-controls": ariaControls
        }),
        import_react54.default.createElement("span", { className: clsx_m_default(styles_css_default23.outline, outlineClassName, showOutline && styles_css_default23["show-outline"]) })
      ),
      import_react54.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default23.content, !label && !description && styles_css_default23["empty-content"]) },
        label && import_react54.default.createElement("span", { id: labelId, className: clsx_m_default(styles_css_default23.label, styles_css_default22.label, { [styles_css_default23["label-disabled"]]: disabled }) }, label),
        description && import_react54.default.createElement("span", { id: descriptionId, className: clsx_m_default(styles_css_default23.description, {
          [styles_css_default23["description-disabled"]]: disabled,
          [styles_css_default23["description-bottom-padding"]]: descriptionBottomPadding
        }) }, description)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/internal/components/checkbox-icon/index.js
var import_react55 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/checkbox-icon/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/checkbox-icon/styles.scoped.css";
var styles_css_default24 = {
  "root": "awsui_root_1fn7j_t5xe1_145",
  "styled-box": "awsui_styled-box_1fn7j_t5xe1_152",
  "styled-box-checked": "awsui_styled-box-checked_1fn7j_t5xe1_168",
  "styled-box-indeterminate": "awsui_styled-box-indeterminate_1fn7j_t5xe1_168",
  "styled-box-disabled": "awsui_styled-box-disabled_1fn7j_t5xe1_172",
  "styled-box-readonly": "awsui_styled-box-readonly_1fn7j_t5xe1_172",
  "styled-line": "awsui_styled-line_1fn7j_t5xe1_176",
  "styled-line-disabled": "awsui_styled-line-disabled_1fn7j_t5xe1_181",
  "styled-line-readonly": "awsui_styled-line-readonly_1fn7j_t5xe1_184"
};

// node_modules/@cloudscape-design/components/internal/components/checkbox-icon/index.js
var dimensionsByTheme = {
  default: {
    viewBox: "0 0 14 14",
    indeterminate: "2.5,7 11.5,7",
    checked: "2.5,7 6,10 11,3",
    xy: 0.5,
    r: 1.5,
    size: 13
  },
  refresh: {
    viewBox: "0 0 16 16",
    indeterminate: "3.5,8 12.5,8",
    checked: "3.5,8 7,11 12,4",
    xy: 0.5,
    r: 3,
    size: 15
  }
};
var CheckboxIcon = (_a) => {
  var { checked, indeterminate, disabled = false, readOnly = false } = _a, restProps = __rest(_a, ["checked", "indeterminate", "disabled", "readOnly"]);
  const baseProps = getBaseProps(restProps);
  const theme = useVisualRefresh() ? "refresh" : "default";
  const dimensions = dimensionsByTheme[theme];
  return import_react55.default.createElement(
    "svg",
    Object.assign({ className: styles_css_default24.root, viewBox: dimensions.viewBox, "aria-hidden": "true", focusable: "false" }, baseProps),
    import_react55.default.createElement("rect", { className: clsx_m_default(styles_css_default24["styled-box"], {
      [styles_css_default24["styled-box-checked"]]: checked,
      [styles_css_default24["styled-box-indeterminate"]]: indeterminate,
      [styles_css_default24["styled-box-disabled"]]: disabled,
      [styles_css_default24["styled-box-readonly"]]: readOnly
    }), x: dimensions.xy, y: dimensions.xy, rx: dimensions.r, ry: dimensions.r, width: dimensions.size, height: dimensions.size }),
    checked || indeterminate ? import_react55.default.createElement("polyline", { className: clsx_m_default(styles_css_default24["styled-line"], {
      [styles_css_default24["styled-line-disabled"]]: disabled,
      [styles_css_default24["styled-line-readonly"]]: readOnly
    }), points: indeterminate ? dimensions.indeterminate : dimensions.checked }) : null
  );
};
var checkbox_icon_default = CheckboxIcon;

// node_modules/@cloudscape-design/components/checkbox/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/checkbox/styles.scoped.css";
var styles_css_default25 = {
  "root": "awsui_root_k2y2q_hm19d_145",
  "checkbox-control": "awsui_checkbox-control_k2y2q_hm19d_178",
  "outline": "awsui_outline_k2y2q_hm19d_186"
};

// node_modules/@cloudscape-design/components/checkbox/internal.js
var InternalCheckbox = import_react56.default.forwardRef((_a, ref) => {
  var { controlId, name, checked, disabled, readOnly, ariaRequired, indeterminate, children, description, ariaLabel, onFocus, onBlur, onChange, tabIndex: explicitTabIndex, showOutline, ariaControls, __internalRootRef, __injectAnalyticsComponentMetadata = false } = _a, rest = __rest(_a, ["controlId", "name", "checked", "disabled", "readOnly", "ariaRequired", "indeterminate", "children", "description", "ariaLabel", "onFocus", "onBlur", "onChange", "tabIndex", "showOutline", "ariaControls", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const checkboxRef = (0, import_react56.useRef)(null);
  useForwardFocus(ref, checkboxRef);
  (0, import_react56.useEffect)(() => {
    if (checkboxRef.current) {
      checkboxRef.current.indeterminate = Boolean(indeterminate);
    }
  });
  const { tabIndex } = useSingleTabStopNavigation(checkboxRef, { tabIndex: explicitTabIndex });
  const analyticsMetadata = {};
  const analyticsComponentMetadata = {
    name: "awsui.Checkbox",
    label: { root: "self" }
  };
  if (__injectAnalyticsComponentMetadata) {
    analyticsMetadata.component = analyticsComponentMetadata;
  }
  if (!disabled && !readOnly) {
    analyticsMetadata.action = !checked ? "select" : "deselect";
  }
  return import_react56.default.createElement(AbstractSwitch, Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default25.root, baseProps.className), controlClassName: styles_css_default25["checkbox-control"], outlineClassName: styles_css_default25.outline, controlId, disabled, readOnly, label: children, description, descriptionBottomPadding: true, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, showOutline, nativeControl: (nativeControlProps) => import_react56.default.createElement("input", Object.assign({}, nativeControlProps, {
    ref: checkboxRef,
    type: "checkbox",
    checked,
    name,
    "aria-required": ariaRequired ? "true" : void 0,
    "aria-disabled": readOnly && !disabled ? "true" : void 0,
    tabIndex,
    onFocus: () => fireNonCancelableEvent(onFocus),
    onBlur: () => fireNonCancelableEvent(onBlur),
    // empty handler to suppress React controllability warning
    onChange: () => {
    }
  })), onClick: () => {
    var _a2;
    (_a2 = checkboxRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    fireNonCancelableEvent(
      onChange,
      // for deterministic transitions "indeterminate" -> "checked" -> "unchecked"
      indeterminate ? { checked: true, indeterminate: false } : { checked: !checked, indeterminate: false }
    );
  }, styledControl: import_react56.default.createElement(checkbox_icon_default, { checked, indeterminate, disabled, readOnly }), __internalRootRef }, getAnalyticsMetadataAttribute(analyticsMetadata)));
});
var internal_default6 = InternalCheckbox;

// node_modules/@cloudscape-design/components/radio-group/radio-button.js
var import_react57 = __toESM(require_react());

// node_modules/@cloudscape-design/components/radio-group/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/radio-group/styles.scoped.css";
var styles_css_default26 = {
  "root": "awsui_root_1mabk_es0cz_145",
  "radio": "awsui_radio_1mabk_es0cz_178",
  "radio--has-description": "awsui_radio--has-description_1mabk_es0cz_186",
  "radio-control": "awsui_radio-control_1mabk_es0cz_190",
  "outline": "awsui_outline_1mabk_es0cz_198",
  "styled-circle-border": "awsui_styled-circle-border_1mabk_es0cz_220",
  "styled-circle-disabled": "awsui_styled-circle-disabled_1mabk_es0cz_224",
  "styled-circle-readonly": "awsui_styled-circle-readonly_1mabk_es0cz_224",
  "styled-circle-fill": "awsui_styled-circle-fill_1mabk_es0cz_229",
  "styled-circle-checked": "awsui_styled-circle-checked_1mabk_es0cz_245"
};

// node_modules/@cloudscape-design/components/radio-group/radio-button.js
var radio_button_default = import_react57.default.forwardRef(function RadioButton(_a, ref) {
  var { name, label, value, checked, description, disabled, controlId, onChange, readOnly, className } = _a, rest = __rest(_a, ["name", "label", "value", "checked", "description", "disabled", "controlId", "onChange", "readOnly", "className"]);
  const radioButtonRef = (0, import_react57.useRef)(null);
  const mergedRefs = useMergeRefs(radioButtonRef, ref);
  const { tabIndex } = useSingleTabStopNavigation(radioButtonRef);
  return import_react57.default.createElement(AbstractSwitch, Object.assign({ className: clsx_m_default(styles_css_default26.radio, description && styles_css_default26["radio--has-description"], className), controlClassName: styles_css_default26["radio-control"], outlineClassName: styles_css_default26.outline, label, description, disabled, readOnly, controlId }, copyAnalyticsMetadataAttribute(rest), { nativeControl: (nativeControlProps) => import_react57.default.createElement("input", Object.assign({}, nativeControlProps, {
    tabIndex,
    type: "radio",
    ref: mergedRefs,
    name,
    value,
    checked,
    "aria-disabled": readOnly && !disabled ? "true" : void 0,
    // empty handler to suppress React controllability warning
    onChange: () => {
    }
  })), onClick: () => {
    var _a2;
    (_a2 = radioButtonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    if (checked) {
      return;
    }
    fireNonCancelableEvent(onChange, { value });
  }, styledControl: import_react57.default.createElement(
    "svg",
    { viewBox: "0 0 100 100", focusable: "false", "aria-hidden": "true" },
    import_react57.default.createElement("circle", { className: clsx_m_default(styles_css_default26["styled-circle-border"], {
      [styles_css_default26["styled-circle-disabled"]]: disabled,
      [styles_css_default26["styled-circle-readonly"]]: readOnly
    }), strokeWidth: 6.25, cx: 50, cy: 50, r: 46 }),
    import_react57.default.createElement("circle", { className: clsx_m_default(styles_css_default26["styled-circle-fill"], {
      [styles_css_default26["styled-circle-disabled"]]: disabled,
      [styles_css_default26["styled-circle-checked"]]: checked,
      [styles_css_default26["styled-circle-readonly"]]: readOnly
    }), strokeWidth: 30, cx: 50, cy: 50, r: 35 })
  ) }));
});

// node_modules/@cloudscape-design/components/table/selection/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/table/selection/styles.scoped.css";
var styles_css_default27 = {
  "root": "awsui_root_1s55x_14pps_145",
  "label": "awsui_label_1s55x_14pps_149",
  "label-top": "awsui_label-top_1s55x_14pps_163",
  "stud": "awsui_stud_1s55x_14pps_168"
};

// node_modules/@cloudscape-design/components/table/selection/selection-control.js
function SelectionControl(_a) {
  var { selectionType, indeterminate = false, onShiftToggle, onFocusUp, onFocusDown, name, ariaLabel, focusedComponent, rowIndex, itemKey, verticalAlign = "middle" } = _a, sharedProps = __rest(_a, ["selectionType", "indeterminate", "onShiftToggle", "onFocusUp", "onFocusDown", "name", "ariaLabel", "focusedComponent", "rowIndex", "itemKey", "verticalAlign"]);
  const controlId = useUniqueId();
  const isMultiSelection = selectionType === "multi";
  const { navigationActive } = (0, import_react58.useContext)(SingleTabStopNavigationContext);
  const setShiftState = (event) => {
    if (isMultiSelection) {
      onShiftToggle === null || onShiftToggle === void 0 ? void 0 : onShiftToggle(event.shiftKey);
    }
  };
  const onMouseDownHandler = (event) => {
    setShiftState(event);
    if (isMultiSelection) {
      event.preventDefault();
    }
  };
  const handleKeyDown = (event) => {
    setShiftState(event);
    if (isMultiSelection && !navigationActive) {
      if (event.keyCode === KeyCode.up) {
        event.preventDefault();
        onFocusUp === null || onFocusUp === void 0 ? void 0 : onFocusUp(event);
      }
      if (event.keyCode === KeyCode.down) {
        event.preventDefault();
        onFocusDown === null || onFocusDown === void 0 ? void 0 : onFocusDown(event);
      }
    }
  };
  const handleClick = (event) => {
    const target = event.currentTarget;
    const nativeInput = target.tagName === "INPUT" ? target : target.querySelector("input");
    nativeInput === null || nativeInput === void 0 ? void 0 : nativeInput.focus();
  };
  const selector = isMultiSelection ? import_react58.default.createElement(internal_default6, Object.assign({}, sharedProps, { showOutline: focusedComponent === "selection-control", controlId, "data-focus-id": "selection-control", indeterminate })) : import_react58.default.createElement(radio_button_default, Object.assign({}, sharedProps, { controlId, name, value: "", label: "" }));
  return import_react58.default.createElement(
    import_react58.default.Fragment,
    null,
    import_react58.default.createElement("label", Object.assign({ onKeyDown: handleKeyDown, onKeyUp: setShiftState, onMouseDown: onMouseDownHandler, onMouseUp: setShiftState, onClick: handleClick, htmlFor: controlId, className: clsx_m_default(styles_css_default27.label, styles_css_default27.root, verticalAlign === "top" && styles_css_default27["label-top"]), "aria-label": ariaLabel, title: ariaLabel }, rowIndex !== void 0 && !sharedProps.disabled ? getAnalyticsMetadataAttribute({
      detail: {
        position: `${rowIndex + 1}`,
        item: itemKey || ""
      }
    }) : {}), selector),
    import_react58.default.createElement("span", { className: styles_css_default27.stud, "aria-hidden": true }, " ")
  );
}

// node_modules/@cloudscape-design/components/table/selection/use-selection-focus-move.js
function useSelectionFocusMove(selectionType, totalItems) {
  if (selectionType !== "multi") {
    return {};
  }
  function moveFocus(sourceElement, fromIndex, direction) {
    let index = fromIndex;
    const rootContainer = findRootContainer(sourceElement);
    while (index >= -1 && index < totalItems) {
      index += direction;
      const control = findSelectionControlByIndex(rootContainer, index);
      if (control && !control.disabled) {
        control.focus();
        break;
      }
    }
  }
  const [moveFocusDown, moveFocusUp] = [1, -1].map((direction) => {
    return (event) => {
      const target = event.currentTarget;
      const itemNode = findUpUntil(target, (node) => node.dataset.selectionItem === "item");
      const fromIndex = Array.prototype.indexOf.call(itemNode.parentElement.children, itemNode);
      moveFocus(target, fromIndex, direction);
    };
  });
  return {
    moveFocusDown,
    moveFocusUp,
    moveFocus
  };
}
function findSelectionControlByIndex(rootContainer, index) {
  if (index === -1) {
    return rootContainer.querySelector(`[data-${SELECTION_ITEM}="all"] .${styles_css_default27.root} input`);
  }
  return rootContainer.querySelectorAll(`[data-${SELECTION_ITEM}="item"] .${styles_css_default27.root} input`)[index];
}
function findRootContainer(element) {
  return findUpUntil(element, (node) => node.dataset.selectionRoot === "true");
}

// node_modules/@cloudscape-design/components/table/selection/use-selection.js
var import_react59 = __toESM(require_react());
function useSelection(options) {
  const singleSelectionProps = useSingleSelection(options);
  const multiSelectionProps = useMultiSelection(options);
  return options.selectionType === "single" ? singleSelectionProps : multiSelectionProps;
}
function useSingleSelection({ ariaLabels, isItemDisabled = () => false, onSelectionChange, selectedItems = [], selectionType, trackBy, setLastUserAction }) {
  const selectionControlName = useUniqueId();
  if (selectionType !== "single") {
    return { isItemSelected: () => false };
  }
  const selectedSet = new ItemSet(trackBy, selectedItems.slice(0, 1));
  const isItemSelected = selectedSet.has.bind(selectedSet);
  const handleToggleItem = (item) => {
    if (!isItemDisabled(item) && !isItemSelected(item)) {
      fireNonCancelableEvent(onSelectionChange, { selectedItems: [item] });
      setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("selection");
    }
  };
  return {
    isItemSelected,
    getItemSelectionProps: (item) => {
      var _a;
      return {
        name: selectionControlName,
        selectionType: "single",
        disabled: isItemDisabled(item),
        checked: isItemSelected(item),
        onChange: () => handleToggleItem(item),
        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.itemSelectionLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, { selectedItems }, item))
      };
    }
  };
}
function useMultiSelection({ ariaLabels, isItemDisabled = () => false, items, loading, onSelectionChange, selectedItems = [], selectionType, trackBy, setLastUserAction }) {
  const selectionControlName = useUniqueId();
  const [shiftPressed, setShiftPressed] = (0, import_react59.useState)(false);
  const [lastClickedItem, setLastClickedItem] = (0, import_react59.useState)(null);
  if (selectionType !== "multi") {
    return { isItemSelected: () => false };
  }
  const selectedSet = new ItemSet(trackBy, selectedItems);
  const isItemSelected = selectedSet.has.bind(selectedSet);
  let allItemsDisabled = true;
  let allEnabledItemsSelected = true;
  for (const item of items) {
    allItemsDisabled = allItemsDisabled && isItemDisabled(item);
    allEnabledItemsSelected = allEnabledItemsSelected && (isItemSelected(item) || isItemDisabled(item));
  }
  const allItemsCheckboxSelected = selectedItems.length > 0 && allEnabledItemsSelected;
  const allItemsCheckboxIndeterminate = selectedItems.length > 0 && !allEnabledItemsSelected;
  const itemIndexesMap = /* @__PURE__ */ new Map();
  items.forEach((item, i) => itemIndexesMap.set(getTrackableValue(trackBy, item), i));
  const getShiftSelectedItems = (item) => {
    const lastClickedItemIndex = lastClickedItem ? itemIndexesMap.get(getTrackableValue(trackBy, lastClickedItem)) : void 0;
    if (lastClickedItemIndex !== void 0) {
      const currentItemIndex = itemIndexesMap.get(getTrackableValue(trackBy, item));
      const start = Math.min(currentItemIndex, lastClickedItemIndex);
      const end = Math.max(currentItemIndex, lastClickedItemIndex);
      return items.slice(start, end + 1);
    }
    return [item];
  };
  const selectItems = (requestedItems) => {
    const newSelectedItems = [...selectedItems];
    requestedItems.forEach((newItem) => {
      if (!isItemSelected(newItem) && !isItemDisabled(newItem)) {
        newSelectedItems.push(newItem);
      }
    });
    return newSelectedItems;
  };
  const deselectItems = (requestedItems) => {
    const requestedItemsSet = new ItemSet(trackBy, requestedItems);
    const newSelectedItems = [];
    selectedItems.forEach((selectedItem) => {
      const shouldUnselect = requestedItemsSet.has(selectedItem);
      if (!shouldUnselect || isItemDisabled(selectedItem)) {
        newSelectedItems.push(selectedItem);
      }
    });
    return newSelectedItems;
  };
  const handleToggleAll = () => {
    const newSelectedItems = allEnabledItemsSelected ? deselectItems(items) : selectItems(items);
    fireNonCancelableEvent(onSelectionChange, { selectedItems: newSelectedItems });
    setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("selection");
  };
  const handleToggleItem = (item) => {
    if (!isItemDisabled(item)) {
      const requestedItems = shiftPressed ? getShiftSelectedItems(item) : [item];
      const selectedItems2 = isItemSelected(item) ? deselectItems(requestedItems) : selectItems(requestedItems);
      fireNonCancelableEvent(onSelectionChange, { selectedItems: selectedItems2 });
      setLastClickedItem(item);
      setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("selection");
    }
  };
  return {
    isItemSelected,
    getSelectAllProps: () => {
      var _a;
      return {
        name: selectionControlName,
        selectionType: "multi",
        disabled: allItemsDisabled || !!loading,
        checked: allItemsCheckboxSelected,
        indeterminate: allItemsCheckboxIndeterminate,
        onChange: handleToggleAll,
        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.allItemsSelectionLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, { selectedItems })),
        selectionGroupLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel
      };
    },
    getItemSelectionProps: (item) => {
      var _a;
      return {
        name: selectionControlName,
        selectionType: "multi",
        disabled: isItemDisabled(item),
        checked: isItemSelected(item),
        onChange: () => handleToggleItem(item),
        onShiftToggle: (value) => setShiftPressed(value),
        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.itemSelectionLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, { selectedItems }, item))
      };
    }
  };
}

// node_modules/@cloudscape-design/components/table/selection/selection-cell.js
var import_react62 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/screenreader-only/index.js
var import_react60 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/screenreader-only/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/internal/components/screenreader-only/styles.scoped.css";
var styles_css_default28 = {
  "root": "awsui_root_xttbq_1rjuy_145"
};

// node_modules/@cloudscape-design/components/internal/components/screenreader-only/index.js
function ScreenreaderOnly(props) {
  return import_react60.default.createElement("span", Object.assign({}, props, { className: clsx_m_default(styles_css_default28.root, props.className) }));
}

// node_modules/@cloudscape-design/components/table/header-cell/th-element.js
var import_react61 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/header-cell/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/table/header-cell/styles.scoped.css";
var styles_css_default29 = {
  "header-cell": "awsui_header-cell_1spae_wii4_149",
  "header-cell-fake-focus": "awsui_header-cell-fake-focus_1spae_wii4_183",
  "header-cell-sticky": "awsui_header-cell-sticky_1spae_wii4_204",
  "header-cell-stuck": "awsui_header-cell-stuck_1spae_wii4_207",
  "header-cell-variant-full-page": "awsui_header-cell-variant-full-page_1spae_wii4_207",
  "header-cell-hidden": "awsui_header-cell-hidden_1spae_wii4_213",
  "header-cell-variant-embedded": "awsui_header-cell-variant-embedded_1spae_wii4_216",
  "is-visual-refresh": "awsui_is-visual-refresh_1spae_wii4_216",
  "sticky-cell": "awsui_sticky-cell_1spae_wii4_216",
  "header-cell-variant-borderless": "awsui_header-cell-variant-borderless_1spae_wii4_216",
  "header-cell-sortable": "awsui_header-cell-sortable_1spae_wii4_219",
  "table-variant-full-page": "awsui_table-variant-full-page_1spae_wii4_240",
  "sticky-cell-pad-left": "awsui_sticky-cell-pad-left_1spae_wii4_243",
  "has-selection": "awsui_has-selection_1spae_wii4_243",
  "sticky-cell-last-inline-start": "awsui_sticky-cell-last-inline-start_1spae_wii4_246",
  "resize-divider": "awsui_resize-divider_1spae_wii4_251",
  "sticky-cell-last-inline-end": "awsui_sticky-cell-last-inline-end_1spae_wii4_258",
  "sorting-icon": "awsui_sorting-icon_1spae_wii4_268",
  "edit-icon": "awsui_edit-icon_1spae_wii4_276",
  "header-cell-content": "awsui_header-cell-content_1spae_wii4_282",
  "header-cell-content-expandable": "awsui_header-cell-content-expandable_1spae_wii4_288",
  "header-cell-disabled": "awsui_header-cell-disabled_1spae_wii4_340",
  "header-cell-sorted": "awsui_header-cell-sorted_1spae_wii4_340",
  "header-cell-text": "awsui_header-cell-text_1spae_wii4_354",
  "header-cell-text-wrap": "awsui_header-cell-text-wrap_1spae_wii4_358",
  "header-cell-ascending": "awsui_header-cell-ascending_1spae_wii4_364",
  "header-cell-descending": "awsui_header-cell-descending_1spae_wii4_365",
  "has-striped-rows": "awsui_has-striped-rows_1spae_wii4_479",
  "sticky-cell-pad-inline-start": "awsui_sticky-cell-pad-inline-start_1spae_wii4_479",
  "header-cell-resizable": "awsui_header-cell-resizable_1spae_wii4_491"
};

// node_modules/@cloudscape-design/components/table/header-cell/th-element.js
function TableThElement(_a) {
  var { resizableStyle, sortingStatus, sortingDisabled, focusedComponent, stuck, sticky, resizable, hidden, stripedRows, isSelection, colIndex, columnId, stickyState, cellRef, tableRole, children, variant, ariaLabel, tableVariant } = _a, props = __rest(_a, ["resizableStyle", "sortingStatus", "sortingDisabled", "focusedComponent", "stuck", "sticky", "resizable", "hidden", "stripedRows", "isSelection", "colIndex", "columnId", "stickyState", "cellRef", "tableRole", "children", "variant", "ariaLabel", "tableVariant"]);
  const isVisualRefresh = useVisualRefresh();
  const stickyStyles = useStickyCellStyles({
    stickyColumns: stickyState,
    columnId,
    getClassName: (props2) => getStickyClassNames(styles_css_default29, props2)
  });
  const cellRefObject = (0, import_react61.useRef)(null);
  const mergedRef = useMergeRefs(stickyStyles.ref, cellRef, cellRefObject);
  const { tabIndex: cellTabIndex } = useSingleTabStopNavigation(cellRefObject);
  return import_react61.default.createElement("th", Object.assign({ "data-focus-id": `header-${String(columnId)}`, className: clsx_m_default(styles_css_default29["header-cell"], styles_css_default29[`header-cell-variant-${variant}`], sticky && styles_css_default29["header-cell-sticky"], resizable && styles_css_default29["header-cell-resizable"], stuck && styles_css_default29["header-cell-stuck"], stripedRows && styles_css_default29["has-striped-rows"], isVisualRefresh && styles_css_default29["is-visual-refresh"], isSelection && clsx_m_default(styles_css_default13["selection-control"], styles_css_default13["selection-control-header"]), tableVariant && styles_css_default29[`table-variant-${tableVariant}`], {
    [styles_css_default29["header-cell-fake-focus"]]: focusedComponent === `header-${String(columnId)}`,
    [styles_css_default29["header-cell-sortable"]]: sortingStatus,
    [styles_css_default29["header-cell-sorted"]]: sortingStatus === "ascending" || sortingStatus === "descending",
    [styles_css_default29["header-cell-disabled"]]: sortingDisabled,
    [styles_css_default29["header-cell-ascending"]]: sortingStatus === "ascending",
    [styles_css_default29["header-cell-descending"]]: sortingStatus === "descending",
    [styles_css_default29["header-cell-hidden"]]: hidden
  }, stickyStyles.className), style: Object.assign(Object.assign({}, resizableStyle), stickyStyles.style), ref: mergedRef }, getTableColHeaderRoleProps({ tableRole, sortingStatus, colIndex }), { tabIndex: cellTabIndex === -1 ? void 0 : cellTabIndex }, copyAnalyticsMetadataAttribute(props), ariaLabel ? { "aria-label": ariaLabel } : {}), children);
}

// node_modules/@cloudscape-design/components/table/selection/selection-cell.js
function TableHeaderSelectionCell(_a) {
  var { focusedComponent, singleSelectionHeaderAriaLabel, getSelectAllProps, onFocusMove } = _a, props = __rest(_a, ["focusedComponent", "singleSelectionHeaderAriaLabel", "getSelectAllProps", "onFocusMove"]);
  const selectAllProps = getSelectAllProps ? getSelectAllProps() : void 0;
  return import_react62.default.createElement(
    TableThElement,
    Object.assign({}, props, { isSelection: true, colIndex: 0, focusedComponent, ariaLabel: selectAllProps === null || selectAllProps === void 0 ? void 0 : selectAllProps.selectionGroupLabel }, getAnalyticsMetadataAttribute({
      action: (selectAllProps === null || selectAllProps === void 0 ? void 0 : selectAllProps.checked) ? "deselectAll" : "selectAll"
    })),
    selectAllProps ? import_react62.default.createElement(SelectionControl, Object.assign({ onFocusDown: (event) => {
      onFocusMove(event.target, -1, 1);
    }, focusedComponent }, selectAllProps, props.sticky ? { tabIndex: -1 } : {})) : import_react62.default.createElement(ScreenreaderOnly, null, singleSelectionHeaderAriaLabel),
    import_react62.default.createElement(Divider, { className: styles_css_default13["resize-divider"] })
  );
}
function TableBodySelectionCell(_a) {
  var { selectionControlProps } = _a, props = __rest(_a, ["selectionControlProps"]);
  return import_react62.default.createElement(TableTdElement, Object.assign({}, props, { isSelection: true, wrapLines: false, isEditable: false, isEditing: false, colIndex: 0 }), selectionControlProps ? import_react62.default.createElement(SelectionControl, Object.assign({}, selectionControlProps, { verticalAlign: props.verticalAlign })) : null);
}

// node_modules/@cloudscape-design/components/table/sticky-header.js
var import_react66 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/thead.js
var import_react64 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/header-cell/index.js
var import_react63 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/analytics-metadata/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/table/analytics-metadata/styles.scoped.css";
var styles_css_default30 = {
  "header-cell-text": "awsui_header-cell-text_dpuyq_1id1o_5"
};

// node_modules/@cloudscape-design/components/table/header-cell/index.js
function TableHeaderCell({ tabIndex, column, activeSortingColumn, sortingDescending, sortingDisabled, wrapLines, focusedComponent, stuck, sticky, hidden, stripedRows, onClick, colIndex, updateColumn, resizableColumns, resizableStyle, onResizeFinish, isEditable, columnId, stickyState, cellRef, tableRole, resizerRoleDescription, isExpandable, hasDynamicContent, variant, tableVariant }) {
  var _a;
  const i18n = useInternalI18n("table");
  const sortable = !!column.sortingComparator || !!column.sortingField;
  const sorted = !!activeSortingColumn && isSorted(column, activeSortingColumn);
  const sortingStatus = getSortingStatus(sortable, sorted, !!sortingDescending, !!sortingDisabled);
  const handleClick = () => onClick({
    sortingColumn: column,
    isDescending: sorted ? !sortingDescending : false
  });
  const handleKeyPress = ({ nativeEvent: e }) => {
    if (e.keyCode === KeyCode.enter || e.keyCode === KeyCode.space) {
      e.preventDefault();
      handleClick();
    }
  };
  const headerId = useUniqueId("table-header-");
  const clickableHeaderRef = (0, import_react63.useRef)(null);
  const { tabIndex: clickableHeaderTabIndex } = useSingleTabStopNavigation(clickableHeaderRef, { tabIndex });
  const cellRefObject = (0, import_react63.useRef)(null);
  const cellRefCombined = useMergeRefs(cellRef, cellRefObject);
  useResizeObserver(hasDynamicContent ? cellRefObject : () => null, (entry) => {
    updateColumn(columnId, entry.borderBoxWidth);
  });
  return import_react63.default.createElement(
    TableThElement,
    Object.assign({ resizableStyle, cellRef: cellRefCombined, sortingStatus, sortingDisabled, focusedComponent, stuck, sticky, resizable: resizableColumns, hidden, stripedRows, colIndex, columnId, stickyState, tableRole, variant, tableVariant }, sortingDisabled ? {} : getAnalyticsMetadataAttribute({
      action: "sort",
      detail: {
        position: `${colIndex + 1}`,
        columnId: column.id ? `${column.id}` : "",
        label: `.${styles_css_default30["header-cell-text"]}`,
        sortingDescending: `${!sortingDescending}`
      }
    })),
    import_react63.default.createElement(
      "div",
      Object.assign({ ref: clickableHeaderRef, "data-focus-id": `sorting-control-${String(columnId)}`, className: clsx_m_default(styles_css_default29["header-cell-content"], {
        [styles_css_default29["header-cell-fake-focus"]]: focusedComponent === `sorting-control-${String(columnId)}`,
        [styles_css_default29["header-cell-content-expandable"]]: isExpandable
      }), "aria-label": column.ariaLabel ? column.ariaLabel({
        sorted,
        descending: sorted && !!sortingDescending,
        disabled: !!sortingDisabled
      }) : void 0 }, sortingStatus && !sortingDisabled ? {
        onKeyPress: handleKeyPress,
        tabIndex: clickableHeaderTabIndex,
        role: "button",
        onClick: handleClick
      } : {}),
      import_react63.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default29["header-cell-text"], styles_css_default30["header-cell-text"], wrapLines && styles_css_default29["header-cell-text-wrap"]), id: headerId },
        column.header,
        isEditable ? import_react63.default.createElement(
          "span",
          { className: styles_css_default29["edit-icon"] },
          import_react63.default.createElement(internal_default2, { name: "edit", ariaLabel: i18n("columnDefinitions.editConfig.editIconAriaLabel", (_a = column.editConfig) === null || _a === void 0 ? void 0 : _a.editIconAriaLabel) })
        ) : null
      ),
      sortingStatus && import_react63.default.createElement(
        "span",
        { className: styles_css_default29["sorting-icon"] },
        import_react63.default.createElement(internal_default2, { name: getSortingIconName(sortingStatus) })
      )
    ),
    resizableColumns ? import_react63.default.createElement(Resizer, { tabIndex, focusId: `resize-control-${String(columnId)}`, showFocusRing: focusedComponent === `resize-control-${String(columnId)}`, onWidthUpdate: (newWidth) => updateColumn(columnId, newWidth), onWidthUpdateCommit: onResizeFinish, ariaLabelledby: headerId, minWidth: typeof column.minWidth === "string" ? parseInt(column.minWidth) : column.minWidth, roleDescription: i18n("ariaLabels.resizerRoleDescription", resizerRoleDescription) }) : import_react63.default.createElement(Divider, { className: styles_css_default29["resize-divider"] })
  );
}

// node_modules/@cloudscape-design/components/table/thead.js
var Thead = import_react64.default.forwardRef(({ selectionType, getSelectAllProps, columnDefinitions, sortingColumn, sortingDisabled, sortingDescending, resizableColumns, variant, tableVariant, wrapLines, onFocusMove, onSortingChange, onResizeFinish, singleSelectionHeaderAriaLabel, stripedRows, sticky = false, hidden = false, stuck = false, stickyState, selectionColumnId: selectionColumnId2, focusedComponent, onFocusedComponentChange, tableRole, resizerRoleDescription, isExpandable, setLastUserAction }, outerRef) => {
  const { getColumnStyles, columnWidths, updateColumn, setCell } = useColumnWidths();
  const commonCellProps = {
    stuck,
    sticky,
    hidden,
    stripedRows,
    tableRole,
    variant,
    tableVariant,
    stickyState
  };
  return import_react64.default.createElement(
    "thead",
    { className: clsx_m_default(!hidden && styles_css_default13["thead-active"]) },
    import_react64.default.createElement(
      "tr",
      Object.assign({}, focusMarkers.all, { ref: outerRef, "aria-rowindex": 1 }, getTableHeaderRowRoleProps({ tableRole }), { onFocus: (event) => {
        var _a;
        const focusControlElement = findUpUntil(event.target, (element) => !!element.getAttribute("data-focus-id"));
        const focusId = (_a = focusControlElement === null || focusControlElement === void 0 ? void 0 : focusControlElement.getAttribute("data-focus-id")) !== null && _a !== void 0 ? _a : null;
        onFocusedComponentChange === null || onFocusedComponentChange === void 0 ? void 0 : onFocusedComponentChange(focusId);
      }, onBlur: () => onFocusedComponentChange === null || onFocusedComponentChange === void 0 ? void 0 : onFocusedComponentChange(null) }),
      selectionType ? import_react64.default.createElement(TableHeaderSelectionCell, Object.assign({}, commonCellProps, { focusedComponent, columnId: selectionColumnId2, getSelectAllProps, onFocusMove, singleSelectionHeaderAriaLabel })) : null,
      columnDefinitions.map((column, colIndex) => {
        const columnId = getColumnKey(column, colIndex);
        return import_react64.default.createElement(TableHeaderCell, Object.assign({}, commonCellProps, {
          key: columnId,
          tabIndex: sticky ? -1 : 0,
          focusedComponent,
          column,
          activeSortingColumn: sortingColumn,
          sortingDescending,
          sortingDisabled,
          wrapLines,
          colIndex: selectionType ? colIndex + 1 : colIndex,
          columnId,
          updateColumn,
          onResizeFinish: () => onResizeFinish(columnWidths),
          resizableColumns,
          resizableStyle: getColumnStyles(sticky, columnId),
          onClick: (detail) => {
            setLastUserAction("sorting");
            fireNonCancelableEvent(onSortingChange, detail);
          },
          isEditable: !!column.editConfig,
          cellRef: (node) => setCell(sticky, columnId, node),
          tableRole,
          resizerRoleDescription,
          // Expandable option is only applicable to the first data column of the table.
          // When present, the header content receives extra padding to match the first offset in the data cells.
          isExpandable: colIndex === 0 && isExpandable,
          hasDynamicContent: hidden && !resizableColumns && column.hasDynamicContent
        }));
      })
    )
  );
});
var thead_default = Thead;

// node_modules/@cloudscape-design/components/table/use-sticky-header.js
var import_react65 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/sticky-scrolling.js
function stickyScrolling(containerRef, stickyRef) {
  const scrollToTop = () => {
    if (!containerRef.current || !stickyRef.current) {
      return;
    }
    const scrollingOffset = calculateScrollingOffset(containerRef.current, stickyRef.current);
    if (scrollingOffset > 0) {
      scrollUpBy(scrollingOffset, containerRef.current);
    }
  };
  const scrollToItem = (item) => {
    if (!item || !containerRef.current || !stickyRef.current) {
      return;
    }
    const stickyBottom = getLogicalBoundingClientRect(stickyRef.current).insetBlockEnd;
    const scrollingOffset = stickyBottom - getLogicalBoundingClientRect(item).insetBlockStart;
    if (scrollingOffset > 0) {
      scrollUpBy(scrollingOffset, containerRef.current);
    }
  };
  return {
    scrollToTop,
    scrollToItem
  };
}
function calculateScrollingOffset(container, sticky) {
  const stickyRect = getLogicalBoundingClientRect(sticky);
  const containerRect = getLogicalBoundingClientRect(container);
  return stickyRect.insetBlockStart - containerRect.insetBlockStart;
}
function scrollUpBy(amount, container) {
  const parent = getOverflowParents(container);
  if (parent.length) {
    parent[0].scrollTop -= amount;
  } else {
    window.scrollTo({ top: window.pageYOffset - amount });
  }
}

// node_modules/@cloudscape-design/components/table/use-sticky-header.js
var useStickyHeader = (tableRef, theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef) => {
  const isMobile = useMobile();
  const syncColumnHeaderWidths = (0, import_react65.useCallback)(() => {
    if (tableRef.current && theadRef.current && secondaryTheadRef.current && secondaryTableRef.current && tableWrapperRef.current) {
      secondaryTableRef.current.style.inlineSize = `${tableRef.current.getBoundingClientRect().width}px`;
      tableWrapperRef.current.style.marginBlockStart = `-${theadRef.current.getBoundingClientRect().height}px`;
    }
  }, [theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef, tableRef]);
  (0, import_react65.useLayoutEffect)(() => {
    syncColumnHeaderWidths();
  });
  useResizeObserver(theadRef, syncColumnHeaderWidths);
  const scrollToTop = () => {
    if (!isMobile && theadRef.current && secondaryTheadRef.current && tableWrapperRef.current) {
      const scrollDist = calculateScrollingOffset(theadRef.current, secondaryTheadRef.current);
      if (scrollDist > 0) {
        scrollUpBy(scrollDist, tableWrapperRef.current);
      }
    }
  };
  const { scrollToItem } = stickyScrolling(tableWrapperRef, secondaryTheadRef);
  const scrollToRow = (itemNode) => {
    if (!isMobile) {
      scrollToItem(itemNode);
    }
  };
  return { scrollToRow, scrollToTop };
};

// node_modules/@cloudscape-design/components/table/sticky-header.js
var sticky_header_default = (0, import_react66.forwardRef)(StickyHeader);
function StickyHeader({ variant, theadProps, wrapperRef, theadRef, secondaryWrapperRef, onScroll, tableRef, tableHasHeader, contentDensity, tableRole }, ref) {
  const secondaryTheadRef = (0, import_react66.useRef)(null);
  const secondaryTableRef = (0, import_react66.useRef)(null);
  const { isStuck } = (0, import_react66.useContext)(StickyHeaderContext);
  const [focusedComponent, setFocusedComponent] = (0, import_react66.useState)(null);
  const { scrollToRow, scrollToTop } = useStickyHeader(tableRef, theadRef, secondaryTheadRef, secondaryTableRef, wrapperRef);
  (0, import_react66.useImperativeHandle)(ref, () => ({
    scrollToTop,
    scrollToRow,
    setFocus: setFocusedComponent
  }));
  return import_react66.default.createElement(
    "div",
    {
      className: clsx_m_default(styles_css_default13["header-secondary"], styles_css_default13[`variant-${variant}`], {
        [styles_css_default13["table-has-header"]]: tableHasHeader
      }),
      "aria-hidden": true,
      // Prevents receiving focus in Firefox. Focus on the overflowing table is sufficient
      // to scroll the table horizontally
      tabIndex: -1,
      ref: secondaryWrapperRef,
      onScroll
    },
    import_react66.default.createElement(
      "table",
      Object.assign({ className: clsx_m_default(styles_css_default13.table, styles_css_default13["table-layout-fixed"], contentDensity === "compact" && getVisualContextClassname("compact-table")), ref: secondaryTableRef }, getTableRoleProps({ tableRole })),
      import_react66.default.createElement(thead_default, Object.assign({ ref: secondaryTheadRef, sticky: true, stuck: isStuck, focusedComponent }, theadProps))
    )
  );
}

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/sticky-scrollbar.js
var import_react69 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-intersection-observer/index.js
var import_react67 = __toESM(require_react());
function useIntersectionObserver({ initialState = false } = {}) {
  const observerRef = (0, import_react67.useRef)(null);
  const [isIntersecting, setIsIntersecting] = (0, import_react67.useState)(initialState);
  const ref = (0, import_react67.useCallback)((targetElement) => {
    if (typeof IntersectionObserver === "undefined") {
      return;
    }
    if (observerRef.current) {
      observerRef.current.disconnect();
    }
    if (targetElement) {
      let TopLevelIntersectionObserver = IntersectionObserver;
      try {
        if (window.top) {
          TopLevelIntersectionObserver = window.top.IntersectionObserver;
        }
      } catch (_a) {
      }
      observerRef.current = new TopLevelIntersectionObserver(([entry]) => setIsIntersecting(entry.isIntersecting));
      observerRef.current.observe(targetElement);
    }
  }, []);
  return { ref, isIntersecting };
}

// node_modules/@cloudscape-design/components/internal/utils/calculate-once.js
function calculateOnce(callback) {
  let result = void 0;
  return () => {
    if (result === void 0) {
      result = callback();
    }
    return result;
  };
}

// node_modules/@cloudscape-design/components/internal/utils/browser-scrollbar-size.js
var browserScrollbarSize = calculateOnce(() => {
  if (typeof document === "undefined") {
    return { width: 0, height: 0 };
  }
  const scrollDiv = document.createElement("div");
  scrollDiv.style.overflow = "scroll";
  scrollDiv.style.height = "100px";
  scrollDiv.style.width = "100px";
  scrollDiv.style.position = "absolute";
  scrollDiv.style.top = "-9999px";
  scrollDiv.style.left = "-9999px";
  document.body.appendChild(scrollDiv);
  const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  const height = scrollDiv.offsetHeight - scrollDiv.clientHeight;
  document.body.removeChild(scrollDiv);
  return { width, height };
});

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/use-sticky-scrollbar.js
var import_react68 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/styles.css.js
import "/Users/shikaradee/raghu/GenAi/MachineLearning/reactapp/plat/frontend/node_modules/@cloudscape-design/components/table/sticky-scrollbar/styles.scoped.css";
var styles_css_default31 = {
  "sticky-scrollbar": "awsui_sticky-scrollbar_faqt8_105xs_181",
  "sticky-scrollbar-content": "awsui_sticky-scrollbar-content_faqt8_105xs_193",
  "sticky-scrollbar-visible": "awsui_sticky-scrollbar-visible_faqt8_105xs_196",
  "sticky-scrollbar-native-invisible": "awsui_sticky-scrollbar-native-invisible_faqt8_105xs_199",
  "sticky-scrollbar-offset": "awsui_sticky-scrollbar-offset_faqt8_105xs_202",
  "is-visual-refresh": "awsui_is-visual-refresh_faqt8_105xs_205"
};

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/use-sticky-scrollbar.js
var updatePosition = (tableEl, wrapperEl, scrollbarEl, scrollbarContentEl, inScrollableContainer) => {
  if (!tableEl || !scrollbarEl || !wrapperEl) {
    return;
  }
  const { inlineSize: tableInlineSize } = getLogicalBoundingClientRect(tableEl);
  const { inlineSize: wrapperInlineSize } = getLogicalBoundingClientRect(wrapperEl);
  const scrollbarHeight = browserScrollbarSize().height;
  const areaIsScrollable = tableInlineSize > wrapperInlineSize;
  if (!areaIsScrollable) {
    scrollbarEl.classList.remove(styles_css_default31["sticky-scrollbar-visible"]);
  } else {
    if (!scrollbarEl.classList.contains(styles_css_default31["sticky-scrollbar-visible"])) {
      requestAnimationFrame(() => {
        scrollbarEl.scrollLeft = wrapperEl.scrollLeft;
      });
    }
    scrollbarEl.classList.add(styles_css_default31["sticky-scrollbar-visible"]);
    if (!scrollbarHeight) {
      scrollbarEl.classList.add(styles_css_default31["sticky-scrollbar-native-invisible"]);
    }
  }
  if (scrollbarHeight && scrollbarEl && scrollbarContentEl) {
    scrollbarEl.style.blockSize = `${scrollbarHeight}px`;
    scrollbarContentEl.style.blockSize = `${scrollbarHeight}px`;
  }
  if (tableEl && wrapperEl && scrollbarContentEl && scrollbarEl) {
    const wrapperElRect = getLogicalBoundingClientRect(wrapperEl);
    const tableElRect = getLogicalBoundingClientRect(tableEl);
    scrollbarEl.style.inlineSize = `${wrapperElRect.inlineSize}px`;
    scrollbarContentEl.style.inlineSize = `${tableElRect.inlineSize}px`;
    scrollbarEl.style.insetBlockEnd = inScrollableContainer ? "0px" : `var(${global_vars_default.stickyVerticalBottomOffset}, 0px)`;
  }
};
function useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetScrollbar) {
  const [inScrollableContainer, setInScrollableContainer] = (0, import_react68.useState)(false);
  const wrapperEl = wrapperRef.current;
  (0, import_react68.useEffect)(() => {
    if (wrapperEl) {
      setInScrollableContainer(!!getContainingBlock(wrapperEl) || !!getOverflowParents(wrapperEl)[0]);
    }
  }, [wrapperEl]);
  (0, import_react68.useEffect)(() => {
    if (wrapperRef.current && tableRef.current) {
      const observer2 = new ResizeObserver(() => {
        if (scrollbarContentRef.current) {
          updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, inScrollableContainer);
        }
      });
      observer2.observe(wrapperRef.current);
      observer2.observe(tableRef.current);
      return () => {
        observer2.disconnect();
      };
    }
  }, [scrollbarContentRef, scrollbarRef, tableRef, wrapperRef, inScrollableContainer, offsetScrollbar]);
  (0, import_react68.useEffect)(() => {
    const resizeHandler = () => {
      updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, inScrollableContainer);
    };
    resizeHandler();
    window.addEventListener("resize", resizeHandler);
    return () => {
      window.removeEventListener("resize", resizeHandler);
    };
  }, [tableRef, wrapperRef, scrollbarRef, scrollbarContentRef, inScrollableContainer]);
}

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/sticky-scrollbar.js
var sticky_scrollbar_default = (0, import_react69.forwardRef)(StickyScrollbar);
function StickyScrollbar({ wrapperRef, tableRef, onScroll, hasStickyColumns }, ref) {
  const isVisualRefresh = useVisualRefresh();
  const scrollbarRef = import_react69.default.useRef(null);
  const scrollbarContentRef = import_react69.default.useRef(null);
  const mergedRef = useMergeRefs(ref, scrollbarRef);
  const offsetScrollbar = hasStickyColumns || browserScrollbarSize().height === 0;
  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetScrollbar);
  const { ref: stickyDetectionRef, isIntersecting: isStickyDetectionVisible } = useIntersectionObserver();
  return import_react69.default.createElement(
    import_react69.default.Fragment,
    null,
    import_react69.default.createElement(
      "div",
      { ref: mergedRef, className: clsx_m_default(styles_css_default31["sticky-scrollbar"], offsetScrollbar && styles_css_default31["sticky-scrollbar-offset"], isVisualRefresh && styles_css_default31["is-visual-refresh"]), onScroll, "data-stuck": !isStickyDetectionVisible },
      import_react69.default.createElement("div", { ref: scrollbarContentRef, className: styles_css_default31["sticky-scrollbar-content"] })
    ),
    import_react69.default.createElement("div", { ref: stickyDetectionRef, style: { position: "absolute", right: 0, bottom: 0, left: 0, height: 1 } })
  );
}

// node_modules/@cloudscape-design/components/table/tools-header.js
var import_react70 = __toESM(require_react());
function ToolsHeader({ header, filter, pagination, preferences, setLastUserAction }) {
  const [breakpoint, ref] = useContainerBreakpoints(["xs"]);
  const isHeaderString = typeof header === "string";
  const assignHeaderId = (0, import_react70.useContext)(CollectionLabelContext).assignId;
  const headingId = useUniqueId("heading");
  if (assignHeaderId !== void 0 && isHeaderString) {
    assignHeaderId(headingId);
  }
  const isSmall = breakpoint === "default";
  const hasTools = filter || pagination || preferences;
  return import_react70.default.createElement(
    import_react70.default.Fragment,
    null,
    isHeaderString ? import_react70.default.createElement("span", { id: headingId }, header) : header,
    hasTools && import_react70.default.createElement(
      "div",
      { ref, className: clsx_m_default(styles_css_default13.tools, isSmall && styles_css_default13["tools-small"]) },
      filter && import_react70.default.createElement("div", { className: styles_css_default13["tools-filtering"], onClickCapture: () => setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("filter"), onKeyDownCapture: () => setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("filter") }, filter),
      import_react70.default.createElement(
        "div",
        { className: styles_css_default13["tools-align-right"] },
        pagination && import_react70.default.createElement("div", { className: styles_css_default13["tools-pagination"], onClickCapture: () => setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("pagination") }, pagination),
        preferences && import_react70.default.createElement("div", { className: styles_css_default13["tools-preferences"], onClickCapture: () => setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("preferences") }, preferences)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/table/use-cell-editing.js
var import_react71 = __toESM(require_react());
function useCellEditing({ onCancel, onSubmit }) {
  const [currentEditCell, setCurrentEditCell] = (0, import_react71.useState)(null);
  const [lastSuccessfulEditCell, setLastSuccessfulEditCell] = (0, import_react71.useState)(null);
  const [currentEditLoading, setCurrentEditLoading] = (0, import_react71.useState)(false);
  const startEdit = (cellId) => {
    setLastSuccessfulEditCell(null);
    setCurrentEditCell(cellId);
  };
  const cancelEdit = (0, import_react71.useCallback)(() => setCurrentEditCell(null), []);
  const completeEdit = (cellId, editCancelled) => {
    const eventCancelled = fireCancelableEvent(onCancel, {});
    if (!eventCancelled) {
      setCurrentEditCell(null);
      if (!editCancelled) {
        setLastSuccessfulEditCell(cellId);
      }
    }
  };
  const checkEditing = ({ row, col }) => row === (currentEditCell === null || currentEditCell === void 0 ? void 0 : currentEditCell.row) && col === currentEditCell.col;
  const checkLastSuccessfulEdit = ({ row, col }) => row === (lastSuccessfulEditCell === null || lastSuccessfulEditCell === void 0 ? void 0 : lastSuccessfulEditCell.row) && col === lastSuccessfulEditCell.col;
  const submitEdit = onSubmit ? (...args) => __awaiter(this, void 0, void 0, function* () {
    setCurrentEditLoading(true);
    try {
      yield onSubmit(...args);
    } finally {
      setCurrentEditLoading(false);
    }
  }) : void 0;
  return {
    isLoading: currentEditLoading,
    startEdit,
    cancelEdit,
    checkEditing,
    checkLastSuccessfulEdit,
    completeEdit,
    submitEdit
  };
}

// node_modules/@cloudscape-design/components/table/use-prevent-sticky-click-scroll.js
var import_react72 = __toESM(require_react());
var _ScrollLock_timeoutId;
var _ScrollLock_scrollLeft;
var _ScrollLock_active;
var stickyCellSelector = `.${styles_css_default14["sticky-cell"]}`;
var scrollLockTimeout = 50;
function usePreventStickyClickScroll(wrapperRefObject) {
  (0, import_react72.useEffect)(() => {
    if (wrapperRefObject.current) {
      const wrapperEl = wrapperRefObject.current;
      const scrollLock = new ScrollLock();
      const onClick = (event) => {
        if (event.target && event.target instanceof HTMLElement && (event.target.matches(stickyCellSelector) || event.target.closest(stickyCellSelector))) {
          scrollLock.set(wrapperEl.scrollLeft);
        }
      };
      wrapperEl.addEventListener("click", onClick);
      const onScroll = () => {
        if (scrollLock.active) {
          wrapperEl.scrollLeft = scrollLock.scrollLeft;
          scrollLock.clear();
        }
      };
      wrapperEl.addEventListener("scroll", onScroll);
      return () => {
        wrapperEl.removeEventListener("click", onClick);
        wrapperEl.removeEventListener("scroll", onScroll);
      };
    }
  }, [wrapperRefObject]);
}
var ScrollLock = class {
  constructor() {
    _ScrollLock_timeoutId.set(this, setTimeout(() => {
    }, 0));
    _ScrollLock_scrollLeft.set(this, 0);
    _ScrollLock_active.set(this, false);
  }
  set(scrollLeft) {
    if (!__classPrivateFieldGet(this, _ScrollLock_active, "f")) {
      __classPrivateFieldSet(this, _ScrollLock_active, true, "f");
      __classPrivateFieldSet(this, _ScrollLock_scrollLeft, scrollLeft, "f");
      __classPrivateFieldSet(this, _ScrollLock_timeoutId, setTimeout(() => __classPrivateFieldSet(this, _ScrollLock_active, false, "f"), scrollLockTimeout), "f");
    }
  }
  clear() {
    __classPrivateFieldSet(this, _ScrollLock_active, false, "f");
    clearTimeout(__classPrivateFieldGet(this, _ScrollLock_timeoutId, "f"));
  }
  get active() {
    return __classPrivateFieldGet(this, _ScrollLock_active, "f");
  }
  get scrollLeft() {
    return __classPrivateFieldGet(this, _ScrollLock_scrollLeft, "f");
  }
};
_ScrollLock_timeoutId = /* @__PURE__ */ new WeakMap(), _ScrollLock_scrollLeft = /* @__PURE__ */ new WeakMap(), _ScrollLock_active = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/table/use-row-events.js
function useRowEvents({ onRowClick, onRowContextMenu }) {
  const onRowClickHandler = (rowIndex, item, event) => {
    const tableCell = findUpUntil(event.target, (element) => element.tagName.toLowerCase() === "td");
    if (!tableCell || !tableCell.classList.contains(styles_css_default13["selection-control"])) {
      const details = { rowIndex, item };
      fireNonCancelableEvent(onRowClick, details);
    }
  };
  const onRowContextMenuHandler = (rowIndex, item, event) => {
    const details = {
      rowIndex,
      item,
      clientX: event.clientX,
      clientY: event.clientY
    };
    fireCancelableEvent(onRowContextMenu, details, event);
  };
  return {
    onRowClickHandler: onRowClick && onRowClickHandler,
    onRowContextMenuHandler: onRowContextMenu && onRowContextMenuHandler
  };
}

// node_modules/@cloudscape-design/components/table/use-table-focus-navigation.js
var import_react73 = __toESM(require_react());
function iterateTableCells(table, func) {
  table.querySelectorAll("tr").forEach((row, rowIndex) => {
    row.querySelectorAll("td").forEach((cell, cellIndex) => {
      func(cell, rowIndex, cellIndex);
    });
  });
}
function useTableFocusNavigation({ enableKeyboardNavigation, selectionType, tableRoot, columnDefinitions, numRows }) {
  const focusableColumns = (0, import_react73.useMemo)(() => {
    const cols = columnDefinitions.map((column) => !!column.editConfig);
    if (selectionType) {
      cols.unshift(false);
    }
    return cols;
  }, [columnDefinitions, selectionType]);
  const maxColumnIndex = focusableColumns.length - 1;
  const minColumnIndex = selectionType ? 1 : 0;
  const focusCell = (0, import_react73.useCallback)((rowIndex, columnIndex) => {
    if (tableRoot === null || tableRoot === void 0 ? void 0 : tableRoot.current) {
      iterateTableCells(tableRoot.current, (cell, rIndex, cIndex) => {
        var _a;
        if (rIndex === rowIndex && cIndex === columnIndex) {
          const editButton = cell.querySelector("button:last-child");
          if (editButton) {
            (_a = editButton.focus) === null || _a === void 0 ? void 0 : _a.call(editButton);
            scrollElementIntoView(editButton);
          }
        }
      });
    }
  }, [tableRoot]);
  const shiftFocus = (0, import_react73.useCallback)((vertical, horizontal) => {
    var _a;
    const focusedCell = (_a = tableRoot.current) === null || _a === void 0 ? void 0 : _a.querySelector("td:focus-within");
    if (!focusedCell) {
      return;
    }
    const columnIndex = focusedCell.cellIndex;
    const rowIndex = focusedCell.parentElement.rowIndex;
    let newRowIndex = rowIndex;
    let newColumnIndex = columnIndex;
    if (vertical !== 0) {
      newRowIndex = Math.min(numRows, Math.max(rowIndex + vertical, 0));
    }
    if (horizontal !== 0) {
      while (newColumnIndex <= maxColumnIndex && newColumnIndex >= minColumnIndex) {
        newColumnIndex += horizontal;
        if (focusableColumns[newColumnIndex]) {
          break;
        }
      }
    }
    if ((rowIndex !== newRowIndex || columnIndex !== newColumnIndex) && tableRoot.current) {
      focusCell(newRowIndex, newColumnIndex);
    }
  }, [focusCell, focusableColumns, maxColumnIndex, minColumnIndex, numRows, tableRoot]);
  const handleArrowKeyEvents = (0, import_react73.useCallback)((event) => {
    var _a, _b;
    const abort = !!((_a = tableRoot.current) === null || _a === void 0 ? void 0 : _a.querySelector('[data-inline-editing-active = "true"]')) || !((_b = document.activeElement) === null || _b === void 0 ? void 0 : _b.closest("[data-inline-editing-active]"));
    if (abort) {
      return;
    }
    switch (event.key) {
      case "ArrowUp":
        event.preventDefault();
        shiftFocus(-1, 0);
        break;
      case "ArrowDown":
        event.preventDefault();
        shiftFocus(1, 0);
        break;
      case "ArrowLeft":
        event.preventDefault();
        shiftFocus(0, -1);
        break;
      case "ArrowRight":
        event.preventDefault();
        shiftFocus(0, 1);
        break;
      default:
        return;
    }
  }, [shiftFocus, tableRoot]);
  (0, import_react73.useEffect)(() => {
    if (!tableRoot.current || enableKeyboardNavigation) {
      return;
    }
    const tableElement = tableRoot.current;
    tableRoot.current.addEventListener("keydown", handleArrowKeyEvents);
    return () => tableElement && tableElement.removeEventListener("keydown", handleArrowKeyEvents);
  }, [enableKeyboardNavigation, focusableColumns, handleArrowKeyEvents, tableRoot]);
}
var use_table_focus_navigation_default = useTableFocusNavigation;

// node_modules/@cloudscape-design/components/table/internal.js
var GRID_NAVIGATION_PAGE_SIZE = 10;
var SELECTION_COLUMN_WIDTH = 54;
var selectionColumnId = Symbol("selection-column-id");
var InternalTableAsSubstep = import_react74.default.forwardRef((props, ref) => {
  const { funnelSubStepProps } = useFunnelSubStep();
  const tableProps = Object.assign(Object.assign({}, props), { __funnelSubStepProps: funnelSubStepProps });
  return import_react74.default.createElement(InternalTable, Object.assign({}, tableProps, { ref }));
});
var InternalTable = import_react74.default.forwardRef((_a, ref) => {
  var _b, _c, _d;
  var { header, footer, empty, filter, pagination, preferences, items, columnDefinitions, trackBy, loading, loadingText, selectionType, selectedItems, isItemDisabled, ariaLabels, onSelectionChange, onSortingChange, sortingColumn, sortingDescending, sortingDisabled, visibleColumns, stickyHeader, stickyHeaderVerticalOffset, onRowClick, onRowContextMenu, wrapLines, stripedRows, contentDensity, submitEdit, onEditCancel, resizableColumns, onColumnWidthsChange, variant, __internalRootRef, totalItemsCount, firstIndex, renderAriaLive, stickyColumns, columnDisplay, enableKeyboardNavigation, expandableRows, getLoadingStatus, renderLoaderPending, renderLoaderLoading, renderLoaderError, renderLoaderEmpty, cellVerticalAlign, __funnelSubStepProps } = _a, rest = __rest(_a, ["header", "footer", "empty", "filter", "pagination", "preferences", "items", "columnDefinitions", "trackBy", "loading", "loadingText", "selectionType", "selectedItems", "isItemDisabled", "ariaLabels", "onSelectionChange", "onSortingChange", "sortingColumn", "sortingDescending", "sortingDisabled", "visibleColumns", "stickyHeader", "stickyHeaderVerticalOffset", "onRowClick", "onRowContextMenu", "wrapLines", "stripedRows", "contentDensity", "submitEdit", "onEditCancel", "resizableColumns", "onColumnWidthsChange", "variant", "__internalRootRef", "totalItemsCount", "firstIndex", "renderAriaLive", "stickyColumns", "columnDisplay", "enableKeyboardNavigation", "expandableRows", "getLoadingStatus", "renderLoaderPending", "renderLoaderLoading", "renderLoaderError", "renderLoaderEmpty", "cellVerticalAlign", "__funnelSubStepProps"]);
  if (expandableRows && enableKeyboardNavigation === void 0) {
    enableKeyboardNavigation = true;
  }
  const baseProps = getBaseProps(rest);
  const prevStickyHeader = usePrevious(stickyHeader);
  if (prevStickyHeader !== void 0 && !!stickyHeader !== !!prevStickyHeader) {
    warnOnce("Table", `\`stickyHeader\` has changed from "${prevStickyHeader}" to "${stickyHeader}". It is not recommended to change the value of this property during the component lifecycle. Please set it to either "true" or "false" unconditionally.`);
  }
  const isMobile = useMobile();
  const { isExpandable, allItems, getExpandableItemProps } = useExpandableTableProps({
    items,
    expandableRows,
    trackBy,
    ariaLabels
  });
  const { allRows } = useProgressiveLoadingProps({
    items: allItems,
    getLoadingStatus,
    getExpandableItemProps
  });
  const [containerWidth, wrapperMeasureRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const wrapperMeasureRefObject = (0, import_react74.useRef)(null);
  const wrapperMeasureMergedRef = useMergeRefs(wrapperMeasureRef, wrapperMeasureRefObject);
  const [tableWidth, tableMeasureRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const tableRefObject = (0, import_react74.useRef)(null);
  const secondaryWrapperRef = import_react74.default.useRef(null);
  const theadRef = (0, import_react74.useRef)(null);
  const stickyHeaderRef = import_react74.default.useRef(null);
  const scrollbarRef = import_react74.default.useRef(null);
  const _e = useCellEditing({ onCancel: onEditCancel, onSubmit: submitEdit }), { cancelEdit } = _e, cellEditing = __rest(_e, ["cancelEdit"]);
  const paginationRef = (0, import_react74.useRef)({});
  const filterRef = (0, import_react74.useRef)({});
  const preferencesRef = (0, import_react74.useRef)({});
  const headerRef = (0, import_react74.useRef)({});
  const getHeaderText = () => {
    var _a2, _b2, _c2, _d2;
    return (_c2 = (_b2 = (_a2 = toolsHeaderPerformanceMarkRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector(`.${styles_css_default["heading-text"]}`)) === null || _b2 === void 0 ? void 0 : _b2.innerText) !== null && _c2 !== void 0 ? _c2 : (_d2 = toolsHeaderPerformanceMarkRef.current) === null || _d2 === void 0 ? void 0 : _d2.innerText;
  };
  const getPatternIdentifier = () => {
    var _a2;
    const hasActions = !!((_a2 = toolsHeaderPerformanceMarkRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector(`.${styles_css_default.actions} .${styles_css_default8.button}`));
    if (hasActions) {
      return "table-with-actions";
    }
    return "";
  };
  const performanceMarkAttributes = usePerformanceMarks("table", () => !loading, tableRefObject, () => ({
    loading: loading !== null && loading !== void 0 ? loading : false,
    header: getHeaderText()
  }), [loading]);
  const analyticsMetadata = getAnalyticsMetadataProps(rest);
  const interactionMetadata = () => {
    const filterData = filterRef.current;
    const paginationData = paginationRef.current;
    return JSON.stringify({
      filterData,
      paginationData,
      sortingColumn: sortingColumn === null || sortingColumn === void 0 ? void 0 : sortingColumn.sortingField,
      sortingOrder: sortingColumn ? sortingDescending ? "Descending" : "Ascending" : void 0
    });
  };
  const getComponentConfiguration = () => {
    var _a2, _b2, _c2, _d2, _e2, _f, _g, _h, _j, _k, _l;
    const headerData = headerRef.current;
    const filterData = filterRef.current;
    const paginationData = paginationRef.current;
    const preferencesData = preferencesRef.current;
    return {
      variant,
      flowType: (_a2 = rest.analyticsMetadata) === null || _a2 === void 0 ? void 0 : _a2.flowType,
      resourceType: (_b2 = rest.analyticsMetadata) === null || _b2 === void 0 ? void 0 : _b2.resourceType,
      instanceIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier,
      taskName: (_c2 = analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier) !== null && _c2 !== void 0 ? _c2 : getHeaderText(),
      uxTaskName: getHeaderText(),
      patternIdentifier: getPatternIdentifier(),
      sortedBy: {
        columnId: sortingColumn === null || sortingColumn === void 0 ? void 0 : sortingColumn.sortingField,
        sortingOrder: sortingColumn ? sortingDescending ? "desc" : "asc" : void 0
      },
      filtered: (_d2 = filterData === null || filterData === void 0 ? void 0 : filterData.filtered) !== null && _d2 !== void 0 ? _d2 : null,
      filteredBy: (_e2 = filterData === null || filterData === void 0 ? void 0 : filterData.filteredBy) !== null && _e2 !== void 0 ? _e2 : [],
      filteredCount: (_f = filterData === null || filterData === void 0 ? void 0 : filterData.filterCount) !== null && _f !== void 0 ? _f : null,
      totalNumberOfResources: (_g = headerData === null || headerData === void 0 ? void 0 : headerData.totalCount) !== null && _g !== void 0 ? _g : null,
      tablePreferences: {
        visibleColumns: (_h = preferencesData === null || preferencesData === void 0 ? void 0 : preferencesData.visibleColumns) !== null && _h !== void 0 ? _h : [],
        resourcesPerPage: (_j = preferencesData === null || preferencesData === void 0 ? void 0 : preferencesData.pageSize) !== null && _j !== void 0 ? _j : null
      },
      pagination: {
        currentPageIndex: (_k = paginationData === null || paginationData === void 0 ? void 0 : paginationData.currentPageIndex) !== null && _k !== void 0 ? _k : 0,
        totalNumberOfPages: (paginationData === null || paginationData === void 0 ? void 0 : paginationData.openEnd) ? null : (_l = paginationData === null || paginationData === void 0 ? void 0 : paginationData.totalPageCount) !== null && _l !== void 0 ? _l : null,
        openEnd: Boolean(paginationData === null || paginationData === void 0 ? void 0 : paginationData.openEnd)
      },
      resourcesSelected: (selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.length) > 0
    };
  };
  const { setLastUserAction, tableInteractionAttributes } = useTableInteractionMetrics({
    elementRef: tableRefObject,
    loading,
    items,
    instanceIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier,
    itemCount: items.length,
    getComponentIdentifier: getHeaderText,
    getComponentConfiguration,
    interactionMetadata
  });
  (0, import_react74.useImperativeHandle)(ref, () => {
    var _a2;
    return {
      scrollToTop: ((_a2 = stickyHeaderRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollToTop) || (() => void 0),
      cancelEdit
    };
  }, [cancelEdit]);
  const wrapperRefObject = (0, import_react74.useRef)(null);
  const handleScroll = useScrollSync([wrapperRefObject, scrollbarRef, secondaryWrapperRef]);
  const { moveFocusDown, moveFocusUp, moveFocus } = useSelectionFocusMove(selectionType, allItems.length);
  const { onRowClickHandler, onRowContextMenuHandler } = useRowEvents({ onRowClick, onRowContextMenu });
  const visibleColumnDefinitions = getVisibleColumnDefinitions({
    columnDefinitions,
    columnDisplay,
    visibleColumns
  });
  const { isItemSelected, getSelectAllProps, getItemSelectionProps } = useSelection({
    items: allItems,
    trackBy,
    selectedItems,
    selectionType,
    isItemDisabled,
    onSelectionChange,
    ariaLabels: Object.assign(Object.assign({}, ariaLabels), {
      // `selectionGroupLabel` should not be part of the selection control, it is already part of the selection column header.
      selectionGroupLabel: void 0
    }),
    loading,
    setLastUserAction
  });
  const isRowSelected = (row) => row.type === "data" && isItemSelected(row.item);
  if (isDevelopment) {
    if (resizableColumns) {
      checkColumnWidths(columnDefinitions);
    }
    if (sortingColumn === null || sortingColumn === void 0 ? void 0 : sortingColumn.sortingComparator) {
      checkSortingState(columnDefinitions, sortingColumn.sortingComparator);
    }
  }
  const isVisualRefresh = useVisualRefresh();
  const computedVariant = isVisualRefresh ? variant : ["embedded", "full-page"].indexOf(variant) > -1 ? "container" : variant;
  const hasHeader = !!(header || filter || pagination || preferences);
  const hasSelection = !!selectionType;
  const hasFooterPagination = isMobile && variant === "full-page" && !!pagination;
  const hasFooter = !!footer || hasFooterPagination;
  const headerIdRef = (0, import_react74.useRef)(void 0);
  const isLabelledByHeader = !(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel) && !!header;
  const ariaLabelledby = isLabelledByHeader && headerIdRef.current ? headerIdRef.current : void 0;
  const setHeaderRef = (0, import_react74.useCallback)((id) => {
    headerIdRef.current = id;
  }, []);
  const visibleColumnWidthsWithSelection = [];
  const visibleColumnIdsWithSelection = [];
  if (hasSelection) {
    visibleColumnWidthsWithSelection.push({ id: selectionColumnId, width: SELECTION_COLUMN_WIDTH });
    visibleColumnIdsWithSelection.push(selectionColumnId);
  }
  for (let columnIndex = 0; columnIndex < visibleColumnDefinitions.length; columnIndex++) {
    const columnId = getColumnKey(visibleColumnDefinitions[columnIndex], columnIndex);
    visibleColumnWidthsWithSelection.push(Object.assign(Object.assign({}, visibleColumnDefinitions[columnIndex]), { id: columnId }));
    visibleColumnIdsWithSelection.push(columnId);
  }
  const stickyState = useStickyColumns({
    visibleColumns: visibleColumnIdsWithSelection,
    stickyColumnsFirst: ((_b = stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.first) !== null && _b !== void 0 ? _b : 0) + ((stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.first) && hasSelection ? 1 : 0),
    stickyColumnsLast: (stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.last) || 0
  });
  const hasStickyColumns = !!(((_c = stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.first) !== null && _c !== void 0 ? _c : 0) + ((_d = stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.last) !== null && _d !== void 0 ? _d : 0) > 0);
  const hasEditableCells = !!columnDefinitions.find((col) => col.editConfig);
  let tableRole = "table";
  if (isExpandable) {
    tableRole = "treegrid";
  } else if (enableKeyboardNavigation) {
    tableRole = "grid";
  } else if (hasEditableCells) {
    tableRole = "grid-default";
  }
  const theadProps = {
    selectionType,
    getSelectAllProps,
    columnDefinitions: visibleColumnDefinitions,
    variant: computedVariant,
    tableVariant: computedVariant,
    wrapLines,
    resizableColumns,
    sortingColumn,
    sortingDisabled,
    sortingDescending,
    onSortingChange,
    onFocusMove: moveFocus,
    onResizeFinish(newWidth) {
      const widthsDetail = columnDefinitions.map((column, index) => newWidth.get(getColumnKey(column, index)) || column.width || DEFAULT_COLUMN_WIDTH);
      const widthsChanged = widthsDetail.some((width, index) => columnDefinitions[index].width !== width);
      if (widthsChanged) {
        fireNonCancelableEvent(onColumnWidthsChange, { widths: widthsDetail });
      }
    },
    singleSelectionHeaderAriaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel,
    resizerRoleDescription: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.resizerRoleDescription,
    stripedRows,
    stickyState,
    selectionColumnId,
    tableRole,
    isExpandable,
    setLastUserAction
  };
  usePreventStickyClickScroll(wrapperRefObject);
  const wrapperRef = useMergeRefs(wrapperRefObject, stickyState.refs.wrapper);
  const tableRef = useMergeRefs(tableMeasureRef, tableRefObject, stickyState.refs.table);
  const wrapperProps = getTableWrapperRoleProps({
    tableRole,
    isScrollable: !!(tableWidth && containerWidth && tableWidth > containerWidth),
    ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel,
    ariaLabelledby
  });
  const getMouseDownTarget = useMouseDownTarget();
  use_table_focus_navigation_default({
    enableKeyboardNavigation,
    selectionType,
    tableRoot: tableRefObject,
    columnDefinitions: visibleColumnDefinitions,
    numRows: allRows === null || allRows === void 0 ? void 0 : allRows.length
  });
  const toolsHeaderPerformanceMarkRef = (0, import_react74.useRef)(null);
  const [toolsHeaderHeight, toolsHeaderWrapperMeasureRef] = useContainerQuery((rect) => rect.borderBoxHeight);
  const toolsHeaderWrapper = useMergeRefs(toolsHeaderPerformanceMarkRef, toolsHeaderWrapperMeasureRef);
  const colIndexOffset = selectionType ? 1 : 0;
  const totalColumnsCount = visibleColumnDefinitions.length + colIndexOffset;
  return import_react74.default.createElement(
    LinkDefaultVariantContext.Provider,
    { value: { defaultVariant: "primary" } },
    import_react74.default.createElement(
      TableComponentsContextProvider,
      { value: { paginationRef, filterRef, preferencesRef, headerRef } },
      import_react74.default.createElement(
        ColumnWidthsProvider,
        { visibleColumns: visibleColumnWidthsWithSelection, resizableColumns, containerRef: wrapperMeasureRefObject },
        import_react74.default.createElement(
          InternalContainer,
          Object.assign({}, baseProps, tableInteractionAttributes, { __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default13.root), __funnelSubStepProps, __fullPage: variant === "full-page", header: import_react74.default.createElement(
            import_react74.default.Fragment,
            null,
            hasHeader && import_react74.default.createElement(
              "div",
              null,
              import_react74.default.createElement(
                "div",
                { ref: toolsHeaderWrapper, className: clsx_m_default(styles_css_default13["header-controls"], styles_css_default13[`variant-${computedVariant}`]) },
                import_react74.default.createElement(
                  CollectionLabelContext.Provider,
                  { value: { assignId: setHeaderRef } },
                  import_react74.default.createElement(ToolsHeader, { header, filter, pagination, preferences, setLastUserAction })
                )
              )
            ),
            stickyHeader && import_react74.default.createElement(sticky_header_default, { ref: stickyHeaderRef, variant: computedVariant, theadProps, wrapperRef: wrapperRefObject, theadRef, secondaryWrapperRef, tableRef: tableRefObject, onScroll: handleScroll, tableHasHeader: hasHeader, contentDensity, tableRole })
          ), disableHeaderPaddings: true, disableContentPaddings: true, disableFooterPaddings: true, variant: toContainerVariant(computedVariant), __disableFooterDivider: true, __disableStickyMobile: false, footer: hasFooter ? import_react74.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default13["footer-wrapper"], styles_css_default13[`variant-${computedVariant}`]) },
            import_react74.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default13.footer, hasFooterPagination && styles_css_default13["footer-with-pagination"]) },
              footer && import_react74.default.createElement("span", null, footer),
              hasFooterPagination && import_react74.default.createElement("div", { className: styles_css_default13["footer-pagination"] }, pagination)
            )
          ) : null, __stickyHeader: stickyHeader, __mobileStickyOffset: toolsHeaderHeight !== null && toolsHeaderHeight !== void 0 ? toolsHeaderHeight : 0, __stickyOffset: stickyHeaderVerticalOffset }, focusMarkers.root),
          import_react74.default.createElement(
            "div",
            Object.assign({ ref: wrapperRef, className: clsx_m_default(styles_css_default13.wrapper, styles_css_default13[`variant-${computedVariant}`], {
              [styles_css_default13["has-footer"]]: hasFooter,
              [styles_css_default13["has-header"]]: hasHeader
            }), style: stickyState.style.wrapper, onScroll: handleScroll }, wrapperProps),
            import_react74.default.createElement("div", { className: styles_css_default13["wrapper-content-measure"], ref: wrapperMeasureMergedRef }),
            !!renderAriaLive && !!firstIndex && import_react74.default.createElement(
              internal_default,
              { hidden: true, tagName: "span" },
              import_react74.default.createElement("span", null, renderAriaLive({
                firstIndex,
                lastIndex: firstIndex + items.length - 1,
                visibleItemsCount: allItems.length,
                totalItemsCount
              }))
            ),
            import_react74.default.createElement(
              GridNavigationProvider,
              { keyboardNavigation: !!enableKeyboardNavigation, pageSize: GRID_NAVIGATION_PAGE_SIZE, getTable: () => tableRefObject.current },
              import_react74.default.createElement(
                "table",
                Object.assign({}, performanceMarkAttributes, { ref: tableRef, className: clsx_m_default(styles_css_default13.table, resizableColumns && styles_css_default13["table-layout-fixed"], contentDensity === "compact" && getVisualContextClassname("compact-table")) }, getTableRoleProps({
                  tableRole,
                  totalItemsCount,
                  totalColumnsCount,
                  ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel,
                  ariaLabelledby
                })),
                import_react74.default.createElement(thead_default, Object.assign({ ref: theadRef, hidden: stickyHeader, onFocusedComponentChange: (focusId) => {
                  var _a2;
                  return (_a2 = stickyHeaderRef.current) === null || _a2 === void 0 ? void 0 : _a2.setFocus(focusId);
                } }, theadProps)),
                import_react74.default.createElement("tbody", null, loading || allItems.length === 0 ? import_react74.default.createElement(
                  "tr",
                  null,
                  import_react74.default.createElement(NoDataCell, { totalColumnsCount, hasFooter, loading, loadingText, empty, tableRef: tableRefObject, containerRef: wrapperMeasureRefObject })
                ) : allRows.map((row, rowIndex) => {
                  const isFirstRow = rowIndex === 0;
                  const isLastRow = rowIndex === allRows.length - 1;
                  const expandableProps = row.type === "data" ? getExpandableItemProps(row.item) : void 0;
                  const rowRoleProps = getTableRowRoleProps(Object.assign({
                    tableRole,
                    firstIndex,
                    rowIndex,
                    level: row.type === "loader" ? row.level : void 0
                  }, expandableProps));
                  const getTableItemKey = (item) => getItemKey(trackBy, item, rowIndex);
                  const sharedCellProps = {
                    isFirstRow,
                    isLastRow,
                    isSelected: hasSelection && isRowSelected(row),
                    isPrevSelected: hasSelection && !isFirstRow && isRowSelected(allRows[rowIndex - 1]),
                    isNextSelected: hasSelection && !isLastRow && isRowSelected(allRows[rowIndex + 1]),
                    isEvenRow: rowIndex % 2 === 0,
                    stripedRows,
                    hasSelection,
                    hasFooter,
                    stickyState,
                    tableRole
                  };
                  if (row.type === "data") {
                    const rowId = `${getTableItemKey(row.item)}`;
                    return import_react74.default.createElement(
                      "tr",
                      Object.assign({ key: rowId, className: clsx_m_default(styles_css_default13.row, sharedCellProps.isSelected && styles_css_default13["row-selected"]), onFocus: ({ currentTarget }) => {
                        var _a2;
                        if (!currentTarget.contains(getMouseDownTarget())) {
                          (_a2 = stickyHeaderRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollToRow(currentTarget);
                        }
                      } }, focusMarkers.item, { onClick: onRowClickHandler && onRowClickHandler.bind(null, rowIndex, row.item), onContextMenu: onRowContextMenuHandler && onRowContextMenuHandler.bind(null, rowIndex, row.item) }, rowRoleProps),
                      getItemSelectionProps && import_react74.default.createElement(TableBodySelectionCell, Object.assign({}, sharedCellProps, { columnId: selectionColumnId, selectionControlProps: Object.assign(Object.assign({}, getItemSelectionProps(row.item)), { onFocusDown: moveFocusDown, onFocusUp: moveFocusUp, rowIndex, itemKey: rowId }), verticalAlign: cellVerticalAlign, tableVariant: computedVariant })),
                      visibleColumnDefinitions.map((column, colIndex) => {
                        var _a2, _b2;
                        const colId = `${getColumnKey(column, colIndex)}`;
                        const cellId = { row: rowId, col: colId };
                        const isEditing = cellEditing.checkEditing(cellId);
                        const successfulEdit = cellEditing.checkLastSuccessfulEdit(cellId);
                        const isEditable = !!column.editConfig && !cellEditing.isLoading;
                        const cellExpandableProps = isExpandable && colIndex === 0 ? expandableProps : void 0;
                        const analyticsMetadata2 = {
                          component: {
                            innerContext: {
                              position: `${rowIndex + 1},${colIndex + 1}`,
                              columnId: column.id ? `${column.id}` : "",
                              columnLabel: {
                                selector: `table thead tr th:nth-child(${colIndex + (selectionType ? 2 : 1)})`,
                                root: "component"
                              },
                              item: rowId
                            }
                          }
                        };
                        return import_react74.default.createElement(TableBodyCell, Object.assign({ key: colId }, sharedCellProps, { resizableStyle: {
                          width: column.width,
                          minWidth: column.minWidth,
                          maxWidth: column.maxWidth
                        }, ariaLabels, column, item: row.item, wrapLines, isEditable, isEditing, isRowHeader: column.isRowHeader, successfulEdit, resizableColumns, onEditStart: () => cellEditing.startEdit(cellId), onEditEnd: (editCancelled) => cellEditing.completeEdit(cellId, editCancelled), submitEdit: cellEditing.submitEdit, columnId: (_a2 = column.id) !== null && _a2 !== void 0 ? _a2 : colIndex, colIndex: colIndex + colIndexOffset, verticalAlign: (_b2 = column.verticalAlign) !== null && _b2 !== void 0 ? _b2 : cellVerticalAlign, tableVariant: computedVariant }, cellExpandableProps, getAnalyticsMetadataAttribute(analyticsMetadata2)));
                      })
                    );
                  }
                  const loaderContent = getLoaderContent({
                    item: row.item,
                    loadingStatus: row.status,
                    renderLoaderPending,
                    renderLoaderLoading,
                    renderLoaderError,
                    renderLoaderEmpty
                  });
                  return loaderContent && import_react74.default.createElement(
                    "tr",
                    Object.assign({ key: (row.item ? getTableItemKey(row.item) : "root-" + rowIndex) + "-" + row.from, className: styles_css_default13.row }, rowRoleProps),
                    getItemSelectionProps && import_react74.default.createElement(TableBodySelectionCell, Object.assign({}, sharedCellProps, { columnId: selectionColumnId, verticalAlign: cellVerticalAlign, tableVariant: computedVariant })),
                    visibleColumnDefinitions.map((column, colIndex) => {
                      var _a2;
                      return import_react74.default.createElement(TableLoaderCell, Object.assign({ key: getColumnKey(column, colIndex) }, sharedCellProps, { wrapLines: false, columnId: (_a2 = column.id) !== null && _a2 !== void 0 ? _a2 : colIndex, colIndex: colIndex + colIndexOffset, isRowHeader: colIndex === 0, level: row.level, item: row.item, trackBy }), loaderContent);
                    })
                  );
                }))
              )
            ),
            resizableColumns && import_react74.default.createElement(ResizeTracker, null)
          ),
          import_react74.default.createElement(sticky_scrollbar_default, { ref: scrollbarRef, wrapperRef: wrapperRefObject, tableRef: tableRefObject, onScroll: handleScroll, hasStickyColumns })
        )
      )
    )
  );
});
var internal_default7 = InternalTable;

// node_modules/@cloudscape-design/components/table/index.js
var Table = import_react75.default.forwardRef((_a, ref) => {
  var _b, _c, _d;
  var { items = [], selectedItems = [], variant = "container", contentDensity = "comfortable", cellVerticalAlign = "middle", firstIndex = 1 } = _a, props = __rest(_a, ["items", "selectedItems", "variant", "contentDensity", "cellVerticalAlign", "firstIndex"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props);
  const hasHiddenColumns = props.visibleColumns && props.visibleColumns.length < props.columnDefinitions.length || ((_b = props.columnDisplay) === null || _b === void 0 ? void 0 : _b.some((col) => !col.visible));
  const hasStickyColumns = !!((_c = props.stickyColumns) === null || _c === void 0 ? void 0 : _c.first) || !!((_d = props.stickyColumns) === null || _d === void 0 ? void 0 : _d.last);
  const baseComponentProps = useBaseComponent("Table", {
    props: {
      contentDensity,
      resizableColumns: props.resizableColumns,
      selectionType: props.selectionType,
      stickyHeader: props.stickyHeader,
      stripedRows: props.stripedRows,
      variant,
      wrapLines: props.wrapLines,
      enableKeyboardNavigation: props.enableKeyboardNavigation,
      totalItemsCount: props.totalItemsCount,
      flowType: analyticsMetadata.flowType,
      cellVerticalAlign
    },
    metadata: {
      expandableRows: !!props.expandableRows,
      progressiveLoading: !!props.getLoadingStatus,
      inlineEdit: props.columnDefinitions.some((def) => !!def.editConfig),
      disabledInlineEdit: props.columnDefinitions.some((def) => {
        var _a2;
        return !!((_a2 = def.editConfig) === null || _a2 === void 0 ? void 0 : _a2.disabledReason);
      }),
      hasSortableColumns: props.columnDefinitions.some((def) => def.sortingField || def.sortingComparator),
      hasHiddenColumns,
      hasStickyColumns,
      hasFilterSlot: !!props.filter,
      hasPaginationSlot: !!props.pagination,
      itemsCount: items.length,
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier),
      hasResourceType: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType),
      usesVisibleColumns: !!props.visibleColumns,
      usesColumnDisplay: !!props.columnDisplay,
      usesColumnDefinitionsVerticalAlign: props.columnDefinitions.some((def) => def.verticalAlign !== cellVerticalAlign)
    }
  }, analyticsMetadata);
  const analyticsComponentMetadata = {
    name: "awsui.Table",
    label: { root: "self" },
    properties: {
      selectionType: props.selectionType || "none",
      itemsCount: `${items.length}`,
      selectedItemsCount: `${selectedItems.length}`,
      variant
    }
  };
  const sortingColumnId = getSortingColumnId(props.columnDefinitions, props.sortingColumn);
  if (sortingColumnId) {
    analyticsComponentMetadata.properties.sortingColumnId = sortingColumnId;
    analyticsComponentMetadata.properties.sortingDescending = `${props.sortingDescending || false}`;
  }
  const tableProps = Object.assign(Object.assign(Object.assign(Object.assign({
    items,
    selectedItems,
    variant,
    contentDensity,
    firstIndex,
    cellVerticalAlign
  }, props), baseComponentProps), { ref }), getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata }));
  const collectionPreferencesMetadata = {
    tableContentDensity: contentDensity,
    tableHasStripedRows: !!props.stripedRows,
    tableHasHiddenColumns: hasHiddenColumns,
    tableHasStickyColumns: hasStickyColumns
  };
  if (variant === "borderless" || variant === "embedded") {
    return import_react75.default.createElement(
      CollectionPreferencesMetadata.Provider,
      { value: collectionPreferencesMetadata },
      import_react75.default.createElement(internal_default7, Object.assign({}, tableProps))
    );
  }
  return import_react75.default.createElement(
    CollectionPreferencesMetadata.Provider,
    { value: collectionPreferencesMetadata },
    import_react75.default.createElement(
      AnalyticsFunnelSubStep,
      null,
      import_react75.default.createElement(InternalTableAsSubstep, Object.assign({}, tableProps))
    )
  );
});
applyDisplayName(Table, "Table");
var table_default = Table;

export {
  useLocale,
  useInternalI18n,
  internal_default2 as internal_default,
  styles_css_default5 as styles_css_default,
  arrow_default,
  TabTrap,
  isFocusable,
  getAllFocusables,
  getFirstFocusable,
  getLastFocusable,
  focus_lock_default,
  KeyCode,
  PopoverBody,
  PopoverContainer,
  Transition,
  Tooltip,
  ButtonContext,
  defaultValue2 as defaultValue,
  SingleTabStopNavigationContext,
  useSingleTabStopNavigation,
  SingleTabStopNavigationProvider,
  fireNonCancelableEvent,
  fireCancelableEvent,
  fireKeyboardEvent,
  hasModifierKeys,
  isPlainLeftClick,
  custom_css_properties_default,
  useForwardFocus,
  useHiddenDescription,
  useEffectOnUpdate,
  checkSafeUrl,
  internal_default as internal_default2,
  InternalSpinner,
  InternalButton,
  internal_default3,
  getVisualContextClassname,
  VisualContext,
  defaultValue as defaultValue2,
  LinkDefaultVariantContext,
  useContainerQuery,
  joinStrings,
  flattenChildren,
  internal_default5 as internal_default4,
  usePortalModeClasses,
  handleKey,
  browserScrollbarSize,
  ScreenreaderOnly,
  useIntersectionObserver,
  usePrevious,
  StatusIndicator,
  AsyncStore,
  useReaction,
  useSelector,
  useContainerBreakpoints,
  internal_default4 as internal_default5,
  FormFieldContext,
  useFormFieldContext,
  padLeftZeros,
  styles_css_default16 as styles_css_default2,
  FormFieldError,
  FormFieldWarning,
  ConstraintText,
  InternalFormField,
  checkbox_icon_default,
  useMouseDownTarget,
  AbstractSwitch,
  internal_default6,
  styles_css_default26 as styles_css_default3,
  radio_button_default,
  SelectionControl,
  getItemKey,
  focusMarkers,
  useSelectionFocusMove,
  useSelection,
  stickyScrolling,
  ToolsHeader,
  CollectionPreferencesMetadata,
  ExpandToggleButton,
  internal_default7,
  table_default
};
//# sourceMappingURL=chunk-UFSA6Z3R.js.map
